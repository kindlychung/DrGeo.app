!Array methodsFor: '*DrGeo-French-accessing' stamp: ''!a: unIndice		^self at: unIndice.! !!Array methodsFor: '*DrGeo-French-accessing' stamp: ''!a: unIndice mettre: unObjet		^self at: unIndice put: unObjet.! !!AthensCairoPatternSurfacePaint methodsFor: '*DrGeoII-Core-converting' stamp: ''!asForm	^ surface asForm! !!BaselineOfDrGeo methodsFor: 'baselines' stamp: ''!baseline: spec<baseline>	| repoPath |	repoPath := 'tonel://', SmalltalkImage current imageDirectory pathString, '/drgeo/src'.	spec for: #common do: [		spec blessing: #baseline;			repository: repoPath;			description: 'Dr. Geo, an interactive geometry application.';			author: 'HilaireFernandes'.					spec project: 'XML Parser' with: [			spec className: 'ConfigurationOfXMLSupport';			version: '1.0.1';			loads: #('default');			file: 'ConfigurationOfXMLSupport';			repository: repoPath].		spec package: 'Gettext' with: [ 			spec 				repository:'http://smalltalkhub.com/mc/PharoExtras/Gettext/main/';				file: 'Gettext-EstebanLorenzano.35'].				spec 			package: 'DrGeoII-System';			package: 'DrGeoII-Core' with: [spec requires: #('XML Parser' 'Gettext')];			package: 'DrGeoII-File';						package: 'DrGeoII-UI';			package: 'DrGeoII-User';			package: 'DrGeo-French';			package: 'DrGeoII-Installer';			package: 'DrGeoII-Test'.				spec group: 'release' with: #('DrGeoII-System' 'DrGeoII-Core' 'DrGeoII-File' 'DrGeo-French' 'DrGeoII-UI' 'DrGeoII-User' 'DrGeoII-Installer');			group: 'default' with: 'release';			group: 'development' with: #('release' 'DrGeoII-Test').			]! !!BaselineOfDrGeo methodsFor: 'accessing' stamp: ''!projectClass	^ MetacelloCypressBaselineProject ! !!BaselineOfDrGeo class methodsFor: 'dependencies' stamp: ''!drgeoRelease	^ '18.06a'! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!jusquaVrai: unBloc	^self whileFalse: unBloc.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!valeur: unArgument		^self value: unArgument.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!de: unArgument de: unAutre		^self value: unArgument value: unAutre.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!valeur		^self value.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!de: unArgument		^self value: unArgument.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!tantQueFaux: unBloc	^self whileFalse: unBloc.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!valeur: unArgument valeur: unAutre valeur: unTroisieme		^self value: unArgument value: unAutre value: unTroisieme.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!tempsPourFaire		^self timeToRun.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!valeur: unArgument valeur: unAutre		^self value: unArgument value: unAutre.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!de: unArgument de: unAutre de: unTroisieme	^self value: unArgument value: unAutre value: unTroisieme.! !!BlockClosure methodsFor: '*DrGeo-French' stamp: ''!tantQueVrai: unBloc	^self whileTrue: unBloc.! !!Boolean methodsFor: '*DrGeo-French' stamp: ''!siFaux: leBlocDuFaux siVrai: leBlocDuVrai	"test alternatif"	^self ifFalse: leBlocDuFaux ifTrue: leBlocDuVrai.! !!Boolean methodsFor: '*DrGeo-French' stamp: ''!siVrai: UnBloc	"test positif"	^self ifTrue: UnBloc.! !!Boolean methodsFor: '*DrGeo-French' stamp: ''!ou: UnBloc	"ou au lieu de or"	^self or: UnBloc.! !!Boolean methodsFor: '*DrGeo-French' stamp: ''!contraire	"négation booléenne"		^self not.! !!Boolean methodsFor: '*DrGeo-French' stamp: ''!siVrai: leBlocDuVrai siFaux: leBlocDuFaux	"test alternatif"	^self ifTrue: leBlocDuVrai ifFalse: leBlocDuFaux.! !!Boolean methodsFor: '*DrGeo-French' stamp: ''!et: UnBloc	"et au lieu de and"	^self and: UnBloc.! !!Boolean methodsFor: '*DrGeo-French' stamp: ''!siFaux: UnBloc	"test négatif"	^self ifFalse: UnBloc.! !!ByteString methodsFor: '*xml-parser' stamp: 'mir 7/14/2006 11:54'!applyLanguageInfomation: languageEnvironment! !!Carre methodsFor: 'initialize-release' stamp: ''!initialize	| p1 |	canvas := DrGeoCanvas new.	self		carre: (canvas				segment: (p1 := canvas point: -2 @ 2)				to: (canvas point: 2 @ 2))		and: (canvas				segment: (canvas point: 2 @ 2)				to: (canvas point: 2 @ -2))		and: (canvas				segment: (canvas point: 2 @ -2)				to: (canvas point: -2 @ -2))		and: (canvas				segment: (canvas point: -2 @ -2)				to: (canvas point: -2 @ 2))		n: 10.	"MessageTally		spyOn: [canvas domain moveEvent: p1 mathItem inDirection: 1 @ -1]"! !!Carre methodsFor: 'as yet unclassified' stamp: ''!carre: s1 and: s2 and: s3 and: s4 n: integer 	integer > 0		ifTrue: [self				carre: (self segment: s1 and: s2)				and: (self segment: s2 and: s3)				and: (self segment: s3 and: s4)				and: (self segment: s4 and: s1)				n: integer - 1]! !!Carre methodsFor: 'as yet unclassified' stamp: ''!segment: s1 and: s2 	| p1 p2 |	p1 := canvas pointOnCurve: s1 at: 1 / 8.	p2 := canvas pointOnCurve: s2 at: 1 / 8.	^ canvas segment: p1 hide to: p2 hide! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!arrondir	^self rounded.! !!Collection methodsFor: '*DrGeo-French-conversion' stamp: ''!commeEnsemble	^self asSet.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!inter: uneCollection		^self intersection: uneCollection.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!racines	^self sqrt.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!collecter: unBloc dans: uneCollection		^self collect: unBloc into: uneCollection.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!effectifsEnClasses: unEntier	"construit une table pour histogramme"	| table clés h |	h := self etendue / unEntier.	table := Dictionary new.	clés := self min to: (self max - 1.0e-6) by: h.	clés do: [ :n | table at: n put: (self count: [ :t | (t>=n) and: [t<(n+h)]])].	^table.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!choisir: unBloc		^self select: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!effectifs	"construit une table d'effectifs"	| table clés |	table := Dictionary new.	clés := self asSet.	clés do: [ :n | table at: n put: (self count: [ :t | t=n])].	^table.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!unVerifie: unBloc	^self anySatisfy: unBloc.! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!ajouter: unObjet	^self add: unObjet.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!trierSelon: unBloc		^self sorted: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!inverses	^self reciprocal.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!total	^self sum.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!auHasard	^self atRandom.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!injecter: valeur dans: unBloc	^self inject: valeur into: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!premierQuartile	^(self commeCollectionTriee Q1).! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!ecartType	^self stdev.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!frequences	"construit une table de fréquences"	| table clés total |	total := self size.	table := Dictionary new.	clés := self asSet.	clés do: [ :n | table at: n put: ((self count: [ :t | t=n])/total)].	^table.! !!Collection methodsFor: '*DrGeo-French-conversion' stamp: ''!commeDictionnaire	^self asDictionary.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!choisir: bloc puisFaire: unBloc		^self select: bloc thenDo: unBloc.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!regrouper: unBloc		^self gather: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!sinus		^self degreeSin.! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!retirer: unBloc	^self remove: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!etendue	^self range.! !!Collection methodsFor: '*DrGeo-French-testing' stamp: ''!estVide	^self isEmpty.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!aucunNeVerifie: unBloc	^self noneSatisfy: unBloc.! !!Collection methodsFor: '*DrGeo-French-conversion' stamp: ''!commeTableau	^self asArray.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!puissances: unExposant	^self raisedTo: unExposant.! !!Collection methodsFor: '*DrGeo-French-conversion' stamp: ''!commeSac	^self asBag.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!cosinus		^self degreeCos.! !!Collection methodsFor: '*DrGeo-French-conversion' stamp: ''!commeCollectionOrdonnee	^self asOrderedCollection.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!tousVerifient: unBloc	^self allSatisfy: unBloc.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!faire: unBloc		^self do: unBloc.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!compter: unBloc		^self count: unBloc.! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!trier		^self sorted.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!frequencesEnClasses: unEntier	"construit une table pour histogramme"	| table clés h total |	total := self size.	h := self etendue / unEntier.	table := Dictionary new.	clés := self min to: (self max - 0.000001) by: h.	clés do: [ :n | table at: n put: ((self count: [ :t | (t>=n) and: [t<(n+h)]])/total)].	^table.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!collecter: unBloc puisChoisir: critere	^self collect: unBloc thenSelect: critere.! !!Collection methodsFor: '*DrGeo-French-testing' stamp: ''!contient: unObjet		^(self includes: unObjet).! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!ajouterTout: uneCollection	^self addAll: uneCollection.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!collecter: unBloc puisFaire: autreBloc		^self collect: unBloc thenDo: autreBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!mediane	^self median.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!moyenne	^self average.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!troisiemeQuartile	^self commeCollectionTriee Q3.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!grouperPar: unBloc lorsque: condition	^self groupedBy: unBloc having: condition.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!rejeter: bloc puisFaire: unBloc		^self reject: bloc thenDo: unBloc.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!reduire: unBloc	^self reduce: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!opposes	^self negated.! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!retirerToutDans: uneCollection	^self removeAll: uneCollection.! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!retirerTousLorsque: unBloc	^self removeAllSuchThat: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!auCarre	^self squared.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!echantillonDeTaille: unEntier 	"tirage au hasard sans remise"	| copie ech t n |	n := unEntier min: (self taille).	n := n max: 0.	copie := self collecter: [ :x | x ].	ech := #() commeSac.	n foisRepete: [ 		t := copie auHasard.		ech ajouter: t.		copie retirer: t.		 ].	^ech.! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!ajouter: unObjet fois: unEntier	unEntier foisRepete: [self ajouter: unObjet].! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!retirerTout	^self removeAll.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!taille	^self size.! !!Collection methodsFor: '*DrGeo-French-conversion' stamp: ''!commeCollectionTriee	^self asSortedCollection.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!grouperPar: unBloc	^self groupedBy: unBloc.! !!Collection methodsFor: '*DrGeo-French-statistics' stamp: ''!somme	^self sum.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!collecter: unBloc		^self collect: unBloc.! !!Collection methodsFor: '*DrGeo-French-enumerating' stamp: ''!rejeter: unBloc		^self reject: unBloc.! !!Collection methodsFor: '*DrGeo-French-accessing' stamp: ''!ajouterSiAbsent: unObjet	^self addIfNotPresent: unObjet.! !!ComposableMorph methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a toolbar drop list for the given model."	^self theme		newToolbarDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!ComposableMorph methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!ComposableMorph methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!CoordinatesEditorDialog commentStamp: ''!A dialog to edit the coordinates of a point.!!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!yTextEditorMorph	^ yTextEditorMorph! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!xEntryText: anObject	"Set the value of xEntryText"	xEntryText := anObject.	self changed: #xEntryText.	self xTextEditorMorph selectAll! !!CoordinatesEditorDialog methodsFor: 'initialization' stamp: ''!newYTextEditorMorph	"Answer a new text entry morph."	^(self		newTextEntryFor: self		getText: #yEntryText		setText: #yEntryText:		getEnabled: nil		help: nil)		acceptOnCR: false;		selectAll! !!CoordinatesEditorDialog methodsFor: 'visual properties' stamp: ''!entryHeight: aNumber	"Set the height of the text editor morph.	Set the width to be 2 times this also."	self xTextEditorMorph		vResizing: #rigid;		height: aNumber;		hResizing: #rigid;		width: aNumber * 2.	self yTextEditorMorph		vResizing: #rigid;		height: aNumber;		hResizing: #rigid;		width: aNumber * 2! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!xEntryText	^ xEntryText ! !!CoordinatesEditorDialog methodsFor: 'visual properties' stamp: ''!icon	"Answer an icon for the receiver."	^ self iconNamed: #questionIcon! !!CoordinatesEditorDialog methodsFor: 'initialization' stamp: ''!initialize	"Initialize the receiver."	super initialize.	self xEntryText: ''.	self yEntryText: ''! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!yEntryText: anObject	"Set the value of yEntryText"	yEntryText := anObject.	self changed: #yEntryText.	self yTextEditorMorph selectAll! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!minimumWidth	^ (super minimumWidth max: self class minimumWidth) min: (Display width)! !!CoordinatesEditorDialog methodsFor: 'actions' stamp: ''!cancel	"Cancel and close."	self xEntryText: nil.	self yEntryText: nil.	^super cancel! !!CoordinatesEditorDialog methodsFor: 'actions' stamp: ''!newButtons	"Answer new buttons as appropriate."	^{self newOKButton isDefault: true. self newCancelButton}! !!CoordinatesEditorDialog methodsFor: 'actions' stamp: ''!newContentMorph	"Answer a new content morph."	self iconMorph: self newIconMorph.	self textMorph: self newTextMorph.	self textMorph wrapFlag: false.	self xTextEditorMorph: self newXTextEditorMorph.	self yTextEditorMorph: self newYTextEditorMorph.	^self newGroupboxForAll: {		self newRow: {self iconMorph. self textMorph}.		self newRow: {self newText: 'X =' . self xTextEditorMorph}.		self newRow: {self newText: 'Y ='. self yTextEditorMorph}}! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!yTextEditorMorph: anObject	yTextEditorMorph := anObject! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!xTextEditorMorph: anObject	xTextEditorMorph := anObject! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!yEntryText	^ yEntryText ! !!CoordinatesEditorDialog methodsFor: 'initialization' stamp: ''!newXTextEditorMorph	"Answer a new text entry morph."	^(self		newTextEntryFor: self		getText: #xEntryText		setText: #xEntryText:		getEnabled: nil		help: nil)		acceptOnCR: false;		selectAll! !!CoordinatesEditorDialog methodsFor: 'accessing' stamp: ''!xTextEditorMorph	^ xTextEditorMorph! !!CoordinatesEditorDialog methodsFor: 'focus handling' stamp: ''!defaultFocusMorph	"Answer the morph that should have the keyboard	focus by default when the dialog is opened."		^self xTextEditorMorph textMorph! !!CoordinatesEditorDialog methodsFor: 'open/close' stamp: ''!initialExtent	^ self minimumWidth @ (super initialExtent y)! !!CoordinatesEditorDialog class methodsFor: 'accessing' stamp: ''!taskbarIcon	"Answer the icon for the receiver in a task bar."	^ self iconNamed: #smallQuestionIcon! !!CoordinatesEditorDialog class methodsFor: 'settings' stamp: ''!minimumWidth	^ MinimumWidth ifNil: [MinimumWidth := 450]! !!CoordinatesEditorDialog class methodsFor: 'settings' stamp: ''!minimumWidth: anInteger	MinimumWidth := anInteger! !!DTDEntityDeclaration methodsFor: 'accessing' stamp: 'mir 1/4/2002 19:40'!name	^name! !!DTDEntityDeclaration methodsFor: 'accessing' stamp: 'mir 12/8/2000 17:22'!ndata: aString	ndata := aString! !!DTDEntityDeclaration methodsFor: 'behaviors' stamp: 'mir 1/15/2002 11:29'!bypass	"Return my reference as is."	^self reference! !!DTDEntityDeclaration methodsFor: 'behaviors' stamp: 'mir 1/15/2002 11:29'!forbidden	self error: 'Forbidden reference usage'! !!DTDEntityDeclaration methodsFor: 'accessing' stamp: 'mir 1/17/2002 15:25'!name: aString	name := aString asSymbol! !!DTDEntityDeclaration methodsFor: 'accessing' stamp: 'mir 12/8/2000 17:22'!ndata	^ndata! !!DTDEntityDeclaration methodsFor: 'behaviors' stamp: 'mir 1/15/2002 11:30'!reference	"Return my reference as is."	^self class leadIn , self name , ';'! !!DTDEntityDeclaration methodsFor: 'accessing' stamp: 'mir 11/16/2000 10:55'!value: aString	value := aString! !!DTDEntityDeclaration methodsFor: 'accessing' stamp: 'mir 11/16/2000 10:54'!value	^value! !!DTDEntityDeclaration methodsFor: 'behaviors' stamp: 'mir 1/15/2002 18:01'!include	"Return my expanded value."	^value ifNil: [SAXWarning signal: 'XML undefined entity ' , name printString]! !!DTDEntityDeclaration methodsFor: 'invocation' stamp: 'mir 1/15/2002 15:08'!valueForContext: aContext	^self perform: (self class behaviorForContext: aContext)! !!DTDEntityDeclaration methodsFor: 'behaviors' stamp: 'mir 1/15/2002 18:06'!includedInLiteral	"Return my expanded value."	^self include! !!DTDEntityDeclaration methodsFor: 'invocation' stamp: 'mir 11/16/2000 21:23'!registerIn: aParser	aParser entity: self name put: self! !!DTDEntityDeclaration class methodsFor: 'accessing' stamp: 'mir 11/16/2000 20:15'!contextBehavior	^contextBehavior! !!DTDEntityDeclaration class methodsFor: 'accessing' stamp: 'mir 11/16/2000 20:27'!leadIn	^'&'! !!DTDEntityDeclaration class methodsFor: 'instance creation' stamp: 'mir 11/16/2000 20:13'!name: aString value: aValueString	^self new		name: aString;		value: aValueString! !!DTDEntityDeclaration class methodsFor: 'class initialization' stamp: 'mir 1/15/2002 18:02'!initialize	"DTDEntityDeclaration initialize"	contextBehavior := Dictionary new.	contextBehavior		at: #content put: #include ;		at: #attributeValueContent put: #includedInLiteral ;		at: #attributeValue put: #forbidden ;		at: #entityValue put: #bypass ;		at: #dtd put: #forbidden ! !!DTDEntityDeclaration class methodsFor: 'accessing' stamp: 'mir 11/16/2000 20:14'!behaviorForContext: aContext	^self contextBehavior at: aContext! !!DTDExternalEntityDeclaration class methodsFor: 'class initialization' stamp: 'mir 1/14/2002 18:15'!initialize	"DTDExternalEntityDeclaration initialize"	contextBehavior := Dictionary new.	contextBehavior		at: #content put: #include ;		at: #attributeValueContent put: #includedInLiteral ;		at: #attributeValue put: #forbidden ;		at: #entityValue put: #bypass ;		at: #dtd put: #forbidden ! !!DTDParameterEntityDeclaration methodsFor: 'behaviors' stamp: 'mir 1/15/2002 11:30'!includePE	"Return my expanded value."	^self include! !!DTDParameterEntityDeclaration methodsFor: 'behaviors' stamp: 'mir 1/15/2002 23:21'!notRecognized	SAXMalformedException signal: 'Malformed entity.'! !!DTDParameterEntityDeclaration methodsFor: 'invocation' stamp: 'mir 11/28/2000 17:26'!registerIn: aParser	aParser parameterEntity: self name put: self! !!DTDParameterEntityDeclaration class methodsFor: 'accessing' stamp: 'mir 11/16/2000 20:27'!leadIn	^'%'! !!DTDParameterEntityDeclaration class methodsFor: 'class initialization' stamp: 'mir 1/14/2002 18:15'!initialize	"DTDParameterEntityDeclaration initialize"	contextBehavior := Dictionary new.	contextBehavior		at: #content put: #notRecognized: ;		at: #attributeValueContent put: #notRecognized: ;		at: #attributeValue put: #notRecognized: ;		at: #entityValue put: #include: ;		at: #dtd put: #includePE:! !!DrGAndroid commentStamp: ''!Preferences for Android tablet!!DrGAndroid methodsFor: 'user interface' stamp: ''!showVirtualKeyboard: boolean	(Smalltalk at: #Android) onScreenKbd: (boolean ifTrue: [1] ifFalse: [0])! !!DrGAndroid methodsFor: 'testing' stamp: ''!isAndroid	^ true! !!DrGAndroid methodsFor: 'initialize-release' stamp: ''!startUp 	super startUp.	(Smalltalk at: #Android) setVMTimerInterval: 100! !!DrGAndroid methodsFor: 'path' stamp: ''!mySketchesPath	^ ((Smalltalk at: #Android) getSDCardRoot), '/MySketches'.! !!DrGAndroid methodsFor: 'initialize-release' stamp: ''!initialize	canWeDisplayLoader := true.	WorldState desktopMenuTitle: 'Dr. Geo'.	WorldState desktopMenuPragmaKeyword:  'drgeoMenu'.	PolymorphSystemSettings uiThemeClass:  DrGeoTheme.	UITheme currentSettings fastDragging: true.	UITheme currentSettings fadedBackgroundWindows: false.	SystemWindow fullscreenMargin: 0.	UITheme currentSettings preferRoundCorner: false.	TaskbarMorph showTaskbar: false.	World color: Color white.! !!DrGAndroid methodsFor: 'path' stamp: ''!rootPath	^  FileLocator imageDirectory asFileReference ! !!DrGAndroid methodsFor: 'as yet unclassified' stamp: ''!openURI: string	(Smalltalk at: #Android) openURI: string! !!DrGAndroid methodsFor: 'user interface' stamp: ''!toolbarIconSize	toolbarIconSize		ifNil: [ toolbarIconSize := (Display height - 110) / 12 truncateTo: 4.			toolbarIconSize := toolbarIconSize min: 48 max: 12].	^ toolbarIconSize! !!DrGAngle3PointsCostume commentStamp: ''!origin, length, center, vector1 and vector are data to drwa the arc or square for the geometric angle!!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!redrawShape	self updateArcData.	(mathItem radianAngle closeTo: Float halfPi)		ifTrue:			[self updateRecData.			self redrawRec]		ifFalse:			[self redrawArc].! !!DrGAngle3PointsCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	super instantiateMorph.	morph font: DrGeoSystem canvasFont.	shapeMorph := DrGArcMorph new		borderColor: Color black; 		borderWidth: 1.	shapeMorph costume: self.! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!redraw	exist  		ifFalse: [^ self].	self redrawShape.	"do it last cause we have some needed computation in redrawShape"	super redraw.	morph center: self textPosition.! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!redrawRec	| vertices sum |	shapeMorph class = DrGPolylineMorph 		ifFalse: 			[drawable removeMorph: shapeMorph.			shapeMorph := (DrGPolylineMorph new)						borderColor:  Color black;						borderWidth: 1.			drawable addMorph: shapeMorph].	vertices := OrderedCollection new.	vector1 := vector1 + screenCenter.	sum := vector1 + vector2.	vector2 := vector2 + screenCenter.	vertices		add: vector1;		add: sum;		add: vector2.	shapeMorph setVertices: vertices! !!DrGAngle3PointsCostume methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	drawable addMorphBack: shapeMorph! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!redrawValue	morph center: self textPosition.! !!DrGAngle3PointsCostume methodsFor: 'initialize-release' stamp: ''!release	drawable removeMorph: shapeMorph.	super release.! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!redrawArc	shapeMorph class ~= DrGArcMorph		ifTrue:			[drawable removeMorph: shapeMorph.			shapeMorph := DrGArcMorph new borderColor: Color black; 				borderWidth: 1. 			drawable addMorph: shapeMorph].	shapeMorph 			center: (drawable worldToMorph: center)			radius: 15			origin: origin negated			length: length negated! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!updateRecData|size|	(vector1 = (0@0) or: [vector2 = (0@0)]) 		ifTrue: [^self].	size := drawable pixelToWorld: 10.	vector1 := drawable vectorToMorph: (size * vector1 / vector1 r).	vector2 := drawable vectorToMorph: (size * vector2 / vector2 r).	screenCenter := drawable worldToMorph: center.! !!DrGAngle3PointsCostume methodsFor: 'initialize-release' stamp: ''!reInitialize	super reInitialize.	drawable addMorphBack: shapeMorph! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!updateToInvisible	super updateToInvisible.	drawable removeMorph: shapeMorph.! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!textPosition|angle|	angle := length negated / 2 + origin negated.	^ (drawable worldToMorph: center) 		+ ((30 * (angle cos)) @ (30 * (angle sin)))! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!forceVisible: aBoolean	(super forceVisible: aBoolean) ifFalse: [^false].	aBoolean 		ifTrue: 			[drawable addMorph: shapeMorph]		ifFalse: 			[drawable removeMorph: shapeMorph].	^true! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!updateArcData|end parents |	parents := mathItem parents.	center := parents second point.	vector1 := parents first point - center.	vector2 := parents third point - center.	(vector1 = (0@0) or: [vector2 = (0@0)]) 		ifTrue: [^self].	origin := vector1 y asFloat arcTan2: vector1 x.	end := vector2 y asFloat arcTan2: vector2 x.	origin < 0 ifTrue: [origin := origin + DrGDirectionItem twoPi].	end < 0 ifTrue: [end := end + DrGDirectionItem twoPi].	length := (end - origin) cos arcCos.	(end - origin > Float pi 		or: [end - origin < 0 and: [end - origin > Float pi negated]])				ifTrue: [length := length negated].! !!DrGAngle3PointsCostume methodsFor: 'updating' stamp: ''!updateToVisible	super updateToVisible.	style isNotHidden		ifTrue: [drawable addMorph: shapeMorph]! !!DrGAngle3ptsItem commentStamp: ''!Define a geometric angle in the range  [0 ; 180] given three points!!DrGAngle3ptsItem methodsFor: 'as yet unclassified' stamp: ''!position 	^ self summit point! !!DrGAngle3ptsItem methodsFor: 'testing' stamp: ''!isLockable 	^ false! !!DrGAngle3ptsItem methodsFor: 'accessing' stamp: ''!side1	^ parents first! !!DrGAngle3ptsItem methodsFor: 'updating' stamp: ''!move: aPoint"Don't move when user drag around"! !!DrGAngle3ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'3pts'! !!DrGAngle3ptsItem methodsFor: 'accessing' stamp: ''!costumeClass	^ DrGAngle3PointsCostume ! !!DrGAngle3ptsItem methodsFor: 'accessing' stamp: ''!summit	^ parents second! !!DrGAngle3ptsItem methodsFor: 'updating' stamp: ''!update|u v center|	self doParentsExist ifTrue:		[center := parents second point.		u := parents first point - center.		v := parents third point - center.		(u = (0@0) or: [v = (0@0)]) 			ifTrue: [exist := false]			ifFalse:				[radianValue := value := ((u crossProduct: v) asFloat arcTan2: (u dotProduct: v)) abs.				degreeValue := radianValue radiansToDegrees]].! !!DrGAngle3ptsItem methodsFor: 'accessing' stamp: ''!side2	^ parents third! !!DrGAngle3ptsItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This geometric angle %1' translated! !!DrGAngleBisector3ptsItem commentStamp: ''!Angle bisector given three points!!DrGAngleBisector3ptsItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem 	^ self parents = aMathItem parents		or: [self parents reverse = aMathItem parents]! !!DrGAngleBisector3ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'angleBisector3pts'! !!DrGAngleBisector3ptsItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [		| v1 v2 |		self origin: parents second point.		((parents first point = origin) or: [parents third point = origin]) ifTrue: [^ exist := false].		[ v1 := (parents first point - origin) normalized ] on: ZeroDivide do: [ v1 := 0 @ 0 ].		[ v2 := (parents third point - origin) normalized ] on: ZeroDivide do: [ v2 := 0 @ 0 ].		self direction:  v1 + v2.		self direction = (0@0) ifTrue: [exist := false]]! !!DrGAngleBisector3ptsItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This angle bisector %1' translated! !!DrGAngleBisectorBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeArguments 	^ {pointA. pointB. movingPoint}.! !!DrGAngleBisectorBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointC := angle := nil	! !!DrGAngleBisectorBuilder methodsFor: 'accessing' stamp: ''!arguments	^ angle 		ifNotNil: [{angle}] 		ifNil: [{pointA . pointB . pointC}]! !!DrGAngleBisectorBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	| item |	point := aPoint.	(item := aMathItemCollection first) isAngleItem ifTrue: [^ angle ifNil: [angle := item]].	pointA 		ifNil: [pointA := item] 		ifNotNil: [pointB 			ifNil: [pointB := item.				self addToFlyingItem: pointB] 			ifNotNil: [pointC := item]]! !!DrGAngleBisectorBuilder methodsFor: 'testing' stamp: ''!readyToBuild 	^ angle notNil or:		[pointA notNil and: [pointB notNil and: [pointC notNil]]]! !!DrGAngleBisectorBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	| item |	^ aMathItemCollection notEmpty 		and: [((item := aMathItemCollection first) isPointItem 				and: [item ~= pointA 				and: [item  ~= pointB]])			or:	[item isAngleItem and: [pointA isNil and: [item nodeType = #'3pts']]]]	! !!DrGAngleBisectorBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	^ angle 		ifNotNil: [DrGLineAngleBisectorItem] 		ifNil: [DrGAngleBisector3ptsItem]! !!DrGAngleBisectorBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Angle bisector defined by three points or an angle defined by three points.' translated! !!DrGAngleBisectorBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Angle bisector' translated! !!DrGAngleBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointA := pointB := pointC := vectorA := vectorB := nil! !!DrGAngleBuilder methodsFor: 'accessing' stamp: ''!arguments	^pointA 		ifNotNil: [{pointA . pointB . pointC. point}]		ifNil: [{vectorA . vectorB. point}]! !!DrGAngleBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	aMathItemCollection first isPointItem		ifTrue:			[pointA ifNil: 				[pointA := aMathItemCollection first.				^self].			pointB ifNil:				[pointB := aMathItemCollection first.				^self].			pointC := aMathItemCollection first]		ifFalse:			[vectorA ifNil:				[vectorA := aMathItemCollection first.				^self].			vectorB := aMathItemCollection first]! !!DrGAngleBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ (pointA notNil and: [pointB notNil and: [pointC notNil]])		or: [vectorA notNil and: [vectorB notNil]]			! !!DrGAngleBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^aMathItemCollection notEmpty		and: [(aMathItemCollection first isPointItem				and: [aMathItemCollection first ~= pointA				and: [aMathItemCollection first ~= pointB]]	)			or: 	[aMathItemCollection first isVectorItem 				and: [aMathItemCollection first ~= vectorA]]]! !!DrGAngleBuilder methodsFor: 'xml' stamp: ''!postProcess: item from: node	super postProcess: item from: node.	(node attributeAt: #type) asSymbol == #vectors ifTrue: [		self parseValuePosition: node of: item]! !!DrGAngleBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^pointA 		ifNotNil: [DrGAngle3ptsItem]		ifNil: [DrGAngleVectorsItem]! !!DrGAngleBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Angle defined by three points or two vectors.' translated! !!DrGAngleBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Angle' translated! !!DrGAngleCostume commentStamp: ''!A Costume for angle!!DrGAngleCostume methodsFor: 'as yet unclassified' stamp: ''!roundedValueString	^ mathItem degreeAngle rounded asString, '°'.! !!DrGAngleCostume methodsFor: 'testing' stamp: ''!basicType	^#angle! !!DrGAngleCostume methodsFor: 'as yet unclassified' stamp: ''!textMorph: string	"we don't have label"	mathItem name: string! !!DrGAngleItem methodsFor: 'as yet unclassified' stamp: ''!printOn: aStream	self printType: DrGAngleBuilder title on: aStream.	aStream nextPut: Character space.	self printInteger: self degreeAngle on: aStream.	aStream nextPutAll: '°'.! !!DrGAngleItem methodsFor: 'accessing' stamp: ''!basicType	^#angle! !!DrGAngleItem methodsFor: 'accessing' stamp: ''!radianAngle"return the angle in radian"	^radianValue ! !!DrGAngleItem methodsFor: 'accessing' stamp: ''!costumeClass 	^ DrGAngleCostume! !!DrGAngleItem methodsFor: 'accessing' stamp: ''!degreeAngle"return the angle in degree"	^degreeValue ! !!DrGAngleItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isAngleItem	^true! !!DrGAngleVectorsItem commentStamp: ''!Define an oriented angle, in the range ]-180 ; 180]!!DrGAngleVectorsItem methodsFor: 'xml writing' stamp: ''!writeAsXmlPositionTo: aNode 	"return the newly created element"	aNode		addElement: ((XMLElement named: #x)				addContent: (XMLStringNode string: position x asString));		addElement: ((XMLElement named: #y)				addContent: (XMLStringNode string: position y asString)).	^ aNode! !!DrGAngleVectorsItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode 	"return the newly created element"	| node |	node := super writeAsXmlTo: aNode.	^ self writeAsXmlPositionTo: node.! !!DrGAngleVectorsItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #vectors! !!DrGAngleVectorsItem methodsFor: 'updating' stamp: ''!update|u v|	self doParentsExist ifTrue:		[u := parents first direction.		v := parents second direction.		(u = (0@0) or: [v = (0@0)]) 			ifTrue: [exist := false]			ifFalse:				[radianValue := value := ((u crossProduct: v) asFloat arcTan2: (u dotProduct: v)).				degreeValue := radianValue radiansToDegrees]].	! !!DrGAngleVectorsItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This oriented angle %1' translated! !!DrGAnimateTool commentStamp: ''!A tool to animate a free point on a curve.- animateSpeed: millisecond betwen to animation step!!DrGAnimateTool methodsFor: 'accessing' stamp: ''!animateStep: aFloat	animateStep := aFloat ! !!DrGAnimateTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint	^ (self pointCostumesAt: aPoint) select: [:aCostume | aCostume mathItem isPointItemOnCurve]! !!DrGAnimateTool methodsFor: 'initialize-release' stamp: ''!reset	state ifNotNil: [state stopAnimating].	super reset.	self switchState: DrGAnimateToolState.! !!DrGAnimateTool methodsFor: 'accessing' stamp: ''!isAnimating	^ self state isAnimating ! !!DrGAnimateTool methodsFor: 'as yet unclassified' stamp: ''!animate	state animate! !!DrGAnimateTool methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self reset! !!DrGAnimateTool methodsFor: 'accessing' stamp: ''!animateStep	^ animateStep! !!DrGAnimateTool methodsFor: 'accessing' stamp: ''!description 	^ self class description! !!DrGAnimateTool class methodsFor: 'as yet unclassified' stamp: ''!description	^'Select a free point on a curve to animate it.' translated! !!DrGAnimateTool class methodsFor: 'as yet unclassified' stamp: ''!title	^ 'Animate' translated! !!DrGAnimateToolState commentStamp: ''!The neutral state for animate tool: when no free point on curve is selected yet.!!DrGAnimateToolState methodsFor: 'testing' stamp: ''!isAnimating	^ false! !!DrGAnimateToolState methodsFor: 'animate' stamp: ''!animate	self shouldNotImplement! !!DrGAnimateToolState methodsFor: 'animate' stamp: ''!stopAnimating	"we are not animating in this state, do nothing"! !!DrGAnimateToolState methodsFor: 'accessing' stamp: ''!mathItem	^ self context mathItem ! !!DrGAnimateToolState methodsFor: 'accessing' stamp: ''!animateStep 	^ self context animateStep  ! !!DrGAnimateToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	aCostumeCollection 		ifNotEmpty: [			self stopAnimating.			self context costume: aCostumeCollection first.			self switchState: DrGAnimateToolStateSelected.			self context state startAnimating.			^ true]		ifEmpty: [			self context reset.			^ false]! !!DrGAnimateToolStateSelected commentStamp: ''!The selected state for animate tool: when a free point on curve is selected and it is animated. - abscissa: the curvilinear abscissa of the selected point!!DrGAnimateToolStateSelected methodsFor: 'accessing' stamp: ''!context: aContext	super context: aContext.	self area arrangeToStartStepping.! !!DrGAnimateToolStateSelected methodsFor: 'testing' stamp: ''!isAnimating	^ true! !!DrGAnimateToolStateSelected methodsFor: 'animate' stamp: ''!animate	| a | 	a := self mathItem abscissa + self animateStep.	a > 1.0 ifTrue: [a := 0].	self mathItem abscissa: a.	self context domain updateAllMathItems ! !!DrGAnimateToolStateSelected methodsFor: 'animate' stamp: ''!stopAnimating	self area stopStepping.	self mathItem abscissa: abscissa.	self context domain updateAllMathItems! !!DrGAnimateToolStateSelected methodsFor: 'animate' stamp: ''!startAnimating	abscissa := self mathItem abscissa.	self area arrangeToStartStepping.! !!DrGArc3ptsItem methodsFor: 'updating' stamp: ''!updateAsSegmentOrRay"the three point are aligned, the arc is a segment"	exist := false.! !!DrGArc3ptsItem methodsFor: 'as yet unclassified' stamp: ''!rehash ^ hash := ((self parents hash bitXor: self parents reverse hash) bitXor: self nodeType hash) bitXor: self basicType hash! !!DrGArc3ptsItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem 	^ self parents = aMathItem parents		or: [self parents reverse = aMathItem parents]! !!DrGArc3ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'3pts'! !!DrGArc3ptsItem methodsFor: 'updating' stamp: ''!update	| direction1 direction2 a b c ab |	self doParentsExist ifTrue: 		[a := parents first point.		b := parents second point.		c := parents third point.		(a = b or: [c = b]) ifTrue: [^exist := false].		direction1 := (DrGDirectionItem new)					origin: (a + b) / 2;					direction: (a - b) normal.		direction2 := (DrGDirectionItem new)					origin: (b + c) / 2;					direction: (b - c) normal.		center := direction1 intersectionWithDirection: direction2.		center ifNil: [^self updateAsSegmentOrRay].		a := a - center.		b := b - center.		c := c - center.		radius := a r.		origin := a y asFloat arcTan2: a x.		ab := (b y asFloat arcTan2: b x) - origin.		length := (c y asFloat arcTan2: c x) - origin.		length = 0 ifTrue: [^exist := false].		(length < 0 and: [ab < length or: [ab > 0]])  ifTrue: 			[^length := length + DrGDirectionItem twoPi].		(length > 0 and: [ab > length or: [ab < 0]]) 	ifTrue: 			[length := length - DrGDirectionItem twoPi]].! !!DrGArcBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeArguments	^{pointA. pointB. movingPoint}.! !!DrGArcBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointA := pointB := pointC := nil! !!DrGArcBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	^ DrGArcCostume ! !!DrGArcBuilder methodsFor: 'accessing' stamp: ''!arguments	^{pointA . pointB . pointC}! !!DrGArcBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection  at: aPoint.	pointA ifNil: [^ pointA := aMathItemCollection first].	pointB ifNil: 		[pointB := aMathItemCollection first.		^ self addToFlyingItem: pointB].	pointC ifNil: [pointC := aMathItemCollection first].	! !!DrGArcBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^pointA notNil and: [pointB notNil and: [pointC notNil]]! !!DrGArcBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^aMathItemCollection notEmpty		and: [aMathItemCollection first isPointItem 		and: [aMathItemCollection first ~= pointA 		and: [aMathItemCollection first ~= pointB]]]! !!DrGArcBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGArc3ptsItem! !!DrGArcBuilder class methodsFor: 'documentation' stamp: ''!description 	^  'Arc defined by three points.' translated! !!DrGArcBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Arc' translated! !!DrGArcCenterAngleItem commentStamp: ''!A DrGArcCenterAngleItem is defined by its center, startingPoint and endingPoint.endingPoint is not necessary on the arc but it provides the arc angle!!DrGArcCenterAngleItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #centerAngle! !!DrGArcCenterAngleItem methodsFor: 'updating' stamp: ''!update| a |	self doParentsExist ifTrue: 		[center := self parents first point.		a := self parents second point - center.		radius := a   r.		origin := a y asFloat arcTan2: a x.		a := parents third point - center.		length := (a y asFloat arcTan2: a x) - origin.		length < Float pi negated			ifTrue: [length := length + Float twoPi]			ifFalse: [				length > Float pi ifTrue: [length := length - Float twoPi]]]! !!DrGArcCenterBuilder commentStamp: ''!A builder for arc defined by its center and origin, then an angle or an extremity- angle is a float- other items are point!!DrGArcCenterBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeArguments	^{center. origin. movingPoint}.! !!DrGArcCenterBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	origin := center := extremity := nil! !!DrGArcCenterBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass 	^ DrGArcCostume! !!DrGArcCenterBuilder methodsFor: 'testing' stamp: ''!arguments	^ {center. origin. extremity}! !!DrGArcCenterBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	center ifNil: [^ center := aMathItemCollection first].	origin ifNil: [		origin := aMathItemCollection first.		^ self addToFlyingItem: origin].	extremity ifNil: [extremity := aMathItemCollection first]! !!DrGArcCenterBuilder methodsFor: 'testing' stamp: ''!readyToBuild 	^ origin notNil and: [center notNil and: [extremity notNil]]! !!DrGArcCenterBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection | item |	^ aMathItemCollection notEmpty 		and: [(item := aMathItemCollection first) isPointItem 		and: [item ~= center 		and: [item ~= origin]]]! !!DrGArcCenterBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	^ DrGArcCenterAngleItem ! !!DrGArcCenterBuilder class methodsFor: 'documentation' stamp: ''!description 	^  'Arc defined by its center and two points.' translated! !!DrGArcCenterBuilder class methodsFor: 'documentation' stamp: ''!title	^'Arc (center)' translated! !!DrGArcCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGArcMorph new! !!DrGArcCostume methodsFor: 'updating' stamp: ''!redraw	super redraw ifFalse: [^ self].	mathItem center		ifNil: [morph class = DrGSegmentMorph				ifTrue: [self redrawAsSegmentOrRay]			"mutate the morph to DrGSegment and draw it"]		ifNotNil: [morph class = DrGArcMorph				ifTrue: [self redrawAsArc]			"mutate the morph to an DrGArcMorph and draw it"]! !!DrGArcCostume methodsFor: 'testing' stamp: ''!basicType	^#arc! !!DrGArcCostume methodsFor: 'style' stamp: ''!styleClass	^DrGArcCostumeStyle! !!DrGArcCostume methodsFor: 'updating' stamp: ''!redrawAsArc	morph 		center: (drawable worldToMorph: mathItem center)		radius: (drawable worldToPixel: mathItem radius)		origin: mathItem origin negated		length: mathItem length negated! !!DrGArcCostume methodsFor: 'updating' stamp: ''!redrawAsSegmentOrRay! !!DrGArcCostumeStyle methodsFor: 'accessing' stamp: ''!fill: boolean	(fill := boolean) 		ifTrue: [costume morph makeClosed]		ifFalse: [costume morph makeOpen].	self changed! !!DrGArcCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current arcColor.	self lineStyle: DrGStylePreference current arcStyle.	self thickness: DrGStylePreference current arcThickness.	self arrow: DrGStylePreference current arcArrow.	self fill: DrGStylePreference current arcFilled.	self translucent: DrGStylePreference current arcTranslucent.! !!DrGArcHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGArcHomothetyItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGArcHomothetyItem methodsFor: 'updating' stamp: ''!update|arcItem centerHomothety|	self doParentsExist ifTrue:		[arcItem := parents first.		centerHomothety := parents second point.		center := centerHomothety +			(parents third valueItem * (arcItem center - centerHomothety)).		radius := arcItem radius * parents third valueItem abs.		origin := arcItem origin + (parents third valueItem sign -1 * Float halfPi).		length := arcItem length].! !!DrGArcItem commentStamp: ''!A DrGArcItem is an abstract arc item.Instance Variables	center:		the arc center	length:		the arc angle, it can be negative	origin:		the starting angle of the arc	radius:		its radius!!DrGArcItem methodsFor: 'accessing' stamp: ''!radius	^radius! !!DrGArcItem methodsFor: 'computing' stamp: ''!clone	|pointA pointB pointC clone|	pointA := DrGPointFreeItem newWith: {(self pointAt: 0) + (0.2@0.2)}.	pointB := DrGPointFreeItem newWith: {(self pointAt: 0.5) + (0.2@0.2)}.	pointC := DrGPointFreeItem newWith: {(self pointAt: 1) + (0.2@0.2)}.	clone := DrGArc3ptsItem newWith: {pointA . pointB . pointC}.	^ {pointA . pointB . pointC. clone}! !!DrGArcItem methodsFor: 'accessing' stamp: ''!basicType	^#arc! !!DrGArcItem methodsFor: 'accessing' stamp: ''!abscissaOf: aPoint	^(self angleOf: aPoint) / length! !!DrGArcItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	| angle |	angle := self angleOf: aPoint.	^center + (radius * ((origin + angle) cos @ (origin + angle) sin))! !!DrGArcItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem	^true! !!DrGArcItem methodsFor: 'computing' stamp: ''!pointAt: anAbscissa	|angle|	angle := origin + (anAbscissa * length).	^center + (radius * (angle cos @ angle sin))	! !!DrGArcItem methodsFor: 'accessing' stamp: ''!origin	^origin! !!DrGArcItem methodsFor: 'private' stamp: ''!angleOf: aPoint 	"Compute the angle position of aPoint in the circle"	| angleM pointM |	pointM := aPoint - center.	angleM := (pointM y asFloat arcTan2: pointM x) - origin.	"Transcript show: 'angle(1): ', angleM asString, 'origin: ', origin asString."	length > 0 		ifTrue: 			[angleM < 0 ifTrue: [angleM := angleM + DrGDirectionItem twoPi].			angleM > length ifTrue: [angleM := length]]		ifFalse: 			[angleM > 0 ifTrue: [angleM := angleM - DrGDirectionItem twoPi].			angleM < length ifTrue: [angleM := length]].	"	Transcript show: 'angle: ', angleM asString , ' length: ', length asString;cr."	^angleM! !!DrGArcItem methodsFor: 'computing' stamp: ''!intersectionWithDirection: aDirectionItem flag: aFlag 	| circleItem |	circleItem := (DrGCircleItem new)				center: self center;				radius: self radius.	^circleItem intersectionWithDirection: aDirectionItem flag: aFlag! !!DrGArcItem methodsFor: 'testing' stamp: ''!isCloneable 	^ true! !!DrGArcItem methodsFor: 'printing' stamp: ''!printOn: aStream	self printType: DrGArcBuilder title on: aStream.	aStream nextPut: Character space.	self printDecimal: (length * radius ) abs on: aStream.! !!DrGArcItem methodsFor: 'accessing' stamp: ''!length: aFloat	length := aFloat ! !!DrGArcItem methodsFor: 'accessing' stamp: ''!radius: aFloat	radius := aFloat! !!DrGArcItem methodsFor: 'accessing' stamp: ''!length"the arc length, in radius, can be negative"	^length! !!DrGArcItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem	^true! !!DrGArcItem methodsFor: 'accessing' stamp: ''!center: aPoint	center := aPoint ! !!DrGArcItem methodsFor: 'accessing' stamp: ''!costumeClass 	^DrGArcCostume! !!DrGArcItem methodsFor: 'computing' stamp: ''!intersectionWith: aCurveItem flag: aFlag	| aPoint |	aCurveItem isLineItem 		ifTrue: 			[aPoint := self intersectionWithDirection: aCurveItem flag: aFlag.			aPoint ifNil: [^nil].			(self contains: aPoint)				ifTrue: [^aPoint]				ifFalse: [^nil]].	(aCurveItem isRayItem or: [aCurveItem isSegmentItem])		ifTrue:			[aPoint := self intersectionWithDirection: aCurveItem flag: aFlag.			aPoint ifNil: [^nil].			((self contains: aPoint) and: [aCurveItem contains: aPoint])				ifTrue: [^aPoint]				ifFalse: [^nil]].	aCurveItem isCircleItem		ifTrue:			[aPoint := self intersectionWithCircle: aCurveItem flag: aFlag.			aPoint ifNil: [^nil].			(self contains: aPoint)				ifTrue: [^aPoint]				ifFalse: [^nil]].	aCurveItem isArcItem		ifTrue:			[aPoint := self intersectionWithCircle: aCurveItem flag: aFlag.			aPoint ifNil: [^nil].			((self contains: aPoint) and: [aCurveItem contains: aPoint])				ifTrue: [^aPoint]				ifFalse: [^nil]].! !!DrGArcItem methodsFor: 'computing' stamp: ''!intersectionWithCircle: aCircleOrArcItem flag: aFlag 	| circleItem |	circleItem := (DrGCircleItem new)				center: self center;				radius: self radius.	^circleItem intersectionWithCircle: aCircleOrArcItem flag: aFlag! !!DrGArcItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isArcItem	^true! !!DrGArcItem methodsFor: 'accessing' stamp: ''!origin: aFloat	origin := aFloat ! !!DrGArcItem methodsFor: 'testing' stamp: ''!contains: aPoint 	| angleM pointM |	((center dist: aPoint) closeTo: radius) ifFalse: [^false].	pointM := aPoint - center.	angleM := (pointM y asFloat arcTan2: pointM x) - origin.	^ length > 0 		ifTrue: 			[angleM < 0 ifTrue: [angleM := angleM + DrGDirectionItem twoPi].			length >= angleM]		ifFalse: 			[angleM > 0 ifTrue: [angleM := angleM - DrGDirectionItem twoPi].			length <= angleM]! !!DrGArcItem methodsFor: 'accessing' stamp: ''!center	^center! !!DrGArcItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This Arc Circle %1' translated! !!DrGArcMorph commentStamp: ''!A DrGArcMorph is sampling an arc defined by- its center- its radius- a starting point- a signer length!!DrGArcMorph methodsFor: 'accessing' stamp: ''!color: aColor	|theColor|	costume style 		ifNotNil: [theColor := costume style isTranslucent ifTrue: [aColor alpha: 0.3] ifFalse: [aColor]]	 	ifNil: [theColor := aColor].	super color: theColor! !!DrGArcMorph methodsFor: 'accessing' stamp: ''!center: aPoint radius: aFloat origin: anOrigin length: aLength|step costep sinstep csteX csteY mobile|	vertices := OrderedCollection new.	aFloat ~= 0 		ifTrue: [			step := 5 / aFloat * aLength sign.			step  ~= 0 ifTrue: [				(aLength / step) abs > 100 ifTrue: [step := aLength / 100].				costep := step cos.	sinstep := step sin.				csteX := aPoint x * (1 - costep) + (aPoint y * sinstep).				csteY := aPoint y * (1 - costep) - (aPoint x * sinstep).				mobile := aPoint + (aFloat * (anOrigin cos @ anOrigin sin)).				vertices add: mobile.				0 to: (aLength / step) truncated -1  do: [:i|					mobile := (mobile x * costep - (mobile y * sinstep) + csteX)						@(mobile x * sinstep + (mobile y * costep) + csteY).					vertices add: mobile]].			mobile := aPoint + (aFloat * ((anOrigin + aLength) cos @ (anOrigin + aLength) sin)).			vertices add: mobile]		ifFalse: [vertices add: aPoint].	self computeBounds! !!DrGArcReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGArcReflexionItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGArcReflexionItem methodsFor: 'updating' stamp: ''!update|pointA|	self doParentsExist ifTrue:		[origin := parents first origin.		radius := parents first radius.		center := parents first center.		length := parents first length negated.		pointA := center + (radius * (origin cos @ origin sin)).		pointA := pointA reflexionBy: parents second origin 						direction: parents second direction.		center := center reflexionBy: parents second origin 						direction: parents second direction.		pointA := pointA - center.		origin := pointA y asFloat arcTan2: pointA x].! !!DrGArcRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGArcRotationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGArcRotationItem methodsFor: 'updating' stamp: ''!update|arcItem|	self doParentsExist ifTrue:		[arcItem := parents first.		center := arcItem center			rotateBy: parents third valueItem negated 			about: parents second point.		origin := arcItem origin + parents third valueItem.		length := arcItem length.		radius := arcItem radius].! !!DrGArcSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGArcSymmetryItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGArcSymmetryItem methodsFor: 'updating' stamp: ''!update	self doParentsExist 		ifTrue: 			[origin := parents first origin + Float pi.			origin > Float pi ifTrue: [origin := origin - DrGDirectionItem twoPi].			radius := parents first radius.			center := 2 * parents second point - parents first center.			length := parents first length].! !!DrGArcTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Translation! !!DrGArcTranslationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGArcTranslationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[origin := parents first origin.		radius := parents first radius.		center := parents first center + parents second direction.		length := parents first length].! !!DrGBitmapBuilder methodsFor: 'accessing' stamp: ''!arguments	^ {point}! !!DrGBitmapBuilder methodsFor: 'testing' stamp: ''!readyToBuild 	^ point notNil! !!DrGBitmapBuilder methodsFor: 'xml' stamp: ''!itemInstanceFrom: node	self addItem: #() at: 0@0.	^ self getItem first.! !!DrGBitmapBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^ aMathItemCollection isEmpty! !!DrGBitmapBuilder methodsFor: 'xml' stamp: ''!postProcess: item from: node	| form |	super postProcess: item from: node.	self parseValuePosition: node of: item.	form := PNGReadWriter formFromStream: (node contentStringAt: #data) base64Decoded asByteArray readStream.	item 		insertAtScale: (node contentStringAt: #insertAtScale) asNumber;		magnifyBy: (node contentStringAt: #magnify) asNumber;		data: (DrGSurfacePaintResource forSurfaceProvider: self area withData:form)	! !!DrGBitmapBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	^DrGBitmapItem ! !!DrGBitmapBuilder class methodsFor: 'documentation' stamp: ''!description	^'Picture: drag and drop a picture in the canvas. It can be moved and scaled.' translated! !!DrGBitmapBuilder class methodsFor: 'documentation' stamp: ''!title	^'Picture' translated! !!DrGBitmapCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph 	morph := DrGBitmapMorph new paintResource: mathItem data! !!DrGBitmapCostume methodsFor: 'as yet unclassified' stamp: ''!color: aColor	morph borderColor: aColor! !!DrGBitmapCostume methodsFor: 'updating' stamp: ''!redraw 	super redraw 		ifFalse: [^self].	morph center: (drawable worldToMorph: mathItem position).! !!DrGBitmapCostume methodsFor: 'testing' stamp: ''!basicType 	^ #bitmap! !!DrGBitmapCostume methodsFor: 'initialize-release' stamp: ''!initialize 	super initialize.	previousScale := mathItem insertAtScale.	previousMagnify := mathItem magnifyBy.	self style color: Color black! !!DrGBitmapCostume methodsFor: 'testing' stamp: ''!isAnyCornerIn: aPoint	"is aPoint belong to one of the corners of extent 24, if so return its symbole otherwise nil"	((morph position extent: 24@24) containsPoint: aPoint) ifTrue: [^#topLeft].	((morph topRight - (24@0) extent: 24@24) containsPoint: aPoint) ifTrue: [^#topRight].	((morph bottomRight -  24 extent: 24@24) containsPoint: aPoint) ifTrue: [^ #bottomRight].	((morph bottomLeft - (0@16) extent: 24@24) containsPoint: aPoint) ifTrue: [^ #bottomLeft].	^ nil! !!DrGBitmapCostume methodsFor: 'layout' stamp: ''!constraintTextPosition: aPoint|center vector|	center := drawable worldToMorph: mathItem topCenter.	vector := aPoint - center.	^textPositionDelta := self computeTextPositionDelta: vector	! !!DrGBitmapCostume methodsFor: 'as yet unclassified' stamp: ''!myScale	^ drawable scale * mathItem magnifiedScale! !!DrGBitmapCostume methodsFor: 'layout' stamp: ''!textPosition	^(drawable worldToMorph: mathItem topCenter) + textPositionDelta ! !!DrGBitmapItem commentStamp: ''!- data : an athens paint containing the original bitmap- canvasScaleAtInsertion : the canvas scale at which the bitmap was dropped in the canvas. it is the scale reference for the rest of the bitmap life- scale : a Float, bitmap can be scaled by this scale factor!!DrGBitmapItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self position: theParents last! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!data: anAthensPaint	data := anAthensPaint ! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!position: aPoint 	position := aPoint.! !!DrGBitmapItem methodsFor: 'testing' stamp: ''!isLockable 	^ true! !!DrGBitmapItem methodsFor: 'comparing' stamp: ''!rehash	^ hash := data hash bitXor: position hash! !!DrGBitmapItem methodsFor: 'xml writing' stamp: ''!writeAsXmlPositionTo: aNode 	"return the newly created element"	aNode		addElement: ((XMLElement named: #x)				addContent: (XMLStringNode string: position x asString));		addElement: ((XMLElement named: #y)				addContent: (XMLStringNode string: position y asString)).	^ aNode! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!basicType	^ #bitmap! !!DrGBitmapItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	|node stream |	stream := ByteArray new writeStream.	PNGReadWriter putForm: data asForm onStream: stream.	DrGLoader stop.	node := super writeAsXmlTo: aNode.	self writeAsXmlPositionTo: node.	node		addElement: ((XMLElement named: #insertAtScale) 			addContent: (XMLStringNode string: canvasScaleAtInsertion asString));		addElement: ((XMLElement named: #magnify) 			addContent: (XMLStringNode string: magnifyBy asString));		addElement:  ((XMLElement named: #data) 			addContent: (XMLStringNode string: stream contents base64Encoded)).	^ node! !!DrGBitmapItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isBitmapItem	^ true! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!insertAtScale	^ canvasScaleAtInsertion  ! !!DrGBitmapItem methodsFor: 'xml writing' stamp: ''!nodeType	^#free! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!magnifyBy: aFloat	magnifyBy := aFloat ! !!DrGBitmapItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^ false! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!descriptiveName 	^ self adaptiveDescriptiveName ! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!magnifiedScale	"Scale factor accordingly to the canvas scale at insertion and the magnify factor"	^ (magnifyBy / canvasScaleAtInsertion ) asFloat! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!topCenter	"top center position in the world coordinates system"	^ position + (0@(self height / 2))! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!parents: aCollection	parents := nil.! !!DrGBitmapItem methodsFor: 'comparing' stamp: ''!= aMathItem 	^ super = aMathItem 		and: [position = aMathItem position and:			[data = aMathItem data]]! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!height	"height in the world coordinates system"	^ data extent y * self magnifiedScale ! !!DrGBitmapItem methodsFor: 'as yet unclassified' stamp: ''!printOn: aStream	self printType: 'Picture' translated on: aStream.	self printCoordinates: position on: aStream ! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!position	^ position! !!DrGBitmapItem methodsFor: 'testing' stamp: ''!isPropertyEditable 	^ false! !!DrGBitmapItem methodsFor: 'testing' stamp: ''!doParentsExist 	^ true! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!isLocked	^ locked ifNil: [locked := false]! !!DrGBitmapItem methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	magnifyBy := 1.! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!data	^ data! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!magnifyBy 	^ magnifyBy ! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!costumeClass	^ DrGBitmapCostume! !!DrGBitmapItem methodsFor: 'updating' stamp: ''!move: aPoint	self isLocked ifFalse: [position := position + aPoint]! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!insertAtScale: aScale	canvasScaleAtInsertion  := aScale ! !!DrGBitmapItem methodsFor: 'accessing' stamp: ''!locked: aBoolean	locked := aBoolean ! !!DrGBitmapItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName 	^ 'This picture' translated! !!DrGBitmapMorph methodsFor: 'stepping and presenter' stamp: ''!stopStepping	super stopStepping.	self borderColor: costume style color.! !!DrGBitmapMorph methodsFor: 'accessing' stamp: ''!costume: aCostume	costume := aCostume.! !!DrGBitmapMorph methodsFor: 'geometry' stamp: ''!adoptPaneColor: paneColor	"We do not want this"! !!DrGBitmapMorph methodsFor: 'accessing' stamp: ''!extent: aPoint	| newExtent |	newExtent := (self borderWidth * 2) asPoint + (aPoint * costume myScale) asIntegerPoint.	(bounds extent closeTo: newExtent ) ifTrue: [ ^self ].	self changed.	bounds := (bounds topLeft extent: newExtent).	self layoutChanged.	self changed.! !!DrGBitmapMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas	| borderPath width |	aCanvas setPaint: paintResource getCheckedResource.	aCanvas paintTransform restoreAfter: [		aCanvas paintTransform translateBy: self innerBounds origin "negated".		aCanvas paintTransform scaleBy: costume myScale.		aCanvas drawShape: self innerBounds].	width := self borderWidth.	borderPath := aCanvas createPath: [ :builder |		builder absolute.		builder 			moveTo: self position + width asPoint;			lineTo: self topRight + (width negated @ width);			lineTo: self bottomRight - width asPoint;			lineTo: self bottomLeft + (width @ width negated);			lineTo: self position + width asPoint].	aCanvas setShape: borderPath.	(aCanvas  setStrokePaint: self borderColor) width: width.	aCanvas draw.	! !!DrGBitmapMorph methodsFor: 'initialization' stamp: ''!initialize 	super initialize.	self borderWidth: 2.	self borderColor: Color black.	blink := false.! !!DrGBitmapMorph methodsFor: 'stepping and presenter' stamp: ''!startBlinking 	blink := true.	self startStepping! !!DrGBitmapMorph methodsFor: 'accessing' stamp: ''!costume	^ costume ! !!DrGBitmapMorph methodsFor: 'event handling' stamp: ''!handlesMouseDown: evt	^ false! !!DrGBitmapMorph methodsFor: 'as yet unclassified' stamp: ''!isMorphCostume	^ true! !!DrGBitmapMorph methodsFor: 'accessing' stamp: ''!paintResource: anAthensPaint	paintResource := anAthensPaint .	self changed! !!DrGBitmapMorph methodsFor: 'stepping and presenter' stamp: ''!step	blink ifFalse: [^self].	super step.	self borderColor = DrGStylePreference blinkingColor 		ifTrue: [self borderColor: costume style color]		ifFalse: [self borderColor: DrGStylePreference blinkingColor].! !!DrGBitmapMorph methodsFor: 'accessing' stamp: ''!extent"defined by my paint, cannot change"	self extent: paintResource getCheckedResource extent.	^ bounds extent! !!DrGBitmapMorph methodsFor: 'stepping and presenter' stamp: ''!stopBlinking	blink := false.	self stopStepping.! !!DrGBitmapMorph methodsFor: 'stepping and presenter' stamp: ''!stepTime	^ 500! !!DrGBuildTool methodsFor: 'accessing' stamp: ''!presenter: aPresenter	super presenter: aPresenter.	builder app: self app.! !!DrGBuildTool methodsFor: 'updating' stamp: ''!reset	super reset.	self stopBlinking.	self builder reset.	selectedCostumes := OrderedCollection new! !!DrGBuildTool methodsFor: 'accessing' stamp: ''!builder: aBuilder	builder := aBuilder ! !!DrGBuildTool methodsFor: 'updating' stamp: ''!redrawFlyingCostume	builder redrawFlyingCostume ! !!DrGBuildTool methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self switchState:  DrGBuildToolState.	selectedCostumes := OrderedCollection new! !!DrGBuildTool methodsFor: 'initialize-release' stamp: ''!release	super release.	builder release.	self releaseActionMap. ! !!DrGBuildTool methodsFor: 'updating' stamp: ''!startBlinking	selectedCostumes do: [ :aCostume | aCostume startBlinking ]! !!DrGBuildTool methodsFor: 'adding' stamp: ''!add: aCostume	self stopBlinking.	selectedCostumes add: aCostume.	self startBlinking.! !!DrGBuildTool methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^builder isWanted: aMathItemCollection  ! !!DrGBuildTool methodsFor: 'accessing' stamp: ''!description 	^ builder class description! !!DrGBuildTool methodsFor: 'initialize-release' stamp: ''!registerDependant: anObject	builder when: #readyToBuild send: #readyToBuild to: anObject! !!DrGBuildTool methodsFor: 'updating' stamp: ''!stopBlinking	selectedCostumes do: [ :aCostume | aCostume stopBlinking ]! !!DrGBuildTool methodsFor: 'accessing' stamp: ''!builder	^builder! !!DrGBuildTool class methodsFor: 'instance creation' stamp: ''!with: aBuilderClassName	^self new builder: aBuilderClassName new.! !!DrGBuildToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection|aMathItemCollection|	aMathItemCollection := OrderedCollection new.	aCostumeCollection do: [:aCostume|		aMathItemCollection add: aCostume mathItem.		self context add: aCostume].	^ self context builder 		add: aMathItemCollection 		at: (self area gridWorldPoint: self context last).! !!DrGBuildToolState methodsFor: 'handling' stamp: ''!handlePress: aPoint 	"return true if we process something (including additional user choice)"	| costumes |	self area hideTip.	self context last: aPoint.	costumes := self context costumesAt: aPoint.	costumes size = 1 		ifTrue: 			[self handleChoice: costumes.			^true].	(costumes size = 0 and: [self context isWanted: { }]) 		ifTrue: 			[self handleChoice: costumes.			^true].	"More than one math item under mouse, user must choose one item"	costumes size >= 2 		ifTrue: 			["Display a pop-up menu to select one item"			self context chooseCostume: costumes.			^true].	^false! !!DrGCanvasMenuMorph commentStamp: ''!I am view with only a canvas and the wheels adjusters.!!DrGCanvasMenuMorph methodsFor: 'events' stamp: ''!updateColor	super updateColor.	self color: (self color alpha: 0.6).	self borderColor: (self borderColor alpha: 0.6).! !!DrGCanvasMenuMorph methodsFor: 'control' stamp: ''!selectItem: aMenuItem event: anEvent	selectedItem ifNotNil:[		selectedItem deselect: anEvent.		(costumes at: selectedItem arguments first) stopBlinking].	selectedItem := aMenuItem.	selectedItem ifNotNil:[		selectedItem select: anEvent.		(costumes at: selectedItem arguments first) startBlinking].! !!DrGCanvasMenuMorph methodsFor: 'accessing' stamp: ''!costumes: aCollection	costumes := aCollection! !!DrGCanvasMenuMorph class methodsFor: 'as yet unclassified' stamp: ''!chooseFrom: aList lines: linesArray title: queryString	"Choose an item from the given list. Answer the index of the selected item."	"MenuMorph		chooseFrom: #('Hello' 'Pharoers' 'Here' 'We' 'Go')		lines: #(2 4)		title: 'What''s up?'"			| menu result |	(ProvideAnswerNotification signal: queryString) ifNotNil:[:answer | 		1 to: aList size do:[:i| (aList at: i) = answer ifTrue:[^i]].		^0].	result := 0.	menu := self new.	menu costumes: aList.	menu addTitle: queryString.	1 to: aList size do:[:i| 		menu add: (aList at: i) asString target: [:v| result := v] selector: #value: argument: i.		(linesArray includes: i) ifTrue: [menu addLine]].		menu invokeAt: ActiveHand position in: ActiveWorld allowKeyboard: true.	^result! !!DrGCircle2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'2pts'! !!DrGCircle2ptsItem methodsFor: 'updating' stamp: ''!update	self doParentsExist		ifTrue: [center := parents first point.					radius := center dist: parents second point].! !!DrGCircleBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	radius := nil.	segment := nil.! !!DrGCircleBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	^ DrGCircleCostume! !!DrGCircleBuilder methodsFor: 'accessing' stamp: ''!arguments	pointB		ifNil: 			[radius ifNotNil: [^{pointA. radius}].			segment ifNotNil: [^{pointA. segment}]]		ifNotNil: [^{pointA. pointB}]! !!DrGCircleBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint 	|item|	point := aPoint.	(item := aMathItemCollection first) isSegmentItem ifTrue: [		^ segment ifNil: [segment := item]].	item isValueItem ifTrue: [		^ radius ifNil: [radius := item]].	^ pointA 		ifNil: [pointA := item.			self addToFlyingItem: pointA]		ifNotNil: [pointB := item]! !!DrGCircleBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ (radius notNil and: [pointA notNil])		or: [(pointA notNil and: [pointB notNil])			or: [pointA notNil and: [segment notNil]]]! !!DrGCircleBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty		and: [(aMathItemCollection first isPointItem				and: [aMathItemCollection first ~= pointA])			or: [(aMathItemCollection first isValueItem				and: [pointA isNil not				and: [aMathItemCollection first ~= radius]])			or: [aMathItemCollection first isSegmentItem 				and: [pointA isNil not				and: [aMathItemCollection first ~= segment]]]]]! !!DrGCircleBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^ radius		ifNil: [			segment 				ifNil: [DrGCircle2ptsItem]				ifNotNil: [DrGCircleSegmentItem]]		ifNotNil: [DrGCircleRadiusItem]! !!DrGCircleBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Circle defined by its center and a point or by its center and radius, a value.' translated! !!DrGCircleBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Circle' translated ! !!DrGCircleCostume commentStamp: ''!when Circle goes infinit replace it by a lineMorph!!DrGCircleCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGCircleMorph new! !!DrGCircleCostume methodsFor: 'updating' stamp: ''!applyStyle	morph borderColor: style borderColor;		dashedBorder: (DrGStylePreference styleFor: style lineStyle);		borderWidth: style width.! !!DrGCircleCostume methodsFor: 'testing' stamp: ''!isDrawAsLine	^ asLine ifNil: [ asLine := false ]! !!DrGCircleCostume methodsFor: 'updating' stamp: ''!redraw	super redraw ifFalse: [^ self].	mathItem radius > 100		ifTrue: [self redrawAsLine]		ifFalse: [self redrawAsCircle]! !!DrGCircleCostume methodsFor: 'testing' stamp: ''!basicType	^#circle! !!DrGCircleCostume methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	asLine := false! !!DrGCircleCostume methodsFor: 'style' stamp: ''!styleClass	^DrGCircleCostumeStyle! !!DrGCircleCostume methodsFor: 'updating' stamp: ''!redrawAsLine	| p1 p2 |	self isDrawAsLine ifFalse: [ 		asLine := true.		self removeMyMorph.		morph := DrGLineMorph new costume: self.		self applyStyle.		drawable addMorph: morph].	p1 := mathItem closestPointTo: (drawable morphToWorld: ActiveHand position).	p2 := mathItem pointAt: (mathItem abscissaOf: p1) + 0.001.	morph		from: (drawable worldToMorph: p1)		direction: (drawable vectorToMorph: p2 - p1)! !!DrGCircleCostume methodsFor: 'updating' stamp: ''!redrawAsCircle	self isDrawAsLine ifTrue: [		self removeMyMorph.		self instantiateMorph.		morph costume: self.		self applyStyle.		drawable addMorph: morph.		asLine := false].	morph		center: (drawable worldToMorph: mathItem center)		radius: (drawable worldToPixel: mathItem radius)  ! !!DrGCircleCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current circleColor.	self lineStyle: DrGStylePreference current circleStyle.	self thickness: DrGStylePreference current circleThickness.	self fill: DrGStylePreference current circleFilled.	self translucent: DrGStylePreference current circleTranslucent.! !!DrGCircleHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGCircleHomothetyItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGCircleHomothetyItem methodsFor: 'updating' stamp: ''!update|centerHomothety|	self doParentsExist ifTrue:		[centerHomothety := parents second point.		radius := parents first radius * parents third valueItem abs.		center := centerHomothety +			(parents third valueItem * (parents first center - centerHomothety))].! !!DrGCircleItem commentStamp: ''!Instance variables radius and center are used to cache these values!!DrGCircleItem methodsFor: 'testing' stamp: ''!isCloneable	^ true! !!DrGCircleItem methodsFor: 'printing' stamp: ''!printOn: aStream 	self printType: DrGCircleBuilder title on: aStream .	aStream nextPut: Character space.	self printCoordinates: center on: aStream.	aStream nextPut: Character space.	self printDecimal: radius  on: aStream! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!radius	^radius! !!DrGCircleItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCircleItem	^true! !!DrGCircleItem methodsFor: 'computing' stamp: ''!clone	|pointA pointB clone|	pointA := DrGPointFreeItem newWith: {self center + (0.2@0.2)}.	pointB := DrGPointFreeItem newWith: {(self pointAt: 0) + (0.2@0.2)}.	clone := DrGCircle2ptsItem newWith: {pointA . pointB}.	^ {pointA . pointB . clone}! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!radius: aFlaot	radius := aFlaot ! !!DrGCircleItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem	^true! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!basicType	^#circle! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!abscissaOf: aPoint 	| angle vector |	vector := aPoint - self center.	angle := vector y arcTan: vector x.	angle < 0 ifTrue: [angle := angle + (2 * Float pi)].	^angle * 0.5 * DrGDirectionItem invPi! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!closestPointTo: aPoint| v | 	[v := (aPoint - self center) normalized] on: ZeroDivide do: [ v := 0 @ 0 ].	^self center + (self radius * v)! !!DrGCircleItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem	^true! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!pointAt: anAbscissa	|angle|	angle := 2 * Float pi * anAbscissa.	^ (Point x: angle cos y: angle sin) * self radius + self center.! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!center: aPoint	center := aPoint ! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!costumeClass 	^DrGCircleCostume! !!DrGCircleItem methodsFor: 'computing' stamp: ''!intersectionWith: aCurveItem flag: aFlag|aPoint|	aCurveItem isLineItem 		ifTrue: [^self intersectionWithDirection: aCurveItem  flag: aFlag].	(aCurveItem isSegmentItem or: [aCurveItem isRayItem])		ifTrue:			[aPoint := self intersectionWithDirection: aCurveItem  flag: aFlag.			aPoint ifNil: [^nil].			(aCurveItem contains: aPoint)				ifTrue: [^aPoint]				ifFalse: [^nil]].	aCurveItem isCircleItem		ifTrue: [^self intersectionWithCircle: aCurveItem flag: aFlag].	aCurveItem isArcItem		ifTrue: [^aCurveItem intersectionWith: self flag: aFlag]! !!DrGCircleItem methodsFor: 'computing' stamp: ''!intersectionWithCircle: aCircleItem flag: aFlag 	| directionItem aVector aRadius x d |	directionItem := DrGDirectionItem new.	aVector := aCircleItem center - center.	aRadius := aCircleItem radius.	d := aVector dotProduct: aVector.	d = 0 ifTrue: [ ^ nil ].	x := (d + radius squared - aRadius squared) / (2 * d).	directionItem direction: aVector normal.	directionItem origin: x * aVector + center.	^self intersectionWithDirection: directionItem flag: aFlag! !!DrGCircleItem methodsFor: 'testing' stamp: ''!contains: aPoint	^ (center dist: aPoint) closeTo: radius  ! !!DrGCircleItem methodsFor: 'accessing' stamp: ''!center	^center! !!DrGCircleItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This circle %1' translated! !!DrGCircleItem methodsFor: 'computing' stamp: ''!intersectionWithDirection: aDirectionItem flag: aFlag|a b c d k vector|	vector := aDirectionItem direction.	a := vector dotProduct: vector.	b := vector dotProduct: (aDirectionItem origin - self center).	c := (aDirectionItem origin squaredDistanceTo: self center) - self radius squared.	d := b squared - (a * c).	(d < 0 or: [a = 0]) ifTrue: [^ nil].	k := (b negated + (aFlag * d sqrt)) / a.	^ aDirectionItem origin + (k * vector)! !!DrGCircleMorph methodsFor: 'accessing' stamp: ''!center: aPoint radius: aFloat	self bounds: (aPoint - aFloat corner: aPoint + aFloat) ! !!DrGCircleMorph methodsFor: 'dashes' stamp: ''!dashedBorder: dashSpec	borderDashSpec := dashSpec.	self changed! !!DrGCircleMorph methodsFor: 'stepping and presenter' stamp: ''!stopStepping	super stopStepping.	self color: (costume style isFilled ifTrue: [costume style color] ifFalse: [Color transparent]).	self borderColor: costume style borderColor.! !!DrGCircleMorph methodsFor: 'accessing' stamp: ''!fullBounds	^ super fullBounds expandBy:  10! !!DrGCircleMorph methodsFor: 'change reporting' stamp: ''!invalidRect: damageRect	^ super invalidRect: (damageRect  expandBy:  2)! !!DrGCircleMorph methodsFor: 'dashes' stamp: ''!dashedBorder	^ borderDashSpec! !!DrGCircleMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas| path |	path := aCanvas createPath: [:builder |		builder absolute;			moveTo: self leftCenter;			cwArcTo: self rightCenter angle: Float pi;			cwArcTo: self leftCenter angle: Float pi].	aCanvas setShape: path.	costume style isFilled ifTrue: [aCanvas setPaint: self color. aCanvas draw].	(aCanvas setStrokePaint: self borderColor) 		width: self borderWidth;		dashes: self dashedBorder offset: 0.	aCanvas draw! !!DrGCircleMorph methodsFor: 'stepping and presenter' stamp: ''!step	blink ifFalse: [^self].	self borderColor = DrGStylePreference blinkingColor 		ifTrue: [self borderColor: costume style borderColor]		ifFalse: [self borderColor: DrGStylePreference blinkingColor]! !!DrGCircleMorph methodsFor: 'geometry testing' stamp: ''!containsPoint: aPoint	"it is a circle so height and width is the diameter""	(bounds containsPoint: aPoint) ifFalse: [^false]."	^((self center dist: aPoint) - (self height / 2)) abs < 20! !!DrGCircleMorph methodsFor: 'drawing' stamp: ''!drawOn: aCanvas	costume style isFilled 		ifTrue: [aCanvas fillOval: self bounds color: self color borderWidth: self borderWidth borderColor: self borderColor]		ifFalse:	[aCanvas frameOval: self bounds width: self borderWidth color: self borderColor]! !!DrGCircleRadiusItem methodsFor: 'computing' stamp: ''!clone	|pointA clone radiusItem |	pointA := DrGPointFreeItem newWith: {self center + (0.2@0.2)}.	radiusItem := parents second.	clone := DrGCircleRadiusItem newWith: {pointA . radiusItem}.	^ {pointA . clone}! !!DrGCircleRadiusItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #radius! !!DrGCircleRadiusItem methodsFor: 'updating' stamp: ''!moveParent: aPoint 	| thePoint |	(parents			noneSatisfy: [:item | item isValueItem or: [item isSegmentItem]])		ifTrue: [^ super moveParent: aPoint].	"we just want to move the center point, not the radius value"	thePoint := parents first.	thePoint moveEvent: aPoint.	^ true! !!DrGCircleRadiusItem methodsFor: 'updating' stamp: ''!update	self doParentsExist		ifTrue: [center := parents first point.			radius := parents second valueItem abs].! !!DrGCircleReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGCircleReflexionItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGCircleReflexionItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self radius: parents first radius.		self center: (parents first center							reflexionBy: parents second origin 							direction: parents second direction)].! !!DrGCircleRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGCircleRotationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGCircleRotationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[radius := parents first radius.		center := parents first center			rotateBy: parents third valueItem negated 			about: parents second point].! !!DrGCircleSegmentItem methodsFor: 'computing' stamp: ''!clone	|pointA clone segmentItem |	pointA := DrGPointFreeItem newWith: {self center + (0.2@0.2)}.	segmentItem := parents second.	clone := DrGCircleSegmentItem newWith: {pointA . segmentItem}.	^ {pointA . clone}! !!DrGCircleSegmentItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #segment! !!DrGCircleSegmentItem methodsFor: 'updating' stamp: ''!update	self doParentsExist		ifTrue: [center := parents first point.			radius := parents second direction r]! !!DrGCircleSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGCircleSymmetryItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGCircleSymmetryItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self radius: parents first radius.		self center: (2 * parents second point) - parents first center].! !!DrGCircleTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Translation! !!DrGCircleTranslationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGCircleTranslationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self center: parents first center + parents second direction.		self radius: parents first radius].! !!DrGCloneBuilder commentStamp: ''!I can clone item!!DrGCloneBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	item := nil! !!DrGCloneBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	item := aMathItemCollection first! !!DrGCloneBuilder methodsFor: 'building' stamp: ''!buildItem	"clone myself with the necessary parents"	^  item clone! !!DrGCloneBuilder methodsFor: 'testing' stamp: ''!readyToBuild 	^ item notNil ! !!DrGCloneBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty 		and: [aMathItemCollection first isCloneable]! !!DrGCommand methodsFor: 'command' stamp: ''!execute	self subclassResponsibility ! !!DrGCommand methodsFor: 'command' stamp: ''!unexecute	self subclassResponsibility ! !!DrGCommand methodsFor: 'accessing' stamp: ''!domain: aDomain	domain := aDomain.! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!redo|command|	command := stack next.	command ifNotNil:	[command execute]! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!buildCommandWith: aBuilder	|command|	command := stack nextPut: (DrGMathItemCommand with: aBuilder in: domain).	^command execute! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!compositeCommandFor: aMathItemSelection|command|	command := stack nextPut: (DrGCompositeCommand with: aMathItemSelection in: domain).	command execute.! !!DrGCommandManager methodsFor: 'initialization' stamp: ''!initialize	stack := DrGCommandStack new! !!DrGCommandManager methodsFor: 'dependents access' stamp: ''!release	stack contents do: [:c | c release].	super release.! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!undo|command|	command := stack previous.	command ifNotNil: [command unexecute]! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!deleteCommandFor: aMathItem|command|	command := stack nextPut: (DrGDeleteCommand for: aMathItem in: domain).	command execute! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!propertyCommandFor: aMathItem with: aProperty	|command|	command := stack nextPut: (DrGPropertyCommand for: aMathItem with: aProperty in: domain).	command execute! !!DrGCommandManager methodsFor: 'accessing' stamp: ''!domain: aDomain	domain := aDomain! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!moveCommandFor: aMathItem with: aPoint	stack nextPut: (DrGMoveCommand for: aMathItem with: aPoint in: domain).! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!buildCommandFor: aMathItem	|command|	command := stack nextPut: (DrGMathItemCommand for: aMathItem in: domain).	^command execute! !!DrGCommandManager methodsFor: 'command exec' stamp: ''!mergeCommandFor: aMathItem with: aTarget"create a merge command"|command|	command := stack nextPut: (DrGMergeCommand merge: aMathItem with: aTarget in: domain).	command execute! !!DrGCommandStack methodsFor: 'accessing' stamp: ''!nextPut: aCommand	super nextPut: aCommand.	self truncate.	^ aCommand ! !!DrGCommandStack methodsFor: 'accessing' stamp: ''!previous	self position = 0 ifTrue: [^nil].	self position: self position - 1.	^self peek.! !!DrGCommandStack methodsFor: 'private' stamp: ''!truncate	|oldReadLimit|	oldReadLimit := readLimit.	readLimit := position.	oldReadLimit > readLimit ifTrue:			[readLimit to: oldReadLimit do:				[:index| collection at: index + 1 put: nil]]! !!DrGCommandStack class methodsFor: 'instance creation' stamp: ''!new	^self on: Array new! !!DrGCompositeCommand methodsFor: 'as yet unclassified' stamp: ''!execute	domain triggerEvent: #groupCostumes with: compositeItem.! !!DrGCompositeCommand methodsFor: 'as yet unclassified' stamp: ''!release	super release.	compositeItem release.! !!DrGCompositeCommand methodsFor: 'as yet unclassified' stamp: ''!unexecute	domain triggerEvent: #ungroupCostumes with: compositeItem.! !!DrGCompositeCommand methodsFor: 'as yet unclassified' stamp: ''!compileComposite: theMathItems	mathItems := theMathItems.	compositeItem := DrGCompositeItem newWith: theMathItems.! !!DrGCompositeCommand class methodsFor: 'as yet unclassified' stamp: ''!with: theMathItems in: aDomain	^self new		domain: aDomain ;		compileComposite: theMathItems! !!DrGCompositeCostume commentStamp: ''!I am a costume composed of several costumes!!DrGCompositeCostume methodsFor: 'updating' stamp: ''!removeCostume: aCostume	mathItem subItems: (mathItem subItems copyWithout: aCostume mathItem).	drawable app add: aCostume.	subCostumes remove: aCostume.! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!color: aColor	subCostumes do: [:aCostume |			aCostume style color: aColor]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!redraw	super redraw ifFalse: [^ self].	subCostumes		do: [:costume | costume redraw]! !!DrGCompositeCostume methodsFor: 'testing' stamp: ''!basicType	^#composite! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!changed	subCostumes do: [:costume |		costume changed]! !!DrGCompositeCostume methodsFor: 'accessing' stamp: ''!subCostumes: theSubCostumes	subCostumes := theSubCostumes ! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!makeForwardArrow	subCostumes do: [:aCostume|		aCostume isFinitCurveCostume ifTrue:			[aCostume makeForwardArrow]]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!makeNoArrows	subCostumes do: [:aCostume|		aCostume isFinitCurveCostume ifTrue:			[aCostume makeNoArrows]]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!updateToInvisible	subCostumes do: [:costume |		costume updateToInvisible]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!addCostume: aCostume	mathItem subItems: (mathItem subItems add: aCostume mathItem; yourself).	drawable app remove: aCostume.	subCostumes add: aCostume.	! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!updatedMathItem	subCostumes do: [:costume |		costume update]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!shape: anObject	subCostumes do: [:aCostume|		aCostume isPointCostume ifTrue:			[aCostume style shape: anObject]]! !!DrGCompositeCostume methodsFor: 'as yet unclassified' stamp: ''!disband"Disband this composite item"	drawable app ungroupCostumes: mathItem! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!dash: anObject	subCostumes do: [:aCostume|		aCostume isCurveCostume ifTrue:			[aCostume dash: anObject]]! !!DrGCompositeCostume methodsFor: 'initialize-release' stamp: ''!initialize	exist := true.	self style: (self styleClass newWith: self).! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!startBlinking	subCostumes do: [:costume |		costume startBlinking ]! !!DrGCompositeCostume methodsFor: 'style' stamp: ''!styleClass	^DrGCompositeStyle! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!makeBothArrows	subCostumes do: [:aCostume|		aCostume isFinitCurveCostume ifTrue:			[aCostume makeBothArrows]]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!forceVisible: aBoolean	subCostumes do: [:costume |		costume forceVisible: aBoolean]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!width: anInteger	subCostumes do: [:aCostume|		aCostume isCurveCostume ifTrue:			[aCostume width: anInteger]]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!stopBlinking	subCostumes do: [:costume |		costume stopBlinking ]! !!DrGCompositeCostume methodsFor: 'accessing' stamp: ''!subCostumes	^subCostumes ! !!DrGCompositeCostume methodsFor: 'testing' stamp: ''!containsPoint: aPoint	^ subCostumes anySatisfy: [ :costume| costume containsPoint: aPoint ]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!makeBackArrow	subCostumes do: [:aCostume|		aCostume isFinitCurveCostume ifTrue:			[aCostume makeBackArrow]]! !!DrGCompositeCostume methodsFor: 'updating' stamp: ''!updateToVisible	subCostumes do: [:costume |		costume updateToVisible]! !!DrGCompositeCostume class methodsFor: 'as yet unclassified' stamp: ''!for: aMathItem in: aDrawable with: theSubCostumes	^ self basicNew 		drawable: aDrawable;		mathItem: aMathItem;		subCostumes: theSubCostumes;		initialize! !!DrGCompositeItem commentStamp: ''!I am the composite item, I represent a set of math items.!!DrGCompositeItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem"if all subitem are geometric item, considere ourself as a geometric item"	subItems do: [:aMathItem |		(aMathItem isGeometricItem) 			ifFalse: [^false]].	^true! !!DrGCompositeItem methodsFor: 'updating' stamp: ''!move: aPoint	subItems do: [:item|		(item class ~= DrGPointFreeItem			and: [item class ~= DrGPointOncurveItem])			ifTrue:				[item moveEvent: aPoint]].! !!DrGCompositeItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCompositeItem	^true! !!DrGCompositeItem methodsFor: 'comparing' stamp: ''!hash	^ self subItems hash bitXor: self className hash! !!DrGCompositeItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGCompositeItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This composite object %1' translated! !!DrGCompositeItem methodsFor: 'accessing' stamp: ''!subItems	^subItems ! !!DrGCompositeItem methodsFor: 'comparing' stamp: ''!= aMathItem	^ aMathItem 		ifNil: [false] 		ifNotNil: [self className = aMathItem className 			and: [self subItems = aMathItem subItems]]! !!DrGCompositeItem methodsFor: 'accessing' stamp: ''!subItems: theSubItems	subItems := theSubItems ! !!DrGCompositeItem class methodsFor: 'as yet unclassified' stamp: ''!newWith: theSubItems	^self new		subItems: theSubItems! !!DrGCompositeStyle methodsFor: 'accessing' stamp: ''!shape: anObject	shape := anObject.	costume shape: anObject! !!DrGCompositeStyle methodsFor: 'accessing' stamp: ''!shape	^shape! !!DrGComputedValueItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode 	"return the newly created element"	| node |	node := super writeAsXmlTo: aNode.	^ self writeAsXmlPositionTo: node.! !!DrGCoordinatesBuilder commentStamp: ''!A builder for to build:- the coordinates of a point- the equation of a circle- the equation of a line!!DrGCoordinatesBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointA := vector := circle := line := nil! !!DrGCoordinatesBuilder methodsFor: 'accessing' stamp: ''!arguments	^ Array with: ({pointA. vector . line . circle } detect: [:i | i isNil not] ifNone: [nil]) with: point! !!DrGCoordinatesBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	| item |	point := aPoint.	item := aMathItemCollection first.	item isPointItem ifTrue: [^ pointA := item].	item isCircleItem ifTrue: [^ circle := item].	item isLineItem ifTrue: [^ line := item].	item isVectorItem ifTrue: [^ vector := item]! !!DrGCoordinatesBuilder methodsFor: 'testing' stamp: ''!readyToBuild 	^ {pointA. vector . line . circle } anySatisfy: [:i | i isNil not]		! !!DrGCoordinatesBuilder methodsFor: 'as yet unclassified' stamp: ''!itemInstanceFrom: node"build an item from a XML description""this builder can create multiple item at once (coordinates X and Y), so we needto select the one we want"	| nodeType |	(self parentsById: node) do: [:each |	self addItem: {each} at: 0@0].	nodeType := (node  attributeAt: #type) asSymbol.	^ self getItem detect: [:item | item nodeType = nodeType]! !!DrGCoordinatesBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty 		and: [aMathItemCollection first isPointItem			or: [aMathItemCollection first isLineItem			or: [aMathItemCollection first isCircleItem			or: [aMathItemCollection first isVectorItem]]]]! !!DrGCoordinatesBuilder methodsFor: 'xml' stamp: ''!postProcess: item from: node	super postProcess: item from: node.	self parseValuePosition: node of: item.! !!DrGCoordinatesBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	pointA ifNotNil: [^{DrGValuePtabscissaItem	. DrGValuePtordinateItem}].	vector ifNotNil: [^{DrGValueVectorabscissaItem . DrGValueVectorordinateItem}].	circle ifNotNil: [^ DrGEquationCircleItem].	line ifNotNil: [^ DrGEquationLineItem]! !!DrGCoordinatesBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Vector or point coordinates, circle or line equation.' translated! !!DrGCoordinatesBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Coordinates, equation' translated! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!costume: anObject	"Set the value of costume"	costume := anObject! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!borderColor	self shouldNotImplement ! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!feedback: aBoolean" Do I provide feedback when mouse over me?"	feedback := aBoolean.	self changed! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!color: anObject	"Set the value of color"	color := anObject.	self isHidden ifFalse: [costume color: color].	self changed! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!hidden	^ self isHidden! !!DrGCostumeStyle methodsFor: 'initialize-release' stamp: ''!release	self breakDependents ! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!rename	costume textMorph		ifNil: [costume textMorph: 'edit me' translated].	DrGeoSystem isTablet		ifFalse: [costume textMorph launchMiniEditor: ActiveEvent]		ifTrue: [	| answer| 			DrGeoSystem showVirtualKeyboard: true.			answer := self view 				textEntry:  'Rename this object' translated 				title: 'Rename this object' translated 				entryText: costume mathItem name.			DrGeoSystem showVirtualKeyboard: false.			answer ifNil: [^self].			costume textMorph: answer.			costume redraw]! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!mathItem	^ costume mathItem! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!hiddenWidget	^ 'Hide' translated ->		(self view			newCheckboxFor: self 			getSelected: #hidden			setSelected: #hidden: 			label:  '          ' 			help:  'Toggle to hide the object.' translated)! !!DrGCostumeStyle methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	aNode 		attributeAt: #color put: self baseColor name asString capitalized;		attributeAt: #masked put: hidden asString capitalized;		attributeAt: #feedback put: feedback asString capitalized! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!feedback	^ feedback! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!nameWidget	^ 'Name' translated ->		((self view			newTextEntryFor: costume 			getText: #name 			setText: #textMorph: 			help: 'Rename this object.' translated) minWidth: 10;				changedAction: [:text| costume textMorph: text asString])! !!DrGCostumeStyle methodsFor: 'testing' stamp: ''!isFilled	^ false! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!color	"Answer the value of color"	^hidden ifTrue: [DrGStylePreference hiddenColor] ifFalse: [color]! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!hidden: anObject 	"Set the value of isHidden"	hidden := anObject.	hidden 		ifTrue: 			[costume stopBlinking.			costume color: DrGStylePreference hiddenColor;				borderColor: DrGStylePreference hiddenColor]		ifFalse: [self color: self color].	self changed! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!styleWidget| controls |	controls := 	OrderedCollection new		add: self nameWidget;		add: self colorWidget;		yourself.	controls addAll: self myWidgets.	controls add: self feedbackWidget.	controls add: self hiddenWidget.	costume isLockable ifTrue: [controls add: self lockedWidget].	^ (self view newLabelGroup: controls) layoutInset: 4! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!baseColor	"Answer color whatever it is hidden or not"	^ color alpha: 1! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!colorIndex	^DrGStylePreference colorIndexOf: self color! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!isHidden	"Answer the value of isHidden"	^ hidden ifNil: [hidden := false]! !!DrGCostumeStyle methodsFor: 'testing' stamp: ''!isFeedback	^ feedback ! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!colorIndex: index	self color: (DrGStylePreference colorFor: index)! !!DrGCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	feedback := true.	hidden := false.	self addDependent: costume! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!toggleHidden	self hidden: self isHidden not! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!costume	"Answer the value of costume"	^ costume! !!DrGCostumeStyle methodsFor: 'accessing' stamp: ''!view	^ costume view! !!DrGCostumeStyle methodsFor: 'testing' stamp: ''!isNotHidden	"Answer the value of isHidden"	^ hidden not! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!colorMorphCollection	^ DrGStylePreference colorMorphCollection! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!feedbackWidget	^ 'Feedback' translated ->		(self view			newCheckboxFor: self 			getSelected: #feedback			setSelected: #feedback: 			label:  '          ' 			help:  'Toggle to provide feedback and interaction when the mouse cursor is over the object.' translated)! !!DrGCostumeStyle methodsFor: 'testing' stamp: ''!isTranslucent 	^ false! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!colorWidget	^ 'Colour' translated ->		((self view			newMorphDropListFor: self			list: #colorMorphCollection			getSelected: #colorIndex			setSelected: #colorIndex:			help: 'Set the colour.' translated) minWidth: DrGIcons menuExtent x + 35)! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!lockedWidget	^ 'Lock' translated ->		(self view			newCheckboxFor: costume			getSelected: #locked			setSelected: #locked: 			label: '          '  			help:  'Toggle to lock the object to its position.' translated)! !!DrGCostumeStyle methodsFor: 'widget' stamp: ''!myWidgets"overwrite to add specific widget to edit specific style"	^ OrderedCollection new! !!DrGCostumeStyle class methodsFor: 'instance creation' stamp: ''!newWith: aCostume	^self basicNew costume: aCostume; initialize! !!DrGCurveCostume methodsFor: 'accessing' stamp: ''!borderColor: aColor	morph borderColor: (aColor alpha: 1)! !!DrGCurveCostume methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	anchorAbscissa := 0.5! !!DrGCurveCostume methodsFor: 'testing' stamp: ''!isCurveCostume	^ true! !!DrGCurveCostume methodsFor: 'layout' stamp: ''!constraintTextPosition: aPoint|center vector|	center := mathItem closestPointTo: (drawable morphToWorld: aPoint).	anchorAbscissa := mathItem abscissaOf: center.	center := drawable worldToMorph: center.	vector := aPoint - center.	^textPositionDelta := self computeTextPositionDelta: vector.! !!DrGCurveCostume methodsFor: 'accessing' stamp: ''!anchorAbscissa: number	anchorAbscissa := number ! !!DrGCurveCostume methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	aNode attributeAt: #anchor put: anchorAbscissa asString.	super writeAttributesTo: aNode.! !!DrGCurveCostume methodsFor: 'layout' stamp: ''!textPosition	^(drawable worldToMorph: (mathItem pointAt: anchorAbscissa)) + textPositionDelta! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!thickness: anObject	"Set the value of thickness"	thickness := anObject.	costume width: self width.	self changed! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!thicknessIndex: integer	"Set the value of thickness"	self thickness: (DrGStylePreference thicknessFor: integer)! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!borderColor	"Answer the value of border color"	^hidden ifTrue: [DrGStylePreference hiddenColor] ifFalse: [color alpha: 1]! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!color: aColor"Set the value of fill color and border color"	color := self isTranslucent ifTrue: [aColor alpha: 0.3] ifFalse: [aColor alpha: 1].	self isHidden ifFalse: [		costume borderColor: color.		costume color: (self isFilled ifTrue: [color] ifFalse: [Color transparent])].	self changed! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!lineStyle: aSymbol	"Set the value of lineStyle"	lineStyle := aSymbol.	costume dash: (DrGStylePreference styleFor: aSymbol).	self changed! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!thickness	"Answer the value of thickness"	^ thickness! !!DrGCurveCostumeStyle methodsFor: 'widget' stamp: ''!thicknessMorphCollection	^ DrGStylePreference thicknessMorphCollection! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!thicknessIndex	"Answer the index of thickness"	^DrGStylePreference thicknessIndexOf: thickness! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!lineStyle	"Answer the value of lineStyle"	^ lineStyle! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!lineStyleIndex	"Answer the index of lineStyle"	^ DrGStylePreference lineStyleIndexOf: lineStyle! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!lineStyleIndex: integer	"Set the value of lineStyle"	self lineStyle: (DrGStylePreference lineStyleSymbols at: integer)! !!DrGCurveCostumeStyle methodsFor: 'widget' stamp: ''!styleLineMorphCollection	^ DrGStylePreference styleLineMorphCollection! !!DrGCurveCostumeStyle methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	super writeAttributesTo: aNode.	aNode attributeAt: #style put: self lineStyle.	aNode attributeAt: #thickness put: self thickness.! !!DrGCurveCostumeStyle methodsFor: 'widget' stamp: ''!thicknessWidget	^ 'Thickness' translated ->		(self view			newMorphDropListFor: self			list: #thicknessMorphCollection			getSelected: #thicknessIndex			setSelected: #thicknessIndex:			help: 'Set the thickness of the line.' translated)! !!DrGCurveCostumeStyle methodsFor: 'widget' stamp: ''!myWidgets 	^ OrderedCollection with: self lineWidget with: self thicknessWidget! !!DrGCurveCostumeStyle methodsFor: 'widget' stamp: ''!lineWidget	^ 'Style' translated ->		(self view			newMorphDropListFor: self			list: #styleLineMorphCollection			getSelected: #lineStyleIndex			setSelected: #lineStyleIndex:			help: 'Set the style of the line.' translated)! !!DrGCurveCostumeStyle methodsFor: 'accessing' stamp: ''!width	"give the width"	^ DrGStylePreference widthFor: thickness! !!DrGDeleteCommand commentStamp: ''!A command to delete a mathItem and its dependant.!!DrGDeleteCommand methodsFor: 'command' stamp: ''!execute	domain factory remove: mathItems! !!DrGDeleteCommand methodsFor: 'as yet unclassified' stamp: ''!release	super release.	mathItems do: [:m | m release].! !!DrGDeleteCommand methodsFor: 'command' stamp: ''!unexecute	mathItems do: [:aMathItem|		domain factory add: aMathItem.		domain triggerEvent: #redoMathItem with: aMathItem]	! !!DrGDeleteCommand methodsFor: 'as yet unclassified' stamp: ''!deleteMathItem: aMathItem 	mathItems := domain factory orderedDependentMathItem: aMathItem.! !!DrGDeleteCommand class methodsFor: 'as yet unclassified' stamp: ''!for: aMathItem in: aDomain	^self new		domain: aDomain;		deleteMathItem: aMathItem.! !!DrGDeleteTool commentStamp: ''!A tool to delete the mathItem. With subclass from StyleTool to have hidden costume to be display, so we can delete these ones aswell.!!DrGDeleteTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint	^self myCostumesAt: aPoint ! !!DrGDeleteTool methodsFor: 'updating' stamp: ''!reset	super reset.	self switchState: DrGDeleteToolState! !!DrGDeleteTool class methodsFor: 'documentation' stamp: ''!description 	^'Erase an object and all its depedencies.' translated! !!DrGDeleteTool class methodsFor: 'documentation' stamp: ''!title 	^'Eraser' translated ! !!DrGDeleteToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	aCostumeCollection 		ifNotEmpty: 			[self context presenter 				deleteMathItem: aCostumeCollection first;				selectToolAfterBuilding].	self context reset! !!DrGDevelopment commentStamp: ''!Preferences for a Dr. Geo development environment!!DrGDevelopment methodsFor: 'path' stamp: ''!repoPath	"The path to the Dr. Geo source code local repository"	^ self rootPath / 'drgeo'! !!DrGDevelopment methodsFor: 'path' stamp: ''!examplesPath	^ self repoPath / 'build' / 'examples'! !!DrGDevelopment methodsFor: 'path' stamp: ''!myExportsPath	^self repoPath / 'MyExports'! !!DrGDevelopment methodsFor: 'testing' stamp: ''!isSystem"I hold the Dr. Geo development environment preferences"	^ true! !!DrGDevelopment methodsFor: 'path' stamp: ''!myScriptsPath	^self repoPath / 'build' / 'SmalltalkSketches'! !!DrGDevelopment methodsFor: 'path' stamp: ''!mySketchesPath	^self repoPath / 'MySketches'! !!DrGDevelopment methodsFor: 'initialization' stamp: ''!initialize	canWeDisplayLoader := false.	PolymorphSystemSettings uiThemeClass: PharoLightTheme.	WorldState desktopMenuPragmaKeyword:  'worldMenu'.	WorldState desktopMenuTitle: 'World'.	Display newDepth: 32.	TaskbarMorph showTaskbar: true.	MenubarMorph showMenubar: true.	SystemWindow fullscreenMargin: 0.! !!DrGDevelopment methodsFor: 'path' stamp: ''!fontPath	^  self rootPath / 'build' / 'fonts'! !!DrGDevelopment methodsFor: 'path' stamp: ''!rootPath	^ FileLocator imageDirectory asFileReference! !!DrGDirectionItem methodsFor: 'testing' stamp: ''!isCloneable	^ true! !!DrGDirectionItem methodsFor: 'printing' stamp: ''!printOn: aStream 		self printCoordinates: origin  on: aStream.	aStream nextPutAll: '->'.	self printCoordinates: vector on: aStream ! !!DrGDirectionItem methodsFor: 'updating' stamp: ''!symmetryUpdate	self doParentsExist ifTrue:		[self origin: (2 * parents second point) - parents first origin.		self direction: parents first direction negated].! !!DrGDirectionItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem	^true! !!DrGDirectionItem methodsFor: 'updating' stamp: ''!rotationUpdate	self doParentsExist ifTrue:		[origin := parents first origin			rotateBy: parents third valueItem negated			about: parents second point.		vector := parents first direction 			rotateVector: parents third valueItem].! !!DrGDirectionItem methodsFor: 'accessing' stamp: ''!basicType 	^#direction! !!DrGDirectionItem methodsFor: 'updating' stamp: ''!translationUpdate	self doParentsExist ifTrue: 		[self origin: parents first origin + parents second direction.		self direction: parents first direction].! !!DrGDirectionItem methodsFor: 'accessing' stamp: ''!direction	^vector ! !!DrGDirectionItem methodsFor: 'accessing' stamp: ''!origin: anOrigin	origin := anOrigin ! !!DrGDirectionItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isDirectionItem	^true! !!DrGDirectionItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		["default behavior for segment, line and ray defined by 2 points"		self origin: (parents at: 1) point.		self direction: (parents at: 2) point - (self origin).		self direction =( 0@0) ifTrue: [exist := false]].! !!DrGDirectionItem methodsFor: 'accessing' stamp: ''!origin	^origin ! !!DrGDirectionItem methodsFor: 'testing' stamp: ''!isCollinearWith: aDirection 	^ (vector crossProduct: aDirection direction)		closeTo: 0! !!DrGDirectionItem methodsFor: 'updating' stamp: ''!homothetyUpdate|center|	self doParentsExist ifTrue:		[center := parents second point.		origin := center +			(parents third valueItem * (parents first origin - center)).		vector := parents first direction * parents third valueItem].! !!DrGDirectionItem methodsFor: 'accessing' stamp: ''!normal	^ vector normal! !!DrGDirectionItem methodsFor: 'computing' stamp: ''!intersectionWithDirection: aDirectionItem| det c1 c2 p direction |	direction := aDirectionItem  direction.	det := vector crossProduct: direction.	(det closeTo: 0) ifTrue: [^ nil].	c1 := origin crossProduct: vector.	c2 := aDirectionItem  origin crossProduct: direction.	p := ((c1 negated * direction x + (c2 * vector x)) / det) @		((vector y * c2 - (direction y * c1)) / det).	^ p! !!DrGDirectionItem methodsFor: 'accessing' stamp: ''!direction: aDirection	vector := aDirection ! !!DrGDirectionItem methodsFor: 'updating' stamp: ''!reflexionUpdate	self doParentsExist ifTrue:		[self origin: (parents first origin							reflexionBy: parents second origin 							direction: parents second direction).		self direction: (parents first direction 								vectorReflexionBy: parents second direction)].! !!DrGDirectionItem class methodsFor: 'constants' stamp: ''!twoPi	^TwoPi! !!DrGDirectionItem class methodsFor: 'class initialization' stamp: ''!initialize	InvPi := 0.31830988618379067154.	Inv2Pi := 0.636619772367581.	TwoPi	:= 6.28318530717958647692528676655900576! !!DrGDirectionItem class methodsFor: 'constants' stamp: ''!invPi	^InvPi! !!DrGDirectionItem class methodsFor: 'constants' stamp: ''!inv2Pi	^Inv2Pi! !!DrGDirectory commentStamp: ''!A DrGDirectory is Facade to the DrGeo file on local file system or remotre ressources on sever, as FTP or WebDav.	- sketchFilename : hold a sketch filename for regular use (the user does not have to enter it again)	- location: the location where the files are kepts (path or any arbitrary string)!!DrGDirectory methodsFor: 'accessing' stamp: ''!getFile: aFilename	"return a stream on the given aFilename, it can a be a sketch or a preview file"	| lowercaseFilename |		((lowercaseFilename := aFilename asLowercase) endsWith: '.png')		ifTrue: [ ^ self getPreviewFile: aFilename].	(lowercaseFilename endsWith: '.fgeo') ifTrue: [ ^ self getSketchFile: aFilename ].	self error: 'Unknown file format'! !!DrGDirectory methodsFor: 'protocol' stamp: ''!close! !!DrGDirectory methodsFor: 'accessing' stamp: ''!sketchFiles	"return only the drgeo files"	^ (self fileNames select: [:aFilename | aFilename endsWith: '.fgeo' ]) sort: 		[:a :b | a asLowercase <= b asLowercase ]! !!DrGDirectory methodsFor: 'accessing' stamp: ''!parentDirectoriesUpTo: dirName	"return an array with parent directories up to dirName"	self deprecated: 'Not used and probably not working.'.! !!DrGDirectory methodsFor: 'protocol' stamp: ''!parentDirectory	| index | 	self deprecated: 'Not used and probably not working.'.	^ (index := self location findLast: [:each | each = self pathNameDelimiter]) = 0		ifTrue: [self pathNameDelimiter asString]		ifFalse: [self location copyFrom: 1 to: (index - 1 max: 1)]		! !!DrGDirectory methodsFor: 'protocol' stamp: ''!location	^ location ! !!DrGDirectory methodsFor: 'protocol' stamp: ''!makeDirectory: aString	self subclassResponsibility ! !!DrGDirectory methodsFor: 'protocol' stamp: ''!pathNameDelimiter	self deprecated: 'Not used and probably not working.'.	self subclassResponsibility! !!DrGDirectory methodsFor: 'accessing' stamp: ''!getPreviewFile: aFilename"Get a stream on a aFilename PNG bitmap"	self subclassResponsibility ! !!DrGDirectory methodsFor: 'accessing' stamp: ''!sketchFilename: string	sketchFilename := string! !!DrGDirectory methodsFor: 'accessing' stamp: ''!fileNames	"return an array with file list entry, including both sketch and preview files"	self subclassResponsibility ! !!DrGDirectory methodsFor: 'protocol' stamp: ''!ensureConnection ! !!DrGDirectory methodsFor: 'protocol' stamp: ''!goParentDirectory	self deprecated: 'Not used and probably not working.'.	self location: self parentDirectory! !!DrGDirectory methodsFor: 'accessing' stamp: ''!directories	"return an array with the directory entries"	self deprecated: 'Not used and probably not working.'.	self subclassResponsibility ! !!DrGDirectory methodsFor: 'protocol' stamp: ''!location: aDirectory	location := aDirectory! !!DrGDirectory methodsFor: 'testing' stamp: ''!fileExists: aFilename	^ self fileNames includes: aFilename ! !!DrGDirectory methodsFor: 'helper' stamp: ''!previewFilenameFor: aSketchFilename	^ (aSketchFilename asLowercase endsWith: '.fgeo') 		ifTrue:  [(aSketchFilename allButLast: 4), 'png']		ifFalse: [ self error: aSketchFilename, ' is not a sketch file.' ]	! !!DrGDirectory methodsFor: 'accessing' stamp: ''!put: stream into: filename	self subclassResponsibility ! !!DrGDirectory methodsFor: 'accessing' stamp: ''!put: stream	sketchFilename ifNotNil: [self put: stream into: sketchFilename]! !!DrGDirectory methodsFor: 'accessing' stamp: ''!sketchFilename	^ sketchFilename! !!DrGDirectory methodsFor: 'testing' stamp: ''!isLocal	^ false! !!DrGDirectory methodsFor: 'accessing' stamp: ''!getSketchFile: filename	self subclassResponsibility ! !!DrGDirectory methodsFor: 'testing' stamp: ''!isLan	^ false! !!DrGDirectory methodsFor: 'accessing' stamp: ''!deleteFile: thisFilename	"Delete the file in the given resource"	self subclassResponsibility ! !!DrGDirectory methodsFor: 'testing' stamp: ''!isRemote	^ false! !!DrGDirectory methodsFor: 'testing' stamp: ''!isValid	^ true! !!DrGDirectoryFTP commentStamp: ''!I access DrGeo sketches located in a FTP server. 	- client : the FTP connection client!!DrGDirectoryFTP methodsFor: 'testing' stamp: ''!shareExists: aShare	^ self fileExists: aShare ! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!location: aPath	super location: aPath.	[client changeDirectoryTo: aPath] 		on: TelnetProtocolError 		do: [:ex | "check error, eventually create directory"			ex code = 550 				ifTrue: [					[self makeDirectory: aPath]						on: Error						do: [self close.							^ false]]				ifFalse: [self close.					^ false]].		^ true! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!close	[client quit] on: Error do: []! !!DrGDirectoryFTP methodsFor: 'accessing' stamp: ''!put: stream into:  aFilename	|readonlyStream|	[client deleteFileNamed: aFilename] on: Error do: [].	client binary.	[readonlyStream := ReadStream  on: stream contents.	client putFileStreamContents: readonlyStream as: aFilename] ensure: 		[readonlyStream close]! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!makeDirectory: aString	client makeDirectory: aString! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!pathNameDelimiter	^ $/! !!DrGDirectoryFTP methodsFor: 'accessing' stamp: ''!getPreviewFile: aFilename	^ReadStream on: (client getFileNamed: aFilename) asByteArray! !!DrGDirectoryFTP methodsFor: 'accessing' stamp: ''!getSketchFile: filename	^ReadStream on: (client getFileNamed: filename)! !!DrGDirectoryFTP methodsFor: 'accessing' stamp: ''!fileNames	^(client getFileList subStrings: String crlf) 		collect: [:file | file trimBoth] 		thenSelect: [:file | file notEmpty]! !!DrGDirectoryFTP methodsFor: 'accessing' stamp: ''!deleteFile: thisFilename	[client deleteFileNamed: thisFilename] on: Error do: [].! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!ensureConnection	client isConnected ifFalse:		[client ensureConnection.		self location: location]! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!host: hostName	client := FTPClient openOnHostNamed: hostName.! !!DrGDirectoryFTP methodsFor: 'testing' stamp: ''!isRemote	^ true! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!login: user password: password	client loginUser: user password: password.	client binary! !!DrGDirectoryFTP methodsFor: 'accessing' stamp: ''!directories| list file |	self deprecated: 'Not used and probably not working.'.	list := (client getDirectory subStrings: String crlf) 		collect: [:aFilename | aFilename trimBoth] 		thenSelect: [:aFilename | aFilename notEmpty].			^ list allButFirst 		select: [:each | each first = $d]		thenCollect: [:dir | dir substrings last]! !!DrGDirectoryFTP methodsFor: 'protocol' stamp: ''!slash	^ $/! !!DrGDirectoryFTP class methodsFor: 'instance creation' stamp: ''!host: hostName	^ self new host: hostName! !!DrGDirectoryLan commentStamp: ''!I access sketch files shared from another Dr.Geo instance in the same LAN, aka teacher share.!!DrGDirectoryLan methodsFor: 'accessing' stamp: ''!sketchFiles	"overriden for optimization, return only the drgeo files"	^ (DrGeoLanClient current client path: '/') get 		ifNil: [ #() ]		ifNotNil: [:array | array lines]! !!DrGDirectoryLan methodsFor: 'accessing' stamp: ''!put: stream into: filename	"It is not allowed to push contentn on a Lan share"! !!DrGDirectoryLan methodsFor: 'accessing' stamp: ''!getPreviewFile: aFilename"Get a stream on a aFilename PNG bitmap"	^ (DrGeoLanClient current client path: '/preview/'; addPath: aFilename) get contents readStream! !!DrGDirectoryLan methodsFor: 'accessing' stamp: ''!getSketchFile: aFilename	^ (DrGeoLanClient current client path: '/sketch/'; addPath: aFilename) get contents readStream! !!DrGDirectoryLan methodsFor: 'accessing' stamp: ''!fileNames	"return an array with file list entry, including both sketch and preview files"	^ (DrGeoLanClient current client path: '/all') get lines! !!DrGDirectoryLan methodsFor: 'testing' stamp: ''!isLan	^ true! !!DrGDirectoryLocal commentStamp: ''!A DrGDirectoryLocal is facade to local resources on the host.!!DrGDirectoryLocal methodsFor: 'testing' stamp: ''!fileExists: aFilename	^ (location asFileReference / aFilename) exists! !!DrGDirectoryLocal methodsFor: 'accessing' stamp: ''!put: stream into: filename	(location  asFileReference / filename) ensureDelete binaryWriteStreamDo: [ :fileStream | 		fileStream nextPutAll: stream contents]! !!DrGDirectoryLocal methodsFor: 'testing' stamp: ''!isLocal	^ true! !!DrGDirectoryLocal methodsFor: 'accessing' stamp: ''!getPreviewFile: aFilename	^ (location asFileReference / aFilename) binaryReadStream	! !!DrGDirectoryLocal methodsFor: 'accessing' stamp: ''!getSketchFile: aFilename	^ (location asFileReference / aFilename) readStream! !!DrGDirectoryLocal methodsFor: 'accessing' stamp: ''!fileNames	^ location asFileReference fileNames! !!DrGDirectoryLocal methodsFor: 'protocol' stamp: ''!pathNameDelimiter	self deprecated: 'Not used and probably not working.'.	^ FileSystem disk delimiter! !!DrGDirectoryLocal methodsFor: 'helpers' stamp: ''!absolutePath: aFilename 	^ (location asFileReference / aFilename) pathString ! !!DrGDirectoryLocal methodsFor: 'accessing' stamp: ''!deleteFile: thisFilename	(location asFileReference / thisFilename) delete! !!DrGDirectoryLocal methodsFor: 'accessing' stamp: ''!directories	self deprecated: 'Not used and probably not working.'.	^ location asFileReference directoryNames! !!DrGDrawable commentStamp: ''!I represent the area/place where a Drgeo figure is drawn. It is a subpart of the GeometricView - valueItem, dottedLines: we can display dotted line between a selected value and its parents!!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseUp: evt	evt shiftPressed 		ifTrue: [self tool handleReleaseShiftKey: evt cursorPoint]		ifFalse: [self tool handleRelease: evt cursorPoint].	underMouse hide.	(self bounds containsPoint: evt cursorPoint) 		ifFalse: [self currentHand showTemporaryCursor: Cursor normal]! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!circle: aCRGesture| center aPoint circle|	center := self getCircleCenter: aCRGesture.	aPoint := self getCirclePoint: aCRGesture.	circle := DrGCircle2ptsItem newWith: {center . aPoint}.	app domain createFromMathItem: circle! !!DrGDrawable methodsFor: 'drawing axes & grid' stamp: ''!drawGridOn: aCanvas	| worldBound start end morphCoordinate|	worldBound := self worldBound.	"horizontal lines"	start := self left.	end := self right.	(worldBound origin y roundTo: gridScale) to: (worldBound corner y roundTo: gridScale) by: gridScale do: [:y |		morphCoordinate := self worldOrdinateToMorph: y. 		aCanvas 			line: start @ morphCoordinate 			to: end @ morphCoordinate 			color: Color lightGray].	"vertical lines"	start := self bottom.	end := self top.	(worldBound origin x roundTo: gridScale) to: (worldBound corner x roundTo: gridScale) by: gridScale do: [:x |		morphCoordinate := self worldAbscissaToMorph: x.		aCanvas 			line: morphCoordinate @ start			to: morphCoordinate @ end			color: Color lightGray]! !!DrGDrawable methodsFor: 'geometry' stamp: ''!worldAbscissaToMorph: x	"Transform point abscissa from DrGeo-World to Morph system"	^self extent x / 2 + (scale * (x - ox)) + self position x ! !!DrGDrawable methodsFor: 'geometry' stamp: ''!worldToPixel: aFloat"Transform Dr. Geo world unit to morph unit"	^ aFloat * scale! !!DrGDrawable methodsFor: 'drawing axes & grid' stamp: ''!drawAxesOnAthens: aCanvas	| origin worldBound grad |	origin := self worldToMorph: 0@0.	self line: (self position x + 1) @ origin y 		to: (self right - 1) @ origin y 		width: 1		color: Color lightGray		onAthens: aCanvas.	self line: origin x @ (self position y + 1)		to: origin x @ (self bottom -1)		width: 1		color: Color lightGray		onAthens: aCanvas.	worldBound := self worldBound.	aCanvas pathTransform restoreAfter: [	aCanvas pathTransform scaleBy: 1.00001.	"x-axis label in [0 ; +inf["		grad := 0.		0 to: (worldBound corner x - gridScale roundTo: gridScale) by: gridScale do: [:x |			aCanvas 	morphicDrawString: (self labelForAxes: grad)				at: (self worldAbscissaToMorph: x) @ origin y + (1@1)				font: DrGeoSystem canvasFont 				color: Color lightGray.			self line: (self worldAbscissaToMorph: x) @ origin y - (0@2) 				to:  (self worldAbscissaToMorph: x) @ origin y + (0@2)				width: 1				color: Color lightGray				onAthens: aCanvas.			grad := grad + gridScale].		"x-label in ]-inf ; x["		grad := gridScale negated.		grad to: (worldBound origin x roundTo: gridScale) by: gridScale negated do: [:x |			aCanvas 	morphicDrawString: (self labelForAxes: grad)				at: (self worldAbscissaToMorph: x) @ origin y + (1@1)				font: DrGeoSystem canvasFont 				color: Color lightGray.			self line: (self worldAbscissaToMorph: x) @ origin y - (0@2) 				to:  (self worldAbscissaToMorph: x) @ origin y + (0@2)				width: 1				color: Color lightGray				onAthens: aCanvas.							grad := grad - gridScale].				"y-label in [0 ; +inf["		grad := gridScale.		gridScale to: (worldBound corner y roundTo: gridScale) by: gridScale do: [:y |			aCanvas morphicDrawString: (self labelForAxes: grad)				at: origin x @ (self worldOrdinateToMorph: y) + (1@1)				font: DrGeoSystem canvasFont 				color: Color lightGray.			self line: origin x @ (self worldOrdinateToMorph: y) - (2@0)				to:  origin x @ (self worldOrdinateToMorph: y) + (2@0)				width: 1				color: Color lightGray				onAthens: aCanvas.							grad := grad + gridScale].		"y-label in ]-inf ; 0["		grad := gridScale negated.		grad to: (worldBound origin y roundTo: gridScale) by: gridScale negated do: [:y |			aCanvas 				morphicDrawString: (self labelForAxes: grad)				at: origin x @ (self worldOrdinateToMorph: y) + (1@1)				font: DrGeoSystem canvasFont 				color: Color lightGray.			self line: origin x @ (self worldOrdinateToMorph: y) - (2@0)				to:  origin x @ (self worldOrdinateToMorph: y) + (2@0)				width: 1				color: Color lightGray				onAthens: aCanvas.							grad := grad - gridScale]].! !!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseLeave: evt	self currentHand showTemporaryCursor: Cursor normal.	^ super mouseLeave: evt! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!right: aNumber 	ox := ox - (self pixelToWorld: aNumber).	app redrawCostumes! !!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseWheel: evt	| increment orginalWorldCursorPoint |	orginalWorldCursorPoint := self morphToWorld: evt cursorPoint.	increment := evt shiftPressed ifTrue: [6] ifFalse: [2].	evt isDown		ifTrue: [ self scaleNoRedraw: increment ].	evt isUp		ifTrue: [ self scaleNoRedraw: increment negated ].	"cursor point is at a constant world position"	self		moveOxy: (self morphToWorld: evt cursorPoint) - orginalWorldCursorPoint! !!DrGDrawable methodsFor: 'drawing axes & grid' stamp: ''!drawAxesOn: aCanvas	| origin worldBound grad |	origin := self worldToMorph: 0@0.	aCanvas 		line: (self position x + 1) @ origin y  to: (self right - 1) @ origin y width: 2 color: Color lightGray;		line: origin x @ (self position y + 1) to: origin x @ (self bottom -1) width: 2 color: Color lightGray.	worldBound := self worldBound.	"x-axis label in [0 ; +inf["	grad := 0.	0 to: (worldBound corner x - gridScale roundTo: gridScale) by: gridScale do: [:x |		aCanvas 			drawString: (self labelForAxes: grad)			at: (self worldAbscissaToMorph: x) @ origin y + (1@1)			font: DrGeoSystem canvasFont 			color: Color lightGray  .		grad := grad + gridScale].	"x-label in ]-inf ; x["	grad := gridScale negated.	grad to: (worldBound origin x roundTo: gridScale) by: gridScale negated do: [:x |		aCanvas 			drawString: (self labelForAxes: grad)			at: (self worldAbscissaToMorph: x) @ origin y + (1@1)			font: DrGeoSystem canvasFont 			color: Color lightGray.		grad := grad - gridScale].			"y-label in [0 ; +inf["	grad := gridScale.	gridScale to: (worldBound corner y roundTo: gridScale) by: gridScale do: [:y |		aCanvas 			drawString: (self labelForAxes: grad)			at: origin x @ (self worldOrdinateToMorph: y) + (1@1)			font: DrGeoSystem canvasFont 			color: Color lightGray  .		grad := grad + gridScale].	"y-label in ]-inf ; 0["	grad := gridScale negated.	grad to: (worldBound origin y roundTo: gridScale) by: gridScale negated do: [:y |		aCanvas 			drawString: (self labelForAxes: grad)			at: origin x @ (self worldOrdinateToMorph: y) + (1@1)			font: DrGeoSystem canvasFont 			color: Color lightGray  .		grad := grad - gridScale].	! !!DrGDrawable methodsFor: 'accessing' stamp: ''!oy: integer	oy := integer asNumber! !!DrGDrawable methodsFor: 'geometry' stamp: ''!morphToVector: aPoint"Transform vector coordinates in the morph system to the DrGeo system"	^ Point 		x: aPoint x asFloat / scale		y: aPoint y negated asFloat / scale.! !!DrGDrawable methodsFor: 'initialize-release' stamp: ''!release	balloonTarget dismissMorph.	self submorphsDo: [:m | 		self removeMorph: m.		m dismissMorph].	super release.	app := nil! !!DrGDrawable methodsFor: 'geometry' stamp: ''!worldBound	^ Rectangle		origin: (self morphToWorld: self bottomLeft)		corner: (self morphToWorld: self topRight)! !!DrGDrawable methodsFor: 'balloon target' stamp: ''!tip: aText at: aPoint	tipOn ifFalse: [^self].	self addMorphBack: balloonTarget.	DrGeoSystem isTablet		ifTrue: [balloonTarget center: aPoint + (40 @ -40)]		ifFalse: [balloonTarget center: aPoint].	balloonTarget setBalloonText: aText.	balloonTarget showBalloon: (balloonTarget balloonText)! !!DrGDrawable methodsFor: 'balloon target' stamp: ''!hideTip	balloonTarget deleteBalloon.	self removeMorph: balloonTarget.! !!DrGDrawable methodsFor: 'callback canvas' stamp: ''!moveOy: increment	oy := oy + increment.	app redrawCostumes! !!DrGDrawable methodsFor: 'accessing' stamp: ''!setScaleTo: number	scale := number asNumber! !!DrGDrawable methodsFor: 'dropping/grabbing' stamp: ''!acceptDroppingMorph: dropped event: evt"Here we encapsulated the image morph (dropped) in a DrGBitmapItem.We do not really need a builder to do so but we have to process it in the command stack"	| item |	item := (DrGBitmapItem newWith: {self morphToWorld: evt cursorPoint})		data: (DrGSurfacePaintResource forSurfaceProvider:self  withData: (self resizeImage: dropped form));		insertAtScale: self scale.	self domain createFromMathItem: item.! !!DrGDrawable methodsFor: 'axes' stamp: ''!axesVisibleOnOff	self setProperty: #axesVisible toValue: self axesVisible not.	self changed! !!DrGDrawable methodsFor: 'gridding' stamp: ''!updateGrid	self axesVisible 		ifTrue: [ self updateGridScaleForAxes]		ifFalse: [ self updateGridScaleForGrid]! !!DrGDrawable methodsFor: 'gridding' stamp: ''!updateGridScaleForAxes	gridScale := 50 / scale.	gridScale >= 1 		ifTrue: [			gridScale := gridScale roundTo: 0.5.			gridScale asInteger = gridScale ifTrue: [gridScale := gridScale asInteger]] 		ifFalse: [			gridScale := 1 / ((1 / gridScale) rounded)]! !!DrGDrawable methodsFor: 'event handling' stamp: ''!handlesMouseWheel: evt	^ true! !!DrGDrawable methodsFor: 'accessing' stamp: ''!app	^app! !!DrGDrawable methodsFor: 'gridding' stamp: ''!updateGridScaleForGrid	gridScale := 5! !!DrGDrawable methodsFor: 'event handling' stamp: ''!wantsHalo	^false! !!DrGDrawable methodsFor: 'event handling' stamp: ''!windowEvent: anEvent	anEvent type == #windowClose		ifTrue: [ DrGeo quit]! !!DrGDrawable methodsFor: 'geometry' stamp: ''!worldToMorph: aPoint	"Transform point coordinate from DrGeo-World to Morph system"	^ (self worldAbscissaToMorph: aPoint x) @ (self worldOrdinateToMorph: aPoint y)! !!DrGDrawable methodsFor: 'balloon target' stamp: ''!toggleTip	tipOn := tipOn not! !!DrGDrawable methodsFor: 'drawing axes & grid' stamp: ''!drawGridOnAthens: aCanvas	| worldBound start end morphCoordinate|	worldBound := self worldBound.	"horizontal lines"	start := self left.	end := self right.	(worldBound origin y roundTo: gridScale) to: (worldBound corner y roundTo: gridScale) by: gridScale do: [:y |		morphCoordinate := self worldOrdinateToMorph: y. 		self line: start @ morphCoordinate 			to: end @ morphCoordinate			width: 0.5			color: Color lightGray			onAthens: aCanvas].	"vertical lines"	start := self bottom.	end := self top.	(worldBound origin x roundTo: gridScale) to: (worldBound corner x roundTo: gridScale) by: gridScale do: [:x |		morphCoordinate := self worldAbscissaToMorph: x.		self line: morphCoordinate @ start			to: morphCoordinate @ end			width: 0.5			color: Color lightGray			onAthens: aCanvas]! !!DrGDrawable methodsFor: 'accessing' stamp: ''!mostBehindLabel^ submorphs reverse detect: [:aMorph| aMorph class == DrGLabelMorph] ifNone: [nil].		! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!segment: aCRGesture	Transcript show: 'segment'; cr.! !!DrGDrawable methodsFor: 'under mouse' stamp: ''!showUnderMouseMorph	DrGeoSystem ifTablet: [		self updateUnderMouseMorphPosition.		underMouse 			comeToFront;			show].! !!DrGDrawable methodsFor: 'accessing' stamp: ''!scaleNoRedraw: increment	scale := (scale + increment) .	scale < 1 ifTrue: [scale := 1.0].	scale > 1000 ifTrue: [scale := 1000.0].! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!down: aNumber	oy := oy + (self pixelToWorld: aNumber).	app redrawCostumes.! !!DrGDrawable methodsFor: 'geometry' stamp: ''!defaultScalePosition	ox := oy := 0.0.	scale := 34.0.	self updateGrid.	app redrawCostumes ! !!DrGDrawable methodsFor: 'callback canvas' stamp: ''!zoom: extent	scale := (scale + ((extent x + extent y) / 5)) asInteger.	scale := scale min: 200.	app redrawCostumes! !!DrGDrawable methodsFor: 'drawing' stamp: ''!line: a to: b width: width color:  lineColor onAthens: aCanvas	| path |	path := aCanvas createPath: [:builder|		builder absolute;			moveTo: a;			lineTo: b].	aCanvas setShape: path.	(aCanvas setStrokePaint: lineColor) width: width.	aCanvas draw.! !!DrGDrawable methodsFor: 'submorphs-add/remove' stamp: ''!addMorph: newMorph	| aLabel |	newMorph class == DrGLabelMorph ifTrue: [^ self addMorphFront: newMorph].	aLabel := self mostBehindLabel.	aLabel 		ifNil: [self addMorphFront: newMorph]  		ifNotNil: [self addMorph: newMorph behind: aLabel]! !!DrGDrawable methodsFor: 'drawing axes & grid' stamp: ''!labelForAxes: number	gridScale isFloat 		ifTrue: [|integer|			integer := number asInteger.			integer = number ifTrue: [^ integer printString]].		^ (number isInteger not and: [number isFraction]) 			ifTrue: [number printString allButFirst allButLast]			ifFalse: [ number printString]! !!DrGDrawable methodsFor: 'accessing' stamp: ''!labels	^ submorphs select: [:aMorph| aMorph class == DrGLabelMorph].		! !!DrGDrawable methodsFor: 'accessing' stamp: ''!ox: integer	ox := integer asNumber! !!DrGDrawable methodsFor: 'accessing' stamp: ''!tool	^self presenter tool! !!DrGDrawable methodsFor: 'geometry' stamp: ''!pixelToWorld: pixels"Transform morph pixel unit to Dr. Geo world unit"	^ pixels asFloat / scale! !!DrGDrawable methodsFor: 'geometry' stamp: ''!pixelVectorToWorldVector: pixelVector"Transform morph pixel unit to Dr. Geo world unit"	^ (pixelVector asFloatPoint / scale) * (1 @ -1)! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!redo	self presenter redo! !!DrGDrawable methodsFor: 'accessing' stamp: ''!scale: increment	self scaleNoRedraw: increment.	app redrawCostumes.! !!DrGDrawable methodsFor: 'accessing' stamp: ''!app: aDrgeo	app := aDrgeo! !!DrGDrawable methodsFor: 'event handling' stamp: ''!handlesMouseOver: evt	^ true! !!DrGDrawable methodsFor: 'accessing' stamp: ''!ox	^ ox! !!DrGDrawable methodsFor: 'under mouse' stamp: ''!updateUnderMouseMorphPosition	DrGeoSystem ifTablet: 		[ActiveHand position x - self position x > (self width // 2 )			ifTrue: [underMouse position: self position] 			ifFalse: [underMouse position: (self right - underMouse width) @ self position y]]! !!DrGDrawable methodsFor: 'stepping' stamp: ''!wantsSteps	^ (self presenter isTool: #animate) and: [self tool isAnimating]! !!DrGDrawable methodsFor: 'geometry' stamp: ''!extent: aPoint 	super extent: aPoint.	app redrawCostumes.	" XXX we should not need it as I will turn DrGService as a Morph and wheel widgets will be pluggued with laout	app isService ifTrue: 	[app horizontalWheel right: self right - app view wheelWidth;		 bottom: self bottom.	app verticalWheel right: self right;		 bottom: self bottom - app view wheelWidth.	app zoomWheel right: self right;		 top: self top]"! !!DrGDrawable methodsFor: 'event handling' stamp: ''!handleMouseMove: anEvent		"System level event handling."	anEvent wasHandled ifTrue:[^self]. "not interested"	"Our drawable gets #mouseMove iff		* the hand is not dragging anything,			+ and the receiver is the current mouse focus."	(anEvent hand hasSubmorphs) ifTrue:[^self].	self mouseMove: anEvent.! !!DrGDrawable methodsFor: 'event handling' stamp: ''!restartMouseStillDownHandle"We reset the timer"	lastMoveEvent ifNotNil: [			self startStepping: #handleMouseStillDown: 		at: Time millisecondClockValue + self mouseStillDownThreshold		arguments: {lastMoveEvent copy resetHandlerFields}		stepTime: self mouseStillDownStepRate]! !!DrGDrawable methodsFor: 'initialize-release' stamp: ''!dismissMorph	super dismissMorph.	app view dismissMorph ! !!DrGDrawable methodsFor: 'accessing' stamp: ''!presenter	^app presenter! !!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseMove: evt	DrGeoSystem ifNotTablet: [evt yellowButtonPressed ifTrue: [self mouseMoveOxy: evt]].	evt shiftPressed 		ifTrue: [self tool handleShiftKeyMouseAt: evt cursorPoint]		ifFalse: [self tool handleMouseAt: evt cursorPoint].			self updateUnderMouseMorphPosition.	lastMoveEvent := evt.! !!DrGDrawable methodsFor: 'accessing' stamp: ''!scale	^ scale! !!DrGDrawable methodsFor: 'geometry' stamp: ''!vectorToMorph: aVector"Transform vector coordinates in the Dr. Geo system to the morph system"	^ Point 		x: aVector x asFloat * scale		y: aVector y negated asFloat * scale.! !!DrGDrawable methodsFor: 'stepping' stamp: ''!step	self tool animate! !!DrGDrawable methodsFor: 'gridding' stamp: ''!gridPoint: ungriddedPoint	self presenter isGridded ifFalse: [^ungriddedPoint].	"do it the easy way"	^self worldToMorph: ((self morphToWorld: ungriddedPoint) roundTo: gridScale)! !!DrGDrawable methodsFor: 'geometry' stamp: ''!morphToWorld: aPoint	"Transform point coordinate from DrGeo-Morph to World  system"	^ Point 		x: (self morphAbscissaToWorld: aPoint x)		y: (self morphOrdinateToWorld: aPoint y)! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!getCirclePoint: aCRGesture|closestCostume smallestDistance capturedPoints pointItem|	smallestDistance := 15.	capturedPoints := aCRGesture capturedPointsInScreenCoord.	app pointCostumes do: [:aCostume |		capturedPoints do: [:aPoint | |dist|			(dist := aCostume distanceTo: aPoint) < smallestDistance 				ifTrue:					[closestCostume :=  aCostume.					smallestDistance := dist]]].	closestCostume 		ifNotNil: [pointItem := closestCostume mathItem]		ifNil:			[pointItem := DrGPointFreeItem newWith: 				{(self morphToWorld: aCRGesture coordinates start)}.			app domain createFromMathItem: pointItem].	^pointItem! !!DrGDrawable methodsFor: 'drawing' stamp: ''!dottedLinesToParentsOf: anItem	| point pointWorld | 	(anItem isValueItem not or: [anItem parents isEmptyOrNil]) ifTrue: [^self ].	valueItem := anItem.	point := (self app costumeOf: valueItem) morph center.	pointWorld := self morphToWorld: point.	dottedLines := valueItem parents collect: [:item |		(DrGLineMorph 			from: point			to: (self worldToMorph: (item closestPointTo: pointWorld)) 			color: Color red 			width: 1) dashedBorder:  {1. 5}].	dottedLines do: [:line | self addMorphFront: line].! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!getCircleCenter: CRGesture|center|	center := app pointCostumeClosestTo: CRGesture bounds center atRange: 15.	center 		ifNotNil: [center := center mathItem]		ifNil: 			[center := DrGPointFreeItem newWith: {(self morphToWorld: CRGesture bounds center)}.			app domain createFromMathItem: center].	^center! !!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseDown: evt 	evt yellowButtonPressed ifTrue: [^self]. "we don't capture it"	evt shiftPressed 		ifTrue: [self tool handlePressShiftKey: evt cursorPoint]		ifFalse: 			[(self tool handlePress: evt cursorPoint)				ifFalse: [self view popupMenu]].	self showUnderMouseMorph! !!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseStillDown: evt	(self handlesMouseStillDown: evt) ifTrue: 		[self tool handleStillPress: evt cursorPoint]! !!DrGDrawable methodsFor: 'stepping' stamp: ''!stepTime 	^ 300! !!DrGDrawable methodsFor: 'gridding' stamp: ''!gridWorldPoint: ungriddedPoint	self presenter isGridded ifFalse: [^ self morphToWorld: ungriddedPoint].	"do it the easy way"	^(self morphToWorld: ungriddedPoint) roundTo: gridScale! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!left: aNumber 	ox := ox + (self pixelToWorld: aNumber).	app redrawCostumes! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!unzoom: extent	scale := scale - ((extent x + extent y) / 5).	scale := scale max: 5.	app redrawCostumes! !!DrGDrawable methodsFor: 'drawing' stamp: ''!removeDottedLinesToParents	valueItem ifNil: [^self].	dottedLines do: [:line | self removeMorph: line].	dottedLines := nil.	valueItem := nil! !!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseStillDownThreshold 	^ 1500! !!DrGDrawable methodsFor: 'axes' stamp: ''!axesVisible	^ self hasProperty: #axesVisible! !!DrGDrawable methodsFor: 'geometry' stamp: ''!morphAbscissaToWorld: abscissa	"Transform abscissa from DrGeo-Morph to World  system"	^ ox + ((abscissa - self position x - (self extent x asFloat / 2)) / scale)! !!DrGDrawable methodsFor: 'callback canvas' stamp: ''!moveOxy: pointIncrement	ox := ox - pointIncrement x.	oy := oy - pointIncrement y.	app redrawCostumes! !!DrGDrawable methodsFor: 'accessing' stamp: ''!oy	^ oy! !!DrGDrawable methodsFor: 'dropping/grabbing' stamp: ''!resizeImage: aForm"Reszie the image to a maximum pixel number"	| resizedForm maxPixels size ratio |	maxPixels := 250000.	size := aForm extent x * aForm extent y.	size > maxPixels 		ifTrue: [ratio := (maxPixels  / size) sqrt.			resizedForm := aForm magnifyBy: ratio]		ifFalse: [resizedForm  := aForm].	^ resizedForm ! !!DrGDrawable methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas 	super drawOnAthensCanvas: aCanvas .	self gridVisible ifTrue: [self drawGridOnAthens: aCanvas].	self axesVisible ifTrue: [ self drawAxesOnAthens: aCanvas].! !!DrGDrawable methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self windowEventHandler: self.	self color: Smalltalk ui theme drgeoBackgroundColor.	self borderWidth: 0.	tipOn := true.	self defaultScalePosition.	self hResizing: #spacefill;		 vResizing: #spaceFill.	self clipSubmorphs: true.	balloonTarget := BorderedMorph new color: Color transparent;				 extent: 6 @ 6;				 borderWidth: 0.	underMouse := UnderMouseMorph new extent: DrGeoSystem replicateDisplayWidth asPoint.	self addMorphBack: underMouse.	underMouse 		position: self position;		hide.		! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!undo	self presenter undo! !!DrGDrawable methodsFor: 'genie-command' stamp: ''!up: aNumber	oy := oy - (self pixelToWorld: aNumber).	app redrawCostumes! !!DrGDrawable methodsFor: 'event handling' stamp: ''!handlesMouseStillDown: evt	^ self app isToolbarless not! !!DrGDrawable methodsFor: 'event handling' stamp: ''!mouseMoveOxy: evt"move the whole sketch in the Oxy plane"	|delta| 	delta := evt endPoint - evt startPoint.	delta r  < 100 ifTrue: "we need to check because in tablet mode, previous mouse position can far away"		[self moveOxy: (self pixelVectorToWorldVector: delta)]! !!DrGDrawable methodsFor: 'geometry' stamp: ''!morphOrdinateToWorld: ordinate	"Transform point coordinate from DrGeo-Morph to World  system"	^ oy - ((ordinate  - self position y - (self extent y asFloat / 2)) / scale)! !!DrGDrawable methodsFor: 'drawing' stamp: ''!updateDottedLinesToParents	| point pointWorld |	valueItem ifNil: [^self].	point := (self app costumeOf: valueItem) morph center.	pointWorld := self morphToWorld: point.	dottedLines with: valueItem parents do: [:line :parent|		line setVertices: (			Array 				with: point 				with: (self worldToMorph: (parent closestPointTo: pointWorld)))]! !!DrGDrawable methodsFor: 'under mouse' stamp: ''!updateUnderMouseMorph	DrGeoSystem ifTablet: [underMouse changed]! !!DrGDrawable methodsFor: 'accessing' stamp: ''!view	^app view! !!DrGDrawable methodsFor: 'geometry' stamp: ''!worldOrdinateToMorph: y	"Transform point ordinate from DrGeo-World to Morph system"	^self extent y / 2 + (scale * (oy - y)) + self position y ! !!DrGDrawable methodsFor: 'accessing' stamp: ''!domain	^ app domain! !!DrGDrawable methodsFor: 'accessing' stamp: ''!surface	^ self owner athensSurface! !!DrGDrawable methodsFor: 'drawing' stamp: ''!drawOn: aCanvas 	"Dirty PasteUpMorph>>drawOn: need to be refactored"	aCanvas fillRectangle: self bounds fillStyle: self fillStyle borderStyle: self borderStyle.		"draw grid"	self gridVisible		ifTrue: 			[self drawGridOn: aCanvas.			self drawAxesOn: aCanvas].! !!DrGDrawable methodsFor: 'callback canvas' stamp: ''!moveOx: increment	ox := ox - increment.	app redrawCostumes! !!DrGDrawable class methodsFor: 'instance creation' stamp: ''!newOn: aDrgeo	^self basicNew app: aDrgeo ; initialize ! !!DrGDummyBuilder commentStamp: ''!A Builder to build nothing. Used in the select mode!!DrGDummyBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection  at: aPoint! !!DrGDummyBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^false! !!DrGDummyBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^true! !!DrGDynamicTool commentStamp: ''!The root of the class hierarchy to handle tool state 					- 	state of the tool presenter 				- 	from which presenter is used this tool spot 					- 	xy-postition of the selected item when selecting one among several last 					- 	last mouse xy-position (used during drag) costume 				- 	selected costume during the last multiple choice selection mathItemUnderMouse 	- 	mathItem under mouse !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!presenter: aPresenter	presenter := aPresenter ! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handleShiftKeyMouseAt: aPoint	^self state handleShiftKeyMouseAt: aPoint! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint"return the list of costume at position aPoint relevant to me, override if needed"	^self myCostumesAt: aPoint ! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handlePressShiftKey: aPoint	^self state handlePressShiftKey: aPoint ! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handleStillPress: aPoint	self state handleStillPress: aPoint! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!costume: aCostume	costume ifNotNil: [costume stopBlinking].	costume := aCostume.	costume ifNotNil: [costume startBlinking]	! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!last: aPoint	last := aPoint! !!DrGDynamicTool methodsFor: 'initialize-release' stamp: ''!reset	self costume: nil;		last: nil;		spot: nil.	mathItemUnderMouse := nil! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!spot	^spot! !!DrGDynamicTool methodsFor: 'updating' stamp: ''!redrawFlyingCostume! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint	^self state handleMouseAt: aPoint! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!state: aState	state :=	aState ! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handleShiftKey: aPoint	^self state handleShiftKey: aPoint ! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!presenter	^presenter ! !!DrGDynamicTool methodsFor: 'testing' stamp: ''!isGridded	^presenter isGridded! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!mathItem	^self costume mathItem! !!DrGDynamicTool methodsFor: 'initialize-release' stamp: ''!release	super release.	self reset.! !!DrGDynamicTool methodsFor: 'updating' stamp: ''!gridPoint: ungriddedPoint	^ self area gridPoint: ungriddedPoint.! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!factory  	^self domain factory! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	^ self state handleChoice: aCostumeCollection ! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handlePress: aPoint	^self state handlePress: aPoint ! !!DrGDynamicTool methodsFor: 'initialize-release' stamp: ''!resetForFreshStart 	self reset.! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!app 	^presenter app! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!chooseCostume: costumes 	^ self chooseCostume: costumes title: 'Select an object' translated.! !!DrGDynamicTool methodsFor: 'private' stamp: ''!pointCostumesFirstAt: aPoint 	"When the user moves the mouse over a collection of geometric items, if thereare any point items, we discard all the other geometric items"	| myCostumes pointCostumes |	myCostumes := self myCostumesAt: aPoint.	pointCostumes := myCostumes select: [:aCostume | aCostume isPointCostume].	pointCostumes ifNotEmpty: [ ^ pointCostumes ].	^ myCostumes! !!DrGDynamicTool methodsFor: 'private' stamp: ''!myCostumesAt: aPoint"return the list of costume at position aPoint"	^self app costumes select: [:aCostume | 		aCostume style isNotHidden 			and: [(self isWanted: {aCostume mathItem})				and: [aCostume containsPoint: aPoint]]]! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!state	^state! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handleReleaseShiftKey: aPoint	self state handleReleaseShiftKey: aPoint ! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!last	^last! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!chooseCostume: costumes title: aTitle	| aChoice |	aChoice := DrGCanvasMenuMorph		chooseFrom: costumes		lines: #()		title: aTitle.	aChoice isZero		ifTrue: [^ self handleChoice: {}].	^ self handleChoice: {costumes at: aChoice}! !!DrGDynamicTool methodsFor: 'handling' stamp: ''!handleRelease: aPoint	self state handleRelease: aPoint ! !!DrGDynamicTool methodsFor: 'initialize-release' stamp: ''!initialize	costume := nil.	self last: 0@0.! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!spot: aPoint	spot := aPoint ! !!DrGDynamicTool methodsFor: 'private' stamp: ''!pointCostumesAt: aPoint 	"List of point under the mouse cursor"	| myCostumes |	myCostumes := self myCostumesAt: aPoint.	^ myCostumes select: [:aCostume | aCostume isPointCostume].! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!costume	^costume ! !!DrGDynamicTool methodsFor: 'testing' stamp: ''!isCloning	^ false! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!area 	^presenter area! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!description 	^ self subclassResponsibility! !!DrGDynamicTool methodsFor: 'testing' stamp: ''!isWanted: aMathItem	^true! !!DrGDynamicTool methodsFor: 'initialize-release' stamp: ''!registerDependant: anObject! !!DrGDynamicTool methodsFor: 'accessing' stamp: ''!domain 	^presenter domain! !!DrGDynamicTool methodsFor: 'updating' stamp: ''!switchState: aStateClass	self state: (aStateClass new context: self)! !!DrGDynamicToolState commentStamp: ''!The context is a tool (selectTool, buildTool, ...) where the state operate.!!DrGDynamicToolState methodsFor: 'accessing' stamp: ''!context	^context! !!DrGDynamicToolState methodsFor: 'accessing' stamp: ''!app	^self context app! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handleShiftKeyMouseAt: aPoint "handle moved mouse while shift key down, by default just handle mouse at"	^ self handleMouseAt: aPoint! !!DrGDynamicToolState methodsFor: 'accessing' stamp: ''!context: aContext	context := aContext ! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handlePressShiftKey: aPoint"handle pressed mouse bouton with shift key, by default  just handle mouse button press"	^ self handlePress: aPoint! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handleStillPress: aPoint	"A 2s mouse down evt, by default do nothing"! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handleReleaseShiftKey: aPoint " handle mouse bouton release while shift key down, by default only handle release"	self handleRelease: aPoint! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint 	"Return true if we can process something or we are over something"	| costumes aTip feedback |	feedback := true.	costumes := self context costumesAt: aPoint.	costumes size = 1		ifTrue: [			aTip := costumes first mathItem descriptiveName.			feedback := costumes first style isFeedback].	costumes size > 1		ifTrue: [aTip := 'Several objects can be selected. Please, choose one.' translated. ].	(aTip isNil or: [ feedback not ])		ifTrue: [self area hideTip]		ifFalse: [self area tip: aTip at: aPoint].	^ aTip notNil! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handleRelease: aPoint ! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handleShiftKey: aPoint"handle shift key down, do nothing by default"	^ false! !!DrGDynamicToolState methodsFor: 'accessing' stamp: ''!view	^self context presenter view! !!DrGDynamicToolState methodsFor: 'accessing' stamp: ''!area	^self context area! !!DrGDynamicToolState methodsFor: 'state' stamp: ''!switchState: aStateClass	self context switchState: aStateClass! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	^false! !!DrGDynamicToolState methodsFor: 'handling' stamp: ''!handlePress: aPoint	^ false! !!DrGEditGroupTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint	^self pointCostumesFirstAt: aPoint! !!DrGEditGroupTool methodsFor: 'private' stamp: ''!pointCostumesFirstAt: aPoint	^(super pointCostumesFirstAt: aPoint) select: [:aCostume |		aCostume isCompositeCostume not]! !!DrGEditGroupTool methodsFor: 'updating' stamp: ''!reset	super reset.	self switchState:  DrGEditGroupToolStateNeutral! !!DrGEditGroupTool methodsFor: 'private' stamp: ''!myCostumesAt: aPoint	^self app costumes select: [:aCostume |		aCostume style isNotHidden			and: [aCostume isCompositeCostume				and: [aCostume containsPoint: aPoint]]]! !!DrGEditGroupTool methodsFor: 'accessing' stamp: ''!compositeCostumesAt: aPoint	^self myCostumesAt: aPoint! !!DrGEditGroupTool methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self reset! !!DrGEditGroupTool methodsFor: 'initialize-release' stamp: ''!release	costume ifNotNil:		[costume stopBlinking].	super release.! !!DrGEditGroupToolStateNeutral methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint 	| costumes aTip |	costumes := self context compositeCostumesAt: aPoint.	costumes		ifEmpty: [self area hideTip.			^ false].	costumes size > 1		ifTrue: [aTip := 'Several objects can be selected. Please, select one clicking the mouse.' translated]		ifFalse: [aTip := costumes first mathItem descriptiveName].	self area tip: aTip at: aPoint.	^ true! !!DrGEditGroupToolStateNeutral methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	aCostumeCollection 		ifNotEmpty: 			[self context costume: aCostumeCollection first.			self switchState: DrGEditGroupToolStateSelected.			^true]		ifEmpty:			[self context reset.			^false]		! !!DrGEditGroupToolStateNeutral methodsFor: 'handling' stamp: ''!handlePress: aPoint	|costumes|	self area hideTip.	costumes := self context compositeCostumesAt: aPoint.	costumes isEmptyOrNil ifTrue: [^false].	costumes size = 1		ifTrue:			[^self handleChoice: costumes.]		ifFalse:			[^self context chooseCostume: costumes].! !!DrGEditGroupToolStateSelected methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection"if the costume does not bellong to the composite add it, otherwise remove it from the composite"|compositeCostume itemCostume|	aCostumeCollection ifEmpty:			[self context reset.			^false].	compositeCostume := self context costume.	itemCostume := aCostumeCollection first.	(compositeCostume mathItem subItems includes: itemCostume mathItem)		ifTrue:  [compositeCostume removeCostume: itemCostume]		ifFalse: [compositeCostume addCostume: itemCostume].	compositeCostume stopBlinking;startBlinking.	^true.! !!DrGEditGroupToolStateSelected methodsFor: 'handling' stamp: ''!handlePress: aPoint	| costumes |	self area hideTip.	costumes := self context costumesAt: aPoint.	costumes size = 1		ifTrue:			[^self handleChoice: costumes].	costumes size > 1 		ifTrue:			[^self context chooseCostume: costumes].	self context reset.	^false.! !!DrGEquationCircleItem methodsFor: 'accessing' stamp: ''!equation	^ value! !!DrGEquationCircleItem methodsFor: 'xml writing' stamp: ''!nodeType	^#circle! !!DrGEquationCircleItem methodsFor: 'testing' stamp: ''!isVerifiedBy: aPoint	^ parents first contains: aPoint! !!DrGEquationCircleItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [| circle |		circle := parents first.		value := String streamContents: [:stream |		 stream nextPutAll: '(x ';			nextPutAll: (circle center x > 0 ifTrue: [' - '] ifFalse: ['']).		self printDecimal: circle center x on: stream.		stream nextPutAll: ')² + (y - '.		self printDecimal: circle center y on: stream.		stream nextPutAll: ')² = '.		self printDecimal: circle radius squared  on: stream]]! !!DrGEquationItem methodsFor: 'as yet unclassified' stamp: ''!printOn: aStream	self printType: 'Equation' translated on: aStream.	self printValueOn: aStream ! !!DrGEquationItem methodsFor: 'accessing' stamp: ''!valueItem	^ self equation ! !!DrGEquationItem methodsFor: 'accessing' stamp: ''!basicType	^#equation! !!DrGEquationItem methodsFor: 'accessing' stamp: ''!equation"a string representing the equation"	^ ''! !!DrGEquationItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isEquation 	^ true! !!DrGEquationItem methodsFor: 'testing' stamp: ''!isVerifiedBy: aPoint	self subclassResponsibility ! !!DrGEquationItem methodsFor: 'printing' stamp: ''!printValueOn: aStream 	aStream nextPutAll: value! !!DrGEquationItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This equation %1' translated! !!DrGEquationItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isValueItem 	^ false! !!DrGEquationLineItem commentStamp: ''!a line equation: - provide a and b for the reduced equation: y = a . x + b- provide m otherwise for the equation x = m!!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!reducedEquation	^ b isZero 		ifTrue:  [String streamContents: [:stream |			stream nextPutAll: 'x = '.			self printDecimal: c negated / a on: stream]]		ifFalse: [String streamContents: [:stream |			stream nextPutAll: 'y = '.			a isZero 				ifTrue: [self printDecimal: c negated / b on: stream] 				ifFalse: [| slope |					slope := a negated / b.					slope = 1 						ifTrue: [stream nextPutAll: 'x'.							c isZero ifFalse: [								stream nextPutAll: ' + '.								self printDecimal: c negated / b on: stream]]						ifFalse: [							slope = -1 								ifTrue: [stream nextPutAll: '- x'.									c isZero ifFalse: [										stream nextPutAll: ' + '.										self printDecimal: c negated / b on: stream]] 								ifFalse: [									self printDecimal: slope on: stream.									stream nextPutAll: ' * x'.									c isZero ifFalse: [										stream nextPutAll: ' + '.										self printDecimal: c negated / b on: stream]]]]]]! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!b	^ b! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!c: aNumber	c := aNumber! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!equation 	^ value := self reducedEquation ! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!c	^ c! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!a: aNumber	a := aNumber! !!DrGEquationLineItem methodsFor: 'xml writing' stamp: ''!nodeType	^#line! !!DrGEquationLineItem methodsFor: 'testing' stamp: ''!isVerifiedBy: aPoint	^ parents first isCollinearWith: (parents first origin - aPoint)! !!DrGEquationLineItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [ |u origin|		u := parents first direction.		origin := parents first origin.		self a: u y.		self b: u x negated.		self c: origin y * u x - (origin x * u y)]! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!a	^ a! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!b: aNumber	b := aNumber! !!DrGEquationLineItem methodsFor: 'accessing' stamp: ''!cartesianEquation	^ String streamContents: [:stream |		a isZero ifFalse: [			a = 1 ifFalse: [self printDecimal: a on: stream].			stream	nextPutAll: 'x'].		b isZero ifFalse: [			a isZero ifFalse: [stream nextPutAll: ' + '].			b = 1 ifFalse: [self printDecimal: b on: stream].			stream	nextPutAll: 'y'].		c isZero ifFalse: [			stream nextPutAll: ' + '.			self printDecimal: c on: stream].		stream nextPutAll: ' = 0']! !!DrGEtoys methodsFor: 'testing' stamp: ''!isEtoys	^ true! !!DrGEtoys methodsFor: 'initialize-release' stamp: ''!initialize 	canWeDisplayLoader := false! !!DrGFactory commentStamp: ''!The Factory is where are manufactured new mathematic or macro-constrcution items.It owns a pool of the already manufactured items. In last is the latested created (or recreated) item, Carefull!! last may not be equal to 'pool last' when the user tryto instantiate an already created object, in this case last return the original copy somewhere in the pool.When manufacturing a new item it checks for its unicity.It works with the help of the MathItem and macro Builder.Related patterns: flyweight.!!DrGFactory methodsFor: 'accessing' stamp: ''!pool	^pool ! !!DrGFactory methodsFor: 'removing' stamp: ''!removeAt: index	| item |	item := self at: index.	last = item ifTrue: [last := nil].	pool removeAt: index! !!DrGFactory methodsFor: 'enumerating' stamp: ''!from: item do: aBlock	(self indexOf: item) 		to: pool size 		do: [:index | aBlock value: (pool at: index)]! !!DrGFactory methodsFor: 'testing' stamp: ''!isAnyInPool: itemList 	^itemList anySatisfy: [:item | (self findInPool: item) isNil not].! !!DrGFactory methodsFor: 'accessing' stamp: ''!subPool: item"The items comming after me in the pool"	^ self subPool: item from: pool! !!DrGFactory methodsFor: 'accessing' stamp: ''!at: integer	^ self pool at: integer ifAbsent: [nil]! !!DrGFactory methodsFor: 'accessing' stamp: ''!last: item 	"push item as the last instantiated item in the pool, purelly artificial however	as the items order in the pool is not changed"	last := item! !!DrGFactory methodsFor: 'removing' stamp: ''!remove: itemCollection 	pool := pool copyWithoutAll: itemCollection.	itemCollection do: [ :aMathItem | aMathItem release ]! !!DrGFactory methodsFor: 'accessing' stamp: ''!add: anObject beforeIndex: index	^ pool add: anObject beforeIndex: index.! !!DrGFactory methodsFor: 'accessing' stamp: ''!last	^last! !!DrGFactory methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	pool := OrderedCollection new.! !!DrGFactory methodsFor: 'initialize-release' stamp: ''!release	pool do: [ :item | item release].	super release.! !!DrGFactory methodsFor: 'accessing' stamp: ''!findInPool: item 	"Try to find a twin of this mathItem, if so return the twin, otherwise nil"	^ self at: (self indexOf: item)! !!DrGFactory methodsFor: 'updating' stamp: ''!pushAsLastWhenInPool: anItem	"if this item has a twin in the pool, push as last this last one andreturn true, otherwise return false"	^ (self findInPool: anItem)		ifNotNil: [ :item | 			self last: item.			true ]		ifNil: [ false ]! !!DrGFactory methodsFor: 'accessing' stamp: ''!subPool: item from: aPool"The items comming after me in aPool"	^ aPool allButFirst: (self indexOf: item in: aPool)! !!DrGFactory methodsFor: 'accessing' stamp: ''!add: item 	self last: item.	pool addLast: item.	^ item! !!DrGFactory methodsFor: 'accessing' stamp: ''!indexOf: anItem ^ self indexOf: anItem in: pool! !!DrGFactory methodsFor: 'accessing' stamp: ''!indexOf: anItem in: aPool"No identity equality but hashed value to detect duplicated object we must consider as equal" ^ anItem 		ifNil: [0]		ifNotNil: [aPool findFirst: [ :each | 				each hash = anItem hash  					and: ["double check when hash is equal (can be a collision)"						 each = anItem ]  			]		]! !!DrGFactory methodsFor: 'removing' stamp: ''!purge	pool do: [ :aMathItem | aMathItem release].	pool := OrderedCollection new.! !!DrGFactory methodsFor: 'testing' stamp: ''!is: item1 before: item2	^ (self indexOf: item1) < (self indexOf: item2)! !!DrGFactory methodsFor: 'testing' stamp: ''!isInPool: item	^ (self findInPool: item) isNil not! !!DrGFileDialog commentStamp: ''!A DrGFileDialogWindow is filebrowser to load a sketch the old way.!!DrGFileDialog methodsFor: 'as yet unclassified' stamp: ''!newPreviewMorph	"Answer a new preview morph."	| aMorph |	aMorph := super newPreviewMorph.	self previewType == #drgeo ifTrue: [aMorph := self newImagePreviewMorph].	^ aMorph.! !!DrGFileDialog methodsFor: 'as yet unclassified' stamp: ''!previewSize	| aSize |	aSize := super previewSize.	self previewType == #drgeo ifTrue: [aSize := DrGeo previewSize].	^ aSize! !!DrGFileDialog methodsFor: 'as yet unclassified' stamp: ''!updatePreview	super updatePreview.	self previewType == #drgeo ifTrue: [self updateDrGeoPreview]	! !!DrGFileDialog methodsFor: 'as yet unclassified' stamp: ''!updateDrGeoPreview	| str aDrgeo |	str := self openSelectedFile.	str ifNil: [^self]. 	[[aDrgeo := (DrGeoXml new loadOnlyFigureFrom: str for: #service) first.	  aDrgeo view openInWorld; delete]		on: Error do: [:ex | self abort: 'I can''t preview this file!!May be it contains only macro-construction.' translated]]		ensure: [str close].	self previewMorph		image: (aDrgeo ifNil: [Form extent: 1@1] ifNotNil: [ |aForm  |			aForm := (Form extent: aDrgeo area extent depth: 32) fillWhite .			aDrgeo area owner fullDrawOn: aForm getCanvas.			aForm])		size: DrGeo previewSize.! !!DrGFileThumbnailDialog commentStamp: ''!I am a dialog to browse sketches. I present a sketch preview the user can select.Sketches are locale, remote in the internet or in the LAN (teacher share).	- resource is the way to access these sketches, it is a DrGDirectory instance.!!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!network	^ self isNetwork! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!beNetwork	^ true! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!beExamples	^ true! !!DrGFileThumbnailDialog methodsFor: 'preview cache' stamp: ''!previewFor: filename	| morph|	morph := ThumbnailPreviewMorph new		filename: filename;		image: (self formFor: filename)		size: DrGeo previewSize.	morph textMorph contents: (filename allButLast: 5) capitalized.	morph when: #selectedSktech send: #selectAndClose to: self.	morph when: #gotFocus send: #gotFocusOn: to: self.	^ morph! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!switchToSketches	self focusCancelButton.	self closeResource.	resource :=DrGeoSystem mySketchResources.	self updateBtnAndPreview! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!isLanShare	^ resource isLan! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!switchToExamples	self focusCancelButton.	self closeResource.	resource :=DrGeoSystem exampleResources.	self updateBtnAndPreview ! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newOpenButton	^ self 		newButtonFor: self		action: #ok 		label: 'Open' translated 		help: 'Open the selected sketch' translated! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!beLanShare	^ true! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newContentMorph| scroll|	previewsPanel := PanelMorph new color: Color white.	previewsPanel hResizing: #spaceFill;		vResizing: #spaceFill;		changeTableLayout;		listDirection: #leftToRight;		wrapDirection: #topToBottom;		cellInset: 8.	self loadPreviews.	scroll := GeneralScrollPane new		changeScrollerTableLayout;		scrollTarget: previewsPanel.	^ scroll vResizing: #spaceFill;		hResizing: #spaceFill! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newMySketchesButton	^ self newButtonFor: self		getState: #isMySketches		action: #switchToSketches 		arguments: nil		getEnabled: #beMySketches 		label: 'MySketches' translated 		help: 'View my sketches' translated! !!DrGFileThumbnailDialog methodsFor: 'update' stamp: ''!updateBtnAndPreview	self changed: #isMySketches.	self changed: #isExamples.	self changed: #isNetwork.	self changed: #beDelete.	self loadPreviews ! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!beMySketches 	^ true! !!DrGFileThumbnailDialog methodsFor: 'update' stamp: ''!loadPreviews	DrGLoader start.	[previewsPanel removeAllMorphs.	resource sketchFiles reverse		do: [:file | previewsPanel addMorph: (self previewFor: file)]	] 	ensure: [		DrGLoader stop].! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!selectedFileStream	^ resource getSketchFile: finalSelectedFile! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!isNetwork	"are we browsing the networked sketch"	^ resource isRemote ! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!cancelButton|btns|	btns := self buttons.	^ btns at: btns size - 1! !!DrGFileThumbnailDialog methodsFor: 'preview cache' stamp: ''!formFor: filename	^ (self isCachedForm: filename) 		ifTrue: [self cachedFormFor: filename] 		ifFalse: [self computeFormFor: filename]! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!networkShare	^ DrGeoSystem networkShare! !!DrGFileThumbnailDialog methodsFor: 'preview cache' stamp: ''!isCachedForm: filename	^ resource fileExists: (self cachePreviewFilename: filename)! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!finalSelectedFile	^ finalSelectedFile ! !!DrGFileThumbnailDialog methodsFor: 'events-processing' stamp: ''!handleFocusEvent: anEvent    (anEvent isMouse and: [ anEvent isMouseWheel ])        ifTrue: [ self activeHand releaseMouseFocus: self ].    ^ super handleFocusEvent: anEvent! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!isExamples	^ resource isLocal and: [resource location includesSubstring: 'examples']! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newDeleteButton	^ (self		newButtonFor: self		getState: nil		action: #deleteFile		arguments: nil		getEnabled: #beDelete		labelForm:			(self iconNamed: #smallDeleteIcon)		help: 'Delete the selected sketch' translated)		hResizing: #shrinkWrap! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!switchToLanShare	DrGeoLanClient reset.	DrGeoLanClient current isServerFound ifTrue: [ 		self focusCancelButton.		self closeResource.		resource := DrGDirectoryLan new.		self updateBtnAndPreview].! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!focusCancelButton	self cancelButton takeKeyboardFocus.	self rememberKeyboardFocus: self cancelButton.! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!defaultLabel	^ 'Open a sketch' translated! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!selectedFile	"a DirectoryEntryFile item"	| focusedMorph |	focusedMorph := self rememberedKeyboardFocus.	^ (focusedMorph respondsTo: #filename) 		ifTrue: [focusedMorph filename]		ifFalse: [nil]	! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!deleteFile|answer|		answer := UIManager default 			confirm: ('Delete the sketch: {1}?' translated format: {(self selectedFile allButLast: 5) capitalized}).		answer ifTrue: [			resource deleteFile: self selectedFile.			resource deleteFile: (self selectedFile allButLast: 4), 'png'.			previewsPanel removeMorph: self rememberedKeyboardFocus.			self focusCancelButton.			self changed: #beDelete]! !!DrGFileThumbnailDialog methodsFor: 'preview cache' stamp: ''!cachedFormFor: filename	^ PNGReadWriter formFromStream:  (resource getFile: (self cachePreviewFilename: filename))! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!previewSize 	^ 320@240! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!ok	finalSelectedFile := self selectedFile.	self		cancelled: false;		delete! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!switchToNetwork	DrGLoader start.	(DrGeoSystem networkResources: self) ifNotNil: [:anwer | 		self focusCancelButton.		self closeResource.		resource := anwer.		self updateBtnAndPreview].	DrGLoader stop.! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newNetworkButton	^ self newButtonFor: self		getState: #isNetwork		action: #switchToNetwork		arguments: nil		getEnabled: #beNetwork 		label: 'Network' translated 		help: 'View shared sketches' translated! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!networkShare: aString"Before browsing this network share, we test it does exsit"	DrGeoSystem networkShare: aString.	self switchToNetwork.! !!DrGFileThumbnailDialog methodsFor: 'preview cache' stamp: ''!cachePreviewFilename: filename	"the name of the cahed preview if it exist"	^ ((filename allButLast: 4), 'png')! !!DrGFileThumbnailDialog methodsFor: 'accessing' stamp: ''!shareTextEntry|btns|	btns := self buttons.	^ btns at: btns size - 3! !!DrGFileThumbnailDialog methodsFor: 'open/close' stamp: ''!closeResource	resource ifNotNil: [resource close]! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!initialize	resource := DrGeoSystem mySketchResources.	super initialize.! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newNetworkShareMorph	^ (self 		newTextEntryFor: self 		getText: #networkShare		setText: #networkShare:		getEnabled: #isNetwork		help: 'The network share to browse.' translated)		alwaysAccept: false;		acceptOnFocusChange: false;		autoAccept: false! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!beDelete	^ self isExamples not 	and: [self selectedFile notNil 	and: [resource isLan not]]! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!gotFocusOn: previewMorph	self rememberKeyboardFocus: previewMorph.	self changed: #beDelete.! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newButtons	|buttons|	buttons := OrderedCollection withAll: 		{self newMySketchesButton. self newExamplesButton. self newLanShareButton }.	DrGeoSystem useNetwork ifTrue: [		buttons 			add: self newNetworkButton;			add: self newNetworkShareMorph].	buttons addAll: {		Morph new color: Color transparent; hResizing: #spaceFill; height: 10.		self newOpenButton. self newCancelButton isDefault: true. self newDeleteButton}.	^ buttons! !!DrGFileThumbnailDialog methodsFor: 'preview cache' stamp: ''!computeFormFor: filename	|stream drgeo form|	stream := resource getFile: filename.	[[drgeo := (DrGeoXml new loadOnlyFigureFrom: stream for: #service) first.	drgeo view openInWorld; delete]		on: Error do: []] 		ensure: [stream close].	drgeo 		ifNil: [form := Form extent: 1@1] 		ifNotNil: [form := (Form extent: drgeo area extent depth: 32) fillWhite.			drgeo area owner fullDrawOn: form getCanvas.			form := form scaledToSize: DrGeo previewSize].	[stream := ByteArray new writeStream.	PNGReadWriter putForm: form onStream: stream.	resource put: stream into: (self cachePreviewFilename: filename)] ensure:		[stream close].	^ form! !!DrGFileThumbnailDialog methodsFor: 'enable-state' stamp: ''!isMySketches	^ resource isLocal and: [resource location includesSubstring: 'MySketches']! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newExamplesButton	^ self newButtonFor: self		getState: #isExamples		action: #switchToExamples 		arguments: nil		getEnabled: #beExamples 		label: 'Examples' translated 		help: 'View sketch examples' translated! !!DrGFileThumbnailDialog methodsFor: 'actions' stamp: ''!selectAndClose	self ok.! !!DrGFileThumbnailDialog methodsFor: 'open/close' stamp: ''!initialExtent	^ 1016@ 400! !!DrGFileThumbnailDialog methodsFor: 'initialization' stamp: ''!newLanShareButton	^ self newButtonFor: self		getState: #isLanShare		action: #switchToLanShare		arguments: nil		getEnabled: #beLanShare		label: 'Teacher share' translated 		help: 'Scan the local area network for sketches shared by the teacher.' translated! !!DrGFilenameDialog commentStamp: ''!A dialog to save a sketch- networked : a checkbox to enable or not network save operation!!DrGFilenameDialog methodsFor: 'accessing' stamp: ''!network 	^ networked ifNil: [networked := false]! !!DrGFilenameDialog methodsFor: 'accessing' stamp: ''!networkShare: aString	DrGeoSystem networkShare: aString! !!DrGFilenameDialog methodsFor: 'accessing' stamp: ''!networkShare	^ DrGeoSystem networkShare! !!DrGFilenameDialog methodsFor: 'actions' stamp: ''!newNetworkShareMorph	^ self 		newTextEntryFor: self 		getText: #networkShare		setText: #networkShare:		getEnabled: #network		help: 'The network share to keep this sketch.' translated! !!DrGFilenameDialog methodsFor: 'accessing' stamp: ''!network: boolean	networked := boolean.	self  changed: #network! !!DrGFilenameDialog methodsFor: 'actions' stamp: ''!newContentMorph	"Answer a new content morph."	self iconMorph: self newIconMorph.	self textMorph: self newTextMorph.	self textMorph wrapFlag: false.	self textEditorMorph: self newTextEditorMorph.	^ DrGeoSystem useNetwork 		ifTrue: [			self newGroupboxForAll: {				self newRow: {self iconMorph. self textMorph}.				self textEditorMorph.				self newRow: {self newCheckboxMorph. self newNetworkShareMorph}}] 		ifFalse: [			self newGroupboxForAll: {				self newRow: {self iconMorph. self textMorph}.				self textEditorMorph}]! !!DrGFilenameDialog methodsFor: 'actions' stamp: ''!newCheckboxMorph	^ self 		newCheckboxFor:  self		getSelected: #network 		setSelected: #network:		label: 'Network share' translated		help: 'Save the file on a network share.' translated! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!fill: boolean	fill := boolean.	self color: color.	self changed! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!translucent	^ self isTranslucent ! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!fill	^ self isFilled! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!toggleTranslucent	self translucent: translucent not.	self changed! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!translucent: boolean	translucent := boolean.	self color: color.! !!DrGFilledCostumeStyle methodsFor: 'widget' stamp: ''!fillWidget	^ 'Fill' translated ->		(self view			newCheckboxFor: self 			getSelected: #fill			setSelected: #fill: 			label:  '          ' 			help:  'Toggle to fill the object.' translated)! !!DrGFilledCostumeStyle methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	super writeAttributesTo: aNode.	aNode attributeAt: #filled put: self isFilled asString capitalized.	aNode attributeAt: #translucent put: self isTranslucent asString capitalized! !!DrGFilledCostumeStyle methodsFor: 'widget' stamp: ''!myWidgets 	^ super myWidgets addAll: {self fillWidget. self translucentWidget}; yourself! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!isTranslucent	^ translucent ifNil: [translucent := false]! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!toggleFilled	self fill: fill not.	self changed! !!DrGFilledCostumeStyle methodsFor: 'widget' stamp: ''!translucentWidget	^ 'Translucent' translated ->		(self view			newCheckboxFor: self 			getSelected: #translucent			setSelected: #translucent: 			label:  '          '  			help:  'Toggle the translucency of the object.' translated)! !!DrGFilledCostumeStyle methodsFor: 'accessing' stamp: ''!isFilled	^ fill ifNil: [fill := false]! !!DrGFinitCurveCostumeStyle methodsFor: 'widget' stamp: ''!arrowMorphCollection	^ DrGStylePreference arrowMorphCollection! !!DrGFinitCurveCostumeStyle methodsFor: 'accessing' stamp: ''!arrowIndex: index	"Set the value of arrows"	self arrow: (DrGStylePreference arrowFor: index)! !!DrGFinitCurveCostumeStyle methodsFor: 'accessing' stamp: ''!arrow: anObject	"Set the value of arrows"	arrow := anObject.	costume perform: arrow.	self changed.! !!DrGFinitCurveCostumeStyle methodsFor: 'widget' stamp: ''!arrowWidget	^ 'Arrow' translated ->		(self view			newMorphDropListFor: self			list: #arrowMorphCollection			getSelected: #arrowIndex			setSelected: #arrowIndex:			help: 'Set arrow(s) to the line.' translated)! !!DrGFinitCurveCostumeStyle methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	super writeAttributesTo: aNode.	costume isCircleCostume ifFalse: [aNode attributeAt: #arrow put: self arrow.]! !!DrGFinitCurveCostumeStyle methodsFor: 'accessing' stamp: ''!arrowIndex	"Answer the index of arrows"	^ DrGStylePreference arrowIndexOf: arrow! !!DrGFinitCurveCostumeStyle methodsFor: 'widget' stamp: ''!myWidgets	^ (costume isSegmentCostume or: [costume isArcCostume]) 		ifTrue: [super myWidgets addAll: {self arrowWidget}; yourself]		ifFalse: [super myWidgets]! !!DrGFinitCurveCostumeStyle methodsFor: 'accessing' stamp: ''!arrow	"Answer the value of arrows"	^ arrow! !!DrGFlyBuildTool commentStamp: ''!This tool is designed with a flying object representing the object in construction.!!DrGFlyBuildTool methodsFor: 'accessing' stamp: ''!presenter: aPresenter	super presenter: aPresenter.	mathItemTool presenter: aPresenter.	flyPointTool presenter: aPresenter.	mathItemTool builder app: self app! !!DrGFlyBuildTool methodsFor: 'updating' stamp: ''!reset"Why do we reset?"	"because intermediate point where created"	flyPointTool builder readyToBuild ifTrue: [flyPointTool reset].	"or the final mathItem was created"	mathItemTool builder readyToBuild ifTrue:			[self resetForFreshStart].! !!DrGFlyBuildTool methodsFor: 'accessing' stamp: ''!builder: aBuilder	mathItemTool builder: aBuilder.! !!DrGFlyBuildTool methodsFor: 'accessing' stamp: ''!mathItemTool: aBuilderClassName	mathItemTool ifNil: 		[mathItemTool := DrGBuildTool with: aBuilderClassName] ! !!DrGFlyBuildTool methodsFor: 'updating' stamp: ''!redrawFlyingCostume	mathItemTool builder redrawFlyingCostume ! !!DrGFlyBuildTool methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self switchState: DrGFlyBuildToolState.	flyPointTool := DrGFlyPointBuildTool with: DrGFlyPointBuilder! !!DrGFlyBuildTool methodsFor: 'accessing' stamp: ''!mathItemTool	^mathItemTool! !!DrGFlyBuildTool methodsFor: 'initialize-release' stamp: ''!release	super release	mathItemTool release.	flyPointTool release.! !!DrGFlyBuildTool methodsFor: 'adding' stamp: ''!add: aCostume	mathItemTool add: aCostume ! !!DrGFlyBuildTool methodsFor: 'testing' stamp: ''!isWanted: aMathItem	^mathItemTool isWanted: aMathItem! !!DrGFlyBuildTool methodsFor: 'accessing' stamp: ''!description 	^ mathItemTool builder class description ! !!DrGFlyBuildTool methodsFor: 'initialize-release' stamp: ''!registerDependant: anObject	mathItemTool registerDependant: anObject.	flyPointTool registerDependant: anObject! !!DrGFlyBuildTool methodsFor: 'accessing' stamp: ''!flyPointTool	^flyPointTool! !!DrGFlyBuildTool methodsFor: 'accessing' stamp: ''!builder"We have two builder, the flyPointBuilder and the other one (line, segment,...)"	flyPointTool builder readyToBuild 		ifTrue: [^flyPointTool builder]		ifFalse: [^mathItemTool builder]! !!DrGFlyBuildTool methodsFor: 'updating' stamp: ''!resetForFreshStart"Reset to restart over the user  build process"	mathItemTool reset.	flyPointTool reset.! !!DrGFlyBuildTool class methodsFor: 'as yet unclassified' stamp: ''!with: aBuilderClassName	^self new mathItemTool: aBuilderClassName	! !!DrGFlyBuildToolState methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint 	self context builder moveFlyingCostumeAt: (self area  morphToWorld: aPoint).	self context last: aPoint.	self area updateUnderMouseMorph.	"dispatch handleMouseAt"	^ (self context mathItemTool handleMouseAt: aPoint) 		ifFalse: [self isFlyingPointWantedAt: aPoint]		ifTrue: [true]! !!DrGFlyBuildToolState methodsFor: 'testing' stamp: ''!isFlyingPointConstructedAt: aPoint"return true whenever a flypoint is constructed, the new point instance is then ready to use, from the flyPointTool builder"	^ (self context mathItemTool builder isWanted: { (DrGPointItem new) }) 		and: [self context flyPointTool handlePress: aPoint]! !!DrGFlyBuildToolState methodsFor: 'handling' stamp: ''!handleRelease: aPoint	self context mathItemTool handleRelease: aPoint.	self context flyPointTool handleRelease: aPoint.! !!DrGFlyBuildToolState methodsFor: 'testing' stamp: ''!isFlyingPointWantedAt: aPoint"are we interested by a point at position aPoint"	^ (self context mathItemTool builder isWanted: { (DrGPointItem new) }) 		ifTrue: [self context flyPointTool handleMouseAt: aPoint]		ifFalse: [false]! !!DrGFlyBuildToolState methodsFor: 'processing' stamp: ''!addFlyingPointToBuiltItemAt: aPoint	self context mathItemTool 		add: self context app lastCostume.	self context mathItemTool builder 		add: {self context domain factory last} 		at: (self area morphToWorld: aPoint).! !!DrGFlyBuildToolState methodsFor: 'handling' stamp: ''!handlePress: aPoint 	self context last: aPoint.	"do we select an item underneath?"	(self context mathItemTool handlePress: aPoint) ifTrue: [^true].	"do we want a flyingPoint ?"	(self isFlyingPointConstructedAt: aPoint) ifFalse: [^false].	self addFlyingPointToBuiltItemAt: aPoint.	^ true! !!DrGFlyBuildTouchTool commentStamp: ''!This tool is designed for touch screen, to construct line with sliding finger!!DrGFlyBuildTouchTool methodsFor: 'initialize-release' stamp: ''!initialize 	super initialize.	self switchState: DrGFlyBuildTouchToolState.! !!DrGFlyBuildTouchToolState methodsFor: 'handling' stamp: ''!handlePress: aPoint	| answer |	answer := super handlePress: aPoint.	self switchState: DrGFlyBuildTouchToolStateGrabbed.	^ answer! !!DrGFlyBuildTouchToolStateGrabbed commentStamp: ''!I am grabbing: i.e. the mouse move with bouton pressed or the user finger is moving on the touch screen!!DrGFlyBuildTouchToolStateGrabbed methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint	self switchState: DrGFlyBuildTouchToolStateSlided.	^ true! !!DrGFlyBuildTouchToolStateGrabbed methodsFor: 'handling' stamp: ''!handleRelease: aPoint	self switchState: DrGFlyBuildTouchToolState! !!DrGFlyBuildTouchToolStateGrabbed methodsFor: 'handling' stamp: ''!handlePress: aPoint	"We cannot clic againt as the finger is stuck on the screen"	^ false! !!DrGFlyBuildTouchToolStateSlided methodsFor: 'handling' stamp: ''!handleRelease: aPoint	self switchState: DrGFlyBuildTouchToolState.	self context last: aPoint.	"do we select an item underneath?"	(self context mathItemTool handlePress: aPoint) ifTrue: [^true].	"do we want a flyingPoint ?"	(self isFlyingPointConstructedAt: aPoint) ifFalse: [^false].	self addFlyingPointToBuiltItemAt: aPoint.	^ true! !!DrGFlyBuildTouchToolStateSlided methodsFor: 'handling' stamp: ''!handlePress: aPoint	"the finger is stuck on the screen, we cannot clic again"	^ false! !!DrGFlyPointBuildTool commentStamp: ''!This tool lets the user create free point, point on curve and intersection point on the fly.On the fly means create the point in one-clic operation.!!DrGFlyPointBuildTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint	| intersectables curves| 	intersectables := self 		intersectableCurves: (			(self myCostumesAt: aPoint) select: [:aCostume| aCostume mathItem isIntersectableItem])		at: aPoint.	"if no intersectable, return the non intersectable only if one, otherwise it is considered for interesction"	^ intersectables ifEmpty: [		curves := (self myCostumesAt: aPoint) select: [:aCostume| aCostume isCurveCostume].		curves size > 1 			ifTrue: [ #() ]			ifFalse: [ curves]]! !!DrGFlyPointBuildTool methodsFor: 'accessing' stamp: ''!intersectableCurves: aCollection at: aPoint 	"As long as we can't get proper intersection with the first two, we remove the first one an try again "	aCollection size <= 1 ifTrue: [ ^ aCollection ].	^ (	DrGFlyPointBuilder new isCurveIntersectionValid: { 			(aCollection first mathItem).			(aCollection second mathItem).			aPoint}) 		ifTrue: [ aCollection ]		ifFalse: [self intersectableCurves: aCollection allButFirst at: aPoint ]! !!DrGFlyPointBuildTool methodsFor: 'initialize' stamp: ''!initialize	super initialize.	self switchState: DrGFlyPointBuildToolState! !!DrGFlyPointBuildToolState methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint 	| costumes aTip |	costumes := self context costumesAt: aPoint.	costumes size = 1		ifTrue: [aTip := costumes first mathItem descriptiveName].	costumes size > 1		ifTrue: [aTip := 'This intersection' translated].	aTip		ifNil: [self area hideTip]		ifNotNil: [self area tip: aTip at: aPoint].	^ aTip notNil! !!DrGFlyPointBuildToolState methodsFor: 'handling' stamp: ''!handlePress: aPoint 	"return true if did something"	| costumes |	self area hideTip.	self context last: (self context gridPoint: aPoint).	costumes := self context costumesAt: aPoint.	"user clicked in the background or in one or several curve item, handle it immediately"	self handleChoice: costumes.	^ true! !!DrGFlyPointBuilder commentStamp: ''!To build free point and intersection point, it is also used to construct on the fly those point categories.!!DrGFlyPointBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	curveItemA := curveItemB := nil! !!DrGFlyPointBuilder methodsFor: 'accessing' stamp: ''!arguments	(curveItemA notNil and: [curveItemB notNil])		ifTrue: [^{curveItemA . curveItemB . point}].	curveItemA ifNotNil: [^{curveItemA . point}].	^{point}			! !!DrGFlyPointBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint"The behavior is a bit different as we send in the collection all the parent in one shot: to create the interesection the user clicks on two curves at the same time"	super addItem: aMathItemCollection at: aPoint.	aMathItemCollection ifNotEmpty: 		[curveItemA := aMathItemCollection first].	aMathItemCollection size >= 2 ifTrue:		[curveItemB := aMathItemCollection second]! !!DrGFlyPointBuilder methodsFor: 'private' stamp: ''!restoreState: anArray	curveItemA := anArray first.	curveItemB := anArray second.	point := anArray third! !!DrGFlyPointBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ curveItemA notNil or: [point notNil]! !!DrGFlyPointBuilder methodsFor: 'testing' stamp: ''!isCurveIntersectionValid: aCollection	| item state |	state := self saveState.	self restoreState: aCollection.	[item := self buildItem]		on: Error 		do: [self restoreState: state.			^false].	self restoreState: state.	^ item anyOne exist! !!DrGFlyPointBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^self isWanted: aMathItemCollection  at: 0@0! !!DrGFlyPointBuilder methodsFor: 'xml' stamp: ''!itemInstanceFrom: node	self shouldNotImplement! !!DrGFlyPointBuilder methodsFor: 'private' stamp: ''!saveState	^Array with: curveItemA with: curveItemB with: point! !!DrGFlyPointBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection at: aPoint	"click on the background?"	aMathItemCollection ifEmpty: [^true].	"click on two curves?"	(aMathItemCollection size >= 2		and: [aMathItemCollection first isIntersectableItem 			and: [aMathItemCollection second isIntersectableItem]])	ifTrue: [^ self isCurveIntersectionValid: {aMathItemCollection first. aMathItemCollection second. aPoint}].	"click on one curve?"	^aMathItemCollection first isCurveItem		! !!DrGFlyPointBuilder methodsFor: 'constant' stamp: ''!mathItemClass	(curveItemA notNil and: [curveItemB notNil]) 		ifTrue: [^DrGPointIntersectionItem].	curveItemA ifNotNil: [^DrGPointOncurveItem].	point ifNotNil: [^DrGPointFreeItem].	self error: 'Should not be there!!'! !!DrGFlyPointBuilder class methodsFor: 'documentation' stamp: ''!description 	^ DrGeoSystem isTablet		ifTrue: ['Tap to create a point: free point on the background, on a curve or on two curves intersection.' translated]		ifFalse:  ['Click to create a point: free point on the background, on a curve or on two curves intersection.' translated]! !!DrGFlyPointBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Point' translated! !!DrGFreePointBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	curveItem := nil.! !!DrGFreePointBuilder methodsFor: 'accessing' stamp: ''!arguments	curveItem ifNotNil: 			[^ OrderedCollection new 			add: curveItem; 			add: point; 			yourself].	^ OrderedCollection new add: point; yourself! !!DrGFreePointBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection  at: aPoint.	aMathItemCollection 		ifNotEmpty: [curveItem := aMathItemCollection first].! !!DrGFreePointBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ curveItem ~= nil or: [point ~= nil]! !!DrGFreePointBuilder methodsFor: 'xml' stamp: ''!itemInstanceFrom: node	"works both for free point and free point on a curve"	self addItem: (self parentsById: node) at: 0@0.	^ self getItem first.! !!DrGFreePointBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	"the user clicked on the background: we can build a free point" 	aMathItemCollection ifEmpty: [^true].	^aMathItemCollection first isCurveItem.! !!DrGFreePointBuilder methodsFor: 'xml' stamp: ''!postProcess: item from: node	super postProcess: item from: node.	(node attributeAt: #type) asSymbol == #Free		ifFalse: [			item setCurveAbscissa: (node contentStringAt: #value) asNumber] 		ifTrue: [ |x y|			x := (node contentStringAt: #x) asNumber.			y := (node contentStringAt: #y) asNumber.			item point: x@y]! !!DrGFreePointBuilder methodsFor: 'constant' stamp: ''!mathItemClass	curveItem ifNotNil: [^DrGPointOncurveItem].	point ifNotNil: [^DrGPointFreeItem].	self error: 'Should not be there!!'! !!DrGHomothetyBuilder methodsFor: 'constant' stamp: ''!mathItemClass: aMathItem	|className|	className := 'DrG', aMathItem basicType capitalized, 'HomothetyItem'.	^(self class environment classNamed: className)! !!DrGHomothetyBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Homothety: select a center, a value and a geometric object. The first selected point is the homothety center.' translated! !!DrGHomothetyBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Homothety (scale)' translated! !!DrGIcons commentStamp: ''!I just execute-print something like:	(FileStream fileNamed: 'middle-.png') binary contents asByteArray in the class message to get the stringInstance variable forms is a cache for forms dictionnary. Symbols are arc24, 24 is the width.!!DrGIcons class methodsFor: 'form' stamp: ''!pointMorph: extent color: color shape: shape	| morph costume |	costume := DrGPointCostume basicNew 		exist: true;		style: DrGPointCostumeStyle basicNew.	costume style 		costume: costume;		shape: shape.	morph := DrGPointMorph new 		costume: costume;		color: color; 		extent: extent.	costume morph: morph.	^ morph imageForm! !!DrGIcons class methodsFor: 'accessing' stamp: ''!eraser	^self formFromGraphic:  #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 9 239 73 68 65 84 120 218 237 90 91 76 92 85 27 93 231 54 55 152 2 214 182 64 165 23 27 72 109 129 137 144 106 133 146 42 84 45 137 6 155 246 129 55 83 245 193 7 180 49 26 77 154 152 244 197 24 19 125 52 49 233 19 154 152 38 53 40 15 42 38 26 172 166 25 40 49 150 166 173 45 246 70 129 82 58 148 12 12 157 203 185 109 31 190 255 251 247 204 80 34 197 78 161 237 172 4 14 251 156 189 55 103 214 218 123 125 223 222 123 128 60 242 200 35 143 60 242 200 35 143 60 242 200 35 143 60 242 120 152 160 44 245 11 204 135 221 187 119 239 126 249 101 33 250 250 250 250 126 255 125 169 223 6 136 70 163 209 104 84 185 235 124 45 59 1 246 236 217 179 103 223 62 33 82 41 211 92 181 10 168 174 174 174 110 110 6 132 160 31 134 101 89 150 227 0 66 184 174 101 1 182 237 186 174 11 56 142 109 11 1 40 138 108 67 127 187 174 227 200 246 174 75 189 101 223 87 20 69 81 20 192 113 132 72 165 128 174 174 163 71 63 252 48 119 2 168 75 77 56 163 181 181 181 181 181 85 136 222 222 222 222 159 127 6 170 171 107 106 154 155 1 215 101 98 29 199 113 0 203 178 109 38 222 113 232 190 16 146 120 215 117 28 219 166 50 61 183 109 203 146 253 240 53 155 120 134 16 66 8 1 12 14 254 249 231 79 63 229 254 115 47 185 0 7 14 28 56 112 224 128 16 225 112 56 28 14 3 29 29 111 191 221 217 121 59 98 120 36 19 65 92 6 84 85 85 1 85 165 146 162 168 170 166 205 157 49 11 197 216 216 216 216 153 51 192 35 143 148 148 148 151 231 254 243 47 185 0 157 157 157 157 157 157 192 59 239 188 247 222 215 95 203 251 76 164 162 48 181 124 63 243 135 159 26 134 97 80 125 178 16 85 101 97 52 77 215 101 125 22 48 27 60 51 38 39 35 145 75 151 128 141 27 55 109 218 182 237 1 22 160 184 184 184 184 184 88 136 215 94 123 253 245 79 62 1 52 77 81 104 84 51 129 153 126 75 116 166 11 65 53 52 77 211 52 77 122 186 166 209 125 238 135 173 198 117 133 112 221 249 223 103 116 116 100 164 175 15 168 168 168 168 168 173 5 10 11 11 10 124 190 220 243 160 223 107 226 219 219 219 219 219 219 133 16 66 81 54 108 0 86 174 124 244 209 245 235 165 151 43 10 224 186 146 64 121 117 93 46 3 233 22 67 191 229 172 96 233 92 151 37 35 226 89 80 110 37 132 162 0 211 211 211 211 99 99 192 173 91 241 120 44 6 212 214 214 214 110 221 10 152 166 101 217 118 238 249 184 103 51 160 163 163 163 163 163 67 136 158 158 158 158 158 30 250 160 207 62 75 65 147 9 33 106 136 182 116 139 73 31 251 60 19 88 24 38 54 187 44 99 2 205 16 69 81 20 77 227 62 164 48 103 207 158 57 211 211 3 212 215 215 215 191 248 34 160 105 186 174 40 148 101 89 214 3 36 192 241 227 199 143 159 58 5 116 116 188 245 214 225 195 233 132 18 45 76 180 28 201 154 150 62 162 165 167 83 59 69 33 193 164 101 105 26 181 167 145 205 245 185 63 182 42 77 211 117 77 3 70 70 174 94 253 227 15 96 211 166 202 202 167 159 6 130 193 96 176 168 8 72 36 18 9 203 2 226 241 120 124 102 230 1 16 32 20 10 133 154 155 133 216 177 163 169 169 189 29 240 251 3 129 96 48 189 70 118 72 36 33 152 64 77 35 33 184 156 253 92 8 114 255 249 130 43 11 195 87 33 92 55 149 2 70 71 71 71 79 159 6 182 108 121 226 137 237 219 1 211 52 77 74 79 169 159 104 52 26 189 113 227 62 22 96 255 254 253 251 247 239 23 162 170 170 170 170 174 14 40 45 45 43 123 252 241 219 213 204 14 182 50 185 164 17 76 115 68 215 117 157 5 97 43 161 214 50 216 210 58 128 130 45 7 101 238 207 227 209 117 93 7 6 7 7 7 127 252 17 216 182 237 169 167 218 218 50 179 38 0 176 109 219 118 93 224 216 177 95 127 253 226 11 160 178 178 178 178 178 242 62 20 224 220 185 243 231 35 17 160 166 38 20 106 105 89 192 139 252 143 0 182 34 190 74 194 217 162 50 45 137 5 20 130 131 181 140 10 220 175 174 3 215 174 141 141 157 61 11 20 20 20 20 20 21 1 171 87 175 94 189 110 29 165 159 0 144 74 165 82 150 37 189 127 235 214 234 234 93 187 128 129 129 129 129 129 129 187 191 2 206 153 0 85 85 85 85 79 62 41 68 75 75 75 203 171 175 74 11 89 240 11 169 183 15 194 210 146 200 195 179 211 80 77 203 204 154 120 228 235 58 89 207 185 115 231 206 253 242 11 80 87 87 87 183 107 151 252 127 108 57 241 120 60 110 154 192 55 223 28 61 250 193 7 192 198 141 27 54 20 20 0 109 109 109 109 109 109 139 89 210 45 12 119 45 13 13 133 66 161 29 59 132 104 104 104 108 220 183 239 118 94 255 111 200 76 19 21 133 214 5 236 236 186 78 22 98 219 182 109 219 153 158 158 30 140 53 205 48 12 67 182 159 152 24 31 63 127 30 88 183 110 253 250 80 136 250 241 120 0 219 182 44 215 5 18 137 100 50 149 154 155 245 196 98 177 88 52 10 116 119 119 119 119 119 47 227 25 208 212 212 212 244 202 43 66 212 214 134 66 205 205 192 99 143 85 84 108 222 44 159 115 126 47 61 250 118 59 48 115 133 72 183 154 244 167 60 163 116 157 102 134 174 27 70 250 125 190 222 184 49 49 113 225 2 112 226 196 137 19 93 93 64 77 77 77 77 99 163 220 196 75 165 76 211 178 164 245 124 251 109 87 215 193 131 192 206 157 59 119 238 220 41 137 207 245 12 88 180 178 188 146 205 213 139 253 87 172 89 179 102 77 105 41 176 121 243 230 205 47 188 64 155 123 13 13 68 184 227 208 194 43 149 2 174 95 31 31 31 26 2 188 94 143 103 108 12 56 114 228 200 145 175 190 146 196 231 122 6 252 103 11 234 237 125 243 205 131 7 129 217 217 120 60 30 151 158 204 150 192 150 33 199 62 239 241 240 182 175 101 153 102 122 90 73 121 188 162 144 197 112 62 147 93 214 52 42 235 58 197 4 85 165 25 243 238 187 199 143 255 240 3 112 242 228 153 51 167 79 3 207 61 215 210 82 83 35 131 173 244 252 217 217 217 89 224 242 229 75 151 194 97 224 228 201 147 39 143 29 155 75 252 161 67 135 14 29 58 36 4 93 239 190 16 119 44 0 143 252 149 43 11 11 131 65 242 202 217 89 73 168 105 90 86 50 9 88 150 227 88 150 36 84 85 105 133 169 235 114 43 64 8 18 136 77 201 178 136 88 195 0 52 77 8 190 79 2 8 145 105 70 170 74 94 79 105 231 244 116 42 101 154 192 216 216 196 196 245 235 178 150 207 231 245 122 60 210 202 226 241 68 194 52 129 161 161 191 255 254 237 183 249 137 231 114 174 136 95 180 0 140 206 206 189 123 223 120 99 238 72 54 12 195 208 117 32 16 8 4 252 126 34 138 151 246 142 3 24 6 237 78 186 46 29 164 56 14 187 120 230 246 155 16 142 147 190 48 50 12 175 151 219 1 233 231 3 212 239 151 95 14 14 246 247 3 229 229 229 229 229 229 64 36 50 57 57 57 73 239 99 24 178 221 236 108 44 54 53 5 248 253 62 159 162 200 44 39 155 248 92 91 15 99 209 65 152 211 62 30 149 193 96 48 88 88 40 137 103 139 160 92 132 136 231 116 146 218 19 49 154 70 130 249 124 62 159 199 3 148 148 172 88 177 98 5 80 82 82 84 84 84 4 20 23 83 57 24 244 251 3 1 96 197 138 194 194 64 0 8 4 168 126 32 16 8 4 2 64 56 124 241 226 249 243 192 199 31 63 255 252 222 189 233 66 146 101 205 204 204 204 196 227 192 240 240 240 240 224 32 189 175 105 206 13 182 217 214 147 107 1 22 60 3 216 122 250 251 223 127 255 163 143 0 219 166 244 205 113 40 157 99 41 88 16 199 81 85 215 165 160 103 154 116 196 7 0 94 111 230 74 214 182 229 238 165 109 147 69 80 44 201 76 43 29 135 44 200 227 161 25 164 170 126 191 174 3 87 174 68 163 55 111 210 127 86 20 160 162 98 237 218 244 131 148 100 210 52 77 19 152 154 154 154 154 156 36 65 98 177 249 137 191 87 214 115 199 2 52 54 110 223 254 204 51 64 48 232 245 22 20 0 138 226 243 21 22 206 221 26 96 200 147 43 69 73 183 18 0 184 93 125 18 13 176 109 211 164 35 71 110 79 87 185 25 199 91 20 36 208 247 223 247 247 247 246 2 189 189 159 125 246 249 231 128 235 70 163 177 88 186 0 228 249 87 174 92 190 124 226 4 16 14 135 195 223 125 55 63 241 247 202 122 238 88 128 210 82 211 36 34 2 1 159 15 112 28 191 223 48 36 65 138 66 158 205 87 41 4 121 53 91 145 244 122 185 128 250 255 203 232 228 245 148 5 81 16 230 45 6 106 153 254 70 20 188 7 6 134 135 47 92 0 20 133 118 49 45 107 122 122 118 86 214 26 31 191 118 237 175 191 128 181 107 43 42 54 110 4 218 218 86 175 94 14 196 51 22 28 3 182 108 41 45 173 168 32 66 57 173 164 223 68 168 227 144 199 243 209 158 116 123 143 199 235 5 92 151 60 219 117 41 109 116 93 143 71 215 1 199 49 12 143 71 182 119 28 154 31 150 69 177 193 113 232 234 186 30 15 157 245 82 48 22 194 239 247 122 129 161 161 241 241 209 81 192 52 147 201 68 2 152 152 32 171 97 68 34 145 200 197 139 128 101 165 82 67 67 75 239 249 217 88 240 12 176 109 202 227 109 155 22 48 201 228 212 212 244 52 61 35 139 161 145 234 186 84 143 13 71 211 232 32 132 211 80 222 163 231 153 160 170 180 53 144 157 231 243 186 129 251 179 109 90 185 242 174 102 60 78 49 163 189 189 190 190 161 1 184 121 115 98 226 198 13 96 102 38 22 75 183 160 178 178 178 50 85 93 62 158 191 104 1 70 70 110 222 140 68 104 223 60 145 144 249 59 125 101 132 238 155 38 144 76 38 147 201 36 221 231 44 136 199 149 16 128 174 123 60 134 33 133 224 249 194 66 102 30 35 146 240 188 14 224 5 89 122 12 73 36 40 200 143 143 15 15 95 189 10 148 148 148 148 148 148 200 231 255 70 252 82 89 207 29 11 224 243 145 149 156 58 53 58 58 50 2 172 90 101 24 100 45 252 61 155 204 19 42 199 225 163 196 116 138 129 84 138 206 90 169 13 45 184 210 219 101 7 95 69 161 172 135 173 143 131 176 215 75 11 172 91 183 82 169 68 2 8 4 10 11 11 10 128 151 94 58 124 248 211 79 229 23 169 150 43 241 140 59 126 129 229 190 7 180 80 226 115 189 197 144 51 100 239 14 222 239 229 251 22 75 77 220 67 75 124 54 150 154 200 135 150 248 60 242 200 35 143 60 242 200 35 143 60 242 88 60 254 1 118 124 0 146 139 47 157 2 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!gridMagnet	^ self formFromGraphic:  #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 218 8 3 11 34 36 202 80 60 214 0 0 1 137 73 68 65 84 104 222 237 88 61 75 196 64 16 125 147 28 34 34 71 176 241 42 43 197 66 172 82 137 156 133 189 165 246 254 13 91 193 191 97 47 88 9 150 22 126 112 26 56 27 177 136 41 4 17 221 59 44 2 73 33 98 110 45 206 156 146 160 249 48 159 231 76 19 216 12 179 243 102 119 242 222 132 164 148 168 179 41 168 185 49 128 202 1 32 34 73 68 145 141 81 21 191 218 159 0 241 87 136 1 48 0 6 192 0 254 98 141 172 2 9 33 164 227 56 208 52 173 235 175 189 29 237 234 0 240 110 139 68 177 220 27 129 165 253 83 42 148 137 29 199 41 134 184 2 251 134 136 204 127 41 165 164 168 64 223 253 44 203 146 0 208 19 207 35 31 185 185 149 58 81 109 117 14 0 176 124 104 208 111 251 134 174 80 84 226 73 253 178 182 224 190 153 245 128 95 121 227 170 51 90 91 24 12 146 85 93 249 186 209 246 197 3 0 224 100 101 81 2 192 122 199 164 202 107 161 179 86 43 148 140 253 89 132 141 126 159 152 7 242 182 182 16 212 22 130 38 102 167 153 137 75 181 169 249 153 122 3 80 154 147 60 19 215 87 204 101 205 196 121 251 53 170 84 205 219 237 53 9 0 238 245 83 57 114 26 0 84 85 237 122 158 167 3 128 119 188 135 56 114 250 245 254 101 40 191 31 237 225 179 231 142 222 253 196 192 185 244 64 81 146 58 151 19 240 147 55 46 207 117 127 173 185 115 144 58 158 29 83 8 242 72 25 148 211 166 121 151 90 78 199 189 247 99 117 2 153 141 148 101 249 241 223 105 150 211 12 128 1 48 0 6 48 94 0 120 38 102 38 254 103 61 240 1 57 113 219 42 89 173 167 92 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!line	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 149 73 68 65 84 120 218 237 155 61 174 130 64 20 133 103 172 97 17 20 108 107 98 50 157 49 178 25 151 96 193 10 168 220 137 149 137 37 189 13 201 125 5 121 49 206 123 58 255 204 85 206 215 65 32 145 243 225 56 3 71 33 0 47 136 250 190 239 137 74 127 142 213 113 62 55 77 211 16 93 46 109 219 182 68 16 81 8 83 196 253 222 117 93 7 17 185 216 152 59 78 167 113 28 71 33 174 215 105 154 38 33 110 183 97 24 6 33 32 34 51 74 41 165 212 35 224 237 182 174 235 154 40 238 27 241 123 28 196 189 196 12 62 141 8 51 120 8 176 226 42 98 222 178 5 12 1 193 216 68 204 216 68 32 248 104 222 139 128 128 197 136 21 161 181 214 90 63 206 55 183 129 35 177 67 17 130 79 74 232 80 4 17 38 27 191 195 93 131 147 210 220 51 79 95 133 56 30 171 170 170 74 95 54 31 60 5 216 144 242 249 14 151 114 158 190 98 101 157 136 215 179 28 219 143 109 154 149 53 248 131 45 120 136 200 132 111 240 16 145 136 216 224 243 60 244 91 33 190 11 172 60 15 253 86 200 225 176 223 239 118 225 43 91 136 96 66 168 8 188 42 77 12 68 48 1 67 19 19 32 130 9 16 193 4 136 96 2 68 48 1 34 152 0 17 76 128 8 38 64 4 19 150 17 129 218 141 21 84 46 153 128 202 37 19 80 185 100 66 234 202 37 122 78 129 152 34 158 131 68 193 108 49 254 15 114 57 17 50 244 196 239 36 246 142 150 222 121 38 110 198 125 42 241 149 203 208 5 29 4 56 129 202 101 102 80 185 44 14 154 126 133 136 13 222 85 4 90 28 22 82 255 149 202 20 81 250 250 216 18 219 244 3 31 206 15 224 42 63 94 246 95 66 123 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!point: extent color: color shape: shape	^ self 		iconWith: (self pointMorph: extent color: color shape: shape)		extent: extent		inset: self menuInset 		background: Color white.! !!DrGIcons class methodsFor: 'helpers' stamp: ''!menuInset	^ 4! !!DrGIcons class methodsFor: 'accessing' stamp: ''!vector	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 73 73 68 65 84 120 218 237 213 49 142 130 64 20 128 225 113 59 11 14 65 193 77 188 0 23 152 120 3 206 194 13 204 196 130 154 130 202 214 83 88 16 19 75 58 10 27 34 86 47 36 99 8 236 46 227 51 248 127 141 25 108 204 255 230 161 49 0 0 0 0 0 0 111 179 209 254 1 159 226 126 207 178 44 235 123 255 249 249 92 150 101 105 204 110 87 215 117 189 89 188 215 215 13 96 44 244 237 86 85 85 53 156 175 215 174 235 58 99 142 199 166 105 26 99 30 143 52 77 83 99 156 115 206 185 229 6 177 250 1 204 13 46 36 188 144 1 28 14 109 219 182 203 111 192 143 118 160 208 182 219 60 207 243 33 220 220 240 62 107 173 181 246 117 144 255 181 250 13 240 93 46 73 146 36 67 200 177 240 161 95 61 98 245 27 48 102 234 198 11 9 31 106 3 190 102 0 99 255 5 114 211 199 206 18 62 212 6 172 158 132 151 87 207 233 20 199 113 220 247 251 125 20 69 209 48 16 57 203 167 127 227 67 109 192 106 205 13 239 135 157 250 30 19 254 26 254 183 103 120 8 175 100 169 240 62 6 49 33 84 120 31 225 61 239 10 15 15 225 149 16 94 9 225 149 16 94 9 225 149 16 94 9 225 149 16 94 9 225 149 16 94 9 225 149 16 94 9 225 149 244 125 81 20 5 225 213 17 254 195 16 254 67 16 30 0 0 0 175 158 187 58 229 157 66 156 78 5 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!createMultiple	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 219 6 29 6 2 11 56 119 251 22 0 0 1 11 73 68 65 84 104 222 237 151 205 13 131 48 12 133 177 197 0 28 122 232 28 172 210 57 89 165 179 176 129 123 105 37 14 129 36 142 159 67 42 127 18 226 128 228 23 255 17 189 105 10 130 32 8 130 123 33 223 167 8 70 11 40 98 87 49 163 5 42 226 145 38 0 23 86 91 156 70 39 149 140 92 21 143 209 2 6 73 209 225 109 178 3 85 2 25 168 224 251 81 163 58 129 102 129 198 113 202 22 136 26 22 151 12 58 32 21 5 82 47 49 106 124 36 83 208 162 238 50 90 64 185 15 169 238 138 166 66 169 223 168 100 222 154 248 214 177 125 4 46 22 23 162 33 29 146 128 221 150 230 2 207 199 130 61 60 92 32 8 130 160 187 191 69 56 50 87 127 171 97 6 29 152 188 90 204 14 213 135 218 79 118 222 135 22 255 0 79 160 139 253 100 167 202 195 58 64 160 185 87 249 219 158 29 240 182 159 240 17 50 247 183 94 55 174 151 253 116 93 220 191 73 98 28 194 126 118 186 7 32 44 239 215 233 183 125 221 238 159 192 89 18 251 186 141 209 129 84 18 191 195 15 199 213 56 13 203 7 27 12 132 199 176 214 170 20 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!iconWith: morphOrForm extent: extent inset: inset background: aColor	| form imageForm|	morphOrForm isMorph 		ifTrue: [ |surface |			surface := AthensCairoSurface extent: extent.			surface drawDuring: [:canvas| 				morphOrForm position: 0@ ((extent y - morphOrForm height) // 2).				canvas draw: morphOrForm].			imageForm := surface asForm] 		ifFalse: [imageForm := morphOrForm].	form := (FormCanvas extent: extent + (inset * 2)) fillColor: aColor.	form paintImage: imageForm at: inset @ inset.	^ form form! !!DrGIcons class methodsFor: 'accessing' stamp: ''!createAndMove	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 24 0 0 0 24 8 6 0 0 0 224 119 61 248 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 3 152 73 68 65 84 72 199 181 150 111 76 155 85 20 198 127 183 45 157 64 9 89 72 216 194 212 18 144 66 178 4 54 162 4 170 147 15 68 81 214 26 23 18 135 113 115 24 13 146 169 153 201 18 12 81 99 244 203 20 17 93 92 182 15 203 134 154 105 130 75 220 146 206 40 206 178 17 54 33 197 132 145 77 201 168 150 117 98 97 64 11 133 240 167 127 222 30 63 16 154 17 186 63 17 56 95 222 188 231 189 247 62 247 156 231 62 247 121 149 136 8 235 24 58 214 57 12 171 153 124 163 194 188 236 61 219 233 93 251 10 178 157 222 132 11 175 25 64 83 83 19 74 41 46 5 22 18 15 144 251 8 64 18 13 181 150 149 198 243 214 178 210 132 115 87 112 160 148 90 2 6 192 110 183 211 213 241 13 67 158 97 148 82 136 8 74 41 182 109 43 162 175 239 10 197 197 197 0 164 164 154 120 220 90 22 95 231 242 111 221 43 43 0 228 187 83 159 201 192 181 159 226 59 3 228 214 205 11 210 223 115 58 158 123 181 246 121 25 245 58 197 102 179 73 67 67 131 136 136 52 54 54 138 136 72 77 77 141 12 14 14 198 43 90 193 65 118 246 131 232 245 58 234 234 234 226 185 152 166 33 154 6 128 217 108 102 239 238 103 24 241 141 210 217 217 73 85 85 21 0 149 149 149 0 212 215 215 223 153 100 17 225 248 241 54 50 50 54 242 70 221 206 120 187 208 4 137 45 2 60 105 221 202 35 57 89 56 157 61 24 141 70 154 155 155 201 207 51 83 94 94 14 16 127 222 241 20 181 126 253 3 63 183 119 145 102 50 113 244 139 247 151 241 1 80 251 226 179 104 225 8 151 187 175 16 12 6 41 45 202 162 227 220 49 242 243 22 53 225 114 185 238 14 32 34 156 56 121 142 52 83 10 59 118 60 122 251 7 0 242 114 178 184 229 27 227 204 143 93 188 190 207 198 158 93 21 124 220 210 138 165 160 16 151 203 69 110 110 110 98 0 165 20 118 187 29 0 103 71 7 215 7 135 216 148 153 193 168 247 34 74 167 72 51 165 114 179 255 12 177 72 20 145 197 118 29 124 173 26 223 200 56 191 116 184 112 56 28 148 148 148 36 22 154 82 138 192 120 47 219 139 30 142 131 52 127 126 2 4 174 94 29 68 161 103 120 100 10 148 14 68 72 75 125 128 191 46 181 226 247 7 57 223 217 139 165 160 16 0 191 223 127 119 37 191 125 224 21 172 37 249 216 237 118 206 58 156 40 93 18 55 134 103 209 27 146 233 31 248 7 141 36 46 254 254 47 161 185 8 11 179 33 66 209 8 223 158 189 64 75 75 11 110 183 155 64 32 64 32 16 160 189 189 125 249 101 183 36 30 255 88 47 213 187 42 49 110 48 208 221 221 141 94 103 36 197 148 206 184 127 146 212 180 141 16 213 8 71 21 198 13 41 76 79 5 112 252 218 131 165 160 144 218 125 47 175 216 249 146 208 12 183 147 123 244 200 135 236 174 174 226 233 138 39 120 110 231 83 8 26 254 137 49 98 209 116 82 146 147 153 14 78 176 48 59 201 223 158 25 68 9 159 28 105 227 94 118 178 172 69 251 223 252 128 119 222 253 148 172 45 155 144 152 70 76 34 20 109 125 136 140 140 116 54 111 206 36 18 137 226 243 186 65 193 87 109 231 177 217 108 247 188 12 85 34 71 203 201 201 225 212 201 67 88 44 102 36 166 161 133 66 12 251 102 144 249 49 194 161 57 220 67 195 28 250 242 123 174 187 189 255 207 209 60 30 15 47 188 116 0 127 96 10 4 20 138 45 153 201 40 3 204 204 206 163 79 210 175 222 50 183 23 63 70 56 28 1 5 162 19 68 52 230 230 34 204 135 163 24 12 134 248 209 92 149 101 94 27 112 19 156 206 68 162 81 36 18 101 98 114 134 254 63 61 8 178 54 166 239 243 141 177 255 173 143 64 167 136 41 56 248 222 97 14 31 59 77 223 31 19 56 28 142 251 2 80 235 253 219 242 31 185 225 254 15 195 173 162 18 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!distance		^self formFromGraphic:  #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 212 73 68 65 84 120 218 237 153 59 170 2 49 24 133 227 221 128 133 165 157 149 224 62 132 108 69 16 23 32 86 174 64 132 244 46 65 16 2 22 130 59 176 180 16 5 221 132 221 88 92 66 32 26 50 143 252 127 226 120 190 102 8 153 201 227 156 147 76 116 132 0 32 62 69 145 122 4 64 8 1 35 178 1 70 100 2 140 96 194 8 237 94 221 122 64 140 207 0 183 30 68 166 106 226 91 99 68 217 137 134 146 73 213 63 245 243 201 169 187 212 115 19 142 207 136 63 174 142 104 48 66 117 58 113 219 53 237 209 27 241 165 6 80 9 111 219 223 239 215 235 201 196 237 47 62 145 39 16 18 198 55 145 178 66 114 11 111 25 143 167 83 165 170 142 183 53 80 111 5 70 120 123 56 48 229 251 253 112 232 247 237 53 246 120 50 223 130 248 19 175 148 82 74 217 196 239 118 231 243 124 110 235 255 141 112 199 215 58 210 37 254 115 255 118 5 28 143 155 77 175 87 20 171 213 98 49 24 52 95 17 153 173 0 254 196 155 242 112 56 26 109 183 118 5 152 251 77 249 118 123 60 158 79 33 78 167 203 165 219 21 98 54 91 46 175 87 115 223 215 191 19 242 217 227 221 107 40 241 82 74 41 101 253 241 39 118 46 221 169 198 36 222 71 40 241 70 120 173 181 214 250 189 156 82 213 82 194 80 183 207 149 248 47 91 1 72 124 34 144 120 31 1 231 154 38 22 137 143 54 209 106 245 72 124 89 42 58 233 75 180 59 64 36 158 24 95 226 233 62 180 180 37 241 46 13 157 197 30 159 9 72 124 93 152 191 7 132 159 71 226 163 80 53 81 191 147 120 23 98 231 195 95 200 144 120 22 222 79 77 191 154 120 23 246 255 130 144 248 36 32 241 62 200 223 1 72 124 18 144 248 178 68 255 29 128 196 103 1 18 207 206 103 97 32 60 59 33 35 32 60 19 62 35 32 60 51 62 35 124 245 16 158 136 144 208 16 158 9 8 159 9 16 30 0 0 146 243 2 254 23 48 217 74 149 99 100 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!segment	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 123 73 68 65 84 120 218 237 218 61 174 130 64 20 134 225 195 141 37 44 130 130 109 77 76 166 51 70 54 227 90 168 220 137 149 137 123 176 33 153 91 80 220 128 23 231 15 228 104 222 167 33 152 104 228 251 6 144 120 68 0 0 192 55 114 110 188 197 212 207 58 31 75 224 161 118 105 111 155 11 184 40 182 62 160 79 147 24 88 236 10 167 152 57 43 93 130 16 42 177 128 240 21 109 173 181 214 254 157 49 211 125 100 153 254 202 153 223 18 252 162 194 131 159 110 41 98 44 242 18 20 26 220 243 37 234 122 109 154 166 17 57 159 203 178 44 183 62 108 61 22 190 9 23 197 120 133 23 197 126 95 85 85 37 114 187 245 125 223 139 220 239 93 215 117 34 143 71 219 182 45 103 66 164 185 75 139 255 102 59 20 225 220 229 82 215 117 237 220 112 70 56 71 17 153 124 193 83 196 74 98 131 167 136 133 228 6 111 140 49 198 80 68 182 216 7 172 105 240 20 145 232 116 58 30 15 135 244 39 91 138 80 130 34 148 160 8 37 40 66 9 138 80 130 34 148 160 8 37 40 66 9 138 80 130 34 148 160 8 37 40 66 137 247 20 193 200 165 215 58 69 204 255 35 136 25 161 69 12 123 190 128 41 32 153 175 136 65 236 152 13 162 189 46 34 190 0 230 156 18 77 139 24 7 201 128 217 219 252 31 228 251 138 96 108 124 36 119 69 199 143 225 51 158 46 34 57 35 151 175 95 247 163 128 32 207 35 151 195 254 214 223 235 107 164 143 92 114 51 94 72 238 192 25 18 229 6 79 17 11 33 216 141 228 78 250 225 195 253 2 130 11 51 156 184 61 65 99 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!segment: thick color: color dash: dash	^ self iconWithBackground: (self segmentMorph: thick color: color dash: dash).! !!DrGIcons class methodsFor: 'accessing' stamp: ''!rotation	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 3 12 73 68 65 84 120 218 237 155 189 106 181 64 16 134 85 210 89 88 167 144 64 26 193 194 52 22 66 238 64 66 106 123 187 16 115 1 185 128 128 157 96 237 77 132 220 66 192 54 22 150 129 96 145 43 176 246 43 14 131 100 206 217 111 221 31 221 245 231 105 68 61 174 235 59 179 51 235 142 199 48 14 14 14 180 97 24 254 110 183 143 165 186 3 39 246 35 56 230 106 153 219 144 4 54 77 213 2 168 134 83 0 154 199 98 97 89 61 124 63 134 97 28 1 32 228 126 4 154 155 137 57 96 186 240 105 154 166 105 138 61 254 48 24 39 211 67 7 22 254 178 33 240 44 135 182 221 61 236 66 200 17 126 63 134 160 132 6 209 152 63 85 64 104 127 127 161 75 241 123 128 105 254 29 49 32 56 54 200 110 71 136 232 3 146 5 227 205 25 69 81 20 69 177 121 225 177 0 211 161 9 59 77 120 124 255 97 240 60 207 243 188 113 63 8 130 32 8 54 111 8 121 179 32 62 67 144 67 77 24 134 97 24 142 231 227 56 142 227 88 119 131 48 247 79 254 8 224 187 63 249 250 44 203 178 44 211 125 100 144 28 139 249 66 50 47 47 207 207 79 79 178 132 103 239 71 158 231 121 158 15 131 109 219 182 109 235 102 136 5 12 160 11 96 8 232 63 95 104 162 229 36 210 113 218 136 93 32 4 233 2 14 77 114 158 91 154 176 162 29 89 15 144 172 217 66 146 232 8 144 198 250 13 128 67 146 216 115 139 94 207 204 250 13 0 192 123 68 146 36 73 146 208 158 107 57 3 104 82 146 156 159 40 138 162 40 50 140 182 109 219 182 149 221 58 127 8 210 212 0 242 99 170 239 251 190 239 27 70 215 117 93 215 209 126 77 90 4 164 29 199 91 233 130 204 45 212 252 139 109 150 101 89 150 165 79 104 157 56 2 72 203 197 152 169 231 119 179 154 73 133 49 4 201 50 196 212 223 203 27 202 48 27 114 28 199 113 28 89 173 138 195 153 3 104 194 232 87 72 129 228 235 186 174 235 186 170 123 51 34 57 9 143 194 235 86 156 175 235 186 174 235 49 25 111 22 221 138 243 124 47 98 27 64 77 113 158 92 55 208 107 117 116 113 88 5 22 93 68 27 6 177 197 184 233 60 62 190 190 222 223 15 195 221 221 195 195 237 237 106 95 196 104 197 121 118 202 178 44 203 210 48 78 203 209 242 123 12 194 171 80 139 3 209 226 60 110 135 124 159 203 5 25 246 145 0 30 13 66 99 193 177 231 107 55 2 176 71 159 246 225 236 232 241 85 85 85 85 117 190 127 185 85 210 231 42 227 249 190 239 251 190 55 205 166 105 154 166 145 191 68 64 242 252 175 175 143 143 239 111 13 166 223 243 20 231 105 200 143 245 216 179 241 72 16 141 253 179 35 183 56 207 10 187 65 72 253 155 219 0 210 67 16 20 231 217 66 139 108 104 95 216 1 227 113 220 223 169 119 186 185 9 130 235 107 254 164 172 62 102 41 225 92 40 200 81 96 8 146 160 63 63 77 243 251 123 222 34 24 2 120 127 127 123 251 252 164 59 220 206 12 64 255 103 15 205 147 193 0 144 116 113 8 98 77 198 11 253 71 108 189 96 143 7 129 213 132 214 29 128 103 63 216 195 213 78 46 54 204 50 211 229 131 51 14 225 53 225 16 90 17 243 126 84 124 112 112 240 127 254 1 239 98 79 150 168 109 20 16 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!open	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 219 8 3 7 31 18 173 68 203 48 0 0 10 42 73 68 65 84 104 222 237 152 105 108 92 215 117 199 127 247 190 121 51 67 206 198 25 110 34 69 73 164 101 203 148 69 201 218 98 73 222 106 179 33 100 201 78 209 216 49 156 184 48 210 162 69 139 194 49 90 7 48 144 124 8 2 39 64 81 59 95 220 54 112 55 55 70 18 183 104 221 196 73 92 27 85 1 215 218 44 137 182 36 139 212 70 106 27 238 228 112 246 125 121 219 205 135 161 40 185 176 3 83 142 0 163 224 31 184 120 247 189 119 31 222 255 127 207 57 247 222 115 96 25 203 88 198 50 150 241 25 32 110 228 155 174 103 241 182 151 252 62 205 109 6 106 5 148 85 109 180 189 43 51 149 147 111 82 224 50 38 224 124 30 5 136 13 79 208 213 217 219 210 19 110 110 124 48 220 28 218 238 243 4 219 45 101 40 211 172 97 91 204 204 79 229 7 19 177 204 113 39 146 27 30 124 158 244 231 69 128 184 229 113 130 27 182 118 63 176 170 171 253 15 123 86 247 108 246 250 181 118 209 80 211 209 108 205 193 82 40 148 116 60 170 90 114 138 165 108 53 57 151 158 58 122 121 108 236 159 223 249 86 241 125 192 188 153 2 52 128 223 249 46 222 137 131 88 31 55 160 239 79 233 221 117 207 166 63 217 178 113 227 115 183 246 174 217 165 135 43 77 5 109 66 79 217 81 153 178 162 34 103 207 136 172 61 35 139 42 38 29 119 209 27 12 251 35 45 193 142 62 175 29 90 229 52 102 230 102 134 107 147 55 211 165 180 157 207 210 208 216 44 159 88 255 123 238 21 242 1 59 158 122 7 99 225 157 220 244 251 45 183 245 63 188 245 185 29 155 119 253 81 120 133 183 163 40 102 68 214 156 21 53 39 143 233 84 177 177 80 56 128 194 81 22 134 83 162 104 39 144 110 75 134 195 145 206 72 91 112 149 127 99 126 54 186 191 54 6 168 155 34 160 107 23 122 192 23 121 106 93 247 250 111 132 221 158 150 192 206 76 108 234 29 18 221 143 178 122 247 158 123 254 124 235 157 155 159 12 180 234 145 148 53 46 12 85 198 84 21 170 78 1 75 85 235 19 171 192 37 221 72 52 16 10 133 162 108 231 208 220 142 30 14 180 174 17 150 203 155 45 207 31 75 95 38 255 113 238 217 228 165 55 224 165 167 106 16 83 160 52 129 71 129 253 105 5 184 6 15 97 61 246 72 199 200 125 235 190 242 117 233 82 127 57 60 113 228 190 149 175 124 248 186 199 136 116 109 222 186 241 15 2 205 222 112 214 156 0 192 82 53 74 118 154 154 83 2 165 240 106 1 2 90 155 242 203 118 71 216 186 99 83 147 101 82 178 224 196 68 222 138 35 188 46 173 101 101 224 193 238 109 145 129 203 137 244 107 156 196 116 187 8 174 14 241 112 79 19 143 119 5 24 232 88 213 233 183 109 155 185 153 249 132 174 225 215 4 13 231 226 252 240 200 20 207 124 42 1 156 196 206 14 36 199 115 229 120 233 246 181 125 161 251 131 123 239 93 221 178 110 179 101 27 170 115 101 135 63 99 77 10 144 24 78 153 188 57 79 205 41 2 138 144 187 131 22 122 85 33 101 166 198 226 241 211 217 116 54 233 247 53 69 90 86 4 214 55 183 251 58 147 92 22 69 59 73 184 41 28 110 109 109 122 164 55 147 14 118 223 202 64 87 144 47 6 66 65 207 182 129 1 118 238 221 75 165 84 226 223 95 124 145 80 176 177 245 182 45 91 136 158 57 67 48 151 95 251 169 45 0 56 53 171 58 155 43 228 114 21 171 208 81 19 121 177 166 171 219 167 148 67 193 142 11 16 88 170 74 222 158 195 80 37 52 225 34 172 119 17 52 187 107 83 99 201 51 151 70 162 127 63 117 41 182 127 222 172 101 130 210 19 185 173 119 229 151 238 216 188 250 217 240 170 53 171 147 206 37 97 187 74 174 176 87 251 242 174 181 238 71 119 110 189 159 29 123 247 210 119 247 221 204 70 163 252 236 165 151 200 167 82 60 250 204 51 108 233 239 71 8 193 75 79 63 205 209 75 239 159 94 138 0 52 95 54 94 49 75 51 110 209 176 222 144 69 42 42 35 4 2 77 106 72 160 224 196 176 168 160 187 220 52 106 97 66 214 45 106 124 52 113 248 240 209 193 151 7 15 85 222 226 100 125 169 12 184 107 33 86 69 125 218 238 172 182 227 169 93 34 220 186 2 225 64 199 173 171 197 221 127 253 199 244 111 253 34 133 76 134 159 124 239 59 156 59 118 130 175 62 247 28 219 6 6 16 88 80 56 1 197 83 196 39 162 164 203 44 77 192 153 203 148 119 108 74 79 59 54 74 115 185 132 92 216 30 148 114 200 91 49 202 42 141 203 229 70 8 65 155 188 93 197 38 139 227 231 79 93 124 121 240 141 202 127 55 197 233 233 238 224 177 181 77 60 214 220 200 54 165 192 87 244 81 78 26 248 219 130 152 90 137 134 80 3 150 53 133 74 254 23 255 241 87 63 101 244 116 138 111 254 227 63 209 185 118 45 148 47 64 250 127 192 46 99 208 70 42 150 32 93 89 162 128 244 191 82 74 245 207 70 13 211 176 220 158 6 221 82 85 20 80 181 227 20 156 57 92 46 23 160 227 145 126 244 90 200 154 137 143 76 79 28 158 190 227 113 63 223 15 183 176 1 160 169 173 141 187 30 122 136 29 123 246 224 106 14 240 243 51 63 69 147 6 72 11 71 214 176 74 195 56 165 30 38 174 228 232 255 218 147 117 242 169 183 161 114 177 78 195 21 34 17 211 113 20 70 174 198 232 146 4 0 78 62 85 187 82 169 84 11 141 193 64 196 118 12 76 85 38 109 78 96 170 50 82 104 0 216 212 80 141 37 215 214 190 47 220 19 122 74 191 47 115 60 202 166 85 219 233 223 253 101 122 183 111 71 88 9 40 143 82 204 158 39 104 207 80 52 219 113 121 189 216 182 134 87 132 40 150 221 36 231 50 236 124 248 97 176 11 96 204 130 22 2 161 129 208 24 187 156 37 91 101 196 118 62 126 83 253 77 2 84 124 38 57 59 155 24 47 52 183 222 25 1 69 222 154 35 103 205 162 80 8 177 224 82 216 196 173 243 162 169 101 165 216 178 103 23 249 109 219 144 181 42 25 239 113 42 83 31 208 40 107 32 116 26 164 70 179 108 36 17 175 224 105 9 80 204 166 144 68 120 229 7 239 210 181 110 29 145 21 43 160 114 5 180 64 157 60 26 8 201 133 225 33 82 75 240 127 0 121 181 147 203 171 120 42 19 79 73 165 59 166 170 146 54 199 235 155 149 0 181 176 137 74 116 26 100 19 142 13 142 52 104 137 180 82 85 101 246 93 56 204 233 185 57 28 25 2 87 19 154 39 204 214 142 181 172 53 220 216 231 230 41 29 153 230 245 239 189 133 191 181 155 63 123 225 133 250 15 141 121 208 252 215 154 222 194 165 161 243 164 170 75 19 112 213 2 248 219 237 185 92 57 53 105 89 230 166 2 113 89 180 147 8 161 33 133 70 163 108 194 77 0 175 19 86 170 228 33 151 204 138 28 22 229 210 17 214 55 134 232 191 117 59 157 225 8 210 29 196 52 97 100 104 146 225 99 23 25 26 188 0 186 198 157 119 223 203 238 215 94 164 125 205 154 250 207 106 51 224 148 235 196 145 32 36 21 195 71 38 30 39 81 226 216 13 9 200 155 57 35 153 75 206 229 42 73 167 234 201 227 147 173 202 39 90 176 13 97 219 69 173 154 78 231 18 209 11 103 179 165 147 99 235 238 218 116 151 111 247 151 190 66 179 227 195 231 109 68 211 116 20 26 191 252 201 65 222 121 227 8 29 107 58 185 243 254 123 249 139 191 253 6 171 215 247 45 68 89 13 140 57 48 211 96 101 65 243 45 186 14 72 174 156 155 192 114 40 207 23 249 224 134 4 156 246 83 187 61 95 56 147 45 164 13 191 236 210 138 105 85 153 205 20 167 38 231 162 99 137 249 228 177 115 251 83 51 83 31 86 228 35 17 231 133 59 30 184 205 119 75 103 7 228 219 64 184 64 104 252 236 31 222 102 116 104 130 111 189 250 42 93 235 122 65 217 96 231 160 50 6 118 22 156 234 53 194 178 97 33 112 229 130 5 52 78 29 60 78 172 200 123 142 90 218 241 123 81 0 207 227 164 190 147 60 123 120 104 223 126 77 121 198 231 115 211 231 11 25 227 120 60 81 157 204 228 139 133 137 55 197 102 208 90 245 136 163 185 61 158 133 163 96 61 8 199 70 166 56 117 100 132 111 255 248 53 2 145 48 84 39 192 136 213 211 141 171 68 101 227 66 192 202 235 136 215 175 182 35 57 241 238 123 204 22 57 176 212 211 168 235 186 190 243 238 104 246 104 190 148 125 250 196 235 36 153 166 246 209 115 188 20 0 82 162 233 94 111 157 220 130 27 28 122 251 3 6 158 250 58 129 72 4 140 56 88 105 144 222 143 18 254 63 164 175 239 143 143 68 169 150 74 204 230 217 255 89 4 192 127 98 159 128 169 143 31 170 28 16 72 137 174 187 221 117 2 210 71 173 106 48 114 242 60 95 253 246 247 235 67 172 204 130 139 124 50 97 132 88 120 38 64 72 6 247 29 160 104 48 30 47 241 254 103 19 240 155 51 203 26 128 75 224 210 92 174 58 9 217 192 201 131 31 112 215 67 123 240 52 52 212 3 84 234 159 76 120 145 248 213 190 32 155 200 114 228 205 183 24 77 242 163 27 73 122 228 167 31 234 24 11 73 180 182 152 141 74 15 131 251 14 241 224 19 79 212 103 223 169 128 240 130 244 92 215 220 32 174 94 23 154 212 65 232 56 142 198 191 253 224 111 48 77 171 118 33 205 171 55 146 145 45 193 2 212 164 64 91 44 4 8 73 124 38 73 176 185 133 112 91 91 253 104 32 221 11 175 175 205 240 71 251 98 209 109 166 47 69 249 249 15 95 230 220 177 65 251 127 163 124 173 84 99 250 38 11 16 134 20 74 191 118 171 113 230 216 135 252 238 147 79 214 103 95 217 32 244 79 32 44 22 151 203 232 153 115 188 253 202 191 112 246 232 81 170 22 137 247 38 121 122 44 203 47 110 52 39 94 146 5 52 41 92 215 123 159 66 208 211 215 87 95 227 133 107 113 118 175 85 107 234 164 103 174 68 25 58 112 144 161 3 7 152 28 29 69 129 117 118 158 191 59 57 199 243 134 77 238 179 36 245 75 17 96 104 40 237 154 5 36 61 125 27 175 173 180 66 95 20 96 89 14 87 134 135 25 58 112 144 225 67 135 72 205 206 82 49 73 207 20 56 52 149 231 87 51 121 246 149 77 98 191 141 170 132 107 41 65 44 53 151 14 80 200 100 112 108 135 158 13 27 0 65 181 106 19 61 125 154 75 31 158 226 242 208 16 99 103 207 82 173 26 181 185 146 24 158 206 137 253 211 5 126 145 46 47 125 137 252 173 187 80 197 80 57 211 161 124 248 141 55 26 117 183 155 201 209 81 46 157 58 197 244 197 139 148 77 167 144 40 138 209 88 81 12 199 138 28 140 151 217 103 59 42 121 147 202 65 55 90 220 213 250 87 5 213 125 235 91 213 238 70 157 112 186 202 212 124 81 158 143 23 57 150 169 58 39 64 197 128 210 231 184 58 45 66 32 123 0 31 168 60 168 56 168 36 75 40 68 45 99 25 203 88 198 50 150 177 140 255 79 248 53 249 132 185 253 79 213 252 73 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!parallel	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 160 73 68 65 84 120 218 237 217 33 142 194 64 20 198 241 233 250 17 40 116 69 19 36 2 138 168 196 115 3 154 106 18 210 27 204 45 240 156 1 13 178 130 130 64 146 112 2 20 2 129 124 136 221 102 67 147 102 187 48 125 125 109 191 191 33 164 1 166 239 151 161 98 148 66 8 49 182 94 39 201 102 67 84 247 58 164 244 197 245 67 243 185 49 203 37 81 154 158 78 199 35 32 178 216 0 14 135 36 217 239 149 186 223 175 215 219 77 41 64 124 231 112 255 224 96 48 157 250 62 209 120 28 4 147 137 82 90 247 251 189 158 82 190 63 28 142 70 74 69 81 16 204 102 14 251 186 234 138 109 7 24 99 140 49 68 231 243 110 151 166 142 131 29 193 84 54 248 162 247 217 142 200 158 17 139 197 106 101 12 17 32 44 7 8 33 189 14 62 255 10 136 138 43 26 60 17 118 4 107 197 131 7 196 79 143 71 28 199 177 237 27 204 127 95 241 224 59 11 177 221 186 174 235 18 93 46 158 231 121 68 118 32 202 127 190 243 16 81 164 181 214 68 118 32 222 31 8 32 62 130 176 55 128 206 65 132 97 24 134 225 239 194 255 7 81 221 13 183 30 34 63 248 207 32 170 11 16 128 224 9 16 66 2 132 144 0 33 36 64 8 9 16 66 2 132 144 0 33 36 64 8 9 16 66 2 132 144 154 9 209 194 51 107 217 16 29 58 179 110 10 4 254 154 88 33 236 159 89 215 61 223 210 213 11 97 255 204 186 232 186 248 120 33 170 59 179 110 220 224 243 85 11 193 119 102 221 248 236 66 240 157 89 183 46 89 15 235 14 7 8 33 1 66 72 128 16 18 32 132 244 46 68 221 235 110 93 101 33 138 174 35 75 253 5 129 193 51 133 193 11 9 131 71 47 61 1 49 101 139 124 116 26 58 40 0 0 0 0 73 69 78 68 174 66 96 130) ! !!DrGIcons class methodsFor: 'accessing' stamp: ''!style	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 12 96 73 68 65 84 120 218 237 155 93 108 83 231 29 198 127 254 78 236 99 39 118 18 199 78 26 39 77 8 36 144 16 88 10 101 172 104 131 169 163 21 157 4 148 125 73 211 54 42 173 163 157 52 169 218 197 180 155 169 149 216 214 74 211 46 182 21 181 218 84 58 84 237 134 177 93 180 97 85 183 174 148 22 10 11 4 200 23 249 78 252 17 219 241 71 142 125 252 253 113 236 93 28 101 233 202 118 81 8 132 66 158 27 203 199 246 123 254 239 243 188 239 255 253 191 207 121 13 107 88 195 26 214 176 134 53 172 97 13 247 35 84 183 246 243 114 121 181 59 112 119 65 245 169 249 212 222 234 45 143 31 223 177 227 201 39 87 174 11 135 15 95 184 112 234 20 124 247 187 175 191 254 203 95 174 92 187 127 252 227 247 190 247 211 159 194 231 62 247 242 203 199 142 173 92 187 3 3 63 252 225 179 207 222 252 239 213 43 23 202 26 110 6 107 2 172 50 214 4 88 101 172 9 176 202 88 19 96 149 113 203 85 208 103 21 133 130 40 46 46 66 58 61 61 61 51 3 26 141 201 100 50 129 32 116 118 118 118 222 185 56 238 187 25 32 203 217 108 54 11 129 192 169 83 167 78 193 182 109 178 28 143 67 48 216 215 215 215 7 201 228 196 196 248 248 157 139 231 190 19 32 18 57 113 226 248 113 248 246 183 119 237 234 238 134 39 158 232 234 170 173 133 245 235 237 118 139 5 36 105 100 100 116 244 206 197 115 223 9 240 200 35 205 205 102 51 124 243 155 143 62 186 125 59 216 237 86 171 201 4 62 95 48 24 137 64 69 69 93 93 93 221 157 139 231 190 177 34 186 186 90 91 235 235 225 39 63 121 250 233 253 251 161 162 66 163 41 151 97 108 108 106 202 227 129 159 255 252 181 215 222 125 23 178 217 66 161 80 184 217 187 124 122 43 226 150 5 248 232 163 35 71 30 127 124 229 136 250 252 231 95 121 229 111 127 131 183 222 26 29 125 251 237 155 111 71 146 98 49 73 130 55 222 248 197 47 126 247 59 248 254 247 31 123 236 161 135 96 227 70 69 136 247 222 251 240 195 203 151 161 175 239 210 165 185 57 40 151 183 109 251 202 87 160 171 107 255 254 3 7 192 231 187 122 245 234 85 200 102 37 73 146 160 178 210 106 173 174 134 230 230 222 222 135 30 90 190 207 209 163 61 61 221 221 55 47 192 61 151 130 100 89 150 101 25 94 121 229 133 23 126 243 27 120 230 153 3 7 118 239 134 141 27 91 90 234 234 96 120 248 250 245 153 25 16 197 68 34 157 6 183 59 155 53 24 160 187 251 192 129 131 7 193 227 185 124 249 210 165 101 226 255 67 148 90 163 209 222 134 154 241 158 19 224 79 127 122 249 229 55 222 128 47 127 121 243 230 150 22 104 107 107 106 178 219 193 239 95 88 136 197 192 227 153 159 95 88 128 15 62 152 154 138 199 97 251 246 35 71 158 125 22 226 241 64 32 16 128 124 62 149 74 167 151 219 83 169 212 106 149 10 108 54 151 203 229 90 249 120 239 25 1 66 33 133 88 163 49 155 149 36 248 210 151 182 110 221 184 17 10 133 76 38 145 128 201 201 217 217 217 89 8 4 98 177 108 22 114 185 150 150 238 110 176 219 55 108 232 232 128 104 84 249 252 147 168 173 109 109 109 109 5 147 201 102 179 217 64 165 42 151 101 121 229 226 190 103 4 56 126 252 165 151 94 125 21 158 124 114 215 174 222 94 104 104 168 171 51 155 33 26 141 68 194 97 152 159 95 88 16 69 56 123 214 239 47 22 97 199 142 31 252 224 200 17 16 69 159 207 235 5 89 254 239 197 87 163 209 233 116 58 101 228 55 55 3 148 203 229 178 82 118 168 87 144 181 207 188 0 191 255 253 139 47 190 250 42 236 222 189 126 125 109 45 180 180 212 215 87 85 65 34 17 143 139 34 76 77 121 189 11 11 240 246 219 231 207 143 143 67 103 231 183 190 245 157 239 64 54 155 72 72 18 132 195 83 83 211 211 55 182 107 179 53 55 187 92 74 10 250 111 194 85 170 79 191 212 254 127 124 102 5 240 122 103 102 188 94 176 88 178 217 88 12 190 250 213 71 31 221 181 11 244 122 189 94 163 129 177 177 137 137 185 57 184 120 241 250 245 249 121 24 31 119 187 195 97 176 219 59 58 58 59 97 102 230 220 185 243 231 33 26 157 155 155 157 133 96 112 124 124 108 12 146 201 104 52 26 5 65 168 171 179 219 149 113 175 20 219 43 75 252 18 238 122 47 40 149 74 36 82 41 56 117 234 181 215 78 158 92 190 30 10 77 77 205 206 194 11 47 28 57 242 141 111 128 205 86 93 109 50 193 216 216 232 232 208 16 120 60 126 127 48 8 217 172 78 103 52 66 44 150 76 102 50 240 206 59 47 189 244 226 139 48 53 117 246 236 153 51 80 42 41 244 118 117 237 219 247 196 19 96 48 152 76 70 35 120 189 87 174 92 185 2 109 109 59 119 238 220 249 241 136 238 147 25 176 84 78 30 63 254 171 95 253 225 15 176 103 143 203 37 8 80 89 153 203 37 18 112 248 240 161 67 123 246 64 83 147 211 89 83 3 145 72 32 224 118 67 52 42 138 241 56 140 143 135 66 233 52 24 12 14 135 211 185 220 174 40 94 188 248 254 251 176 110 157 221 46 8 208 208 96 54 107 181 112 253 250 95 254 114 242 36 232 116 21 21 149 149 80 44 42 158 81 38 19 143 199 227 183 175 159 119 237 12 120 243 205 19 39 254 250 87 216 191 191 171 171 190 30 214 173 107 109 109 110 134 116 58 147 41 22 97 231 206 246 118 167 19 74 165 100 50 28 134 120 92 153 41 147 147 74 170 121 231 157 243 231 135 135 97 243 102 149 202 100 2 151 203 225 176 217 192 225 104 111 111 111 135 206 78 155 77 167 131 124 62 155 77 38 225 253 247 7 7 231 231 111 140 163 88 204 231 243 121 184 107 83 208 210 206 117 165 81 81 225 241 40 139 230 129 3 143 63 14 193 96 44 86 40 192 250 245 46 87 125 61 104 181 122 125 85 21 92 187 54 50 210 223 15 181 181 85 85 38 19 244 247 143 140 184 221 160 215 43 21 139 203 37 203 137 4 236 219 119 248 240 99 143 41 52 170 84 240 222 123 23 46 12 13 65 56 28 143 167 82 224 243 249 124 11 11 240 231 63 255 248 199 207 61 183 242 253 185 109 2 44 46 142 142 62 255 252 202 5 212 216 184 117 235 209 163 176 119 239 222 189 123 247 130 94 111 177 56 157 96 54 231 243 225 48 244 244 108 218 180 121 51 164 82 146 20 139 65 169 84 42 21 139 144 205 230 114 217 44 252 232 71 79 63 253 245 175 67 177 152 74 197 227 48 56 56 51 19 141 130 199 163 148 161 209 232 226 98 36 2 115 115 161 80 34 1 225 112 42 85 44 130 209 104 177 88 44 240 212 83 71 143 62 255 60 24 141 102 179 217 12 237 237 189 189 91 183 130 213 106 183 219 237 55 198 123 232 144 195 113 43 27 180 187 110 13 56 120 112 247 238 238 110 168 170 50 155 13 6 72 165 210 233 108 22 218 218 26 26 204 102 144 229 114 185 84 2 143 103 118 118 108 12 212 106 101 68 59 28 74 217 216 217 217 210 226 116 66 79 79 79 207 150 45 160 209 148 74 217 44 140 140 76 76 76 78 194 249 243 202 12 73 38 75 37 173 22 218 219 29 14 65 128 13 27 122 122 54 109 130 107 215 206 156 57 123 86 17 182 84 130 217 217 193 193 225 225 219 215 223 187 102 13 88 92 140 197 210 105 232 234 234 234 218 180 9 156 206 182 182 222 94 152 159 31 31 191 120 17 212 234 124 94 163 1 189 222 96 88 183 14 76 38 131 65 163 1 131 193 106 181 88 64 16 170 170 26 26 64 20 131 65 143 7 74 165 66 193 239 135 142 142 166 38 155 13 250 250 254 249 207 92 14 58 59 187 187 183 108 129 109 219 218 218 172 86 200 231 115 185 92 14 250 251 99 49 173 22 252 126 191 63 28 94 142 107 233 243 123 94 128 191 255 253 204 153 169 41 104 109 117 185 214 173 131 108 54 147 145 36 104 105 105 106 106 108 132 138 138 170 42 101 209 45 151 139 69 176 88 4 193 104 84 4 49 26 193 96 168 174 126 224 1 240 249 46 93 58 119 14 106 106 20 235 96 195 134 142 142 13 27 224 183 191 253 217 207 154 154 224 244 233 115 231 198 199 193 235 117 187 61 30 152 153 9 4 162 81 184 122 213 235 77 36 224 145 71 14 30 220 191 255 99 4 105 149 29 241 237 194 170 167 32 89 150 229 82 9 244 122 149 74 175 7 181 90 167 171 172 132 82 73 146 252 126 133 248 186 58 208 104 42 43 205 102 80 236 50 208 235 117 58 173 22 4 193 225 104 111 135 133 133 217 217 225 97 48 26 141 70 189 30 26 27 93 174 214 86 208 106 203 229 124 30 202 101 89 206 231 193 233 180 88 202 101 37 21 205 205 193 191 254 53 52 52 55 7 22 139 66 115 127 127 95 223 233 211 203 241 217 108 78 167 195 113 15 11 144 203 229 114 178 172 152 101 209 40 152 76 149 149 58 29 84 84 64 38 3 6 131 217 108 183 67 46 39 138 138 103 147 207 103 50 32 8 141 141 93 93 144 201 68 34 110 55 24 141 229 114 44 6 245 245 181 181 181 181 160 86 235 245 38 19 4 2 162 152 201 192 224 224 228 100 32 0 225 112 161 96 48 128 70 35 8 22 11 180 180 56 157 86 43 216 237 213 213 149 149 80 46 231 114 169 212 114 124 161 144 199 227 245 66 38 147 74 125 252 250 74 97 213 83 208 204 140 199 19 141 130 221 94 95 95 83 3 235 215 183 180 52 52 128 32 84 87 215 213 41 35 87 150 149 156 174 8 98 177 56 28 144 201 136 162 207 167 8 146 76 130 78 103 52 86 87 131 217 108 181 186 92 224 118 79 78 14 12 64 36 18 14 43 213 83 87 87 71 135 178 40 167 211 96 179 233 245 178 12 115 115 110 247 252 60 164 211 202 142 217 235 125 247 221 171 87 111 140 51 153 20 197 88 12 42 43 149 211 19 43 133 85 159 1 199 142 189 254 250 71 31 193 190 125 123 246 124 241 139 74 7 5 1 180 90 133 208 92 46 145 8 133 148 7 34 58 29 20 10 233 244 226 34 20 10 202 117 173 214 100 178 217 150 133 73 38 253 254 161 33 16 4 37 165 212 213 89 173 130 0 165 82 62 47 73 240 225 135 74 202 17 69 133 208 37 135 115 124 60 24 76 167 225 193 7 123 123 183 111 191 49 78 163 209 98 81 82 224 202 98 213 102 128 36 37 18 217 44 20 10 197 98 169 4 106 117 38 19 143 131 86 91 83 211 220 12 197 98 46 151 76 42 126 190 40 42 199 73 148 247 74 46 215 106 43 42 204 102 208 235 109 182 166 38 136 197 102 103 7 6 96 201 54 14 4 22 22 162 81 200 231 139 69 89 86 170 172 84 10 22 22 124 190 249 121 101 231 156 201 64 36 34 203 90 45 36 147 90 173 82 247 111 222 188 252 136 17 108 54 135 163 190 30 76 38 101 159 112 207 8 112 225 194 192 128 199 3 79 61 117 240 224 23 190 176 124 125 105 68 150 203 178 92 44 66 46 39 73 161 16 40 142 61 84 84 212 212 180 180 64 62 175 88 4 201 164 219 125 229 10 132 66 225 240 226 34 84 87 91 173 85 85 48 63 31 10 137 34 148 74 202 147 90 73 74 36 146 73 240 122 131 65 81 4 48 26 5 1 166 166 210 105 131 1 106 107 27 27 107 107 193 106 85 8 95 170 126 30 124 80 41 139 111 23 86 253 84 196 201 147 191 254 245 51 207 192 195 15 63 252 240 142 29 160 211 85 86 86 85 45 167 158 76 70 146 194 97 8 6 23 23 51 25 104 106 114 56 172 86 240 122 125 62 191 31 172 214 170 42 65 128 43 87 6 7 39 38 32 145 40 20 74 37 16 197 120 60 153 92 174 150 174 93 27 30 158 155 131 145 145 185 185 64 0 70 70 102 102 66 161 101 55 116 133 232 188 211 127 208 184 85 123 170 92 222 178 165 163 163 185 25 52 26 131 65 16 148 148 19 143 67 161 144 74 45 46 130 86 171 209 104 52 240 192 3 117 117 130 0 233 116 42 149 76 42 150 130 36 65 127 255 208 208 244 52 132 66 209 168 36 129 32 40 251 131 37 55 117 116 116 98 194 235 133 179 103 175 93 155 153 129 96 48 26 77 38 151 18 213 237 176 215 238 168 0 55 143 166 38 197 157 212 235 5 161 182 86 89 36 211 105 200 229 226 241 64 224 198 239 23 10 197 98 177 8 243 243 129 64 56 12 211 211 94 111 32 160 16 13 96 54 11 130 193 160 216 209 137 4 124 240 193 192 192 228 36 132 195 177 88 50 9 129 64 36 146 76 174 62 225 159 196 170 9 240 181 175 237 221 187 109 27 168 84 202 113 143 124 94 25 241 159 196 146 205 188 176 16 14 139 34 204 206 250 124 225 176 146 58 84 42 229 81 227 200 8 228 114 133 130 44 131 86 171 156 98 80 171 149 87 159 47 20 146 164 187 143 248 37 172 154 0 59 119 110 217 210 214 182 188 177 82 169 212 106 141 230 198 239 229 114 185 92 62 15 94 175 226 209 44 157 74 184 126 125 122 218 239 7 183 59 16 88 92 4 183 59 24 140 197 238 94 162 255 31 86 109 31 112 232 208 115 207 29 59 166 82 201 242 210 206 83 113 57 63 137 104 84 20 37 105 121 68 7 2 145 136 36 193 137 19 167 79 95 190 172 82 125 86 137 95 194 170 111 196 202 229 255 125 206 38 157 206 100 178 89 48 24 244 122 157 78 89 100 227 113 248 199 63 46 94 28 27 91 237 168 215 176 134 53 172 12 254 13 220 222 31 79 192 215 34 195 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'helpers' stamp: ''!menuExtent	^ 60@12! !!DrGIcons class methodsFor: 'form' stamp: ''!formFromGraphic: anArray	^ self formFromPNG: anArray ! !!DrGIcons class methodsFor: 'accessing' stamp: ''!grid	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 218 8 3 11 29 16 179 58 226 95 0 0 0 90 73 68 65 84 104 222 237 213 177 9 0 49 12 4 65 157 251 239 89 46 193 153 145 96 20 127 50 152 251 77 119 215 230 59 181 252 0 198 1 146 116 146 231 48 166 124 183 254 5 226 47 4 0 0 0 0 160 196 74 108 3 0 0 0 0 74 172 196 54 0 0 0 0 0 160 196 74 108 3 0 0 0 0 74 172 196 54 240 241 46 99 58 68 173 164 85 224 244 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!formFromPNG: anArray	^ PNGReadWriter formFromStream: anArray asByteArray readStream! !!DrGIcons class methodsFor: 'accessing' stamp: ''!macroBuild	^ self formFromGraphic: #(			137			80			78			71			13			10			26			10			0			0			0			13			73			72			68			82			0			0			0			48			0			0			0			48			16			6			0			0			0			7			146			37			196			0			0			0			6			98			75			71			68			255			255			255			255			255			255			9			88			247			220			0			0			0			9			112			72			89			115			0			0			0			72			0			0			0			72			0			70			201			107			62			0			0			16			223			73			68			65			84			120			218			237			90			123			80			84			231			21			255			221			221			187			187			44			203			99			129			229			177			203			35			192			138			32			10			10			40			104			89			17			43			160			213			196			198			154			76			195			24			107			211			214			209			38			182			206			244			49			157			206			116			226			180			51			109			30			181			173			147			56			182			102			106			219			212			8			141			160			81			51			2			106			70			81			20			34			6			80			43			6			20			17			129			240			208			229			177			60			118			97			95			95			255			56			249			230			2			134			65			35			15			147			122			102			244			114			247			222			251			221			239			59			231			252			126			231			247			157			93			224			137			61			177			39			54			105			198			216			232			227			215			197			166			110			93			194			228			78			112			220			215			76			210			123			166			219			166			126			93			147			236			152			175			75			32			166			111			29			83			228			144			175			106			32			166			127			222			83			236			136			175			74			32			102			110			158			178			169			93			216			227			226			224			199			119			254			211			236			160			241			50			109			166			2			53			243			243			153			98			4			60			234			194			30			85			246			61			236			243			211			159			8			211			28			128			241			22			58			214			81			147			173			183			39			26			127			230			168			242			49			225			232			169			42			130			143			191			8			152			33			4			112			155			233			29			243			76			191			127			198			2			48			243			11			127			92			230			35			206			204			107			39			170			1			51			53			143			39			54			198			166			91			5			61			177			255			59			155			49			8			38			38			38			38			38			37			49			22			26			26			30			30			29			13			248			248			248			248			4			4			0			173			173			45			45			245			245			0			99			110			183			195			1			148			151			151			151			151			151			79			76			21			161			161			161			161			161			161			140			133			132			232			245			97			97			244			188			32			0			22			139			197			210			219			11			180			180			180			180			52			54			2			169			169			169			169			105			105			192			249			243			231			207			151			149			205			60			5			77			123			13			8			15			15			15			15			15			103			108			233			210			101			203			86			175			6			102			205			154			61			59			49			17			144			203			229			114			185			28			232			239			239			239			79			77			5			246			237			251			219			223			94			127			125			226			241			182			108			217			178			101			203			22			198			42			42			202			203			47			93			2			182			110			125			229			149			29			59			128			190			62			114			188			203			229			118			59			157			64			71			71			123			123			107			43			240			175			127			237			219			183			115			231			248			227			205			157			59			119			238			220			185			140			13			13			13			13			13			13			241			115			224			216			177			99			199			142			29			155			252			128			125			105			21			180			113			227			198			141			27			55			50			22			31			31			31			31			31			207			88			112			112			72			136			193			192			216			143			126			180			121			243			214			173			227			115			111			76			76			76			76			124			60			112			243			102			67			67			93			29			80			87			87			91			91			83			3			244			247			247			245			89			44			128			74			165			84			170			213			192			130			5			201			201			139			23			3			217			217			217			217			217			217			227			143			215			208			208			208			208			208			0			196			198			198			197			37			36			72			227			12			14			14			14			14			12			0			78			167			195			225			116			2			90			173			175			175			159			31			32			147			201			100			10			197			253			227			228			230			230			230			230			230			50			102			181			90			173			86			43			33			37			35			3			80			171			53			26			63			63			32			41			41			41			41			57			153			177			184			184			184			184			184			56			198			114			114			114			114			114			114			30			189			198			60			112			68			55			111			222			188			121			243			102			198			138			139			139			139			139			139			129			144			144			144			144			208			80			96			237			218			103			159			125			233			37			192			108			238			238			238			236			4			14			30			204			207			223			187			23			48			153			76			166			244			116			160			176			176			160			160			160			64			202			156			196			196			249			243			147			146			24			211			106			253			252			12			6			96			217			178			204			204			85			171			0			15			15			15			15			79			79			114			144			76			6			168			84			42			149			90			13			92			187			246			223			255			86			86			2			183			110			221			186			85			87			7			216			237			195			195			195			195			192			189			123			247			238			181			183			3			203			151			47			95			190			102			13			16			27			59			103			206			252			249			0			207			92			128			74			48			71			86			91			219			103			159			181			180			0			133			133			7			15			190			243			14			160			84			42			149			226			8			252			107			181			126			126			58			29			176			102			205			51			207			188			248			34			160			215			235			245			17			17			128			74			229			225			225			225			1			200			229			52			47			171			213			102			179			90			129			63			252			225			183			191			253			201			79			128			89			179			98			98			140			70			160			172			172			172			236			203			80			218			132			15			240			204			56			119			238			220			185			243			231			1			157			46			56			56			52			20			216			182			109			219			182			29			59			128			254			254			129			1			139			5			176			90			41			227			42			43			47			94			44			45			5			44			150			158			158			123			247			0			187			221			225			176			217			128			206			206			206			206			206			78			192			233			116			58			157			78			32			51			147			28			183			112			225			162			69			25			25			128			219			237			118			187			221			128			211			233			114			57			157			128			32			48			230			118			3			114			185			66			161			84			2			54			155			213			58			56			8			244			246			90			44			221			221			128			167			39			33			69			167			11			10			10			14			6			6			7			109			182			193			65			226			126			64			10			164			76			38			151			203			100			128			66			161			80			120			120			0			102			179			217			220			222			14			216			108			116			191			70			163			209			120			123			3			190			190			62			62			90			45			48			60			76			1			230			243			49			155			205			230			206			78			224			192			129			127			255			123			247			110			96			222			188			196			196			148			20			96			201			146			37			75			50			51			129			252			252			247			222			219			179			7			184			117			171			177			177			161			97			10			2			144			145			145			145			145			145			193			88			86			214			202			149			185			185			64			73			73			81			81			97			33			81			200			167			159			2			155			54			109			218			180			125			59			16			20			20			28			172			215			3			130			32			8			124			193			74			37			32			138			162			40			138			128			82			169			82			121			120			144			99			228			114			224			220			185			179			103			139			139			129			207			62			107			109			109			106			2			122			123			187			187			239			222			5			26			26			110			222			188			126			29			80			171			61			61			61			60			104			28			181			26			112			185			92			46			0			240			240			208			104			84			42			64			163			161			204			116			185			156			78			135			3			24			24			24			28			164			0			0			50			25			57			210			102			3			100			50			65			96			12			240			242			242			242			242			241			1			162			163			141			198			57			115			0			133			66			169			244			244			4			210			211			77			166			236			108			64			173			86			171			61			61			1			171			149			2			45			8			130			32			8			64			93			93			93			221			213			171			192			225			195			5			5			127			255			59			176			115			231			174			93			121			121			20			56			31			31			224			205			55			95			123			237			167			63			5			210			210			82			83			83			83			129			210			210			179			103			203			203			249			58			38			14			200			132			55			164			167			167			167			167			167			51			246			253			239			255			240			135			191			254			53			101			176			219			13			156			60			121			226			196			161			67			128			40			202			229			162			8			36			39			47			92			104			50			1			14			135			195			97			183			143			120			193			231			11			113			58			201			133			127			252			227			235			175			255			226			23			192			240			48			81			197			142			29			191			251			221			91			111			1			158			158			106			181			151			23			57			194			195			3			8			8			208			233			244			122			10			156			66			1			132			134			234			245			58			29			16			23			23			27			27			25			9			248			248			120			123			139			34			64			249			14			220			186			213			208			112			247			46			208			222			126			247			110			119			55			48			56			56			48			96			181			2			29			29			132			60			179			153			40			75			20			229			114			165			18			200			203			59			112			96			239			94			160			186			186			170			170			188			28			120			238			185			231			159			255			193			15			168			246			124			227			27			0			99			132			37			62			255			75			151			42			43			203			202			36			53			101			183			219			237			195			195			132			252			254			126			105			189			27			55			110			218			244			227			31			3			251			247			191			251			238			95			255			58			113			32			38			84			65			114			185			40			170			84			64			113			113			81			81			65			1			16			20			20			20			20			30			78			153			44			138			64			124			252			220			185			201			201			128			151			151			183			183			143			143			196			209			78			39			101			166			203			69			148			35			8			130			32			151			3			105			105			139			23			103			102			2			151			47			87			87			151			151			3			71			143			30			57			178			127			63			113			181			82			73			114			242			169			167			40			51			159			126			154			206			195			194			164			226			201			19			192			110			119			56			104			134			84			8			25			147			201			24			3			148			74			133			66			161			0			218			219			45			150			158			30			224			234			213			154			154			202			74			160			162			162			188			252			204			25			66			164			92			14			220			188			121			227			198			181			107			192			188			121			9			9			201			201			64			112			176			193			16			30			46			173			155			49			26			87			165			82			169			84			42			32			43			43			39			231			217			103			169			118			168			84			210			125			78			167			211			105			183			75			181			199			219			155			252			48			48			208			223			223			221			253			8			20			20			18			18			18			18			18			194			88			88			24			233			244			13			27			190			247			189			237			219			73			38			246			244			80			113			172			174			6			174			92			169			169			249			248			99			130			180			74			69			106			195			215			151			138			98			82			18			16			21			21			21			21			23			71			84			34			138			128			40			114			78			167			204			113			185			24			115			185			168			102			116			119			3			21			21			23			46			20			21			1			55			110			220			184			209			208			64			84			50			178			168			138			162			40			42			149			128			32			200			100			110			55			101			180			66			65			212			97			179			1			196			250			68			67			140			73			212			104			50			45			91			182			114			37			16			31			63			103			78			98			34			33			213			229			146			138			189			219			237			118			187			92			128			195			97			183			219			237			180			30			165			18			184			115			231			246			237			250			122			224			244			233			51			103			142			31			31			73			81			244			207			100			90			186			52			43			11			136			143			143			143			95			184			16			104			111			239			236			108			106			2			222			121			103			207			158			55			222			32			164			216			237			227			35			224			190			11			92			246			53			53			53			53			53			53			17			247			202			100			18			39			207			158			29			19			147			152			8			168			84			106			181			70			3			132			133			69			68			68			69			17			50			66			67			129			210			210			211			167			143			29			163			0			85			85			1			171			87			175			89			243			194			11			64			120			56			221			199			152			219			77			234			132			215			6			10			156			90			237			233			169			209			144			26			82			171			73			117			200			229			18			165			13			15			19			228			121			77			81			171			169			6			48			70			52			100			179			89			173			67			67			228			126			185			92			66			6			47			194			110			183			203			69			69			158			144			57			52			52			52			100			179			73			1			118			185			168			248			51			70			185			207			85			217			63			255			249			143			127			236			220			73			251			129			133			11			129			148			148			69			139			150			46			5			46			95			190			124			185			188			28			104			107			107			109			109			110			6			250			251			9			113			109			109			109			109			183			111			3			222			222			180			177			124			104			10			58			117			234			212			169			83			167			4			129			111			72			222			124			243			207			127			62			120			16			248			217			207			182			111			127			225			5			160			166			166			166			166			162			2			120			235			173			61			123			242			243			129			150			150			230			230			230			102			138			180			195			65			16			212			106			137			27			7			7			129			136			136			200			200			89			179			200			241			148			177			68			1			54			27			45			188			182			246			218			181			170			42			224			211			79			105			63			96			54			155			205			29			29			128			32			144			35			77			166			244			244			172			44			96			206			156			121			243			82			82			0			133			66			20			21			10			192			98			33			23			115			135			113			213			35			151			211			245			214			214			59			119			26			27			129			43			87			174			94			173			172			4			46			94			172			168			56			125			154			50			29			0			22			45			74			77			93			186			20			200			204			92			177			226			153			103			40			160			35			145			192			229			107			114			114			114			178			201			4			52			55			55			55			223			186			37			81			147			94			31			18			18			21			5			204			154			101			52			38			36			0			255			249			79			94			222			158			61			192			119			191			155			155			187			101			11			80			84			116			252			120			97			225			196			20			116			95			0			56			2			218			218			218			218			218			218			36			142			251			230			55			87			172			88			189			154			168			68			46			39			71			80			166			1			46			151			164			110			62			250			232			228			201			163			71			129			236			236			149			43			215			173			3			2			3			3			3			131			131			137			186			250			250			128			174			46			146			117			101			101			165			165			197			197			36			99			251			250			128			164			164			228			228			37			75			136			194			252			253			129			161			33			170			37			71			143			126			240			193			190			125			36			63			205			102			96			217			178			229			203			215			174			165			140			118			58			9			65			74			165			116			180			88			122			122			122			122			128			195			135			63			248			224			221			119			105			188			128			0			96			195			134			23			95			124			229			21			82			81			26			13			112			254			124			105			105			73			9			80			83			243			201			39			23			46			72			28			207			29			239			112			80			237			138			138			50			26			99			99			165			117			37			36			36			36			52			54			74			129			230			148			60			182			38			60			168			77			136			0			128			56			154			23			87			0			32			14			166			162			202			101			167			74			165			82			41			149			64			87			87			87			87			103			39			112			242			100			73			201			161			67			64			99			35			201			85			95			95			63			63			127			127			192			229			114			56			28			14			32			50			50			58			218			104			4			230			205			155			55			47			57			89			82			61			60			80			50			25			169			43			139			197			98			89			183			142			84			72			105			41			144			157			157			147			243			220			115			0			165			2			81			5			151			171			74			37			112			249			242			149			43			151			46			73			153			186			122			245			211			79			63			255			60			224			235			235			235			171			211			209			248			189			189			192			252			249			164			118			46			95			38			68			31			63			254			225			135			249			249			64			79			79			111			175			217			12			52			53			53			54			222			188			73			136			112			58			1			131			193			96			8			11			35			255			28			57			2			172			93			251			237			111			111			216			48			122			227			71			148			39			147			61			204			110			96			66			4			48			54			186			107			238			112			16			213			8			2			233			107			190			84			190			41			247			243			243			243			11			12			36			121			185			123			55			181			10			174			95			151			40			166			178			146			28			249			210			75			155			55			191			255			62			201			79			141			134			118			182			189			189			18			231			187			92			180			176			192			192			160			32			189			30			184			113			163			190			254			218			53			137			178			56			215			139			34			169			49			183			91			16			220			110			224			234			213			234			234			139			23			1			157			78			167			11			12			4			22			44			88			176			32			53			21			168			175			175			175			175			173			149			184			95			173			86			171			189			189			169			120			38			39			3			167			78			157			56			113			248			48			240			242			203			219			182			253			234			87			128			40			82			109			10			15			15			13			141			136			160			158			146			203			5			236			220			249			198			27			175			190			42			213			42			155			141			118			198			220			184			106			156			68			4			124			177			113			21			64			81			167			64			240			0			120			123			3			70			163			209			56			107			22			81			131			66			1			164			165			165			165			101			102			74			250			89			162			14			42			170			60			211			120			6			57			28			14			7			237			132			69			81			38			3			60			61			61			61			125			124			168			200			81			209			235			235			235			235			147			174			43			149			164			142			184			40			168			171			171			171			187			114			5			208			106			253			253			253			253			1			167			147			28			200			119			184			110			55			117			91			249			121			104			104			120			120			68			4			144			144			48			127			254			194			133			64			79			79			119			119			87			151			244			220			192			0			245			152			134			134			236			118			155			77			218			31			140			53			198			232			254			71			70			0			111			29			140			118			185			116			36			45			67			231			132			18			250			156			23			69			126			116			56			168			25			198			101			163			221			78			25			238			118			147			158			151			203			61			61			73			50			114			210			24			141			56			202			107			96			254			124			114			204			214			173			47			191			252			203			95			74			77			55			9			125			244			191			183			183			143			143			175			47			176			113			99			110			110			78			142			20			24			106			75			72			142			115			187			233			125			92			6			187			92			78			39			201			80			162			72			142			68			174			186			248			123			100			159			183			47			121			49			31			107			46			23			169			173			7			181			251			186			161			28			1			252			92			46			39			25			199			51			158			191			96			164			195			8			5			84			132			165			137			72			170			135			22			79			181			130			38			15			48			70			174			21			4			82			47			35			199			34			105			201			51			149			138			188			195			225			116			218			108			180			193			25			24			0			122			123			123			123			123			122			232			216			219			43			245			253			135			134			108			54			155			77			234			57			241			13			35			47			174			163			223			66			243			18			4			66			210			232			235			247			167			30			79			48			186			95			46			255			34			4			140			125			203			68			54			46			2			6			7			7			7			173			86			224			230			205			250			250			235			215			1			141			198			203			203			219			27			176			217			134			134			172			86			234			133			120			121			17			229			4			4			124			62			216			23			236			171			185			60			20			4			162			22			158			57			252			11			19			94			204			185			35			70			135			149			238			228			1			226			71			250			91			66			34			253			117			63			18			57			21			140			108			41			240			55			112			170			227			72			96			204			229			26			249			102			183			155			183			245			248			58			4			65			20			169			59			170			86			3			62			62			212			222			238			239			31			24			24			217			138			80			42			169			119			245			165			3			192			17			144			150			150			150			182			120			49			99			175			189			246			251			223			255			252			231			128			201			148			145			145			149			69			197			45			36			4			168			170			170			170			170			168			0			78			159			254			232			163			163			71			41			51			123			123			239			215			229			252			40			229			56			133			128			23			53			198			36			46			229			8			161			59			249			167			99			29			52			58			64			220			73			114			57			33			204			229			162			251			36			10			148			40			129			198			31			141			84			190			63			225			189			170			209			244			55			50			179			9			33			29			29			237			237			183			111			3			231			207			159			61			123			228			8			96			48			132			133			205			158			77			45			150			101			203			128			253			251			247			239			223			179			135			84			227			131			200			209			113			17			192			3			145			146			146			146			178			104			17			99			37			37			69			69			135			14			145			156			243			245			5			172			214			129			129			174			46			250			10			177			177			145			54			104			213			213			130			96			52			26			141			70			35			45			159			103			56			45			156			115			239			200			28			3			212			106			234			146			106			52			164			207			221			110			169			186			144			204			37			80			75			148			55			26			248			60			79			71			214			36			122			150			90			20			162			72			45			16			127			127			127			127			157			78			250			188			171			139			18			163			175			175			191			223			98			145			2			205			17			33			133			159			183			64			104			156			216			216			216			216			216			88			32			50			242			169			167			12			6			160			168			136			122			100			45			45			45			45			205			205			146			250			234			236			236			232			104			107			155			88			144			142			91			3			120			32			170			170			170			170			46			93			18			4			147			201			100			50			153			128			142			142			142			142			142			14			65			232			234			234			234			106			111			151			28			159			149			149			149			149			149			197			24			47			90			162			200			101			34			231			86			90			24			239			158			218			108			36			7			47			93			250			228			147			138			10			32			63			63			47			111			239			94			224			196			137			146			146			130			2			10			108			67			131			212			178			224			27			159			145			249			57			178			120			243			240			140			252			66			71			165			2			202			202			206			156			57			113			2			120			251			237			93			187			126			243			27			32			63			255			192			129			191			252			5			168			168			40			43			43			42			162			98			59			60			76			251			8			133			66			170			85			92			102			250			249			105			181			1			1			18			82			188			188			188			188			188			188			128			218			218			218			218			218			90			234			89			213			215			75			254			161			64			72			254			123			100			4			140			119			94			82			82			82			82			82			114			255			117			189			94			175			215			235			25			59			126			252			248			241			130			2			96			213			170			111			125			235			59			223			145			90			8			190			190			90			173			191			63			125			55			187			123			55			16			28			28			18			162			211			209			247			12			135			15			19			226			82			82			24			235			234			50			155			91			91			201			17			90			173			212			28			147			40			137			103			42			167			48			58			242			162			219			215			71			148			152			151			247			222			123			111			191			13			92			191			126			253			250			181			107			247			207			55			43			43			59			91			173			102			44			48			48			48			208			96			160			12			14			10			2			238			220			105			110			110			108			4			118			237			250			211			159			94			125			21			232			236			188			123			183			189			157			118			214			222			222			36			115			235			234			198			247			207			88			49			243			208			54			54			130			15			123			190			98			197			138			21			43			86			48			198			247			19			81			81			81			81			209			209			140			5			4			4			4			4			4			48			182			126			253			250			245			235			215			143			255			124			102			102			102			102			102			38			99			179			103			207			158			61			103			14			99			43			87			174			90			181			110			29			99			199			142			21			21			93			189			202			88			97			225			145			35			31			127			204			216			251			239			23			22			94			184			192			88			126			254			193			131			231			206			49			118			228			200			135			31			86			87			51			70			148			246			224			243			53			24			12			6			131			129			126			85			161			215			51			22			25			25			17			17			29			45			93			207			201			201			201			89			185			242			203			251			99			202			2			49			217			129			27			123			30			29			29			29			29			29			205			24			255			53			5			71			152			78			167			211			233			116			140			105			181			90			173			86			203			88			80			80			80			80			80			16			99			70			163			209			24			19			195			88			100			100			100			100			100			36			99			147			61			159			105			115			252			84			7			238			97			207			199			254			10			225			255			214			177			147			237			248			201			30			111			186			17			251			216			218			100			79			124			170			29			245			149			117			244			116			219			215			38			67			159			216			19			123			98			79			108			230			237			127			37			64			140			158			47			166			2			126			0			0			0			0			73			69			78			68			174			66			96			130		)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!locus	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 6 98 75 71 68 0 99 0 99 0 99 185 251 243 121 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 11 28 8 18 45 208 0 131 20 0 0 0 29 116 69 88 116 67 111 109 109 101 110 116 0 67 114 101 97 116 101 100 32 119 105 116 104 32 84 104 101 32 71 73 77 80 239 100 37 110 0 0 3 87 73 68 65 84 104 222 237 152 201 139 19 65 20 198 127 17 241 232 93 196 187 127 136 224 217 131 94 20 81 90 16 65 16 84 80 65 208 163 140 163 40 110 12 58 174 131 251 46 138 184 226 134 131 136 136 3 234 136 224 174 227 160 102 50 49 147 69 103 62 15 121 5 25 237 116 58 109 119 18 49 15 138 110 146 234 170 239 171 122 239 213 247 10 218 214 182 182 181 173 109 255 189 149 64 5 208 191 128 53 7 26 174 192 154 114 4 42 59 141 1 63 128 97 96 170 245 9 48 85 142 149 132 141 128 198 128 209 50 86 138 246 44 185 73 243 32 25 112 128 9 246 71 10 248 9 100 170 19 169 36 158 74 98 181 221 98 230 129 172 97 201 216 123 190 218 164 251 65 211 129 41 192 100 96 146 177 159 60 190 91 42 41 2 35 32 183 218 57 96 0 120 14 204 143 50 199 102 208 19 208 183 50 216 106 45 54 203 130 190 130 222 128 238 213 51 182 231 121 129 157 15 39 76 224 59 40 11 26 0 61 14 49 166 47 94 247 227 239 79 31 191 31 215 106 145 15 3 126 8 244 30 116 57 0 124 32 190 106 127 250 116 86 156 36 178 230 158 175 171 0 15 129 167 246 54 213 2 31 213 149 178 160 180 249 251 77 159 239 35 129 174 145 239 199 181 231 21 239 215 35 16 248 6 122 7 186 20 2 124 28 246 199 106 219 224 42 130 62 131 186 234 32 145 1 13 90 134 75 18 116 53 2 227 38 115 169 239 92 29 4 6 65 253 160 3 62 227 37 174 71 126 159 44 109 250 228 33 104 93 72 18 239 65 189 173 0 222 243 60 165 65 35 150 73 14 133 32 240 25 244 10 116 173 34 123 53 13 60 101 209 167 2 232 11 232 10 104 118 13 18 3 160 23 21 46 215 16 240 65 129 150 181 64 30 2 221 5 45 8 32 48 104 7 214 19 219 173 166 131 119 170 177 104 113 112 31 180 40 128 192 71 115 159 7 160 93 205 216 1 63 203 27 129 140 9 176 133 1 4 222 153 251 220 1 109 142 97 7 38 196 65 192 105 220 81 211 232 185 128 190 211 32 85 50 141 63 6 116 119 119 167 154 78 192 85 113 133 242 233 202 113 72 5 173 108 209 14 147 137 173 224 62 148 129 43 103 210 162 51 132 91 244 130 110 129 246 180 74 29 238 2 248 118 29 121 253 1 232 60 104 101 179 73 20 44 128 7 65 61 33 179 138 231 121 234 179 128 63 80 35 232 27 146 129 50 160 62 208 234 58 118 224 145 165 220 11 160 245 205 34 224 192 247 71 212 52 55 64 87 65 251 154 225 74 5 171 97 95 131 142 68 208 52 174 223 101 208 41 59 212 230 52 138 132 3 255 22 116 210 71 207 215 123 178 159 6 29 179 131 109 73 146 36 138 166 58 211 160 151 160 19 49 20 35 174 127 15 232 32 104 27 104 45 104 94 156 68 138 166 54 179 160 79 166 99 58 99 4 239 158 59 173 170 219 14 218 8 90 243 183 36 138 160 60 232 187 73 229 103 230 175 113 214 174 126 223 111 2 109 5 109 1 117 88 219 16 68 166 4 42 89 62 47 84 128 30 178 21 239 3 157 177 52 153 68 225 237 55 206 10 75 175 157 70 100 7 104 183 37 140 75 38 219 31 57 60 14 120 206 238 104 62 128 158 218 85 71 23 104 113 3 110 13 170 141 55 23 180 220 200 116 152 123 237 5 29 5 157 117 184 210 160 143 182 210 23 45 144 150 129 102 132 188 108 74 186 226 115 54 19 52 11 52 31 180 20 180 42 202 221 105 210 53 108 34 243 52 10 252 95 205 27 246 110 180 209 250 189 46 28 173 2 58 18 174 86 5 223 168 4 210 182 168 246 11 175 92 10 76 202 252 154 245 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'helpers' stamp: ''!scaled: symbol to: integer| formSymbol |	forms ifNil: [forms := Dictionary new].	formSymbol := symbol, integer asString.	^ forms 		at: formSymbol 		ifAbsentPut: [			integer = 48 				ifTrue: [self perform: symbol]				ifFalse: [(self perform: symbol) scaledToSize: integer asPoint]]! !!DrGIcons class methodsFor: 'accessing' stamp: ''!useScript	^ self iconNamed: #glamorousPlay! !!DrGIcons class methodsFor: 'accessing' stamp: ''!freePoint	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 0 174 73 68 65 84 120 218 237 215 65 10 131 48 16 5 80 45 61 128 11 23 222 255 162 118 81 178 104 48 104 19 219 76 224 189 141 8 46 134 255 157 160 211 4 0 0 0 0 0 0 192 177 125 255 188 142 231 209 123 128 58 227 6 158 123 246 30 224 88 41 224 121 238 61 217 221 6 219 128 111 139 201 159 143 183 57 131 21 112 85 10 58 21 147 223 199 17 180 128 214 160 74 193 219 128 31 41 29 53 241 55 32 220 64 111 173 111 106 252 224 147 96 27 112 53 248 82 160 227 28 61 73 176 2 206 212 6 31 191 136 32 242 63 219 82 96 103 159 151 241 63 63 7 213 26 188 34 110 34 216 191 219 182 117 93 22 193 3 0 0 0 0 64 133 23 160 158 76 100 195 246 158 5 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!axialSymmetry	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 2 63 73 68 65 84 120 218 237 154 63 170 194 48 28 199 211 135 139 131 155 139 32 20 133 174 122 0 111 32 226 9 164 8 221 68 236 238 1 220 123 128 130 20 79 32 226 228 234 1 116 21 132 130 224 226 230 224 82 200 27 106 120 188 188 23 211 104 106 147 248 251 44 90 11 53 126 63 249 31 17 2 0 0 0 0 0 0 0 64 13 48 254 253 154 31 95 178 31 120 187 249 190 239 231 95 240 124 208 181 220 8 161 205 166 209 104 52 48 62 28 28 199 113 48 86 83 4 93 179 233 242 241 238 203 71 90 11 88 44 46 151 203 5 161 56 78 146 36 65 232 116 90 175 215 107 93 90 4 171 124 150 85 116 201 132 25 14 43 149 74 5 99 53 91 4 171 134 191 191 230 75 199 117 93 215 117 127 10 94 180 8 207 243 60 207 99 125 143 65 2 232 224 139 22 65 7 255 191 8 3 91 130 234 34 82 68 131 7 17 146 16 13 88 195 224 105 212 18 193 15 254 241 152 161 49 197 136 200 62 191 207 54 102 24 192 123 68 100 15 246 99 130 167 201 71 132 188 224 65 196 157 108 34 216 65 125 108 176 162 136 138 72 63 101 183 136 201 100 60 30 141 32 120 97 120 34 82 84 221 226 48 8 86 240 228 93 209 91 28 134 195 14 94 141 5 157 241 252 29 92 213 90 208 25 11 127 165 10 34 94 164 223 159 78 59 29 140 219 237 94 175 217 124 126 239 5 68 8 66 130 127 44 64 28 16 113 135 4 74 7 77 238 211 193 203 18 64 208 93 132 244 127 69 16 104 17 132 221 110 181 58 30 229 157 181 70 81 20 69 145 101 145 224 233 235 249 252 122 189 94 45 75 213 51 107 105 2 226 120 191 63 159 139 250 25 250 138 16 22 64 47 237 101 215 232 87 209 77 68 102 1 36 248 48 12 195 48 180 44 209 61 22 219 110 181 106 53 118 215 36 27 93 68 8 215 92 90 4 43 80 86 151 68 68 16 150 203 217 108 187 205 191 5 177 68 144 107 50 88 15 6 213 106 181 138 144 109 151 74 165 18 66 245 122 183 219 237 34 84 46 7 65 16 200 47 231 211 15 228 213 100 34 128 116 81 244 236 167 168 174 75 85 17 194 176 230 247 116 208 170 110 7 235 62 125 69 116 224 188 224 65 132 36 76 61 226 123 86 196 219 10 104 106 240 52 89 69 176 238 231 142 41 65 243 224 137 120 123 240 159 122 214 90 120 240 64 10 4 15 0 0 0 0 134 241 13 162 86 226 137 186 18 79 185 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!filledForm: aForm"return a form with the default extent, filled with this form"|morph|	morph := Morph new		fillStyle: (InfiniteForm with: aForm);		extent: self menuExtent.	^ self iconWithBackground: morph imageForm! !!DrGIcons class methodsFor: 'accessing' stamp: ''!move	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 153 73 68 65 84 120 218 237 155 73 110 195 48 12 69 227 162 183 211 9 180 11 130 220 77 39 208 249 210 77 181 8 81 69 19 39 169 255 109 12 35 137 197 255 105 81 244 144 219 13 0 0 0 0 0 116 16 66 8 33 188 94 214 113 120 99 214 151 111 238 1 115 206 57 231 235 178 54 68 10 238 19 112 58 1 189 1 238 158 16 233 25 255 37 117 224 221 141 215 210 193 158 128 83 140 215 210 181 156 0 26 216 169 139 180 155 210 218 50 184 124 126 74 34 122 245 204 234 101 207 224 41 221 145 150 14 49 67 118 77 132 118 220 98 93 208 168 64 107 172 226 18 63 19 91 194 172 103 132 117 124 106 194 117 132 210 227 215 143 103 109 124 65 173 4 181 4 173 149 128 254 223 121 49 190 160 190 6 212 4 126 22 94 12 163 91 173 241 229 112 219 141 188 51 106 184 223 46 139 162 62 3 164 137 49 198 24 253 117 89 219 241 183 145 181 82 180 94 154 192 47 212 248 247 253 209 45 152 102 205 120 36 130 137 182 193 159 19 5 22 233 53 158 126 31 48 209 54 190 181 15 8 189 247 215 71 141 174 25 127 218 243 137 105 168 17 53 99 164 140 247 154 8 183 119 67 139 177 41 165 148 210 117 209 125 233 241 181 16 187 18 158 21 254 124 62 30 247 251 186 241 173 113 122 227 148 70 237 145 100 175 33 210 120 139 207 205 237 232 255 22 71 129 45 16 60 3 158 163 123 6 140 214 74 239 198 207 198 201 189 102 12 151 32 26 128 155 23 150 22 105 189 96 38 181 88 31 211 206 113 163 165 151 109 17 182 110 231 118 213 193 222 5 237 154 8 171 184 217 254 31 176 123 9 114 255 146 177 187 128 224 3 0 0 0 0 192 198 252 0 102 116 72 96 211 171 62 8 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!translation	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 2 82 73 68 65 84 120 218 237 150 191 106 194 80 20 135 175 165 110 250 16 86 66 199 128 139 116 232 35 152 181 72 36 184 20 132 14 78 46 18 16 33 147 62 66 183 46 77 23 31 32 56 185 56 41 100 22 218 161 67 119 151 14 29 110 7 57 4 143 164 73 108 146 147 120 207 183 92 126 33 38 242 157 63 68 8 134 148 10 245 31 160 162 213 178 172 86 75 74 200 219 237 203 203 118 11 169 146 155 151 43 106 17 212 104 218 253 253 237 45 221 251 175 169 5 228 5 238 248 184 247 29 38 35 187 137 80 102 5 129 216 184 29 255 246 246 248 248 250 10 41 191 149 116 225 64 103 7 231 195 195 243 115 183 123 122 253 248 204 14 101 86 208 129 160 147 255 94 73 220 241 137 249 248 152 205 102 179 64 40 100 207 235 118 131 14 15 56 46 64 84 199 71 77 72 246 147 82 24 194 68 67 222 108 122 189 94 47 200 211 105 167 211 233 72 105 219 182 109 219 231 138 82 80 52 128 5 3 88 52 206 97 157 127 30 248 57 10 23 98 179 49 77 211 140 47 62 221 9 136 123 93 1 242 17 15 68 253 94 161 66 124 125 13 6 131 65 184 120 200 147 201 120 60 30 7 215 211 41 68 20 201 159 95 154 207 173 247 247 249 124 62 151 242 230 102 52 26 141 42 21 207 59 172 162 245 122 191 223 239 133 184 187 171 213 106 53 33 86 171 102 179 217 20 162 90 245 125 223 23 226 231 71 215 117 93 8 199 113 28 199 201 235 243 18 10 113 1 159 179 32 30 50 136 159 78 13 195 48 78 87 14 100 220 241 249 76 0 166 196 171 41 174 120 44 246 233 169 221 110 183 169 197 151 152 115 197 39 205 12 162 108 226 191 191 135 195 225 80 74 124 46 151 141 70 163 81 162 66 167 37 30 147 86 33 194 68 239 118 154 166 105 193 9 226 251 253 122 189 94 151 210 178 44 203 178 10 92 136 172 196 99 146 222 31 87 56 22 143 11 64 237 151 92 252 127 73 42 190 240 19 80 22 241 24 22 79 76 148 248 176 213 67 94 136 178 139 199 43 8 139 198 185 48 19 112 233 226 225 190 40 241 185 23 66 21 241 88 44 249 234 81 85 124 210 204 226 89 252 101 137 199 100 94 8 22 31 15 22 143 200 75 124 234 176 120 34 88 60 17 44 158 136 207 207 197 98 177 96 241 228 176 248 130 193 226 11 2 139 87 28 22 79 4 139 39 130 197 19 193 226 137 96 241 68 176 120 34 164 116 93 215 101 241 228 176 248 130 193 226 11 130 106 226 127 1 94 140 135 70 242 90 129 96 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!createScript	^ self iconNamed: #smallNew! !!DrGIcons class methodsFor: 'accessing' stamp: ''!redo	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 13 215 0 0 13 215 1 66 40 155 120 0 0 0 7 116 73 77 69 7 215 6 21 14 22 55 133 211 233 232 0 0 8 11 73 68 65 84 104 222 237 152 105 108 84 215 21 199 255 247 222 247 222 204 120 188 225 193 216 198 27 182 176 195 82 108 140 77 73 104 33 64 0 177 101 32 141 147 170 129 46 106 196 180 85 219 168 31 218 170 21 72 84 173 104 20 169 85 104 139 42 58 137 105 17 137 66 128 54 241 184 132 134 134 128 144 193 16 92 28 83 4 49 16 179 120 101 48 227 241 50 51 111 222 123 247 222 126 176 227 96 48 48 4 236 98 201 231 203 147 238 242 206 255 119 238 126 128 49 27 179 49 27 213 70 70 194 137 219 171 217 1 220 0 80 238 243 24 251 31 230 191 233 8 6 203 225 74 200 248 251 234 215 180 239 141 74 0 66 32 126 182 124 187 35 119 252 180 87 87 191 110 123 101 52 142 0 226 181 113 248 241 226 173 142 226 156 121 47 173 169 176 237 113 123 53 117 84 1 0 64 179 254 49 190 61 247 215 246 5 83 203 159 166 140 28 113 123 181 164 81 5 208 99 94 71 99 168 6 79 23 255 208 246 236 151 95 42 165 140 212 185 189 90 246 168 1 0 0 93 244 224 211 208 81 60 145 191 90 93 191 232 229 92 198 104 157 219 171 21 143 26 0 2 10 75 70 113 41 92 131 130 9 37 244 167 43 95 79 177 107 113 71 221 94 109 233 255 253 28 112 123 181 100 0 83 1 20 16 130 41 148 145 153 18 120 204 78 227 39 189 242 220 251 244 116 247 62 80 66 65 41 235 251 18 5 89 142 34 24 134 137 223 191 231 137 116 133 59 126 84 185 62 186 125 196 1 220 94 45 143 50 178 137 17 237 249 130 244 34 115 162 107 178 154 154 152 97 79 113 78 36 201 142 116 36 219 38 160 203 106 131 223 184 0 70 24 8 165 160 132 13 192 164 170 147 97 147 137 216 114 224 7 225 214 96 227 150 119 95 212 55 140 8 128 219 171 77 165 140 252 38 78 75 90 177 168 168 92 157 149 189 88 225 136 66 23 189 48 68 24 166 136 192 148 58 76 17 5 37 12 26 181 131 246 139 39 148 130 17 6 144 62 25 201 44 19 201 44 7 21 213 191 208 207 54 31 127 135 115 241 45 159 199 176 134 5 192 237 213 236 148 145 55 156 90 210 138 167 102 62 103 43 206 92 68 3 230 21 52 71 62 70 84 132 192 136 6 133 104 3 95 149 218 160 82 7 52 102 7 163 234 64 244 9 29 188 12 227 233 120 164 105 83 176 247 212 239 244 234 134 202 90 110 137 21 62 143 209 243 80 1 220 94 45 137 50 114 112 118 225 226 233 75 166 173 179 183 69 207 161 41 124 10 166 212 7 4 43 68 3 163 159 65 216 160 49 59 52 234 128 74 237 80 153 189 127 234 208 33 37 216 105 34 50 181 34 28 186 240 166 89 121 114 219 21 206 197 147 62 143 209 250 80 0 220 94 45 141 50 90 61 111 250 170 156 199 11 86 105 39 3 111 33 204 3 159 71 155 106 183 71 191 95 188 66 85 72 34 0 0 140 41 125 211 8 4 0 1 1 1 35 42 52 18 7 66 24 84 98 71 182 109 22 78 183 30 22 127 61 252 171 0 231 124 161 207 99 156 121 32 0 183 87 203 167 148 84 47 42 121 54 181 56 103 158 114 44 176 3 6 15 221 20 105 21 10 177 129 17 21 92 154 136 138 94 68 69 8 32 22 4 225 0 17 96 84 133 194 84 48 170 220 209 143 74 28 208 168 19 241 108 60 30 79 252 14 142 54 190 35 125 199 43 186 42 215 71 199 221 218 86 185 15 241 132 50 242 207 37 165 207 167 21 100 20 211 15 253 127 130 5 3 10 209 64 37 135 0 135 41 34 136 138 16 162 34 4 33 251 214 30 163 74 159 96 162 66 33 202 192 246 121 55 51 101 4 66 112 76 115 46 195 249 27 199 177 191 118 103 68 74 249 245 161 218 42 247 49 0 223 204 116 229 229 20 101 205 163 251 219 95 134 37 251 196 11 112 68 101 8 134 184 14 46 205 193 167 36 97 253 130 25 24 237 219 46 25 97 32 247 0 80 137 3 101 137 47 160 173 227 170 220 117 228 143 61 220 178 150 250 60 198 137 47 12 224 246 106 113 148 145 87 151 150 172 117 158 233 218 143 168 8 129 128 130 195 132 33 34 144 16 67 44 46 50 32 248 51 8 74 89 255 194 189 179 217 105 34 102 39 174 195 249 150 58 81 89 83 209 201 57 159 231 243 24 231 238 212 62 38 0 74 201 198 226 252 39 156 14 123 28 62 189 86 3 0 144 16 176 164 113 151 62 236 166 19 247 115 136 187 45 59 39 115 97 118 194 90 212 54 30 180 62 56 181 187 141 115 241 85 159 199 184 122 55 109 74 76 91 38 85 126 50 127 106 185 173 54 248 214 144 209 30 28 193 4 100 56 166 97 162 99 26 226 85 23 52 234 132 141 57 192 136 134 70 253 40 174 232 31 13 217 47 81 201 64 89 252 55 112 232 236 94 179 230 220 254 139 156 139 249 62 143 209 113 47 125 177 140 64 201 196 148 92 110 145 8 252 209 11 119 108 148 162 229 160 36 249 25 36 178 12 52 7 63 193 217 198 122 253 70 208 111 232 70 136 134 245 16 181 41 14 237 251 203 55 43 67 1 184 212 73 40 118 150 99 223 169 138 104 253 165 234 58 110 137 37 62 143 209 27 203 236 136 5 160 116 98 106 158 189 211 104 30 178 146 17 21 51 146 86 34 219 86 130 195 231 246 68 78 55 158 32 18 188 150 91 98 23 128 51 0 130 0 34 132 144 179 10 177 221 214 63 77 155 130 233 142 149 216 83 179 69 191 208 90 255 33 183 196 51 62 143 97 196 186 179 220 19 128 41 100 126 250 184 28 165 211 108 26 178 126 78 202 90 24 33 41 183 29 218 160 235 102 168 66 8 249 203 91 163 215 159 149 184 205 178 108 37 152 108 91 128 157 71 126 27 105 234 184 184 155 91 226 187 62 143 33 238 231 108 186 39 128 148 40 77 75 152 132 250 208 127 110 171 43 140 127 18 54 158 140 55 171 55 135 44 203 92 232 243 24 181 177 58 206 179 207 69 150 58 11 21 31 108 138 248 187 91 182 190 251 162 254 243 97 121 208 72 33 211 18 108 41 232 177 252 131 201 137 134 233 9 203 177 187 122 107 196 178 204 23 238 71 252 99 113 139 145 70 191 132 191 188 191 81 247 119 53 111 252 162 226 99 26 1 194 72 83 80 111 207 115 178 20 24 34 60 80 62 78 203 129 191 247 50 186 245 27 23 125 30 163 42 86 135 51 156 110 168 86 18 182 29 216 16 9 71 123 60 149 235 163 111 12 235 163 158 0 117 254 158 171 72 84 211 110 217 117 178 209 28 56 47 36 151 255 142 213 153 148 2 66 87 241 218 191 54 133 67 122 119 249 131 138 143 9 128 91 242 152 63 216 98 58 21 215 160 114 75 68 251 47 145 68 139 213 89 195 245 19 114 251 129 205 61 186 17 89 226 243 24 239 141 84 98 171 206 223 217 162 59 217 96 128 160 217 2 87 98 58 161 20 11 98 139 190 100 187 14 253 161 211 178 204 185 62 143 113 108 36 51 115 117 77 254 70 213 134 4 196 177 228 155 0 90 145 236 76 133 77 137 203 119 123 181 57 49 60 94 27 45 206 75 135 186 211 15 43 128 207 99 116 114 105 236 252 239 229 26 115 82 220 236 129 114 33 45 180 68 79 227 169 210 53 14 202 200 219 110 175 102 187 219 13 25 18 115 125 30 227 242 195 206 130 196 148 23 18 92 110 170 191 240 145 229 144 46 184 180 73 3 151 181 43 145 147 72 117 165 147 130 172 25 19 24 163 59 220 94 77 185 67 16 184 207 99 92 27 142 28 19 139 105 241 85 241 222 194 85 232 108 15 52 47 44 203 91 162 118 154 77 144 68 128 81 138 176 8 160 52 103 153 218 29 238 204 15 134 58 86 20 174 164 123 27 170 120 116 164 146 100 44 230 29 164 138 159 204 93 166 151 70 140 80 254 204 172 133 74 143 184 6 9 14 139 24 8 73 63 74 115 151 170 140 210 180 246 64 211 218 194 149 116 87 67 21 15 61 82 0 0 80 184 138 237 11 246 118 44 13 71 122 93 51 179 23 170 186 236 2 135 1 65 44 116 89 45 40 76 155 205 156 90 82 124 75 199 165 57 159 84 90 127 123 228 0 26 170 184 89 184 138 237 236 10 5 202 110 4 175 103 23 101 63 169 218 85 7 116 217 3 14 19 65 171 25 147 199 151 209 214 246 150 212 204 197 189 167 26 170 248 197 225 6 184 239 228 174 207 99 24 130 203 53 109 29 77 127 254 199 193 29 145 80 64 200 124 199 92 36 43 89 80 136 29 166 140 64 85 84 14 160 115 100 18 197 15 150 86 44 99 10 125 59 115 66 110 122 65 206 244 56 87 82 58 218 59 154 69 77 253 193 144 105 153 89 62 143 209 253 72 3 244 67 168 0 214 41 42 91 14 137 175 72 160 141 91 252 107 247 122 203 142 217 152 141 217 195 177 255 1 144 175 73 88 169 71 12 171 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!angle	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 9 93 73 68 65 84 120 218 237 90 107 76 147 215 27 255 189 212 118 109 41 72 105 144 75 239 165 88 196 41 136 34 157 12 47 212 133 44 129 13 5 151 177 57 62 240 97 178 108 81 251 69 179 132 100 155 95 220 178 236 195 98 178 65 150 200 134 44 91 140 19 198 36 217 133 218 45 113 153 98 22 116 72 128 181 180 20 74 116 114 81 161 148 123 159 255 135 238 245 69 253 51 160 92 138 218 223 151 183 231 125 207 229 247 60 207 57 207 121 158 115 10 132 16 66 8 33 44 17 136 130 205 224 41 21 120 181 240 8 154 192 193 82 192 226 199 13 11 14 241 199 29 172 226 25 38 216 76 22 72 120 174 239 179 61 3 237 119 165 229 88 117 152 47 225 213 46 216 106 231 183 104 194 171 85 192 229 231 181 66 123 192 66 87 66 176 13 178 114 62 126 153 6 152 175 2 231 18 112 165 55 187 199 110 115 93 168 96 43 213 110 181 142 243 40 214 4 107 224 249 41 96 185 103 226 19 59 227 87 59 136 36 18 137 68 34 9 52 252 13 33 64 204 150 65 7 79 241 79 73 38 60 183 171 201 203 203 203 203 203 123 184 126 8 139 196 194 51 233 162 162 162 162 162 162 144 43 90 36 22 175 56 255 138 8 25 98 129 88 122 69 101 100 100 100 100 100 16 137 197 98 177 88 28 50 196 44 88 126 197 68 69 69 69 69 69 17 25 141 70 163 209 24 50 196 191 120 124 239 1 30 115 4 79 1 219 182 109 219 182 109 27 145 86 171 213 106 181 79 157 33 86 155 192 139 231 179 226 41 120 73 73 73 73 73 9 81 103 167 221 222 209 1 184 221 110 183 219 13 244 247 15 12 220 185 3 120 189 94 239 232 40 87 95 44 22 139 69 34 64 38 147 201 100 50 64 161 80 40 148 74 64 175 215 235 245 122 160 186 186 186 186 186 122 229 143 18 50 51 51 51 51 51 137 60 30 143 199 227 1 90 91 91 91 91 91 23 206 99 217 136 151 149 149 149 149 149 17 89 173 86 171 213 10 116 116 116 116 116 116 0 10 69 66 130 76 6 100 101 109 221 186 118 45 144 158 190 113 163 64 0 40 149 10 69 124 60 240 218 107 239 188 99 181 2 191 253 118 246 236 158 61 192 237 219 253 253 30 15 208 209 225 116 2 192 181 107 109 109 30 15 112 229 74 115 243 205 155 64 79 79 111 239 221 187 64 114 178 193 160 215 3 187 119 239 217 99 50 1 21 21 21 21 149 149 79 209 41 170 217 108 54 155 205 68 42 149 74 165 84 114 241 115 110 110 78 142 193 192 149 29 142 198 198 164 36 34 151 235 226 69 165 242 209 39 91 207 233 180 88 18 19 185 247 221 221 23 47 202 229 254 167 66 65 212 213 101 177 168 213 92 253 252 252 189 123 19 18 184 178 74 165 82 41 20 68 102 179 217 124 244 232 242 185 46 185 92 46 151 203 137 10 11 11 11 11 11 131 224 34 77 38 147 105 207 30 78 240 157 59 141 70 181 154 168 174 174 162 34 37 197 175 72 173 150 200 229 178 88 20 10 174 30 91 254 251 239 31 127 212 106 137 174 93 171 175 79 73 225 190 55 52 84 85 237 216 65 244 211 79 95 125 149 154 74 116 233 210 183 223 174 95 79 116 253 122 125 253 76 131 118 118 254 242 139 86 203 25 232 194 133 202 74 157 142 40 59 219 104 212 104 184 122 38 147 201 148 147 179 244 10 218 191 127 255 254 253 251 137 116 58 157 78 167 91 120 255 1 47 153 228 100 131 33 41 137 168 189 189 163 195 102 227 222 119 117 89 44 26 141 255 183 207 7 76 79 251 124 60 30 48 53 53 53 69 4 12 13 121 189 12 3 100 100 20 22 58 157 192 215 95 127 242 137 86 11 120 189 99 99 12 3 140 142 142 143 19 1 68 68 236 130 102 24 128 97 24 198 231 3 14 31 62 113 194 233 4 170 170 62 252 80 163 1 100 50 169 116 205 26 64 167 83 40 248 124 32 50 82 36 26 26 2 134 135 39 39 149 74 96 227 198 220 220 203 151 57 126 27 54 36 39 107 181 64 91 91 123 187 211 185 212 46 99 225 174 104 193 4 212 106 255 210 246 120 134 135 7 6 128 207 63 127 239 61 153 12 48 26 55 111 6 0 149 42 39 199 237 6 90 90 26 26 82 82 0 151 171 183 119 98 2 24 24 184 115 103 114 18 184 113 195 110 159 152 0 174 95 111 107 27 27 3 156 78 183 123 124 28 184 117 171 191 127 98 2 24 25 241 122 167 167 185 241 36 18 177 152 207 7 226 226 214 173 147 72 128 196 68 141 70 42 5 82 82 18 19 137 0 181 58 62 158 8 136 136 8 15 7 0 157 78 173 142 137 1 118 237 122 245 213 166 38 160 179 179 177 209 96 0 254 252 243 198 141 145 17 224 237 183 79 156 184 125 27 136 136 136 136 88 187 22 112 56 92 174 190 190 197 27 34 50 50 50 50 50 146 104 104 104 104 104 104 104 25 12 192 206 248 254 254 190 190 158 30 160 166 230 163 143 164 82 96 195 6 157 142 199 243 219 158 97 128 225 225 209 81 161 16 216 180 41 47 207 102 3 14 29 42 46 142 139 3 44 150 63 254 184 119 15 176 219 187 186 70 71 1 141 70 165 138 142 6 182 108 73 75 75 73 1 12 134 245 235 147 147 1 135 195 225 176 219 129 236 236 93 187 94 120 1 168 171 171 171 171 175 7 164 210 232 232 184 56 160 185 185 185 249 175 191 128 206 78 135 195 233 4 146 146 180 218 136 8 32 39 199 104 12 15 7 42 43 191 249 230 214 45 192 98 57 115 102 203 22 64 46 95 183 110 98 2 16 10 215 172 25 30 6 218 219 29 142 201 73 224 141 55 142 31 239 235 3 98 99 99 99 227 226 128 27 55 218 218 220 238 192 13 193 230 7 74 165 82 169 84 2 181 181 181 181 181 181 115 247 55 231 113 52 235 59 89 87 211 223 63 56 56 54 230 159 129 97 97 156 226 239 221 27 25 17 137 128 150 22 155 205 231 243 71 57 145 145 156 66 132 66 145 40 58 26 120 247 221 99 199 14 29 2 210 211 183 110 205 206 6 106 107 235 235 47 93 98 152 246 118 187 189 191 31 56 123 246 252 249 95 127 101 24 139 197 106 189 122 21 176 88 172 214 43 87 24 102 106 106 122 154 97 88 197 51 76 118 118 118 118 86 22 32 18 133 135 199 199 115 227 100 101 165 167 71 68 0 54 91 87 215 221 187 64 103 103 79 15 235 10 249 124 63 111 30 15 232 235 27 28 156 154 98 21 15 228 230 238 221 251 220 115 129 239 17 26 141 70 163 209 0 189 189 189 189 189 189 129 246 50 3 108 84 227 47 17 189 255 254 225 195 26 13 183 217 177 239 91 90 46 92 216 176 129 232 179 207 62 248 64 171 37 74 74 210 104 132 66 238 123 73 201 235 175 191 248 34 81 77 205 153 51 167 79 19 21 20 20 20 20 20 112 130 46 85 185 180 180 180 180 180 148 27 87 175 87 171 69 34 162 143 63 62 126 92 173 246 111 226 51 55 121 54 154 58 121 210 108 142 138 226 222 155 205 102 243 145 35 129 27 98 201 50 100 149 74 165 82 169 136 210 210 158 125 86 169 228 194 62 151 203 98 145 203 137 108 182 159 127 246 123 97 78 96 161 144 72 36 18 10 121 60 162 99 199 204 230 226 98 162 154 154 154 154 47 191 124 84 241 139 197 108 134 40 47 47 47 47 47 39 18 139 69 34 62 159 51 4 203 179 181 181 161 193 96 120 48 172 149 203 137 114 114 118 236 136 137 33 98 247 184 64 121 73 165 82 169 84 186 8 57 203 202 202 202 14 29 122 244 170 142 37 202 26 160 169 233 220 57 189 158 200 191 228 185 122 199 142 29 61 122 224 128 127 198 87 85 45 189 226 23 106 8 150 23 203 179 190 254 139 47 210 210 136 156 206 198 198 153 97 234 195 79 54 145 92 40 31 129 64 32 16 8 22 33 175 63 76 35 202 203 51 153 20 10 162 206 206 198 198 245 235 231 186 188 38 58 120 240 192 1 163 113 229 20 63 151 33 246 237 219 183 239 229 151 31 117 77 15 63 217 137 229 143 150 136 76 166 221 187 211 211 137 12 6 131 129 203 55 230 15 134 97 24 134 89 180 220 68 231 206 125 250 105 108 172 63 19 85 169 56 159 217 212 84 91 187 101 11 81 82 146 86 43 145 16 109 220 104 48 196 196 16 85 87 87 85 157 58 181 242 138 159 203 16 108 57 53 53 53 53 53 149 115 73 13 13 167 79 103 100 60 152 105 43 20 68 167 78 157 60 201 181 95 126 3 220 143 130 222 122 171 180 52 55 151 72 167 83 42 5 2 96 251 246 77 155 248 124 192 231 35 226 241 128 241 241 169 169 200 72 224 242 229 182 54 141 6 176 217 156 78 143 7 40 46 126 229 149 220 92 224 252 249 239 191 183 88 252 97 99 93 29 195 4 203 16 15 143 207 150 243 243 243 243 243 243 1 187 221 229 26 29 5 6 7 7 7 111 221 2 124 62 159 47 44 140 83 247 75 47 109 223 126 245 42 144 144 144 144 16 27 203 29 30 206 119 124 62 159 207 231 243 3 32 190 115 231 243 207 111 222 60 251 82 101 207 102 222 124 179 184 120 230 153 205 227 246 76 75 75 78 22 8 30 221 132 231 215 126 54 4 222 254 126 162 144 152 168 209 200 100 68 71 142 28 60 8 0 5 5 57 57 66 225 191 149 152 255 223 205 195 239 103 171 55 95 60 156 182 16 249 87 32 159 207 229 27 60 30 195 76 78 114 101 134 241 31 121 204 197 107 122 218 223 79 88 24 48 49 241 95 28 24 134 97 128 138 138 31 126 72 77 5 106 106 190 251 174 165 5 232 238 238 238 238 238 158 45 177 10 252 191 176 247 255 154 248 207 63 125 125 94 47 32 145 8 133 207 60 3 56 157 61 61 99 99 129 41 114 169 177 84 60 102 222 51 204 5 189 94 38 251 253 119 96 96 96 96 96 114 114 174 218 115 77 189 217 51 226 251 6 24 25 241 122 199 198 128 145 145 241 241 152 24 192 225 184 121 51 44 12 16 137 252 105 213 192 192 221 187 97 97 0 155 145 62 233 240 122 199 198 124 62 255 5 145 203 53 223 86 179 249 132 255 104 241 96 113 181 93 249 61 233 152 97 160 229 58 34 120 82 202 43 134 96 11 186 218 203 33 197 63 105 138 15 33 132 16 66 8 30 254 7 195 86 167 231 229 37 138 50 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'as yet unclassified' stamp: ''!reset	forms := nil! !!DrGIcons class methodsFor: 'form' stamp: ''!colorForm: aColor	^ aColor isTransparent		ifFalse: [self iconWithBackground: ((ColorForm extent: self menuExtent depth: 16) fillWithColor: aColor)] 		ifTrue: [self filledForm: ColorPresenterMorph hatchForm] ! !!DrGIcons class methodsFor: 'accessing' stamp: ''!editScript	^ self iconNamed: #glamorousEdit! !!DrGIcons class methodsFor: 'accessing' stamp: ''!scale	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 47 0 0 0 47 16 6 0 0 0 35 183 79 239 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 2 19 73 68 65 84 120 218 237 155 221 141 194 48 12 128 219 211 45 193 19 18 3 192 0 172 128 88 162 111 8 49 0 3 176 69 150 64 172 192 0 48 0 18 79 140 209 123 138 170 90 117 157 31 39 78 56 127 47 149 142 107 147 124 117 156 186 132 166 81 50 208 247 227 99 211 252 72 119 233 187 25 68 67 126 165 187 86 55 152 216 182 165 206 36 255 65 153 3 143 232 105 134 27 162 169 70 8 21 239 72 215 117 93 215 193 8 167 83 202 151 1 159 18 176 99 60 80 248 244 13 112 237 15 95 191 50 227 219 241 116 55 96 124 125 255 99 37 83 197 118 56 116 106 199 158 143 93 143 194 182 87 93 138 42 117 106 210 169 100 122 134 20 79 238 14 251 230 96 119 225 243 41 170 24 164 133 227 237 83 66 221 132 75 141 147 20 144 234 186 152 88 90 124 172 240 66 35 62 117 7 248 30 243 252 34 90 122 220 226 13 199 139 63 157 142 199 195 129 123 209 204 46 62 93 131 110 57 181 148 194 38 91 123 249 132 151 93 89 22 35 156 111 224 220 149 101 94 15 217 26 138 253 220 181 125 87 177 249 133 51 191 157 228 46 205 83 209 182 227 25 98 251 203 253 74 33 185 7 174 72 225 190 142 107 41 207 149 114 138 73 41 249 174 19 87 216 168 112 111 120 43 201 208 119 54 201 41 71 56 36 174 178 12 125 254 79 78 238 119 41 238 237 165 169 44 197 169 126 0 181 161 194 83 163 187 12 132 240 20 175 51 129 11 162 178 10 223 162 166 204 147 44 213 236 247 231 243 118 219 247 155 205 110 183 90 233 76 129 32 226 195 69 89 225 210 3 43 29 100 183 48 158 74 108 4 47 151 235 245 98 49 252 253 122 189 92 238 247 225 188 247 251 249 252 124 164 135 87 46 108 169 6 139 244 199 227 118 123 189 116 77 128 4 139 215 136 142 131 20 15 75 112 141 96 30 80 241 86 184 49 198 24 3 191 56 160 177 107 128 46 182 211 144 145 11 111 0 38 18 75 61 212 34 252 95 113 22 64 69 174 21 111 83 17 124 126 215 20 53 38 248 199 103 48 194 173 88 56 67 164 7 88 61 54 130 225 209 126 206 187 197 77 97 222 37 171 144 168 112 97 84 112 102 190 244 187 76 69 81 68 248 3 221 179 150 104 213 141 47 93 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!ray	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 149 73 68 65 84 120 218 237 154 61 14 130 48 24 134 91 103 56 4 3 215 106 76 186 25 35 151 241 8 14 156 128 201 155 56 153 56 178 187 144 212 161 49 198 250 83 104 191 210 79 121 159 173 4 18 120 31 126 90 242 10 1 120 97 76 219 182 173 49 185 207 99 113 28 143 85 85 85 198 156 78 117 93 215 198 64 68 38 92 17 215 107 211 52 13 68 164 98 229 110 56 28 250 190 239 133 56 159 135 97 24 132 184 92 186 174 235 132 128 136 196 40 165 148 82 143 128 215 235 178 44 75 99 226 158 136 251 126 16 247 17 55 120 26 17 110 240 16 224 101 172 8 59 242 5 12 1 193 248 68 88 124 34 16 124 52 223 69 64 192 108 196 138 208 90 107 173 31 199 187 99 48 146 216 87 17 130 39 37 244 85 4 17 46 171 105 187 143 13 78 74 119 139 157 190 10 177 223 23 69 81 228 190 108 62 76 20 224 67 202 231 59 92 74 59 125 197 202 154 136 207 179 28 223 199 150 102 101 13 94 240 5 15 17 137 152 26 60 68 16 17 27 124 154 159 126 11 100 234 2 43 205 79 191 5 178 219 109 183 155 77 248 202 22 34 152 0 17 76 128 8 38 64 4 19 66 69 160 197 65 12 158 8 38 64 4 19 32 130 9 16 193 4 136 96 2 68 48 1 34 152 48 143 8 212 110 188 160 114 201 4 84 46 153 128 202 37 19 168 43 151 232 57 5 226 138 120 14 18 5 179 217 120 31 228 124 34 100 232 129 255 73 236 29 45 39 231 73 220 140 251 85 194 43 151 223 183 251 129 128 81 188 86 46 237 56 247 121 253 13 225 149 75 124 140 137 136 45 156 129 64 98 131 135 8 34 16 108 38 98 155 126 224 199 185 1 85 109 241 171 221 62 127 106 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!quit	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 9 65 73 68 65 84 104 129 237 153 77 140 28 197 21 199 127 85 93 221 211 158 221 153 157 53 96 214 75 108 175 119 253 177 107 28 136 109 226 72 129 196 124 68 202 129 68 33 7 4 138 80 100 37 145 64 138 100 41 68 185 113 8 145 144 34 37 202 1 34 114 136 18 114 8 65 202 1 18 46 32 229 3 69 56 50 182 185 0 254 54 172 237 93 44 99 123 87 242 126 204 206 76 127 84 229 208 93 61 189 227 153 221 157 93 43 39 158 244 212 211 61 93 93 255 255 123 175 170 94 189 18 220 2 49 198 72 64 2 62 80 76 175 62 224 165 207 101 250 170 78 53 0 234 192 66 122 173 3 90 8 161 187 237 91 173 21 124 78 60 18 240 21 96 61 80 78 239 189 150 247 2 18 224 55 114 170 73 72 116 45 2 224 7 63 60 248 251 122 163 254 61 109 186 54 0 82 8 28 71 81 40 120 178 183 183 76 165 82 161 82 169 200 190 114 31 190 239 75 207 243 16 66 0 160 181 38 12 67 106 245 154 158 157 153 225 198 141 27 122 102 102 70 75 41 255 244 235 95 253 230 39 64 96 223 93 169 40 128 90 189 246 163 239 63 117 144 233 233 105 174 93 187 70 24 134 68 81 68 28 199 4 65 64 28 199 132 97 72 28 199 196 113 156 253 23 199 49 198 24 164 148 120 174 71 209 239 161 212 83 102 125 229 54 30 123 236 59 72 233 32 132 192 98 50 6 140 49 104 29 103 237 27 141 6 207 255 226 231 207 0 63 237 218 122 228 66 200 24 67 28 199 104 173 209 90 103 64 237 239 164 227 228 63 251 219 24 131 49 6 0 199 113 112 93 23 223 247 41 149 74 20 10 133 20 188 32 117 52 96 210 54 42 235 203 117 93 104 142 17 73 18 78 221 19 112 93 23 165 20 82 74 164 148 40 165 50 128 22 100 254 94 41 149 145 115 28 7 165 20 74 41 60 207 195 247 253 20 188 76 173 159 15 11 129 49 58 11 43 33 64 74 153 39 209 149 100 4 242 32 44 96 107 101 11 94 41 149 118 42 136 227 56 107 103 213 117 221 204 16 22 28 228 67 72 0 230 166 231 116 25 247 109 9 216 142 29 199 185 41 60 172 68 81 148 17 176 106 199 128 245 158 227 56 169 69 23 91 61 165 128 16 201 88 184 217 51 183 128 128 37 209 26 50 86 236 239 166 251 155 4 172 7 109 8 174 92 196 90 28 208 36 160 148 106 75 160 21 112 62 124 236 53 111 249 86 2 107 1 215 21 1 11 208 18 200 131 238 36 121 15 180 146 248 127 73 219 149 216 113 28 140 49 217 213 74 222 35 214 19 150 172 5 222 156 58 87 47 175 194 102 3 151 128 190 167 96 118 69 4 242 3 211 222 91 171 90 240 246 89 20 69 139 194 76 8 129 227 56 139 136 172 5 188 227 121 71 101 169 68 125 122 186 194 50 4 22 245 148 39 209 170 249 248 182 211 166 157 181 242 106 189 176 26 121 125 96 96 200 81 234 232 87 94 120 97 160 127 231 206 21 229 70 25 129 165 192 119 34 212 142 220 106 193 255 243 192 129 205 225 244 244 145 251 158 123 110 160 255 238 187 87 220 110 17 129 213 16 105 37 179 154 49 80 152 155 99 250 200 145 255 236 125 246 217 219 43 35 35 232 249 121 76 24 118 71 160 19 137 165 238 243 237 58 253 183 156 212 38 39 217 243 198 155 220 251 244 211 183 247 111 223 46 23 142 31 71 47 44 96 244 202 82 162 155 102 33 41 37 58 215 120 169 123 107 253 114 185 204 240 240 48 81 20 117 21 70 11 19 19 252 247 145 111 176 247 241 199 89 63 58 42 171 199 142 65 28 99 130 128 40 138 124 9 151 94 109 191 79 80 6 212 83 32 110 90 7 236 117 37 30 176 235 128 49 6 215 117 169 84 42 185 44 116 121 240 239 62 252 8 219 30 124 144 59 198 118 81 125 239 61 136 34 112 28 132 227 176 255 208 33 0 12 248 89 254 145 170 49 134 119 14 29 138 168 215 111 94 200 86 163 213 106 149 195 135 15 179 123 247 110 198 198 198 114 30 104 207 98 97 98 130 119 190 126 128 145 253 251 185 125 87 2 222 132 97 6 126 230 237 183 155 75 184 49 160 117 18 82 113 140 137 99 202 143 62 10 16 65 155 16 90 45 137 254 254 126 250 250 250 80 74 49 59 219 121 234 174 94 186 196 191 30 248 26 67 187 119 39 224 143 30 197 4 65 2 94 74 140 148 144 243 182 177 150 207 147 8 195 228 217 173 36 176 113 227 70 134 134 134 152 156 156 164 88 44 118 6 127 255 3 108 26 30 230 142 93 187 168 30 59 134 169 215 19 240 74 97 164 68 164 4 22 229 193 54 173 215 26 19 69 152 70 35 91 72 59 18 232 230 190 84 42 49 58 58 202 197 139 23 153 159 159 167 92 46 119 0 127 63 27 7 6 216 176 107 23 213 227 199 49 181 26 40 149 88 62 138 146 171 16 73 248 228 67 200 198 126 234 1 221 104 100 223 237 88 149 88 41 17 165 20 123 246 236 225 202 149 43 76 76 76 48 48 48 144 165 31 86 194 153 25 222 28 30 102 235 142 29 12 220 115 15 11 239 191 143 174 213 18 203 199 113 98 121 199 193 8 129 144 146 184 90 69 207 205 37 64 163 40 9 41 207 67 22 139 200 117 235 48 141 70 231 16 202 131 91 105 232 92 191 126 157 241 241 113 42 149 138 221 227 46 18 213 211 67 113 112 144 234 244 52 225 212 20 70 107 116 173 134 112 93 112 28 140 214 152 70 3 93 173 18 207 206 98 210 141 83 7 203 178 110 255 126 76 154 202 175 153 192 229 203 151 113 28 135 66 161 128 82 170 237 66 38 148 226 209 51 103 248 247 67 15 241 201 145 35 108 29 27 35 154 154 34 152 156 76 94 104 217 249 45 41 198 44 90 232 218 166 141 107 77 39 218 137 92 231 243 213 183 222 66 111 217 194 133 83 167 240 54 111 198 29 24 232 14 188 229 144 243 80 199 188 119 181 179 209 98 2 182 56 144 212 151 180 235 178 231 141 215 9 55 109 226 194 233 211 120 155 54 37 36 186 149 28 129 37 75 139 43 25 200 237 8 231 197 24 178 34 86 24 134 196 202 101 236 181 191 112 242 137 39 25 63 123 150 173 219 183 3 16 126 246 89 214 70 246 244 100 211 105 174 131 230 55 211 248 7 212 146 179 208 114 68 172 182 110 37 147 20 195 190 173 137 99 171 73 49 203 120 5 134 254 248 7 62 57 120 144 11 231 206 177 117 100 4 140 33 188 122 21 128 226 190 125 132 141 6 113 20 65 126 97 19 2 164 164 30 4 73 138 1 114 217 105 116 185 152 79 204 160 178 205 141 148 50 205 143 52 54 149 48 70 167 247 52 255 43 248 108 124 249 101 46 63 243 12 231 207 158 101 251 142 29 24 99 136 174 93 67 87 171 124 116 226 4 81 163 49 5 4 2 116 106 62 157 84 150 154 21 188 21 133 80 43 240 188 135 164 148 184 174 75 161 80 192 117 221 108 203 121 254 252 199 244 247 87 168 84 42 45 223 36 109 39 80 61 69 54 188 244 34 39 158 120 18 121 250 116 48 188 99 135 151 198 28 2 130 95 194 119 79 37 213 235 128 36 247 9 90 84 47 185 121 109 7 222 110 41 45 104 223 247 51 181 4 226 56 102 110 110 150 43 87 174 240 241 199 159 52 219 59 18 233 72 28 229 224 40 7 165 92 220 82 47 239 62 124 128 233 48 28 191 112 238 92 224 110 216 0 169 23 189 230 217 65 144 187 90 50 17 16 173 136 128 13 23 187 15 246 60 47 171 129 90 245 60 47 43 201 84 23 170 212 235 117 170 11 11 212 235 53 98 173 145 142 131 35 37 202 81 77 85 14 158 231 129 87 224 181 109 219 158 152 110 52 206 93 56 127 62 176 131 180 39 57 71 176 218 142 204 242 7 28 150 132 235 186 89 238 159 175 1 217 248 47 20 60 26 141 6 115 115 115 57 162 46 219 70 134 137 162 100 123 40 29 137 66 161 141 198 160 73 206 35 12 142 114 152 189 237 182 169 223 249 254 183 127 92 175 255 157 211 167 71 137 99 214 55 193 235 188 213 201 85 176 151 157 133 172 245 109 249 36 31 74 82 74 124 223 167 209 168 243 89 58 13 58 142 67 169 92 102 240 174 141 220 57 112 39 202 81 89 77 213 26 64 72 145 18 212 144 86 167 119 238 220 185 240 214 248 248 141 191 214 235 143 60 25 4 255 48 240 165 225 38 129 69 160 243 210 49 149 176 224 173 180 18 88 183 110 29 181 90 141 75 151 46 18 69 33 202 117 25 220 56 200 208 208 22 250 251 251 147 54 177 38 140 131 100 50 50 205 239 104 99 207 28 52 82 36 253 189 242 202 43 243 64 36 132 88 248 22 220 95 132 231 251 97 170 19 240 142 4 44 248 214 89 199 18 40 22 139 4 97 192 185 243 231 168 86 231 233 237 237 101 120 100 152 161 161 45 248 190 15 64 16 5 205 239 217 169 148 92 193 88 167 167 52 58 38 142 181 221 99 107 219 247 211 137 213 127 182 20 240 142 4 242 224 243 218 211 211 67 20 69 156 62 115 146 235 215 167 24 28 28 228 190 125 123 25 252 194 93 72 145 144 12 130 160 221 231 72 25 100 52 178 211 158 56 38 214 122 81 209 160 91 89 118 83 95 42 149 144 82 242 225 71 31 242 233 167 147 108 223 177 157 111 238 219 67 95 185 12 66 100 3 116 165 210 60 229 209 233 145 149 185 117 4 242 82 46 151 241 125 159 15 62 248 128 203 87 62 101 108 108 148 251 190 188 39 205 247 5 141 160 59 224 77 49 233 6 75 231 200 24 232 242 108 172 45 1 33 146 205 121 111 111 47 39 79 158 224 234 181 171 140 142 237 228 222 189 95 76 199 161 33 8 151 8 147 149 225 199 164 36 154 135 126 205 114 254 154 8 148 203 37 198 199 199 57 115 246 20 35 219 182 50 188 109 11 2 65 180 86 208 173 98 154 131 26 211 44 219 175 70 50 2 115 243 179 76 76 94 100 195 157 119 208 183 126 27 66 8 162 120 137 173 221 45 16 11 92 74 185 234 65 160 0 252 130 251 183 151 126 251 226 99 157 94 90 173 123 91 165 147 165 123 138 61 127 190 37 29 124 46 159 75 247 242 63 81 5 144 78 154 113 137 92 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!customizeInterface	^ self iconNamed: #tools! !!DrGIcons class methodsFor: 'form' stamp: ''!iconWith: morphOrForm background: aColor	^ self iconWith: morphOrForm extent: self menuExtent inset: self menuInset background: aColor! !!DrGIcons class methodsFor: 'accessing' stamp: ''!viewer^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 24 0 0 0 24 8 2 0 0 0 111 21 170 175 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 14 196 0 0 14 196 1 149 43 14 27 0 0 0 7 116 73 77 69 7 214 4 2 8 52 1 149 4 169 0 0 0 0 180 73 68 65 84 56 203 197 85 203 14 195 48 8 35 86 255 187 233 143 199 59 108 107 9 143 164 149 50 205 226 20 192 134 146 208 66 82 86 0 178 8 91 230 40 199 17 158 115 223 227 120 223 218 69 225 115 190 46 79 103 137 62 44 137 172 166 179 92 84 144 90 133 188 107 181 234 92 76 63 202 0 58 165 159 218 184 35 131 62 24 163 114 10 172 229 69 33 86 56 211 216 132 45 56 119 41 136 11 49 201 221 116 90 88 26 158 177 228 92 72 131 52 157 246 122 177 244 137 104 46 173 60 212 72 222 218 169 60 232 58 109 205 223 128 247 200 180 37 79 239 34 226 163 171 24 45 3 100 10 115 244 193 152 46 154 59 229 172 92 35 63 91 108 43 87 237 159 255 34 47 138 168 164 232 254 82 152 242 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!iconWithBackground: morphOrForm	^ self iconWith: morphOrForm background: Color white! !!DrGIcons class methodsFor: 'accessing' stamp: ''!group	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 24 0 0 0 24 8 2 0 0 0 111 21 170 175 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 1 13 73 68 65 84 56 203 173 85 65 106 133 48 20 156 212 224 33 220 231 44 66 90 193 75 40 180 123 93 181 171 118 231 82 104 241 30 173 224 70 240 28 185 129 17 92 199 77 186 248 16 196 95 53 166 153 85 120 129 121 147 153 199 11 209 90 195 7 40 128 199 231 119 66 136 51 133 214 250 231 235 141 2 32 132 124 127 190 58 19 61 189 124 0 120 128 39 80 115 202 243 124 28 199 101 89 76 37 8 130 40 138 154 166 185 70 36 165 172 170 138 49 102 42 66 136 162 40 46 43 82 74 173 89 0 48 198 140 192 44 203 164 148 7 122 169 101 195 105 154 142 245 218 154 125 172 215 103 106 187 68 125 223 167 105 10 128 115 206 57 7 144 36 73 215 117 231 102 111 80 215 245 159 166 196 113 124 162 40 12 67 33 132 189 41 187 138 230 121 46 203 82 41 245 223 201 30 134 97 125 113 243 229 0 66 8 74 233 185 71 123 48 13 40 165 235 157 113 153 168 109 219 107 241 123 155 163 77 136 247 166 216 206 209 125 136 27 83 108 137 54 33 186 63 205 101 142 180 214 183 189 235 188 252 1 16 95 223 209 47 26 227 127 226 181 183 68 199 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!keep	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 219 8 3 7 48 6 165 130 39 32 0 0 10 122 73 68 65 84 104 222 237 153 123 108 92 85 126 199 63 231 220 153 59 47 143 103 252 72 108 39 118 220 96 231 229 216 236 6 26 18 2 41 109 104 96 11 37 2 90 88 22 181 162 149 90 169 42 143 86 72 84 244 189 84 229 31 170 106 89 118 23 45 21 15 117 89 161 21 219 64 23 136 132 182 11 137 67 30 198 36 177 157 196 118 136 99 27 59 30 63 102 226 177 199 243 186 119 230 222 123 250 199 157 216 134 93 90 59 36 20 85 249 74 71 231 92 221 115 175 126 223 223 235 254 206 239 10 150 7 177 104 173 248 10 64 252 111 27 206 130 79 65 117 123 40 20 77 249 253 193 235 76 51 144 243 120 82 246 236 108 66 65 174 27 50 79 129 245 149 35 208 12 190 191 130 77 183 55 52 220 81 190 97 195 206 76 69 69 149 174 105 254 50 159 175 204 200 231 243 230 220 220 120 126 106 106 56 27 139 157 24 136 199 223 249 61 24 251 202 16 120 30 86 174 175 175 223 85 219 214 246 96 195 154 53 191 25 168 171 43 147 32 148 109 131 174 131 109 43 164 68 21 10 142 25 139 165 166 7 7 255 43 61 50 242 250 177 145 145 35 127 12 147 255 167 4 94 133 186 173 215 92 243 200 234 235 175 127 80 111 104 88 37 53 77 39 157 134 98 209 221 224 56 32 4 72 9 161 16 68 163 202 114 28 149 75 38 135 82 111 191 253 179 131 163 163 223 249 35 136 125 89 4 180 197 23 123 32 124 95 67 195 67 141 219 183 255 89 160 169 169 94 228 114 30 230 230 192 178 64 41 119 44 134 101 65 177 40 164 215 43 124 107 214 84 4 34 145 141 101 62 159 186 229 252 249 193 159 66 234 75 37 112 31 104 127 174 105 183 55 93 119 221 227 145 166 166 102 230 230 36 134 1 126 63 4 131 16 14 187 90 119 28 119 128 107 9 77 3 33 16 182 45 60 141 141 254 96 117 245 250 96 60 30 216 50 61 221 253 22 228 190 52 2 223 134 234 77 235 214 61 82 179 109 219 78 41 132 78 161 0 145 8 118 40 84 52 149 74 57 134 145 23 62 159 146 213 213 26 66 128 105 138 121 139 232 58 120 60 8 165 132 103 245 234 178 160 215 187 198 201 100 6 94 154 158 30 0 236 75 201 126 75 133 231 226 34 84 94 254 245 200 218 181 59 101 40 228 39 147 129 186 58 85 72 38 179 163 61 61 135 6 98 177 247 2 201 100 188 174 162 98 195 234 182 182 61 254 13 27 214 123 124 62 157 169 41 215 141 12 195 181 18 32 12 67 248 175 189 182 54 52 59 123 239 99 103 207 118 61 7 3 0 175 131 118 11 172 176 161 62 9 99 173 151 41 216 47 18 208 107 66 161 173 161 166 166 58 233 245 74 85 85 133 157 78 91 201 206 206 125 51 189 189 207 236 207 229 250 247 64 241 92 34 17 152 155 153 249 224 154 153 153 191 168 220 177 227 54 17 137 72 82 41 151 64 62 239 6 181 109 35 170 170 188 181 45 45 55 223 223 210 242 141 135 251 250 114 85 161 80 139 30 137 220 224 105 106 218 158 235 235 139 38 167 167 159 228 114 18 216 11 85 117 171 86 125 205 91 95 31 192 178 80 154 102 39 142 28 233 57 126 226 196 139 119 219 118 23 160 190 227 238 79 255 99 34 241 243 223 237 236 44 115 234 235 235 171 27 26 90 132 101 73 114 57 200 231 81 166 137 8 135 193 178 136 52 55 215 110 222 184 241 17 61 26 189 211 211 214 182 78 108 218 180 198 209 52 235 194 203 47 191 254 202 244 244 217 203 234 66 6 4 236 138 138 106 41 132 80 193 160 178 19 9 51 55 57 185 175 203 182 15 126 182 100 120 10 156 177 76 230 253 63 56 125 122 109 69 85 213 223 120 106 107 35 76 76 184 241 96 154 110 80 43 133 39 24 148 225 251 239 111 82 154 182 78 248 253 66 248 253 42 215 217 57 53 58 59 251 142 23 102 47 23 1 9 16 2 175 45 165 215 17 110 108 25 195 195 99 185 120 252 200 83 80 248 85 15 189 4 51 51 39 79 182 171 145 145 243 132 66 174 235 248 124 96 219 110 134 10 4 16 150 37 132 174 75 169 148 16 166 137 74 165 84 166 183 183 47 62 49 209 249 111 80 188 24 204 81 63 27 87 148 177 85 150 100 209 4 190 101 91 160 25 18 86 44 118 216 60 124 184 205 145 114 58 113 242 228 235 231 19 137 19 191 234 129 65 136 84 193 6 35 26 221 161 138 69 93 8 161 8 135 5 134 225 10 111 154 8 175 23 188 94 112 28 129 166 129 223 143 49 60 108 166 123 123 143 60 95 48 140 230 42 190 181 54 202 125 245 97 118 215 53 172 42 179 109 155 137 216 84 194 171 81 166 9 2 189 113 190 127 248 60 143 46 153 64 43 36 255 179 183 247 123 190 193 193 83 159 120 189 115 31 164 211 31 253 45 92 184 184 105 63 148 109 134 245 254 218 218 237 162 177 241 6 79 115 243 13 129 134 134 70 185 122 181 31 81 50 155 174 187 31 58 203 66 41 229 146 80 10 28 7 5 196 123 186 46 252 96 166 111 119 203 215 121 114 91 164 220 119 253 238 221 108 191 227 14 242 217 44 63 121 230 25 34 229 193 21 235 182 108 97 232 212 41 202 83 115 77 203 78 163 119 195 56 134 241 26 134 33 1 103 177 155 69 96 167 83 89 249 168 190 107 215 54 237 182 219 42 132 166 9 146 73 200 100 22 74 12 41 93 129 139 69 55 43 133 195 238 135 78 215 49 38 199 233 254 248 112 195 230 123 111 106 184 241 158 61 180 238 216 193 248 208 16 255 241 236 179 204 77 79 115 239 163 143 178 101 215 46 132 16 60 251 240 195 28 25 248 240 228 178 9 44 130 243 217 235 126 232 160 88 36 55 58 58 178 242 232 209 59 245 214 214 90 161 105 30 33 165 64 136 133 50 67 8 215 141 50 25 84 101 37 66 215 193 239 167 48 50 200 141 143 255 41 43 239 218 73 54 149 226 71 255 244 247 244 30 61 198 3 79 60 193 245 187 119 35 176 32 125 12 50 93 196 71 134 72 230 56 121 73 181 208 231 225 13 48 94 40 20 206 5 70 71 59 42 187 186 134 69 177 136 208 180 74 189 186 58 36 162 81 65 161 176 80 228 129 75 38 26 69 4 131 168 120 156 76 172 15 255 111 175 32 192 41 94 253 231 167 233 63 118 142 199 95 120 129 13 91 183 34 242 103 33 254 19 200 157 165 224 132 217 251 114 59 199 39 248 118 222 34 126 217 8 92 196 33 200 191 168 212 153 77 177 216 71 7 134 63 174 44 76 12 183 148 235 62 221 87 187 10 225 247 131 109 33 28 199 37 16 14 35 194 101 100 207 157 38 31 236 32 178 46 137 70 134 55 127 124 138 223 248 253 7 184 238 214 91 97 122 31 164 59 92 49 180 32 147 241 0 251 223 254 176 208 17 227 113 165 126 201 19 150 236 66 255 115 222 21 136 189 245 230 191 54 68 204 123 102 242 89 236 49 31 109 90 145 202 112 13 190 154 58 48 13 200 230 192 52 113 76 147 66 106 128 178 27 43 209 67 85 204 165 10 92 152 152 97 251 157 119 130 157 134 194 56 104 17 16 26 8 141 225 115 179 204 26 244 219 206 210 79 120 203 38 240 181 26 158 104 140 114 79 203 246 237 252 201 211 79 227 215 138 100 143 255 156 236 161 15 41 14 86 227 175 220 128 167 102 21 132 130 88 137 73 148 158 36 208 84 79 60 110 242 234 119 223 163 126 253 122 42 107 107 33 63 8 90 216 21 30 13 132 228 227 158 110 166 151 225 255 151 68 224 215 162 220 189 162 190 158 199 158 123 14 145 122 31 210 125 148 55 73 10 117 53 228 123 211 100 79 31 195 123 174 14 255 154 54 138 83 131 196 203 114 188 253 195 118 186 14 245 211 122 243 77 60 244 216 95 186 47 42 76 129 86 182 64 64 11 50 208 221 199 180 113 101 9 4 117 141 234 45 187 118 33 164 0 99 196 213 162 244 160 71 61 232 55 175 34 187 209 96 224 167 61 152 191 232 34 254 201 24 29 229 89 54 239 190 133 191 123 237 31 168 105 108 116 223 98 198 192 201 185 4 144 32 36 249 66 136 153 120 156 68 150 163 87 138 64 8 228 77 66 58 129 178 72 4 236 76 73 131 30 16 30 28 37 121 235 71 237 252 226 141 195 212 172 169 227 218 109 191 78 219 35 15 112 215 45 55 151 14 66 38 20 38 160 152 4 107 22 180 208 188 235 128 100 176 119 4 203 33 55 149 161 243 10 17 208 154 65 248 52 225 120 188 62 31 40 11 60 229 37 2 26 123 127 184 143 51 221 35 60 249 202 43 212 175 223 8 202 6 59 5 230 8 216 179 224 24 11 2 203 64 41 112 101 201 2 26 93 237 31 49 153 225 144 163 230 235 164 203 77 64 249 65 32 193 227 213 245 18 39 55 8 135 251 207 211 117 184 159 191 254 247 31 19 174 172 112 93 171 48 233 30 188 46 10 42 131 37 127 151 139 4 119 103 219 145 28 123 255 16 227 25 14 92 242 137 108 9 13 12 89 170 24 52 175 223 239 10 87 114 131 131 251 58 217 253 135 15 17 174 172 132 66 28 172 36 72 255 167 5 254 140 208 139 215 159 244 15 97 100 179 140 207 177 255 146 202 233 37 90 192 41 17 240 186 22 144 32 67 152 5 73 255 241 62 118 220 181 199 221 98 205 184 46 162 5 92 18 154 191 68 102 241 236 115 135 208 65 234 116 188 123 128 76 129 79 226 89 62 188 146 22 48 1 60 2 143 230 241 148 122 67 1 142 183 119 114 195 55 126 7 95 32 224 6 168 244 254 146 134 221 18 99 209 60 191 22 204 38 102 57 252 214 59 156 185 192 203 151 210 111 93 134 5 156 66 169 157 160 205 87 33 210 71 199 187 7 249 173 111 126 211 213 190 147 255 180 134 165 15 164 14 226 226 92 26 210 11 194 139 227 104 188 246 47 223 165 88 180 204 143 147 188 242 133 186 18 75 128 41 5 218 124 75 68 72 226 177 11 148 87 85 83 177 114 165 91 26 72 189 116 123 65 195 159 94 151 134 144 140 13 12 177 247 251 207 211 123 180 195 126 111 136 111 101 205 75 235 173 46 199 133 10 82 40 239 194 165 198 169 163 39 184 245 193 7 93 237 43 27 132 247 115 4 22 243 233 114 232 84 47 251 94 124 137 211 71 142 96 88 36 14 141 242 240 240 44 111 126 225 190 208 82 44 160 73 225 89 236 125 10 193 218 214 86 55 199 11 207 188 118 23 250 86 174 208 177 193 33 186 15 180 211 125 224 0 163 103 206 160 192 58 61 197 247 142 79 240 84 193 254 98 45 200 229 16 40 104 40 109 113 86 93 219 218 182 112 254 17 222 121 2 150 229 48 216 211 67 247 129 118 122 14 30 100 122 124 156 124 145 100 44 205 193 243 115 252 44 54 199 187 185 226 229 109 108 45 41 136 165 230 241 2 164 103 102 112 108 135 181 155 55 3 2 195 176 25 58 121 146 129 19 93 156 235 238 102 248 244 105 12 163 96 78 100 69 207 88 74 236 31 75 243 102 50 183 252 20 121 217 93 40 95 80 169 162 67 238 131 55 222 8 122 117 157 209 51 103 24 232 234 98 236 236 89 114 69 39 157 200 136 51 147 25 209 51 153 161 61 158 227 93 219 81 23 174 244 159 168 101 54 89 181 93 13 229 106 231 166 21 234 246 160 151 138 164 193 249 169 140 236 139 103 56 58 99 56 199 64 77 2 217 175 212 63 178 207 108 143 128 92 235 86 166 106 14 84 28 212 133 207 233 64 95 197 85 92 197 85 92 197 85 92 197 255 123 252 55 116 190 108 56 154 203 241 187 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!centralSymmetry	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 2 3 73 68 65 84 120 218 237 154 209 141 194 48 12 134 233 233 150 224 9 137 1 96 0 86 64 44 209 55 132 24 128 1 24 0 33 222 186 4 98 5 6 128 1 144 120 98 140 242 148 67 245 93 206 73 157 196 105 251 127 47 149 64 77 157 223 142 237 90 29 141 0 0 0 0 16 128 186 110 94 121 190 180 77 238 7 238 130 83 190 181 77 239 6 54 129 139 66 186 178 120 129 97 224 27 225 238 142 65 10 82 6 14 32 148 101 89 150 37 141 120 121 170 1 12 84 248 191 29 65 187 28 238 10 188 9 35 188 187 35 112 180 254 197 53 146 77 138 242 79 93 168 1 34 138 162 121 98 140 224 168 25 129 176 167 20 191 154 161 78 119 138 22 39 172 155 240 116 223 106 248 26 16 202 96 127 199 74 133 207 204 17 210 7 182 189 95 126 178 252 132 77 165 71 54 15 226 4 110 239 128 237 118 179 89 175 67 11 207 235 18 168 90 211 46 32 22 241 102 50 105 236 254 109 143 176 13 77 37 124 87 225 245 105 233 128 248 194 119 123 38 19 77 159 248 197 164 219 51 153 104 207 75 223 207 166 158 201 104 233 195 28 145 92 114 124 232 153 12 183 158 235 126 229 250 244 100 22 20 106 38 147 78 120 71 114 121 179 147 206 100 220 215 107 167 135 162 0 177 8 59 10 176 237 199 117 159 217 204 116 252 13 90 173 118 187 197 162 174 231 243 229 114 58 229 239 139 59 147 233 28 237 35 194 8 239 235 0 67 207 133 253 129 249 46 200 94 100 140 160 147 201 108 54 30 127 126 63 159 247 251 235 245 115 223 243 121 191 191 94 238 6 153 153 204 225 112 60 158 78 159 226 90 85 85 85 85 218 221 88 120 90 111 200 230 0 138 113 192 237 118 185 60 30 253 19 80 138 184 13 245 141 112 208 196 217 1 52 7 35 162 195 192 58 128 230 96 223 98 104 82 148 41 198 218 27 206 13 231 8 166 142 176 9 106 75 73 92 177 30 42 222 2 112 145 76 139 46 109 63 145 186 154 136 63 79 167 17 111 4 238 123 251 168 134 137 104 122 53 255 15 229 5 42 57 3 31 9 232 1 225 51 1 66 43 17 247 123 25 0 0 0 0 0 37 222 28 134 87 22 39 202 104 13 0 0 0 0 73 69 78 68 174 66 96 130)  ! !!DrGIcons class methodsFor: 'form' stamp: ''!segmentMorph: thick color: color dash: dash	^ (DrGLineMorph from: 0@0 to: self menuExtent x @0 color: color width: thick) 		dashedBorder: dash! !!DrGIcons class methodsFor: 'accessing' stamp: ''!circle	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 11 6 73 68 65 84 120 218 237 90 89 76 84 247 23 62 195 62 3 195 54 80 96 216 226 64 21 172 136 49 77 80 145 64 92 74 77 120 16 77 109 40 47 188 25 18 86 31 36 225 161 66 99 2 24 21 100 107 66 82 19 107 31 140 90 104 19 105 155 136 177 46 149 132 88 75 193 34 9 160 172 14 21 134 25 134 1 134 97 185 125 56 249 114 203 181 83 96 24 168 252 255 243 189 124 222 59 227 112 239 57 191 223 89 190 243 35 114 192 1 7 28 112 192 1 7 28 112 192 129 77 135 236 191 126 0 107 184 119 239 236 217 179 103 5 33 40 168 171 171 171 139 72 165 122 245 234 213 43 34 165 114 116 116 116 148 200 195 195 104 52 26 137 156 157 231 231 231 231 137 22 23 93 93 93 93 137 204 102 111 111 111 111 34 163 49 40 40 40 136 72 167 219 182 109 219 54 162 209 209 216 216 216 88 162 163 71 47 94 188 120 81 246 206 190 247 166 227 219 111 175 92 185 114 69 16 158 63 79 75 75 75 19 132 217 89 31 31 31 31 65 16 4 34 162 213 243 210 210 234 190 55 61 173 84 42 149 130 240 219 111 169 169 169 169 130 112 243 230 229 203 151 47 243 167 255 87 232 232 72 79 79 79 95 217 96 90 45 115 107 43 243 173 91 204 95 126 201 220 208 192 220 212 196 252 236 25 179 193 192 188 176 176 156 173 253 157 182 182 99 199 142 29 219 124 71 108 218 86 108 110 62 127 254 252 121 65 72 72 184 122 245 234 85 34 149 234 229 203 151 47 197 207 77 38 230 158 30 230 246 118 230 190 62 230 241 241 144 144 144 16 162 249 249 128 128 128 0 162 217 89 165 82 169 36 178 88 20 10 133 130 72 46 159 154 154 154 34 242 241 153 156 156 156 36 10 14 214 233 116 58 162 184 184 177 177 177 49 162 152 24 254 157 200 72 102 87 215 229 207 231 228 196 172 213 134 134 134 134 18 61 124 152 153 153 153 73 148 145 113 225 194 133 11 27 23 178 54 220 1 247 239 23 22 22 22 10 66 82 82 109 109 109 173 24 179 129 174 46 230 159 127 102 238 238 246 244 244 244 36 210 235 53 26 141 134 200 100 98 195 91 44 46 46 46 46 68 50 153 76 38 147 17 185 184 240 181 171 43 199 126 92 227 115 65 224 213 237 236 108 50 153 76 68 65 65 236 240 253 251 153 19 19 205 102 179 153 232 189 247 254 217 17 139 139 252 123 141 141 236 136 79 63 189 118 237 218 53 251 59 98 195 28 0 195 167 164 84 86 86 86 138 247 167 166 152 31 63 102 126 244 136 121 96 96 215 174 93 187 136 38 39 35 35 35 35 255 110 64 103 103 103 103 34 119 119 119 119 119 119 34 133 130 87 188 167 39 59 10 44 151 203 229 114 185 248 253 197 197 197 197 197 69 162 217 217 217 217 217 89 162 233 233 233 233 233 105 145 119 236 120 250 244 233 83 162 244 116 78 242 97 97 252 28 10 197 242 247 48 26 153 155 154 50 50 50 50 136 102 103 19 19 19 19 137 114 114 114 114 114 114 214 239 16 187 59 0 161 38 53 181 180 180 180 84 92 241 35 35 252 249 79 63 49 183 181 169 84 42 21 145 193 16 23 23 23 71 100 50 177 97 177 130 97 104 31 31 31 31 31 31 34 95 95 95 95 95 95 241 26 134 119 115 115 115 115 115 179 110 144 218 218 218 218 218 90 65 176 88 44 22 139 69 116 192 228 36 135 42 23 151 158 158 158 30 162 228 228 7 15 30 60 32 218 191 223 96 48 24 136 188 188 248 255 47 46 50 247 245 177 99 155 155 179 178 178 178 136 220 221 227 227 227 227 137 242 242 242 242 242 242 108 119 132 221 29 48 62 174 209 104 52 130 128 24 143 21 127 243 38 243 227 199 225 225 225 225 68 19 19 187 119 239 222 77 180 176 192 43 29 161 4 6 14 12 12 12 12 12 36 10 8 224 152 175 84 114 204 183 215 202 131 99 166 166 56 119 232 245 92 222 126 252 113 99 99 99 35 81 98 226 208 208 208 16 145 179 51 127 127 102 134 185 165 133 159 231 215 95 79 159 62 125 154 40 36 132 67 164 173 207 101 55 7 160 170 137 139 107 106 226 138 132 241 227 143 204 223 125 199 43 126 116 116 223 190 125 251 68 195 99 165 171 84 252 121 80 16 215 239 184 206 207 207 207 207 207 223 248 186 189 186 186 186 186 186 90 16 12 6 118 68 86 86 67 67 67 3 81 120 248 248 248 248 184 184 19 116 58 230 111 190 217 179 103 207 30 162 169 169 227 199 143 31 39 42 41 41 41 41 41 89 251 115 58 173 247 193 81 199 75 13 143 228 138 24 143 80 35 53 60 12 30 25 201 177 31 43 106 179 12 15 32 148 4 6 242 14 189 119 239 212 169 83 167 222 254 158 74 197 28 31 223 222 222 222 78 100 52 246 245 245 245 17 85 84 84 84 84 84 172 189 140 93 247 11 162 129 250 224 131 59 119 238 220 17 203 201 175 191 102 254 229 23 78 174 6 67 68 68 68 132 24 106 130 131 131 131 131 131 69 195 23 23 23 23 23 23 191 123 29 234 195 135 71 142 28 57 34 8 73 73 45 45 45 45 226 78 24 24 96 254 234 171 152 152 152 24 34 139 37 45 45 45 141 40 34 130 223 115 181 185 97 221 59 32 42 234 209 35 172 114 34 177 142 71 57 137 170 6 201 21 49 30 43 223 207 207 207 207 207 239 191 54 179 117 252 241 199 201 147 39 79 18 25 141 44 113 32 39 160 106 210 104 88 34 209 233 184 239 48 26 89 34 89 45 108 118 0 180 26 15 15 174 38 0 52 80 168 227 81 78 34 228 32 185 34 198 103 103 103 103 103 103 175 119 229 111 92 7 139 231 235 236 76 78 78 78 22 239 195 17 161 161 115 115 115 115 68 110 110 189 189 189 189 68 122 189 94 175 215 19 213 212 212 212 212 212 172 252 92 54 59 0 34 25 48 58 202 140 206 213 100 226 16 131 186 28 43 31 85 205 102 199 248 245 98 112 240 208 161 67 135 222 190 143 157 32 151 191 126 253 250 181 88 222 206 204 204 204 160 114 250 55 216 236 0 168 147 64 127 63 51 36 3 139 133 99 61 26 40 212 241 40 39 183 26 62 251 172 176 176 176 80 38 27 28 100 85 21 59 32 32 128 217 211 147 251 7 105 195 183 18 108 118 0 100 97 96 120 152 25 90 141 181 134 202 94 117 252 127 133 63 255 220 185 115 231 78 241 218 219 155 217 213 149 87 252 252 60 55 158 112 0 250 13 107 191 103 179 3 160 199 3 227 227 204 16 201 160 205 160 99 133 35 182 58 244 250 168 168 168 40 241 218 221 157 217 201 137 115 1 28 96 54 179 214 132 107 107 112 177 245 65 164 162 26 182 36 212 73 148 155 112 0 66 209 218 176 214 228 186 218 239 219 190 3 33 14 2 60 135 32 90 90 90 90 90 90 18 121 110 142 29 2 77 202 26 108 222 1 152 64 225 149 3 3 153 33 11 99 7 120 120 120 120 120 120 216 26 122 240 253 149 216 214 239 175 29 210 208 107 54 51 47 44 112 177 1 7 192 240 184 182 187 3 48 250 195 43 65 103 135 30 47 149 141 255 87 32 45 62 16 134 231 230 150 239 112 24 30 101 184 53 216 236 0 204 92 1 141 134 25 131 16 252 225 149 182 224 86 67 112 240 139 23 47 94 136 215 111 222 48 155 205 203 171 59 39 39 39 39 39 39 113 33 90 131 205 14 192 176 27 128 124 139 9 20 6 33 208 227 87 170 6 222 117 220 186 197 207 175 86 119 118 118 118 138 247 7 7 153 103 102 184 204 134 225 209 255 224 218 26 108 118 128 86 203 26 136 20 184 135 9 20 202 49 206 1 248 214 214 115 132 84 114 65 147 213 219 203 60 61 237 239 239 239 47 26 28 69 7 28 97 13 54 71 231 143 62 186 116 233 210 37 153 12 167 12 20 10 78 190 200 5 24 253 125 242 201 242 142 121 99 176 241 125 197 142 29 119 239 222 189 43 94 163 241 28 26 226 34 99 106 138 29 224 225 177 188 248 64 53 104 13 235 22 227 60 61 217 240 48 129 92 206 140 153 235 86 71 123 251 137 19 39 78 8 130 66 49 49 49 49 33 222 231 211 23 68 19 19 203 71 168 152 208 161 252 94 169 250 91 183 3 172 65 173 254 231 251 101 101 101 101 101 101 111 223 175 170 170 170 170 170 18 4 240 230 152 215 58 126 248 161 180 180 180 84 16 226 227 121 66 6 32 1 35 15 152 76 44 63 35 244 72 103 213 43 97 211 11 68 157 142 69 171 242 242 242 242 242 114 65 64 195 210 215 199 131 13 108 89 56 162 160 160 160 160 160 96 243 165 11 28 159 1 176 250 91 90 152 135 135 89 146 48 155 209 241 115 200 129 228 178 218 206 223 78 59 96 245 6 74 77 189 125 251 246 109 162 145 17 54 120 127 127 127 127 127 63 209 200 200 200 200 200 8 145 193 192 162 22 134 232 155 141 161 161 189 123 247 238 21 4 127 255 129 1 12 93 136 136 248 96 24 81 71 7 107 93 147 147 92 5 98 229 123 121 121 121 121 121 137 162 99 110 110 110 110 110 238 38 12 100 214 138 163 71 181 90 173 150 40 47 239 198 141 27 55 136 148 202 238 238 238 110 209 224 136 161 43 37 47 123 1 161 70 167 139 140 140 140 20 132 176 176 103 207 16 223 137 136 158 60 97 190 127 159 171 25 131 129 39 124 136 249 8 53 144 217 177 3 86 11 59 133 160 181 199 236 247 223 231 228 45 8 173 173 173 173 68 215 175 71 71 71 71 19 117 116 112 121 107 155 118 180 122 32 185 198 199 159 59 119 238 220 219 159 195 240 223 127 207 60 50 146 144 144 144 64 52 51 195 161 5 11 5 131 37 12 154 214 122 76 101 195 39 81 159 127 126 224 192 129 3 68 95 124 241 228 9 94 138 136 136 207 106 138 64 173 172 215 243 138 122 254 60 37 37 37 133 104 104 232 240 225 195 135 137 50 51 207 156 57 115 102 237 185 0 13 20 234 120 148 147 210 170 6 255 70 168 193 138 135 225 141 70 14 45 168 235 177 226 49 211 182 245 84 196 134 37 225 186 186 186 186 186 58 162 158 30 62 248 68 196 14 184 126 157 147 149 78 199 101 42 78 25 64 174 240 243 227 198 45 41 169 185 185 185 153 136 136 249 224 193 216 216 216 88 65 128 30 15 89 24 234 36 68 50 104 53 144 12 212 234 191 55 128 111 3 85 13 146 43 98 60 66 13 86 60 12 143 25 182 90 173 86 171 213 162 35 108 197 6 237 0 153 172 190 190 190 190 190 94 16 6 6 56 153 117 117 113 67 166 213 114 14 56 120 144 147 111 90 26 159 187 129 172 129 17 159 180 123 252 183 110 114 53 64 231 138 6 10 113 30 229 36 170 26 36 87 105 93 47 53 60 14 21 172 247 100 220 58 119 128 245 63 140 83 2 99 99 172 13 45 44 44 44 44 44 136 73 171 173 109 251 246 237 219 137 126 255 157 87 112 116 52 151 167 31 126 200 106 106 68 4 127 31 14 193 42 195 4 10 249 1 82 47 154 62 168 147 16 201 160 213 64 50 64 231 138 6 10 117 252 220 28 39 125 188 17 170 26 233 129 49 172 248 119 246 108 104 101 101 101 101 101 165 32 32 244 12 15 15 15 15 15 139 19 34 233 17 68 172 52 56 10 125 65 68 4 139 121 1 1 236 16 79 79 102 55 55 30 253 97 2 5 217 23 122 60 100 97 168 147 16 201 160 213 64 50 192 223 69 25 9 233 0 51 107 105 114 45 42 42 42 42 42 178 127 63 98 247 28 128 17 28 84 80 200 209 120 65 188 80 88 88 88 88 88 152 24 91 113 95 58 192 48 153 248 119 222 188 89 62 115 5 75 39 81 82 192 192 96 185 156 23 128 116 98 135 5 129 80 227 237 205 243 142 245 134 152 77 119 0 98 38 26 18 0 199 199 113 244 16 91 25 231 110 164 114 53 12 106 237 120 57 118 148 116 244 135 255 39 149 133 81 214 98 33 72 37 3 116 174 171 109 160 236 133 13 251 67 144 18 208 96 97 197 21 22 242 241 14 91 127 23 142 66 78 1 75 39 80 24 132 192 17 152 204 129 183 250 233 12 7 28 112 192 1 59 224 47 137 64 226 59 103 178 13 148 0 0 0 0 73 69 78 68 174 66 96 130) ! !!DrGIcons class methodsFor: 'accessing' stamp: ''!polygon	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 9 92 73 68 65 84 120 218 237 91 107 76 155 101 27 190 74 129 210 195 91 218 66 143 208 150 114 42 39 41 200 32 50 220 208 56 141 75 22 77 22 157 51 51 131 4 231 70 68 102 166 176 17 127 204 68 127 105 162 46 152 37 102 25 78 101 33 217 146 109 49 100 51 134 140 48 53 49 147 127 75 212 132 31 99 39 206 231 210 183 156 74 253 113 231 249 234 247 242 189 225 208 246 165 240 113 253 121 211 62 240 230 121 238 235 62 223 79 129 29 236 64 74 212 214 114 28 199 5 131 236 185 217 251 137 219 236 13 72 5 161 192 11 11 149 74 165 18 184 126 61 43 43 43 43 24 28 25 57 122 244 232 81 233 9 137 223 108 193 68 11 98 26 158 153 153 152 152 152 8 228 230 38 37 37 37 1 46 151 94 175 215 3 193 224 236 236 236 172 244 251 220 182 4 8 161 84 202 229 114 57 224 241 168 213 106 53 224 114 89 44 22 11 160 209 208 103 133 66 165 82 169 164 223 215 182 33 64 76 227 51 50 116 58 157 14 40 40 144 201 100 50 192 225 32 193 3 28 199 113 192 159 127 62 120 240 224 1 80 90 74 150 33 53 182 124 12 88 45 152 122 60 9 9 9 9 64 81 17 9 62 35 163 172 172 172 12 248 226 139 187 119 239 222 5 30 62 244 251 253 126 192 231 27 24 24 24 0 252 254 198 198 198 70 233 98 193 150 37 64 76 240 121 121 228 82 94 125 53 53 53 53 21 40 46 166 207 147 147 46 151 203 5 124 248 225 139 47 126 245 85 232 239 103 102 22 23 23 23 1 158 39 34 252 254 225 225 225 97 233 206 177 229 8 16 19 60 203 106 158 121 134 124 121 81 145 195 225 112 0 28 71 130 111 107 123 227 141 239 191 7 2 129 154 154 212 84 96 121 121 255 254 253 251 129 191 255 38 193 243 60 123 83 48 40 101 46 180 101 8 16 19 188 209 72 46 166 164 132 8 72 75 75 75 75 75 3 244 122 147 201 100 2 90 90 106 107 175 94 253 31 7 143 187 117 235 214 173 208 231 193 193 249 249 249 121 128 231 39 39 39 39 165 59 87 204 19 32 38 120 143 135 130 104 117 53 165 145 78 167 213 106 181 2 41 41 54 155 205 6 156 62 253 230 155 237 237 33 141 103 79 185 252 187 239 198 198 66 79 134 161 33 114 69 126 255 227 199 143 31 3 62 95 125 125 125 125 244 109 33 102 9 16 19 124 101 165 70 163 209 0 79 61 165 213 106 181 64 65 1 9 222 110 175 168 168 168 0 154 154 200 213 172 23 127 252 225 243 249 124 128 207 183 188 188 188 12 44 44 76 77 77 77 69 255 156 49 151 134 138 251 120 242 237 89 89 164 249 110 183 193 96 48 0 106 53 249 250 134 134 231 158 251 252 243 144 166 51 8 53 93 108 157 125 207 243 129 64 32 0 0 148 182 70 27 49 67 128 152 224 159 126 154 178 152 138 10 18 124 90 90 118 118 118 54 160 84 146 207 111 106 122 237 181 111 191 141 220 62 88 44 112 58 165 201 134 54 157 0 49 193 187 221 212 42 200 207 39 65 155 205 233 233 233 233 128 86 75 193 245 212 169 87 94 249 230 155 141 107 188 216 250 232 232 210 210 210 18 192 243 79 158 60 121 2 120 189 199 142 29 59 22 12 114 220 133 11 23 46 68 222 38 54 141 0 49 193 239 221 155 156 156 156 12 216 237 164 241 6 3 249 124 151 171 187 187 187 91 38 171 171 187 118 109 126 62 122 193 241 247 223 169 39 84 89 73 193 61 16 160 52 53 90 144 156 0 161 224 19 19 201 197 60 251 44 245 106 152 111 183 90 73 211 83 83 11 11 11 11 129 186 186 150 150 95 127 13 6 35 173 241 98 235 60 79 174 40 24 140 110 93 32 89 22 36 20 124 106 106 74 74 74 10 224 118 211 1 115 114 40 171 97 189 26 135 163 171 171 171 75 38 123 239 189 234 234 207 62 147 106 151 33 12 12 44 44 44 44 0 60 79 45 138 104 33 234 22 32 222 50 160 188 187 172 140 136 176 90 243 242 242 242 128 143 62 122 235 173 142 14 160 174 238 196 9 64 58 141 23 98 98 130 178 33 191 127 124 124 124 60 122 242 137 154 5 8 5 111 52 82 26 201 242 248 146 18 210 120 163 49 35 35 35 3 224 56 42 160 98 5 191 253 230 245 122 189 192 232 40 41 202 240 112 116 6 54 17 183 128 149 174 38 62 62 62 30 40 47 167 118 175 203 69 77 50 139 133 130 236 217 179 111 191 125 253 122 232 255 165 214 248 213 214 167 167 89 16 102 245 65 140 18 176 82 227 89 254 78 189 26 183 155 124 187 217 76 149 235 233 211 221 221 221 221 128 92 30 249 67 69 18 172 48 91 90 162 22 69 164 17 54 1 66 193 179 1 136 221 78 27 207 205 165 180 210 106 37 23 115 230 76 77 205 149 43 128 92 94 91 11 196 158 198 11 43 227 153 25 106 77 248 253 228 146 34 141 13 199 0 161 224 61 30 242 241 121 121 113 113 113 113 64 101 165 217 108 54 3 54 91 65 65 65 1 208 212 116 251 246 237 219 145 63 64 180 49 60 204 230 5 244 156 157 61 126 252 248 241 200 197 130 117 91 128 80 240 102 51 185 24 155 141 158 133 133 228 227 245 122 106 11 159 57 115 248 240 15 63 0 114 249 225 195 64 236 106 188 216 250 95 127 81 12 216 189 155 10 180 197 197 200 90 194 154 45 64 40 120 135 131 130 106 85 21 5 83 54 0 97 249 125 75 11 249 248 237 130 241 113 114 169 62 95 100 99 193 170 22 32 20 124 102 38 5 87 54 196 206 201 161 30 141 201 68 4 52 53 189 254 250 165 75 128 92 126 226 4 16 123 26 189 209 117 175 151 98 193 220 220 220 220 220 92 228 8 16 181 0 161 224 139 138 40 111 207 207 87 40 20 10 32 39 135 122 37 38 147 221 110 183 3 167 78 117 118 118 118 70 110 99 177 134 135 15 217 196 140 231 121 62 114 195 251 21 22 32 20 124 121 57 107 134 81 87 210 237 166 30 141 78 231 116 58 157 255 214 248 67 135 128 216 209 216 72 173 51 244 245 145 230 79 79 211 224 134 231 7 7 7 7 195 21 255 191 44 64 204 199 103 101 177 155 100 148 199 127 242 201 189 123 247 238 1 31 124 176 189 53 158 225 210 37 175 215 235 13 181 161 167 166 40 22 204 205 141 140 140 140 132 255 126 153 80 240 121 121 164 233 101 101 76 243 73 211 63 253 180 183 183 183 119 243 53 114 179 215 247 237 163 186 166 178 146 92 175 197 82 90 90 90 10 168 213 231 207 159 63 191 254 121 193 138 24 80 89 73 233 99 97 97 113 113 113 49 96 50 101 102 102 102 134 203 243 246 65 87 215 244 244 244 52 192 243 51 51 51 51 64 92 28 165 223 27 197 138 24 48 62 78 21 107 110 46 5 155 184 56 114 61 194 10 145 97 179 53 82 170 245 139 23 15 30 84 40 100 255 241 24 83 83 36 31 159 239 209 163 71 143 194 32 128 249 56 246 226 31 127 188 115 231 206 29 64 161 160 193 136 197 210 223 223 223 15 52 55 247 246 86 85 1 106 117 73 73 73 9 160 82 145 165 40 149 61 61 205 205 128 82 121 238 220 185 115 50 89 172 220 187 143 52 132 231 154 157 141 204 237 137 21 62 75 76 128 123 246 80 193 101 50 81 119 211 96 160 167 94 79 62 145 227 232 169 80 80 157 192 110 43 188 251 110 123 123 123 123 232 61 98 26 37 92 103 136 53 139 96 120 225 5 58 239 238 221 116 78 155 173 188 188 188 60 164 136 107 37 96 133 11 18 70 125 38 160 95 126 17 43 193 71 71 71 71 129 67 135 168 2 214 104 232 58 135 193 208 215 215 215 7 156 61 203 130 20 213 17 9 9 87 175 214 214 2 95 127 125 242 228 201 147 193 96 125 125 91 91 91 91 232 109 140 152 104 207 126 195 197 253 251 148 150 150 148 208 77 186 96 112 99 237 234 176 167 252 171 185 156 151 94 34 77 97 105 173 90 77 4 105 181 228 226 52 26 106 79 199 199 83 129 167 80 80 129 215 208 208 209 209 209 177 249 26 47 182 110 177 80 240 61 112 128 206 231 118 123 60 30 15 96 52 222 184 113 227 70 24 22 176 94 8 45 70 72 204 207 63 83 214 32 68 85 21 5 177 204 204 177 177 177 49 64 167 163 3 113 28 205 136 155 155 119 237 218 181 11 48 24 174 93 171 171 3 146 146 136 184 247 223 15 119 199 145 193 226 34 237 211 239 167 231 70 111 79 72 112 247 235 191 177 214 32 253 242 203 52 87 112 56 168 46 209 235 201 66 212 106 170 79 216 173 103 185 156 214 27 27 175 92 161 57 131 52 49 128 225 249 231 201 181 238 217 67 163 85 171 149 20 103 173 177 64 242 107 41 98 22 195 192 8 250 233 39 202 46 172 86 42 253 157 78 34 192 96 32 159 107 181 14 13 13 13 1 58 29 37 7 31 127 76 67 125 165 242 226 197 131 7 1 173 150 110 208 5 2 71 142 28 57 2 52 52 92 190 124 249 114 248 251 23 166 227 161 30 17 197 194 64 96 125 205 58 201 45 96 189 88 205 98 138 139 105 16 148 158 78 49 70 175 167 251 69 70 35 89 6 199 145 37 41 149 244 119 42 21 197 28 133 130 146 6 161 166 174 55 43 99 120 231 29 163 209 104 4 114 114 168 128 93 107 44 136 121 2 196 32 70 140 78 71 4 104 52 244 100 87 27 141 70 150 54 211 247 201 201 44 9 160 160 159 144 64 4 169 213 212 98 80 169 90 91 91 91 67 2 100 89 153 24 1 53 53 68 64 126 62 89 162 197 114 243 230 205 155 219 152 0 49 172 102 49 108 130 231 116 146 197 184 221 68 16 203 206 146 147 201 213 105 52 212 17 72 74 34 31 239 247 83 125 51 49 65 159 91 91 247 237 251 242 203 144 69 84 87 211 247 213 213 235 139 5 219 142 0 49 172 53 248 23 21 17 33 46 23 17 97 179 209 147 227 104 93 163 161 118 60 35 136 253 182 248 254 253 137 137 137 9 32 59 155 234 1 187 189 167 167 167 231 255 208 2 54 138 213 8 98 191 79 48 155 201 149 49 130 180 90 102 49 116 25 65 163 161 236 204 108 238 236 236 236 220 33 32 108 172 213 114 246 238 101 173 26 114 109 7 14 244 247 247 247 75 241 19 143 29 236 96 43 227 31 155 227 168 4 251 87 97 42 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!arc	^self formFromGraphic:  #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 7 221 73 68 65 84 120 218 237 90 203 79 147 89 20 63 95 203 163 60 74 65 10 5 132 2 37 136 18 27 98 16 17 137 129 21 134 168 33 237 2 67 38 153 132 133 75 137 18 163 9 175 70 94 49 6 212 68 131 11 23 147 204 31 160 49 51 106 52 136 102 76 88 32 105 124 67 38 12 146 182 137 82 138 188 218 210 150 199 157 197 153 147 27 202 212 66 31 130 245 251 109 126 185 95 239 215 246 158 115 238 185 231 113 1 68 136 16 33 66 132 8 17 34 68 136 248 89 193 216 70 254 121 32 217 217 159 255 249 4 238 141 168 240 126 189 47 1 11 194 78 47 124 183 32 204 130 216 174 133 11 66 119 119 119 119 119 55 99 211 211 211 211 211 211 0 209 209 81 81 81 81 0 215 175 223 184 113 227 70 228 41 46 204 59 96 235 232 237 237 237 237 237 101 204 100 50 153 76 38 128 153 153 153 153 153 25 0 133 34 41 41 41 105 167 255 93 248 16 182 51 224 249 243 11 23 46 92 216 250 252 193 193 193 193 193 65 128 145 145 145 145 145 17 0 139 197 98 177 88 0 60 158 149 149 149 21 128 174 174 174 174 174 174 200 59 51 66 174 128 135 15 209 133 28 63 126 251 246 237 219 91 127 111 104 104 104 104 104 8 96 97 97 97 97 97 1 96 121 121 121 121 121 25 96 126 126 126 126 126 158 143 69 248 129 205 166 209 104 52 222 97 229 246 185 186 186 186 186 186 154 177 166 166 166 166 166 166 200 179 124 66 200 118 192 219 183 58 157 78 199 152 82 57 57 57 57 233 127 126 81 81 81 81 81 209 230 231 101 101 101 101 101 101 0 114 185 92 46 151 3 200 100 50 153 76 182 211 98 10 31 66 166 0 173 246 254 253 251 247 253 207 43 47 47 47 47 47 7 136 142 142 142 142 142 222 252 60 33 33 33 33 33 1 96 109 109 109 109 109 13 96 118 118 118 118 118 22 128 162 163 157 22 88 168 17 180 2 222 191 63 117 234 212 41 255 130 169 172 172 172 172 172 4 112 187 221 110 183 27 64 42 149 74 165 82 128 138 138 138 138 138 10 0 133 66 161 80 40 0 146 146 48 234 161 207 237 118 187 221 110 7 88 90 90 90 90 90 218 105 113 133 30 65 135 161 5 5 47 95 190 124 201 199 70 35 242 111 191 197 199 199 199 3 124 248 112 244 232 209 163 0 115 115 115 115 115 115 220 178 227 226 226 226 226 226 184 224 85 42 149 74 165 226 59 192 225 112 56 28 14 238 130 200 37 69 26 2 222 1 207 158 93 186 116 233 18 99 50 25 70 45 132 215 175 145 191 126 213 104 52 26 128 213 213 213 213 213 85 0 137 68 34 145 72 184 64 73 240 153 153 153 153 153 153 0 249 249 249 249 249 249 0 3 3 3 3 3 3 130 144 157 157 157 157 157 13 144 155 155 155 155 155 11 208 214 214 214 214 214 230 43 17 251 113 93 83 192 59 64 165 250 248 241 227 71 62 254 242 5 249 159 127 144 237 246 140 140 140 12 128 152 24 28 199 198 198 198 198 198 114 11 79 75 75 75 75 75 3 200 201 201 201 201 201 1 232 232 232 232 232 232 224 2 238 233 233 233 233 233 137 188 204 215 27 1 43 32 53 245 211 167 79 159 248 120 106 10 217 102 67 139 246 120 240 144 149 203 209 226 211 211 211 211 211 211 57 99 98 21 249 2 246 135 128 93 144 92 254 229 11 89 61 0 128 197 130 188 178 162 84 42 149 220 229 36 38 38 38 38 38 2 100 101 101 101 101 101 137 130 247 70 192 10 144 201 22 23 23 23 249 216 102 67 94 94 198 195 50 42 10 139 104 164 0 131 193 96 48 24 68 193 123 35 96 23 36 149 98 141 134 143 145 61 30 140 126 40 206 39 159 31 24 182 123 184 110 117 254 238 49 132 128 119 192 218 26 10 152 150 156 150 134 28 23 135 241 58 237 128 224 50 89 18 148 63 14 116 254 206 35 96 5 184 92 152 48 209 146 114 115 145 21 10 12 75 5 65 16 4 129 43 66 196 255 35 96 5 44 46 98 226 68 208 104 144 51 50 176 116 192 24 99 140 241 196 43 50 17 124 47 59 96 5 204 206 98 226 68 72 76 68 214 106 177 145 34 149 98 9 33 50 203 200 161 75 252 2 86 192 231 207 251 247 239 223 191 249 57 61 83 169 176 42 74 37 133 31 11 190 202 228 161 71 208 135 146 195 33 151 203 229 140 197 199 227 225 235 114 225 243 63 255 196 195 247 143 63 234 235 235 235 1 10 11 11 11 11 11 1 218 219 219 219 219 219 119 223 97 184 17 129 247 178 173 86 171 213 106 229 81 96 127 127 127 127 127 191 239 245 6 93 13 253 251 239 99 199 142 29 227 99 42 49 87 86 186 92 46 23 64 81 209 232 232 232 40 239 116 125 123 193 63 94 77 167 174 174 174 174 174 142 177 209 81 92 231 212 212 212 212 212 20 47 62 250 67 208 241 201 161 67 79 158 60 121 34 8 40 58 46 192 244 116 100 157 14 107 70 191 255 142 59 96 35 118 171 192 201 98 253 255 63 179 217 108 54 155 249 89 71 85 94 74 64 253 33 100 13 153 87 175 106 107 107 107 1 36 255 125 35 133 158 197 197 200 87 175 62 120 240 224 1 192 197 139 231 206 157 59 231 123 97 205 205 205 205 205 205 187 85 49 155 97 52 26 141 70 35 143 250 168 108 78 229 117 127 8 153 2 142 28 121 252 248 241 99 65 248 252 121 239 222 189 123 125 207 235 235 187 117 235 214 173 205 207 245 122 189 94 175 231 77 248 157 197 246 13 96 124 124 124 124 124 156 91 62 149 219 253 33 228 183 34 94 188 104 104 104 104 216 254 123 30 143 199 227 241 0 196 196 196 196 80 9 251 123 224 209 163 43 87 174 92 217 250 25 116 228 8 246 57 188 81 90 90 90 90 90 202 19 79 90 143 63 132 92 1 191 252 210 215 215 215 39 8 119 239 234 116 58 221 214 223 171 175 223 104 65 225 198 235 215 122 189 94 207 88 109 173 193 96 48 248 159 95 91 123 240 224 193 131 0 11 11 27 123 217 90 173 86 171 213 114 223 79 13 40 138 134 176 175 225 91 177 97 187 152 53 51 131 183 27 182 138 95 127 157 152 152 152 0 104 105 185 115 231 206 29 128 191 254 58 121 242 228 201 208 157 5 70 227 153 51 103 206 48 230 112 236 217 179 103 15 99 37 37 247 238 221 187 231 255 189 211 167 75 74 74 74 0 44 22 44 173 172 175 175 175 175 175 3 20 23 23 23 23 23 115 87 147 156 156 156 156 156 204 203 240 91 237 101 239 178 187 161 190 223 52 153 14 28 56 112 0 96 122 26 23 62 55 87 80 80 80 0 112 226 196 181 107 215 174 9 194 211 167 151 47 95 190 204 24 53 138 50 50 198 198 198 198 0 178 178 222 189 123 247 206 247 239 140 141 33 15 14 34 191 121 147 154 154 154 10 96 181 238 219 183 111 31 128 217 140 209 141 211 233 116 58 157 220 197 164 164 164 164 164 164 240 142 30 141 41 26 162 34 36 125 222 218 218 218 218 218 186 57 31 8 147 2 252 11 254 252 121 108 220 220 188 105 179 81 47 1 0 192 237 70 166 242 54 193 123 188 93 56 157 200 212 185 163 203 3 164 28 139 5 21 59 63 159 151 151 151 199 51 120 202 95 200 242 233 214 134 90 173 86 171 213 0 5 5 104 8 212 104 194 222 53 99 241 241 88 150 111 105 105 105 105 105 241 157 136 125 119 5 84 85 85 85 85 85 1 172 172 96 63 97 120 120 120 120 120 24 224 236 89 180 188 195 135 113 193 106 53 250 210 236 108 124 79 169 68 166 139 186 177 177 200 235 235 200 148 129 83 147 200 106 69 54 153 144 39 38 144 205 102 180 204 175 95 177 217 111 183 163 32 221 238 141 190 157 92 9 9 158 174 201 40 149 104 56 121 121 168 168 96 27 77 223 77 1 53 53 53 53 53 53 60 69 39 223 73 241 51 221 134 166 123 67 106 53 250 80 165 18 21 146 144 128 28 19 131 174 64 34 193 121 36 160 213 85 20 144 219 141 205 127 151 11 227 113 167 19 125 51 250 126 128 165 37 100 250 93 239 219 26 222 97 36 89 50 29 178 222 151 7 130 69 216 206 128 198 198 198 198 198 70 94 27 33 11 162 219 16 116 237 132 158 219 108 232 138 72 160 4 242 169 228 131 105 231 16 211 124 239 247 8 36 96 98 50 0 239 142 29 9 156 124 249 183 175 193 132 14 97 107 149 80 84 64 32 11 162 123 64 219 45 202 161 229 49 70 190 217 229 194 90 19 237 24 234 59 144 34 72 224 164 96 186 22 67 150 78 130 239 236 236 236 236 236 220 237 197 65 17 34 68 136 16 17 137 248 23 96 111 227 207 148 31 36 213 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!text 	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 211 10 23 10 27 53 45 18 57 201 0 0 0 29 116 69 88 116 67 111 109 109 101 110 116 0 67 114 101 97 116 101 100 32 119 105 116 104 32 84 104 101 32 71 73 77 80 239 100 37 110 0 0 7 2 73 68 65 84 120 218 213 153 109 108 83 231 21 199 127 247 250 58 14 37 47 34 162 137 26 8 8 200 232 218 32 85 244 3 74 149 130 131 189 9 146 2 91 165 189 181 27 211 84 74 181 181 171 196 246 161 149 234 177 124 25 234 62 172 133 161 118 221 75 187 85 69 41 41 74 211 109 140 81 66 67 92 84 4 10 66 17 162 82 149 208 208 166 149 105 154 242 22 47 241 181 125 95 158 125 240 181 99 59 126 185 118 46 176 61 210 163 35 251 185 47 231 252 159 255 57 231 57 247 192 255 249 144 138 172 203 214 53 210 77 214 67 100 77 71 198 47 114 60 216 241 185 114 229 202 43 77 77 77 239 0 143 2 75 128 133 22 112 243 26 50 32 70 71 71 197 205 30 145 72 68 12 15 15 139 93 187 118 37 141 90 6 84 217 53 34 31 53 92 128 46 68 249 187 105 247 94 195 48 208 52 13 85 85 185 112 225 2 237 237 237 0 119 3 95 0 51 128 89 12 233 114 124 195 177 161 235 58 227 227 227 212 213 213 177 118 237 90 142 30 61 10 48 2 220 5 220 81 108 39 228 255 133 72 162 105 26 0 53 53 53 172 91 183 142 190 190 62 60 30 207 8 208 88 204 136 124 72 43 128 150 78 131 129 129 129 146 148 242 249 124 182 40 22 139 197 56 121 242 36 155 54 109 194 52 77 100 89 102 108 108 140 51 103 78 243 228 147 79 17 14 135 239 6 46 3 145 98 116 202 54 160 108 199 52 77 115 206 52 12 35 231 156 153 153 22 71 142 28 17 66 8 17 139 197 132 174 235 66 8 33 206 158 61 43 186 187 187 147 142 189 218 138 78 210 77 165 144 16 34 195 121 147 191 51 29 90 100 252 47 4 168 170 202 213 171 87 25 26 26 98 120 120 152 99 199 142 161 170 42 205 205 171 232 233 233 1 120 6 88 12 84 228 66 218 214 40 68 161 92 17 103 174 210 153 235 126 191 63 149 14 132 16 236 220 185 147 72 36 130 16 102 10 232 134 134 122 182 108 217 10 176 3 248 11 16 6 180 116 42 217 246 129 82 67 165 105 154 121 147 110 242 54 33 4 209 104 20 73 146 56 119 238 28 147 147 147 68 34 51 76 78 126 197 141 27 55 8 135 195 140 140 140 112 252 248 113 128 135 128 243 192 151 128 94 242 14 148 18 227 139 161 159 88 79 252 121 234 212 41 58 58 58 50 214 15 29 122 139 229 203 55 48 53 53 69 48 88 147 52 192 147 75 95 71 40 148 174 84 66 217 108 165 179 255 159 93 239 236 236 228 189 127 244 113 254 189 126 154 174 125 65 141 167 146 205 223 251 62 211 211 211 128 64 211 244 130 108 177 109 64 130 179 249 209 46 85 130 224 196 137 65 218 218 218 184 62 254 9 202 7 239 242 177 41 209 177 170 41 195 217 237 156 121 230 125 92 152 69 223 190 20 66 208 217 217 201 190 192 179 252 251 119 123 240 40 110 58 86 53 177 120 243 183 211 34 152 189 120 95 50 133 242 163 74 94 180 179 41 213 219 251 54 109 109 109 76 124 50 198 198 134 90 46 199 117 170 214 220 207 235 35 159 149 116 150 42 153 66 133 169 145 143 235 115 101 103 231 67 124 254 241 40 163 67 167 185 254 200 207 240 93 251 146 5 171 191 206 238 31 237 164 247 79 47 219 54 66 41 143 46 133 80 46 46 247 238 221 71 115 115 51 166 219 67 237 234 22 180 186 6 234 151 47 163 223 218 229 111 254 224 135 57 18 224 60 12 16 66 48 48 48 80 132 50 246 35 80 32 16 96 232 216 235 168 103 118 240 233 231 17 54 248 188 92 17 219 121 236 231 79 243 219 103 126 73 48 24 196 235 245 58 67 161 36 18 62 159 175 44 180 179 229 190 125 191 199 239 247 51 29 158 160 38 237 61 7 14 28 0 224 167 207 237 46 232 95 101 25 96 95 206 85 56 251 154 64 32 192 233 127 237 103 209 204 63 249 208 66 223 93 123 15 207 63 255 99 246 60 251 68 73 202 219 164 80 66 153 217 40 148 63 41 21 91 239 235 235 195 239 247 179 184 202 196 152 153 189 227 149 131 31 1 208 242 64 7 193 96 16 16 172 95 191 1 16 5 142 36 182 119 128 57 20 42 236 200 249 175 217 186 117 43 195 239 247 96 76 188 154 66 255 74 229 118 158 251 213 189 244 254 249 101 188 94 111 234 122 211 52 83 211 1 10 149 207 249 164 28 28 12 226 247 251 185 62 249 41 11 114 112 223 255 221 71 82 239 50 77 129 105 26 232 186 225 148 1 185 40 148 139 50 137 5 171 48 207 64 127 219 182 109 121 185 255 198 107 47 100 212 8 134 97 96 24 6 186 174 99 24 134 51 62 224 243 109 44 27 253 96 48 88 144 251 91 30 254 9 66 36 80 55 12 19 93 215 208 52 221 146 218 252 125 160 52 165 69 14 244 191 197 135 31 252 13 35 212 157 66 191 122 69 130 251 111 247 188 146 66 221 52 77 98 177 24 241 120 28 77 139 163 235 6 170 170 222 26 31 200 231 184 99 99 151 240 251 253 212 214 52 50 19 154 125 238 139 251 95 3 192 251 141 239 164 232 18 141 70 137 199 99 68 163 49 52 45 14 72 40 138 226 12 133 202 221 133 195 135 15 211 210 210 194 64 239 95 185 171 225 107 84 47 128 234 21 219 9 116 221 75 239 193 63 160 235 58 154 22 71 85 163 196 227 113 84 85 69 8 129 44 203 200 178 132 44 203 78 100 98 24 28 60 145 133 118 250 119 217 92 232 39 86 187 186 186 24 232 217 203 165 139 49 0 54 60 250 116 10 125 141 69 244 247 247 19 143 199 137 70 163 214 103 21 23 146 4 173 173 173 184 92 46 92 46 151 51 62 208 222 190 177 44 31 0 136 68 84 154 150 46 165 110 81 53 99 151 198 9 116 189 192 137 119 15 81 191 244 30 84 53 66 60 174 161 40 74 26 234 46 20 69 113 198 128 98 201 201 142 252 234 63 58 245 75 86 80 219 188 140 213 107 188 244 255 253 85 106 239 92 201 212 212 20 146 36 161 40 110 20 101 86 105 183 91 65 8 129 219 237 198 227 241 56 69 161 65 219 71 137 108 231 62 63 26 226 190 170 70 182 172 241 242 199 23 119 243 209 248 52 198 165 247 45 101 43 80 20 151 133 182 140 44 187 144 101 137 7 31 92 143 44 75 78 80 40 153 156 188 101 214 190 112 229 218 117 30 219 241 56 7 223 60 192 146 165 203 144 36 137 202 202 74 60 30 15 110 183 146 218 1 73 146 113 185 18 78 43 73 137 26 222 1 39 46 45 108 166 135 94 93 79 100 209 238 131 135 120 233 165 253 212 55 52 82 81 81 65 117 117 181 69 153 10 20 69 70 146 18 220 7 9 73 74 188 51 41 29 58 141 38 178 105 118 132 41 20 129 132 16 86 44 135 61 123 126 67 107 235 3 120 60 21 44 92 88 149 66 91 146 64 150 93 41 96 102 149 23 206 213 196 201 7 37 43 164 82 234 2 211 52 184 124 57 132 16 38 134 97 166 56 158 173 112 182 191 101 3 115 11 11 154 76 154 73 146 140 162 72 8 225 66 81 210 105 40 89 40 219 15 197 243 174 137 157 168 206 74 247 35 7 107 226 114 191 64 148 47 29 246 1 167 107 99 123 210 94 59 53 239 184 120 241 98 201 159 12 243 161 154 116 80 251 50 161 67 40 20 42 127 7 38 38 38 44 35 110 207 8 133 66 132 195 225 204 152 109 115 184 128 95 115 11 58 245 54 103 15 176 217 234 90 42 118 186 148 50 80 67 162 107 222 8 44 184 149 189 227 57 153 20 84 171 83 249 153 213 102 42 218 98 2 112 91 157 193 59 44 171 111 167 1 186 213 102 157 177 122 100 216 49 32 185 19 210 109 84 62 243 136 155 163 79 252 95 25 186 111 33 126 22 55 5 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!drgeo	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 4 103 65 77 65 0 0 177 143 11 252 97 5 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 15 190 73 68 65 84 120 156 197 154 121 112 84 215 149 135 191 183 244 91 122 111 181 164 110 9 9 33 9 1 66 8 4 2 140 88 108 179 36 142 9 137 99 187 176 157 196 241 56 51 21 87 202 51 169 76 77 198 197 76 37 169 33 227 170 120 166 226 144 154 137 29 39 241 16 39 94 98 108 12 56 142 67 8 198 118 48 216 236 59 2 1 18 32 9 16 218 90 173 222 212 203 123 239 206 31 54 158 33 56 11 72 73 78 85 255 115 251 245 185 231 123 231 174 231 215 210 219 111 191 205 95 202 36 73 66 8 49 166 62 229 49 245 118 197 169 44 35 73 210 85 109 3 3 3 47 175 89 179 70 60 251 236 179 226 119 191 27 85 95 99 230 233 3 51 12 131 117 235 214 137 129 129 129 255 184 210 22 139 197 30 90 189 122 245 202 154 154 26 118 236 216 65 58 157 30 179 254 198 20 96 104 104 104 217 195 15 63 44 18 137 4 61 61 61 171 174 180 75 146 116 246 145 71 30 225 142 59 238 144 238 187 239 190 107 178 51 26 147 198 114 14 164 82 105 246 236 217 45 150 46 93 58 118 17 254 17 27 83 128 63 102 87 230 134 109 219 99 230 83 29 43 71 142 99 115 248 240 33 49 156 28 6 91 194 116 123 152 51 103 182 164 40 10 153 76 134 231 158 127 94 188 245 214 54 220 30 131 150 121 45 124 229 31 190 42 229 114 249 81 247 59 102 0 91 223 252 149 56 223 121 138 162 168 7 9 232 61 53 140 227 228 69 115 243 28 233 133 23 158 23 200 25 30 249 198 23 41 20 70 120 111 199 17 182 108 217 44 22 47 94 54 234 161 54 38 0 137 196 48 71 142 237 99 197 93 243 240 251 189 12 14 119 17 44 86 217 246 214 111 104 63 123 86 8 53 203 223 125 233 30 188 94 131 193 161 62 220 126 137 29 219 14 51 127 254 34 116 93 255 235 2 216 142 205 211 107 127 40 86 126 110 9 21 21 149 4 253 81 122 7 130 148 132 135 112 187 138 9 133 34 52 53 53 16 10 68 240 185 67 248 60 165 100 115 67 84 84 247 144 76 199 133 174 71 70 149 133 81 3 12 13 197 246 103 243 9 38 84 213 16 240 149 18 10 148 81 26 174 32 51 146 164 121 154 138 132 140 170 105 152 186 15 69 150 241 184 253 24 70 128 68 60 69 62 95 24 109 247 163 223 7 18 137 120 179 199 39 97 152 94 28 75 102 237 211 63 229 209 213 107 200 36 5 165 197 213 148 22 87 17 242 69 233 60 123 158 239 124 231 113 122 123 123 240 184 3 116 180 95 36 54 216 255 215 5 144 101 153 211 29 199 168 170 141 160 185 12 158 249 201 207 57 223 217 205 236 57 77 168 170 130 109 229 25 201 166 200 230 82 180 159 109 39 59 146 231 229 117 175 18 240 134 48 52 157 87 54 108 36 147 25 221 174 172 60 248 224 131 55 252 99 65 129 45 219 94 93 221 178 104 42 245 19 231 50 103 206 92 74 35 197 188 244 194 47 216 249 222 46 12 211 69 32 164 33 132 32 224 47 98 40 150 68 215 76 76 211 205 196 73 21 188 185 109 39 118 65 172 174 175 159 250 173 27 141 97 84 25 104 61 121 76 248 195 42 53 85 147 81 93 6 251 247 29 230 107 95 253 38 51 102 204 162 162 188 154 199 30 93 67 54 155 37 147 25 225 187 255 249 125 118 108 223 195 96 127 146 213 223 252 30 207 252 104 3 119 175 252 24 191 250 245 107 116 117 119 222 240 17 245 134 1 6 7 251 247 191 185 99 19 45 45 141 4 253 227 216 250 235 173 124 235 223 254 147 39 159 120 138 229 203 151 179 252 246 219 201 100 114 36 18 73 98 177 1 186 47 92 226 177 199 190 205 67 15 125 137 117 63 127 145 25 211 231 241 214 27 187 185 255 75 159 96 205 154 199 233 234 238 186 33 136 27 2 72 166 226 53 235 54 172 109 110 154 91 73 113 113 5 169 68 150 239 125 247 199 124 237 159 30 161 182 182 150 72 36 66 69 197 56 34 145 82 250 251 7 104 107 59 69 73 113 9 146 36 225 114 185 48 12 131 7 30 120 128 248 80 150 138 242 18 90 22 215 242 244 218 167 200 140 100 254 252 0 154 230 226 173 237 91 59 92 222 20 53 19 234 8 122 163 108 221 186 157 137 181 147 249 228 39 111 39 28 14 19 10 133 48 12 147 124 161 64 105 36 202 241 99 167 184 233 166 22 12 195 32 16 8 16 14 135 41 47 31 199 212 250 6 78 28 59 199 188 69 83 8 150 200 60 241 196 127 95 119 22 174 27 224 229 13 47 138 87 127 241 10 179 230 214 81 30 153 8 142 139 159 173 93 199 163 143 254 59 62 159 31 195 48 144 36 137 92 46 203 224 224 32 37 225 0 71 14 182 82 59 177 26 89 150 49 12 3 77 211 48 12 131 69 139 22 176 127 207 73 76 211 203 226 143 205 160 111 176 147 159 61 251 19 49 50 50 50 246 0 66 8 90 219 246 139 141 27 214 83 26 13 209 48 105 54 94 51 196 249 206 46 202 202 162 84 85 85 161 40 202 135 207 14 12 12 208 123 185 151 108 161 64 34 153 38 28 46 66 150 101 84 85 69 150 101 16 48 99 70 19 3 125 41 36 225 34 90 30 102 249 157 11 56 120 104 47 27 55 109 20 150 101 141 45 192 185 238 54 241 131 39 159 194 31 86 48 53 55 145 112 13 178 164 176 119 247 126 150 44 94 138 36 73 31 94 84 10 133 60 201 100 28 203 42 48 146 78 146 207 229 113 187 61 255 23 60 32 16 148 150 70 168 170 170 226 232 225 211 128 196 64 255 48 94 159 206 177 214 3 236 220 185 243 79 26 78 127 210 81 226 248 201 195 226 103 207 253 152 72 149 65 121 69 148 142 214 4 150 237 128 237 226 208 129 19 124 243 235 247 34 132 192 113 28 132 16 228 243 121 82 169 12 85 85 227 144 85 25 213 165 162 200 239 195 9 33 176 109 27 73 146 49 116 131 146 146 98 50 169 12 46 69 99 233 178 22 22 46 152 205 192 64 140 231 159 217 136 162 200 98 193 130 133 210 21 232 235 6 176 109 155 182 211 173 226 165 151 158 163 110 106 49 51 231 214 81 20 8 83 94 122 129 108 62 69 62 165 99 21 4 211 166 53 126 152 129 124 62 143 16 176 119 239 30 102 54 55 224 80 0 28 250 250 251 137 68 202 177 44 11 85 85 1 129 36 73 168 138 11 89 5 144 240 121 252 20 5 13 12 175 139 79 221 221 194 218 39 255 135 116 38 35 150 44 94 34 105 154 246 145 49 254 193 33 116 172 245 144 120 238 249 31 17 173 210 113 123 188 76 159 58 143 186 154 102 22 222 114 19 182 101 113 230 76 59 19 39 77 198 52 77 36 73 66 81 20 10 133 2 153 145 12 91 182 108 229 166 249 179 0 135 233 51 235 89 255 202 6 146 137 228 7 128 2 203 178 24 201 102 201 91 5 210 153 4 35 185 36 8 240 152 1 2 222 16 182 200 17 42 50 121 251 157 45 108 125 99 235 239 29 78 191 23 96 199 187 111 138 23 95 121 154 69 159 168 100 114 253 120 134 250 51 56 182 66 192 87 66 105 184 26 143 17 36 49 148 164 172 52 74 42 149 226 232 209 163 220 115 207 61 180 181 181 241 206 246 237 88 86 142 169 51 170 25 78 12 240 241 21 115 217 254 219 55 233 237 189 76 79 79 15 171 86 173 98 197 138 21 28 60 120 128 216 96 12 73 182 201 21 178 8 69 66 150 20 52 151 155 142 211 125 4 194 6 183 221 209 200 142 247 182 208 221 221 253 145 16 215 0 20 10 121 54 189 182 78 28 108 219 204 188 197 149 212 55 52 82 63 165 1 85 85 57 116 240 48 8 129 199 244 35 112 200 228 147 216 142 77 33 95 160 189 189 157 214 214 86 250 250 250 232 238 190 64 221 212 241 56 100 192 17 24 110 193 248 154 16 175 108 122 133 254 254 126 186 187 187 57 115 230 12 221 221 231 105 59 121 130 170 218 32 154 170 99 104 110 4 14 167 218 58 56 123 234 34 159 88 177 128 170 154 50 238 252 252 124 214 111 252 57 61 61 61 215 64 92 5 80 176 10 60 189 246 9 209 126 105 39 141 179 163 76 158 84 71 69 201 20 38 84 77 165 121 238 52 246 238 58 74 247 133 110 4 18 233 108 156 100 58 6 64 42 157 194 239 247 179 106 213 42 234 167 76 225 229 151 215 209 114 235 36 28 199 198 235 45 194 208 220 124 234 222 57 188 177 237 151 60 246 237 199 184 239 222 123 89 189 122 53 170 11 178 133 20 142 148 195 227 46 198 212 253 168 170 78 95 207 0 247 127 241 110 22 45 88 74 101 100 18 227 43 163 76 152 236 97 195 166 245 215 148 100 174 154 196 235 215 191 40 146 118 59 51 230 149 227 117 7 9 7 203 81 93 42 249 124 134 250 134 137 8 73 70 8 9 93 51 0 135 241 53 126 158 252 206 235 220 124 203 34 92 170 78 67 67 61 63 248 225 147 84 214 249 137 142 243 226 243 132 9 249 163 200 178 139 84 54 206 3 95 105 97 199 214 147 124 229 31 191 76 168 168 152 108 46 69 253 172 82 60 70 0 83 247 160 200 50 154 230 225 158 123 239 71 56 14 201 116 236 253 139 144 203 197 244 230 36 103 78 238 230 192 129 253 98 214 172 102 233 26 128 100 50 201 59 239 190 193 226 79 87 162 202 26 225 96 20 77 115 19 139 95 194 113 44 82 153 4 213 213 69 84 84 148 227 53 131 120 205 34 74 162 33 166 207 169 228 27 95 255 87 162 101 101 216 118 158 120 162 159 7 255 126 41 94 51 68 192 27 65 215 61 120 29 27 191 89 132 215 237 97 254 178 90 102 206 175 70 20 100 10 86 129 112 177 151 128 47 140 101 23 176 108 11 231 131 143 64 96 59 5 100 73 33 232 141 16 10 148 51 189 185 138 221 123 223 99 214 172 230 107 51 240 250 230 95 10 20 11 211 212 48 13 15 33 127 57 125 125 125 28 62 216 78 124 48 73 73 196 195 148 25 229 152 151 79 98 232 110 12 205 67 145 63 202 231 31 184 157 115 183 116 209 121 238 18 142 99 83 82 54 137 178 200 56 74 139 39 96 232 110 36 73 193 208 60 4 252 17 198 69 39 227 73 244 225 56 22 8 9 7 7 151 162 97 26 33 92 170 142 109 219 228 11 89 28 225 32 9 129 101 91 184 20 9 151 203 36 28 40 103 114 125 140 55 94 223 128 166 171 228 115 214 213 0 166 105 98 24 42 170 75 37 228 47 101 120 168 192 150 215 222 197 146 147 216 142 197 233 119 50 156 57 211 197 237 159 206 35 112 40 43 174 195 52 3 184 221 1 60 102 136 9 85 227 209 92 110 76 195 139 91 15 18 240 149 224 82 117 44 187 128 162 168 132 2 81 52 85 39 28 24 135 35 44 16 144 207 103 201 21 70 80 85 29 67 243 96 57 22 78 54 129 229 228 177 109 11 77 51 49 52 3 85 85 241 184 67 20 23 149 82 93 27 229 192 129 253 162 113 90 147 116 21 64 98 56 137 207 111 34 41 10 126 119 128 211 39 46 82 85 87 196 197 254 126 210 217 56 193 74 139 243 29 113 158 95 59 196 93 159 205 195 100 7 159 183 20 77 53 241 22 133 40 149 107 112 169 26 178 226 66 145 20 84 151 134 101 229 113 28 231 195 55 173 233 110 28 97 35 75 42 142 16 8 134 176 133 131 97 122 81 20 141 124 46 69 38 23 7 36 242 35 130 88 127 22 143 225 163 178 122 60 1 191 137 169 123 40 41 45 230 216 177 86 26 167 53 93 157 129 202 241 21 28 57 97 145 31 177 73 141 12 51 117 70 45 133 124 41 53 137 74 186 46 158 97 40 217 139 219 127 153 115 199 6 217 188 105 15 238 47 24 84 68 45 130 254 40 94 79 24 175 59 136 34 43 216 142 131 35 108 28 219 193 178 10 128 132 36 129 229 88 104 170 129 208 222 63 110 56 194 193 208 60 168 138 142 162 184 72 166 7 137 13 95 192 118 108 14 239 237 228 213 151 222 193 165 23 48 12 29 69 241 243 248 154 213 104 186 135 112 36 192 64 247 71 172 66 139 111 89 34 253 242 245 95 136 190 139 105 66 69 189 8 100 124 158 16 19 42 166 48 46 90 67 54 55 76 239 80 55 126 207 78 14 238 188 196 166 23 119 178 98 229 8 197 69 113 16 224 53 3 8 225 0 14 194 118 200 217 105 114 185 17 76 211 7 226 253 253 69 145 21 100 69 35 22 235 37 224 15 160 107 30 84 59 207 229 254 14 122 135 58 25 138 15 243 211 239 111 99 40 62 72 203 109 81 252 65 31 193 96 136 34 99 26 219 183 111 231 230 37 179 25 232 141 49 173 113 225 135 0 87 93 234 39 77 154 180 250 221 119 246 97 57 185 247 87 0 213 6 217 70 83 117 36 20 76 221 131 207 231 69 210 83 156 56 210 77 50 110 17 40 145 65 42 224 119 135 209 117 47 146 36 113 255 231 254 150 201 13 227 9 250 253 104 46 15 0 142 83 192 113 108 218 78 180 241 95 223 123 154 230 217 141 24 186 78 127 188 139 243 61 173 92 188 216 195 250 103 118 145 41 12 210 178 180 146 198 198 70 38 215 204 196 173 22 51 60 144 163 166 118 2 46 67 162 163 189 11 73 120 168 174 170 253 214 53 251 64 245 132 90 233 225 47 127 77 236 218 189 147 183 55 191 73 160 232 28 205 45 117 212 84 151 129 44 129 16 120 61 62 154 166 207 196 182 45 222 219 210 129 16 54 115 23 230 112 235 1 170 132 141 238 242 210 213 121 129 179 29 29 212 213 54 124 112 200 147 145 101 21 129 141 131 197 205 183 206 70 55 117 6 19 61 92 236 111 231 210 165 11 108 122 225 8 137 100 156 150 101 101 204 152 57 139 178 226 10 76 181 136 189 191 221 69 105 89 41 101 21 197 244 246 118 147 24 78 65 110 240 195 152 255 64 121 93 208 218 122 92 188 190 249 53 186 187 187 144 100 9 69 181 8 150 232 148 149 149 81 18 213 233 186 124 154 158 115 89 132 80 88 182 98 26 149 101 53 76 155 188 0 43 11 166 199 141 215 27 196 165 104 200 146 140 237 88 228 173 44 249 124 150 108 46 203 112 242 34 221 151 219 56 222 122 138 151 215 238 34 84 38 104 106 25 71 99 125 19 101 145 74 188 238 32 154 230 166 80 200 35 1 233 76 130 195 135 218 249 205 171 135 120 242 251 79 73 178 236 186 122 14 92 107 18 13 13 141 210 212 134 6 226 241 248 67 185 92 238 71 217 124 146 67 39 222 230 252 217 78 142 236 141 209 219 155 98 194 132 9 156 57 221 201 209 125 23 144 231 202 168 170 70 237 248 70 28 241 254 14 238 168 54 32 0 137 92 110 132 212 72 140 193 225 75 244 15 118 209 215 219 71 219 225 94 170 167 20 19 12 107 4 180 137 36 7 85 130 94 153 34 159 31 73 40 8 199 102 56 49 196 169 182 243 28 220 125 142 47 124 254 111 184 18 252 31 201 192 71 91 193 202 243 238 190 215 196 238 67 111 97 137 97 122 58 211 104 138 73 34 230 112 243 109 117 212 77 29 71 36 92 137 223 19 38 224 45 65 81 85 28 225 224 56 130 145 108 156 120 178 143 193 120 15 185 92 158 3 187 206 81 200 73 248 3 38 201 68 22 85 242 113 238 204 101 116 93 67 150 32 149 30 193 178 44 92 46 149 121 243 230 179 248 214 37 68 35 229 210 255 87 58 175 187 184 235 82 53 230 54 45 151 78 159 232 17 182 217 73 180 60 71 174 144 196 74 123 216 179 253 44 151 47 197 185 121 153 77 38 59 204 96 226 50 178 4 249 194 8 185 92 150 244 72 146 244 72 134 108 82 176 99 107 7 77 179 39 162 7 227 12 14 159 70 24 26 29 199 99 124 124 201 29 44 95 190 252 247 86 172 127 87 166 189 161 210 162 203 229 162 166 122 162 185 103 207 161 133 53 181 81 130 193 0 197 37 126 130 69 62 142 236 189 72 58 157 39 24 214 201 230 18 196 147 49 6 99 3 244 246 14 114 169 107 136 211 199 6 216 183 163 155 207 172 188 149 105 77 85 120 124 110 116 197 71 251 113 155 7 62 251 101 22 204 95 112 93 229 246 81 105 100 27 54 190 36 50 162 131 241 117 6 2 5 89 150 200 166 37 54 189 176 15 69 145 168 158 88 130 166 43 196 135 210 12 197 210 164 147 57 202 43 162 220 185 114 41 69 37 6 3 177 139 216 78 158 205 27 143 51 109 226 66 238 252 204 221 18 92 159 92 48 42 128 129 129 190 216 19 63 124 60 180 228 211 53 184 61 26 18 50 110 211 139 199 12 112 186 237 2 71 15 119 0 18 37 197 65 42 171 34 140 175 42 197 244 184 209 84 157 120 178 151 161 225 62 142 29 184 128 87 169 227 174 59 87 74 138 114 253 114 197 168 4 142 226 226 210 162 241 21 53 98 224 114 134 154 41 30 116 197 196 165 234 232 46 55 51 154 38 211 208 56 17 69 86 81 85 23 134 230 121 191 106 129 192 177 115 8 97 227 20 100 186 59 82 252 203 63 223 117 67 193 143 26 0 224 182 219 150 211 51 116 136 210 34 15 170 75 67 150 21 188 70 8 73 82 80 21 23 146 228 66 150 174 20 188 28 28 225 96 21 242 120 204 52 105 93 48 119 246 34 52 237 198 117 178 191 168 78 124 181 93 89 77 70 39 84 142 153 204 122 253 54 54 98 254 159 229 223 42 127 73 251 95 108 18 182 185 23 127 126 182 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!editGroup	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 24 0 0 0 24 8 2 0 0 0 111 21 170 175 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 1 41 73 68 65 84 56 203 173 149 49 110 132 48 16 69 191 131 197 5 182 163 247 17 246 12 72 78 144 184 4 72 73 15 21 169 178 29 37 82 34 238 177 65 162 65 162 206 17 124 3 76 68 109 26 82 16 33 194 238 26 47 97 42 100 164 55 223 255 15 3 25 134 1 123 20 5 240 248 252 70 8 217 140 24 134 225 243 227 149 2 32 132 156 223 147 205 160 167 151 19 128 7 236 84 116 122 10 195 176 105 154 190 239 167 19 203 178 28 199 201 243 252 62 144 148 50 77 83 198 216 116 34 132 136 162 232 110 69 74 169 57 5 0 99 108 18 24 4 129 148 82 163 151 26 54 108 219 86 175 215 212 108 189 222 61 83 187 9 170 170 202 247 125 0 156 115 206 57 0 207 243 202 178 92 55 123 81 89 150 93 53 197 117 221 21 69 182 109 11 33 204 77 185 162 104 252 62 186 174 139 227 88 41 245 223 201 174 235 122 254 98 244 69 83 66 8 74 233 31 208 33 57 126 159 190 12 59 79 13 40 165 243 157 241 139 52 103 21 69 177 98 246 33 57 238 54 71 115 214 34 196 75 83 116 115 52 191 221 101 136 11 83 110 130 22 30 45 66 52 189 154 121 106 58 69 35 101 92 189 219 150 63 0 178 215 239 232 7 171 231 143 35 141 123 83 50 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!moveObject	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 24 0 0 0 24 8 2 0 0 0 111 21 170 175 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 3 197 73 68 65 84 56 203 205 149 219 107 28 85 28 199 127 51 231 204 206 236 165 201 54 187 221 100 215 166 209 104 188 164 165 193 75 189 165 40 74 109 73 74 8 40 136 79 17 250 32 69 240 81 241 193 23 255 13 125 146 22 4 219 162 105 170 62 72 17 74 235 173 52 77 27 67 211 244 146 205 50 187 217 251 236 206 204 206 204 185 205 241 33 208 37 65 155 60 244 193 207 243 151 15 191 239 57 156 223 81 164 148 240 40 80 225 17 129 119 152 59 250 209 124 143 30 211 176 202 5 56 140 249 150 109 123 246 245 243 199 186 9 185 3 222 154 249 253 212 108 213 44 147 142 207 93 143 175 21 131 175 207 20 15 189 119 233 233 163 103 31 100 182 23 189 48 117 254 199 75 245 82 149 84 155 180 209 98 213 38 45 85 137 89 14 190 255 101 253 153 137 179 185 131 95 110 196 30 86 237 205 183 243 134 210 84 227 70 58 169 149 107 76 195 10 194 32 56 48 46 153 16 153 221 26 235 248 156 213 182 57 163 241 241 149 190 30 45 26 21 133 102 121 238 215 194 232 72 191 142 84 69 129 48 148 52 12 5 97 11 203 117 65 44 230 175 63 76 52 54 182 208 211 151 192 88 134 216 114 156 149 31 102 229 226 232 176 107 94 185 124 225 243 227 51 95 165 250 95 42 212 189 252 106 149 249 235 204 41 255 167 104 242 113 48 98 17 61 136 128 130 72 39 17 58 229 6 15 232 13 59 29 156 243 8 71 8 31 152 248 54 112 37 101 21 226 175 113 97 253 187 104 98 64 244 15 160 38 173 135 24 252 48 17 18 136 134 189 245 218 181 192 94 213 163 46 8 14 0 141 252 13 9 156 122 197 192 94 22 172 189 85 116 226 139 139 157 133 199 162 195 123 244 148 164 5 51 38 4 81 153 8 152 161 140 170 116 201 181 255 220 181 63 199 125 27 0 28 235 55 224 140 179 150 160 14 245 204 77 162 153 79 127 238 77 196 219 54 142 233 160 42 42 230 110 195 206 235 200 17 4 179 0 18 202 225 80 211 24 51 65 208 233 169 201 217 185 159 84 188 75 48 123 235 19 121 247 227 115 42 86 49 82 73 199 226 224 217 190 18 215 211 129 115 183 221 250 187 233 220 33 158 213 114 254 176 91 115 217 108 22 84 24 25 26 12 5 15 185 83 171 86 18 241 216 38 17 37 65 200 67 46 66 139 221 243 220 82 187 99 101 244 215 148 48 225 186 183 3 111 193 37 75 46 185 224 216 246 228 228 59 32 229 129 103 135 1 148 207 62 57 153 78 167 79 126 248 193 233 211 167 186 213 28 171 162 27 8 69 52 137 42 101 47 136 42 54 129 190 92 98 202 164 134 229 93 21 180 14 0 29 167 37 165 20 180 99 54 218 194 107 228 134 246 57 173 154 145 76 155 166 217 157 200 106 220 179 42 69 199 169 169 189 194 229 55 235 244 74 213 191 220 38 215 176 150 233 143 140 247 168 99 0 64 41 221 221 19 167 190 119 228 141 215 87 110 47 77 31 63 86 41 21 78 188 63 29 215 194 238 68 110 179 196 57 37 180 19 207 238 105 212 60 187 115 87 1 13 88 60 20 10 227 62 13 171 8 192 247 188 231 159 27 94 47 87 51 201 56 165 20 243 78 181 92 77 166 50 149 82 177 43 162 196 246 138 101 215 50 141 88 58 154 74 33 22 247 218 235 156 23 4 35 146 10 33 85 0 200 23 10 139 11 243 47 31 28 17 82 18 223 87 85 5 35 124 245 250 197 59 247 215 54 68 202 198 134 236 27 216 79 2 11 33 61 18 77 98 205 64 88 231 196 35 190 37 67 209 110 220 7 128 39 247 13 142 31 126 117 111 110 96 111 54 29 248 68 215 35 24 161 191 230 23 191 249 238 12 167 178 43 2 128 100 102 132 6 118 40 184 162 34 140 12 85 139 168 42 182 42 203 15 46 56 149 76 190 114 232 197 236 64 63 132 52 106 232 102 217 186 121 235 86 97 53 207 55 12 114 199 32 13 48 64 2 33 3 64 7 0 128 167 158 24 66 26 108 191 143 182 32 25 84 204 130 237 56 148 50 35 166 71 227 137 220 208 224 70 175 77 213 254 47 191 200 63 151 156 177 64 253 10 252 215 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!coordinates	^self formFromGraphic:  #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 2 14 73 68 65 84 120 218 237 154 193 21 194 32 12 134 169 207 17 220 194 33 28 192 147 87 174 234 115 130 78 209 21 60 115 245 228 0 14 225 22 238 80 79 60 159 244 97 8 80 146 216 124 151 190 182 208 134 252 16 82 168 49 138 162 40 82 25 71 106 11 164 211 229 85 139 57 190 203 124 222 114 65 58 44 181 199 171 16 141 208 16 84 202 138 218 128 165 179 198 21 215 30 207 12 21 164 20 13 65 196 168 0 196 44 116 14 8 219 65 151 54 35 71 128 55 84 106 158 207 175 3 77 4 216 239 251 126 183 227 103 104 26 222 238 240 200 151 232 8 240 66 200 22 196 195 119 233 100 98 0 228 240 211 105 24 94 47 106 179 167 28 14 198 60 159 232 230 119 214 90 107 237 56 58 231 156 115 211 243 230 13 9 123 254 111 65 184 142 140 88 40 250 28 189 163 125 141 240 156 12 92 200 97 96 240 79 187 4 11 129 107 40 23 210 29 31 30 133 56 158 107 150 145 234 232 105 121 33 142 135 26 78 13 236 120 239 232 219 205 152 237 86 124 232 9 27 78 13 236 120 127 238 5 136 221 23 38 4 95 67 99 142 21 62 2 184 206 1 31 32 199 66 35 64 24 124 13 135 70 0 181 125 149 224 215 144 203 229 124 62 30 211 71 128 112 228 53 132 155 0 11 221 15 224 195 194 246 3 248 161 91 146 196 8 21 0 10 133 165 161 178 221 234 47 82 128 212 252 191 118 185 176 124 44 4 66 247 75 159 239 175 215 19 98 230 57 32 102 48 214 81 212 142 79 109 23 158 70 33 40 52 184 246 36 30 62 31 235 152 210 250 100 96 99 101 110 108 205 189 159 122 125 46 187 96 26 127 7 104 250 90 153 90 217 66 173 45 80 40 132 64 107 65 216 228 161 156 153 230 0 108 79 175 53 249 65 73 2 244 30 168 126 234 28 150 46 144 208 239 0 170 80 134 125 47 44 196 58 183 98 89 121 46 180 178 59 62 114 34 2 148 230 231 165 121 251 191 220 135 253 41 52 4 229 115 189 246 253 102 211 234 109 112 71 46 84 112 174 15 171 250 196 126 56 187 223 135 225 241 96 243 123 122 232 208 250 107 31 202 55 127 31 130 160 95 45 153 254 253 45 110 77 68 81 242 120 3 185 219 205 252 208 44 95 233 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!help	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 4 115 66 73 84 8 8 8 8 124 8 100 136 0 0 0 9 112 72 89 115 0 0 13 215 0 0 13 215 1 66 40 155 120 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 119 119 119 46 105 110 107 115 99 97 112 101 46 111 114 103 155 238 60 26 0 0 0 18 116 69 88 116 84 105 116 108 101 0 72 101 108 112 32 66 114 111 119 115 101 114 107 56 239 133 0 0 0 23 116 69 88 116 65 117 116 104 111 114 0 84 117 111 109 97 115 32 75 117 111 115 109 97 110 101 110 26 211 135 76 0 0 0 24 116 69 88 116 67 114 101 97 116 105 111 110 32 84 105 109 101 0 50 48 48 53 45 49 49 45 48 54 53 58 0 201 0 0 0 24 116 69 88 116 83 111 117 114 99 101 0 104 116 116 112 58 47 47 116 105 103 101 114 116 46 99 111 109 22 191 81 211 0 0 0 73 116 69 88 116 67 111 112 121 114 105 103 104 116 0 80 117 98 108 105 99 32 68 111 109 97 105 110 32 104 116 116 112 58 47 47 99 114 101 97 116 105 118 101 99 111 109 109 111 110 115 46 111 114 103 47 108 105 99 101 110 115 101 115 47 112 117 98 108 105 99 100 111 109 97 105 110 47 89 195 254 202 0 0 13 76 73 68 65 84 104 129 213 90 125 116 85 85 118 255 237 115 238 203 75 222 203 247 7 9 65 72 72 248 16 12 132 96 4 65 200 32 148 113 144 48 56 56 51 107 141 22 91 90 101 141 157 50 51 178 90 109 97 254 104 103 181 56 214 214 25 203 178 44 173 51 213 177 29 187 6 5 20 5 21 21 16 197 65 62 4 34 68 49 36 33 49 137 249 126 121 121 121 95 185 231 156 254 113 63 222 189 47 121 68 43 107 102 205 89 107 175 115 242 238 125 231 252 126 123 239 179 207 62 251 133 148 82 248 99 110 236 15 13 224 171 182 63 122 2 218 181 154 168 98 221 35 213 144 248 54 160 22 129 80 10 69 147 20 33 11 74 17 129 130 32 234 129 82 157 0 62 0 195 11 205 251 31 58 119 45 214 165 175 178 7 166 175 221 177 128 24 251 129 82 248 214 244 210 130 180 213 55 207 240 207 155 57 153 21 230 250 81 148 231 71 97 174 15 0 208 31 8 163 55 48 130 190 193 17 52 52 117 203 67 191 187 52 210 220 209 31 39 98 123 149 212 159 104 121 117 219 217 223 43 129 138 181 255 92 6 240 199 139 242 253 127 178 177 190 214 183 242 166 74 170 152 146 15 208 23 159 163 165 99 0 135 79 54 171 103 95 57 21 238 29 8 189 165 4 126 212 114 240 239 90 191 44 150 47 69 96 230 237 59 189 130 133 31 245 165 167 109 218 124 231 98 223 198 250 26 150 225 245 184 222 137 197 117 244 5 194 232 31 50 180 78 32 20 230 250 76 241 35 205 195 93 239 71 99 58 254 251 192 135 242 201 221 239 71 70 162 241 103 185 244 111 253 244 192 150 216 53 39 80 177 126 71 49 116 126 104 205 242 235 103 109 255 203 91 189 249 57 62 251 89 87 239 48 142 157 189 130 247 27 218 112 161 185 23 128 2 17 129 64 46 171 16 8 115 43 138 176 100 222 84 220 82 61 13 147 11 179 236 103 131 193 8 118 252 234 112 236 213 119 26 47 129 139 213 205 47 109 235 190 102 4 42 214 236 152 79 26 123 227 71 119 45 47 188 111 195 34 78 100 160 234 234 27 198 127 189 124 6 135 79 55 131 136 192 136 129 24 129 8 46 2 22 7 99 41 101 247 95 91 56 29 247 172 93 128 146 130 76 251 249 47 247 158 148 63 255 205 59 125 106 84 172 110 62 184 237 252 87 38 80 177 102 199 252 244 12 239 177 71 31 88 155 189 106 209 12 128 0 93 72 60 189 239 20 246 29 109 132 148 10 140 49 48 70 96 68 32 98 96 204 32 0 24 100 236 166 0 101 18 80 74 65 41 5 70 132 117 117 179 177 169 190 6 156 27 81 253 200 169 102 108 125 236 149 96 116 36 186 124 34 18 87 37 48 243 246 135 139 36 167 134 127 127 240 142 98 11 124 32 24 193 63 60 245 54 46 180 244 130 91 192 237 222 34 145 16 92 141 128 84 144 74 65 74 137 57 229 69 216 190 169 14 57 89 233 54 137 31 60 188 183 155 9 57 239 211 3 127 223 155 10 99 202 131 172 182 246 41 143 78 134 219 88 224 155 59 6 112 255 207 94 198 197 214 94 104 156 129 107 12 154 198 161 217 253 248 226 49 37 121 236 148 79 218 250 241 227 159 31 68 107 103 0 0 176 162 182 2 15 252 233 215 138 4 99 111 212 214 62 229 73 133 51 37 129 129 146 129 199 110 95 126 253 156 251 54 44 226 150 230 183 63 113 8 253 193 8 56 231 224 156 67 227 28 26 119 128 231 110 208 90 18 88 23 112 235 93 206 236 121 6 135 163 248 199 167 143 96 40 20 5 0 220 123 71 45 171 175 155 59 103 160 100 224 177 84 56 199 117 161 202 111 62 50 45 35 205 115 241 141 93 247 250 243 115 124 208 133 196 223 252 226 32 46 182 244 154 192 25 56 103 134 11 89 61 35 20 231 103 98 214 180 2 44 152 89 140 226 124 63 178 124 105 240 104 28 163 186 192 208 72 12 189 131 97 188 123 190 29 23 91 251 32 133 130 84 18 82 42 72 169 32 164 132 20 18 66 74 92 95 86 136 127 250 254 74 112 206 16 24 142 98 245 247 159 26 9 133 226 85 227 157 19 227 166 18 74 168 199 54 223 121 115 134 21 42 127 185 239 20 46 54 247 130 107 14 240 156 131 51 139 8 225 167 155 87 160 48 39 3 62 47 135 71 99 176 34 149 213 79 46 240 99 246 212 60 84 207 152 132 222 161 8 158 121 245 60 90 187 2 144 164 32 73 130 8 16 0 64 192 199 87 250 240 235 3 231 240 23 235 106 144 155 149 142 251 191 179 52 227 95 127 125 244 23 0 238 152 208 133 102 212 239 168 42 202 207 188 109 99 125 13 3 140 80 185 239 104 163 173 105 3 52 55 128 107 204 220 11 28 133 57 25 200 240 40 48 82 118 132 177 54 50 99 198 50 74 41 248 188 12 101 147 252 248 171 13 11 49 41 223 15 77 51 190 207 121 194 181 56 103 56 112 252 83 124 62 48 2 2 112 215 154 5 172 56 63 115 213 244 181 59 22 76 72 64 64 219 178 177 254 70 191 117 194 62 179 255 12 164 130 173 109 155 8 55 193 155 123 1 148 208 182 165 121 11 60 37 69 38 41 37 10 178 210 176 233 246 106 219 37 19 150 53 68 41 224 55 175 27 17 52 195 171 225 207 190 89 235 39 210 238 159 144 0 65 109 88 121 83 37 1 198 9 123 248 116 139 17 38 185 225 231 214 2 26 99 224 140 219 127 147 25 47 57 231 8 199 37 130 17 29 109 61 33 116 15 70 48 28 30 117 175 65 4 41 5 38 23 250 145 238 245 24 22 213 18 115 89 243 190 119 174 13 159 15 132 0 0 183 222 84 73 4 181 33 25 175 107 15 84 172 123 164 186 188 52 207 91 113 93 62 0 224 221 115 87 192 200 240 113 67 152 219 18 60 97 9 198 8 81 29 104 184 210 135 195 31 126 134 158 64 24 74 1 68 192 226 185 147 113 199 210 74 104 238 52 8 68 64 105 97 38 218 123 130 32 1 64 25 162 184 225 110 82 41 156 248 168 3 235 235 102 163 124 114 46 166 95 87 224 173 88 247 72 181 51 21 119 89 128 20 54 124 125 201 44 59 201 121 191 161 221 113 80 89 86 48 45 193 156 38 231 56 120 162 21 59 247 156 197 243 111 125 130 158 64 24 140 18 225 181 189 59 132 232 168 176 247 134 21 249 8 128 144 176 35 90 194 2 100 127 118 178 177 211 198 247 141 91 102 251 160 212 157 41 45 160 136 22 86 205 40 225 0 16 31 21 184 216 210 107 107 215 18 62 6 188 33 239 95 232 116 0 72 16 37 2 110 153 55 5 62 47 55 85 156 104 186 4 2 161 24 56 227 0 55 13 160 20 24 83 96 74 129 49 194 165 182 126 196 71 5 210 60 28 85 149 37 156 136 22 59 231 112 239 1 165 166 22 229 249 1 0 125 1 35 2 24 73 154 145 168 49 98 9 107 140 99 9 141 59 15 51 6 143 198 177 106 225 52 44 168 44 0 65 185 44 64 196 208 212 17 176 191 203 44 205 187 44 109 4 128 254 96 4 0 80 152 231 3 64 165 169 9 0 197 9 2 97 51 138 16 136 185 173 144 144 196 98 201 22 209 56 199 218 155 167 99 201 156 98 104 204 13 158 115 142 158 224 40 222 56 213 62 174 213 24 37 132 136 48 96 17 200 245 3 80 147 82 187 16 144 83 96 30 94 253 67 17 51 53 78 76 100 247 99 92 106 172 37 234 230 151 162 170 44 23 156 164 43 251 36 34 12 69 36 94 60 118 25 186 149 201 154 238 146 44 100 246 131 65 35 181 200 207 206 128 146 42 59 37 129 100 31 77 196 110 115 108 77 236 112 43 74 114 43 206 25 230 150 231 163 118 86 33 24 4 164 116 207 55 20 145 120 225 88 11 66 81 29 156 49 40 110 68 27 198 12 33 166 192 152 116 41 204 149 209 18 185 64 186 163 16 104 168 127 40 108 154 203 103 239 1 155 4 220 7 18 141 163 53 206 24 230 149 231 195 67 114 76 212 9 197 129 125 191 107 67 48 50 234 216 228 110 119 97 4 247 26 100 104 30 48 110 109 68 52 156 146 0 128 238 190 65 147 64 142 47 113 178 218 147 186 45 147 188 24 51 73 77 202 77 135 174 235 144 82 58 8 48 156 110 234 71 40 170 143 235 42 46 75 35 161 121 2 217 4 250 2 97 16 208 147 218 2 68 237 125 129 17 131 64 158 15 26 103 182 230 93 68 204 177 245 132 28 68 52 206 0 16 4 121 160 195 3 29 26 116 104 24 85 12 67 97 221 21 93 108 65 2 188 117 7 181 214 229 156 161 32 59 3 0 161 127 40 12 5 213 233 196 236 222 3 74 157 185 112 185 123 205 202 69 149 60 77 227 152 91 81 132 198 214 126 216 120 157 68 144 68 196 92 84 74 224 185 183 155 224 77 211 224 209 52 251 48 19 66 34 20 137 27 86 130 3 172 169 128 132 22 221 46 63 187 172 0 30 143 113 72 92 184 220 45 148 82 39 82 18 80 132 61 175 29 255 228 129 45 223 91 154 5 0 139 230 94 103 19 24 219 148 123 203 43 35 4 48 34 220 181 162 18 30 205 121 169 55 250 215 78 119 162 107 32 236 248 222 56 215 217 164 143 22 206 42 177 199 7 222 109 12 131 232 69 231 115 151 11 53 239 127 232 92 107 199 64 172 181 115 16 0 176 248 134 41 32 115 70 163 144 96 142 149 99 29 43 68 90 12 160 224 225 4 21 15 67 141 134 161 226 97 200 248 8 32 116 48 34 72 229 60 19 156 223 119 84 45 204 49 65 97 225 108 131 64 91 119 0 205 159 13 196 146 75 146 99 178 81 5 218 115 228 84 179 2 128 146 130 76 44 91 80 102 71 17 235 168 7 220 149 5 11 140 52 19 48 235 61 231 38 86 74 65 72 5 41 18 183 48 43 97 75 108 116 107 94 99 181 197 55 76 129 117 176 30 61 221 162 20 97 79 50 222 49 4 24 244 157 207 190 124 106 36 26 215 1 0 119 125 125 158 17 175 147 192 90 99 11 128 148 210 22 56 192 91 159 41 40 8 41 32 132 132 16 137 119 149 52 8 41 7 41 165 20 56 99 216 176 226 122 0 70 181 239 87 123 63 24 81 66 223 53 33 129 166 87 182 125 212 51 24 122 253 127 95 111 144 0 80 156 239 199 154 165 51 220 154 118 46 104 246 182 8 105 150 78 146 5 16 186 132 110 222 123 133 144 16 210 180 138 83 17 102 191 242 198 50 187 56 188 251 205 143 100 207 224 240 91 227 21 129 199 175 74 16 182 254 199 111 223 139 12 141 24 37 202 187 111 155 135 89 211 10 220 26 119 138 169 77 33 36 116 41 49 170 43 48 111 38 40 205 15 102 10 72 67 52 62 10 93 8 8 93 216 36 18 150 75 40 164 178 52 23 27 86 204 6 0 12 143 196 176 243 249 99 17 49 170 126 60 46 212 84 133 173 138 250 127 217 185 254 214 27 238 123 120 203 109 94 2 48 52 18 195 79 158 60 140 224 72 124 108 237 199 170 84 88 183 42 150 168 84 56 83 1 171 152 37 164 65 90 23 18 66 8 232 186 213 11 100 102 120 176 237 158 37 200 242 121 1 165 240 147 93 135 98 123 223 108 248 207 166 253 15 110 25 15 103 202 186 80 254 231 185 91 95 58 114 161 241 217 87 206 8 0 200 201 76 199 223 222 189 20 121 89 233 14 151 73 148 66 12 141 10 8 11 140 16 24 213 13 80 99 196 4 43 132 176 173 32 132 68 182 63 13 127 125 231 141 200 246 121 1 0 207 29 56 39 247 188 217 208 152 219 149 187 53 21 206 9 75 139 74 99 13 187 182 127 187 184 174 166 12 32 66 112 36 134 157 187 79 226 114 103 192 204 253 173 139 189 153 215 59 181 207 18 167 172 21 134 165 2 148 148 182 21 132 105 133 242 146 28 220 183 174 26 89 190 52 40 0 199 207 183 97 243 79 119 119 99 84 92 181 180 248 133 138 187 25 254 244 99 143 63 184 62 123 121 77 57 0 64 8 137 23 14 55 226 237 51 109 0 144 84 39 50 239 9 148 32 224 114 33 147 128 85 204 2 1 117 243 175 195 250 101 51 193 25 153 224 219 177 229 103 123 131 225 80 228 171 21 119 173 86 190 106 251 66 205 159 125 240 193 63 95 89 120 79 125 13 179 146 188 190 64 24 251 222 185 132 83 31 119 37 46 54 142 203 79 242 111 4 174 16 44 37 106 102 21 99 237 146 74 20 230 100 152 207 129 255 121 237 156 124 248 233 67 253 145 254 246 245 29 199 159 56 169 148 210 255 223 4 136 136 3 200 0 144 158 59 125 217 148 188 57 223 120 254 91 171 22 84 62 180 105 69 90 78 102 186 253 94 95 32 140 15 47 117 227 124 115 15 90 186 130 70 174 99 222 172 224 112 33 2 48 125 114 14 170 42 10 81 93 57 201 6 14 24 65 226 209 103 142 198 95 60 116 166 165 175 225 165 141 193 246 147 93 0 162 0 34 0 162 74 41 241 165 8 16 17 51 193 103 0 72 7 144 225 241 228 102 150 44 219 252 80 110 65 201 186 31 222 93 151 254 221 213 85 204 155 102 164 83 86 2 22 215 5 2 161 24 134 66 49 4 66 81 0 132 220 76 175 41 233 240 104 238 184 17 27 21 216 253 230 5 249 248 115 71 98 131 253 157 7 187 142 61 249 111 186 62 60 236 4 111 246 97 53 14 216 171 17 208 156 224 157 100 50 75 231 151 23 204 89 251 195 210 210 210 154 123 191 179 212 91 87 83 78 83 139 115 92 68 38 106 159 245 4 113 236 108 171 122 242 183 239 197 59 58 58 206 247 95 120 117 215 200 231 13 173 73 160 35 142 191 195 227 89 225 106 4 40 9 124 186 163 79 7 144 158 93 190 116 110 78 217 162 117 30 127 209 226 202 169 69 158 250 21 85 105 85 51 74 88 65 142 15 5 57 25 200 53 127 172 8 12 71 49 16 140 160 127 40 140 143 154 122 228 254 35 231 227 151 219 123 244 248 112 207 201 161 43 39 14 12 95 57 241 177 9 210 146 72 210 216 114 163 47 110 129 36 18 78 241 58 122 75 210 178 203 111 158 229 159 92 189 204 235 207 159 201 52 111 30 152 150 13 112 211 201 69 20 74 15 42 61 54 24 13 245 55 133 58 207 30 31 190 242 65 19 128 56 128 152 217 71 205 113 204 49 182 8 196 198 3 63 33 129 20 68 210 44 208 14 241 192 184 91 88 194 97 28 146 73 63 48 65 194 168 162 235 14 137 3 24 53 123 139 144 77 36 21 240 47 69 32 137 12 51 1 91 36 146 129 91 224 83 17 176 72 56 137 56 9 140 42 165 28 181 140 9 240 92 139 127 183 49 45 196 198 1 111 141 45 224 201 36 228 68 26 158 168 253 31 117 83 9 157 111 115 43 45 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!segment: thick color: color dash: dash arrow: symbol	| morph |	morph := self segmentMorph: thick color: color dash: dash.	morph perform: symbol.	^ self iconWithBackground: morph! !!DrGIcons class methodsFor: 'accessing' stamp: ''!undo	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 13 215 0 0 13 215 1 66 40 155 120 0 0 0 7 116 73 77 69 7 215 6 21 14 22 33 113 7 92 185 0 0 7 60 73 68 65 84 104 222 237 89 107 108 20 215 21 254 238 157 153 125 122 237 181 177 215 15 176 193 177 113 32 161 113 29 40 33 102 72 8 105 72 34 138 148 168 65 233 35 49 83 210 170 106 165 72 105 127 164 162 74 164 86 85 155 164 74 11 149 104 162 40 73 181 38 52 13 105 107 42 34 145 166 136 38 38 107 48 21 41 208 96 108 48 182 99 27 227 7 182 215 235 245 122 119 102 238 220 219 31 187 80 199 216 142 141 119 183 137 228 35 141 102 164 189 115 231 251 238 61 247 156 239 156 5 22 108 193 22 236 11 109 36 85 19 7 252 120 16 32 127 1 196 34 85 67 44 85 223 161 169 152 180 161 150 124 223 225 41 254 43 32 156 169 222 129 164 19 56 246 134 244 130 39 175 114 87 229 131 117 78 66 8 79 53 1 57 137 46 163 72 146 252 102 78 241 189 95 43 191 227 5 7 145 92 105 57 3 52 73 224 179 36 89 62 186 248 150 237 91 203 239 124 209 1 222 158 182 67 44 39 1 124 177 36 201 245 101 107 127 186 36 119 233 54 69 152 231 0 30 1 148 47 0 129 128 31 149 84 146 143 220 114 207 158 108 79 222 58 42 140 51 128 48 210 26 70 229 121 128 223 44 219 220 117 183 109 174 117 57 50 74 72 28 188 149 246 60 112 67 4 26 106 201 14 155 203 183 231 182 205 251 156 138 205 9 97 52 1 16 147 70 9 72 74 38 129 24 111 106 252 35 206 91 140 157 22 66 180 0 104 5 208 172 106 24 249 191 36 178 99 111 72 191 116 121 203 159 186 117 147 223 69 201 56 192 58 167 89 154 18 128 228 128 25 87 96 198 250 97 140 247 136 232 104 103 44 60 212 98 6 47 159 80 0 243 109 139 177 159 171 26 58 210 66 32 224 135 44 73 242 94 111 209 250 135 43 170 119 57 32 250 0 214 55 195 27 102 226 110 3 72 252 34 196 1 16 39 132 144 49 124 233 239 172 227 212 171 166 197 70 15 89 204 124 86 213 208 156 50 2 1 63 60 146 44 31 42 172 216 182 166 184 114 167 3 172 13 176 130 51 188 193 1 48 64 152 16 194 188 246 124 237 78 156 32 202 114 128 248 48 210 123 152 183 127 244 138 206 204 208 33 139 153 143 205 85 118 144 89 128 47 146 100 185 190 180 234 169 165 190 242 26 69 152 205 0 31 251 140 183 174 2 54 33 196 36 240 19 126 3 177 3 114 5 32 149 160 231 220 107 177 203 231 235 154 44 198 238 85 53 132 146 66 32 224 199 42 42 73 239 175 216 240 171 156 172 130 77 84 232 167 33 68 44 30 109 196 56 32 24 0 1 1 145 56 196 2 16 28 32 18 8 20 0 28 2 102 28 240 213 11 137 93 185 74 66 24 32 52 11 212 181 5 253 109 117 70 215 199 111 117 89 22 83 85 13 253 243 38 208 80 75 130 55 173 254 110 86 238 178 175 19 22 122 21 156 13 64 240 49 64 68 103 185 60 87 253 222 14 66 221 0 205 72 4 190 56 240 107 46 38 12 16 234 130 156 249 77 12 117 253 147 117 156 222 119 133 91 92 85 53 180 207 119 7 54 75 178 237 192 10 245 71 46 135 203 1 99 228 181 249 39 42 34 131 16 119 156 16 177 1 194 128 16 70 124 94 98 131 205 187 3 35 125 167 121 251 169 55 207 115 75 220 170 106 215 197 231 57 159 129 59 168 68 255 177 124 237 14 143 219 91 68 98 67 187 33 120 36 73 213 136 18 39 2 154 32 162 131 16 59 156 190 95 160 245 196 174 200 232 149 142 31 170 26 246 38 35 10 173 164 148 124 88 90 245 104 118 86 254 42 26 27 250 13 196 140 81 232 6 52 37 81 18 231 130 67 113 223 3 33 175 67 211 251 207 13 115 142 98 85 195 248 188 212 168 170 161 153 115 113 123 199 169 183 122 134 186 143 51 103 238 78 80 185 32 137 4 56 32 244 68 248 5 204 72 61 20 187 19 190 210 117 110 74 241 76 210 50 113 192 143 92 42 225 104 65 217 221 229 133 21 15 41 177 161 221 224 230 212 153 88 113 127 21 138 103 11 32 24 132 136 2 60 10 110 13 193 210 207 194 138 157 133 224 163 51 126 75 178 175 128 146 249 4 206 28 222 25 229 140 21 78 23 90 231 164 133 84 13 131 1 63 214 246 181 213 31 102 122 164 170 248 75 63 182 235 193 151 97 233 45 215 141 181 101 62 140 166 250 231 25 183 162 134 108 115 114 197 230 230 206 204 60 155 183 224 203 14 151 239 219 16 86 15 244 208 159 192 141 169 149 132 165 183 192 70 34 240 228 44 181 66 3 109 85 0 62 72 138 152 83 53 140 5 252 184 123 240 210 201 3 166 17 217 84 122 251 15 28 102 168 22 44 246 239 73 206 233 68 44 220 77 132 64 149 30 129 19 128 119 164 191 101 213 64 199 135 223 16 144 215 248 150 126 69 20 221 252 164 211 210 255 5 99 180 110 202 232 198 141 78 120 22 149 56 66 3 109 171 167 35 112 67 21 153 170 193 224 22 182 134 6 154 247 95 60 177 59 170 100 62 14 217 181 97 186 225 93 170 134 51 170 134 122 85 195 239 239 124 12 27 56 99 121 3 29 199 95 255 248 200 179 81 93 95 36 236 217 79 76 125 50 204 78 184 50 75 100 73 198 93 73 47 41 85 13 188 250 113 104 99 195 29 123 90 26 126 29 149 220 91 161 100 60 48 235 93 172 174 193 147 166 30 185 171 181 241 149 136 101 229 66 201 184 239 122 55 50 59 225 200 92 6 33 176 58 101 53 113 117 13 158 142 134 123 159 105 174 127 62 70 108 42 108 153 219 230 178 8 39 45 198 190 117 161 241 229 168 146 241 80 92 27 77 172 40 88 63 20 123 30 4 71 126 74 139 250 245 53 248 173 17 29 254 222 185 250 231 162 156 84 192 238 253 206 92 72 188 195 98 131 23 245 72 39 36 91 233 167 67 164 148 11 51 214 11 74 209 157 242 190 208 250 237 216 103 234 145 71 154 143 190 56 110 154 217 115 203 2 28 135 35 193 11 156 42 203 62 13 78 46 64 44 220 9 16 156 74 75 99 75 213 112 136 153 250 125 45 129 223 133 195 87 26 196 28 68 189 141 16 65 38 71 34 42 251 48 62 218 195 44 134 99 105 235 204 169 26 142 89 150 85 221 218 248 135 160 16 144 102 37 36 40 54 58 60 5 196 154 148 20 137 156 135 72 240 114 20 72 211 14 76 32 113 150 115 177 26 248 108 57 28 23 139 238 155 236 174 92 112 243 210 4 255 95 4 1 47 66 131 29 74 218 9 36 72 124 2 160 122 66 113 60 21 120 59 165 216 191 172 242 126 167 21 61 145 208 67 137 12 235 170 198 96 215 113 19 220 216 171 106 8 166 188 55 58 13 137 254 153 154 4 148 162 54 187 240 102 159 59 43 151 232 35 7 255 183 170 182 50 112 228 163 183 237 61 198 57 126 150 150 230 238 92 123 169 84 194 187 217 249 101 149 75 86 110 116 154 225 131 137 242 20 32 82 22 100 231 70 92 60 249 78 68 88 198 211 170 134 222 207 21 129 128 31 249 84 66 99 97 89 85 81 94 73 165 205 28 59 0 206 6 18 224 189 80 50 182 160 231 66 32 22 29 235 127 111 253 118 188 148 182 246 250 172 75 23 9 251 23 47 95 183 36 167 104 137 108 140 254 249 90 117 71 229 124 200 174 77 232 110 57 30 29 233 107 63 195 45 212 164 165 59 61 199 213 127 192 233 41 90 147 93 84 34 27 225 191 37 20 40 133 228 168 4 145 203 241 201 127 62 24 15 7 123 143 112 11 143 168 26 140 207 29 1 0 65 42 201 22 248 24 8 117 131 72 197 144 236 43 17 30 30 18 221 205 7 99 156 233 47 113 142 159 168 26 102 253 207 78 186 9 52 71 66 151 73 112 96 49 207 240 170 52 26 30 196 112 235 71 227 225 225 222 62 110 225 81 85 195 201 148 55 119 147 224 70 37 84 66 29 128 66 66 208 96 49 188 11 96 159 170 77 159 47 22 108 193 22 108 122 251 47 1 167 63 47 137 31 193 98 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!intersection	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 11 48 73 68 65 84 120 218 237 91 91 76 84 231 22 94 123 102 24 174 51 80 112 0 47 132 80 165 197 20 4 163 216 24 19 53 68 171 181 1 155 244 73 49 177 16 105 26 193 32 134 6 212 86 130 137 138 66 50 76 100 30 154 84 211 135 19 209 135 182 52 37 16 155 166 218 23 99 172 161 42 180 160 92 172 145 84 164 168 204 48 195 48 215 125 30 214 249 206 150 61 103 156 97 152 1 60 229 123 217 217 123 246 236 203 250 254 127 253 107 125 107 109 162 69 252 147 32 138 243 253 4 11 13 138 249 126 128 127 58 22 9 152 103 44 18 48 207 152 49 1 54 91 101 101 101 101 160 190 28 231 201 207 247 117 124 17 62 241 211 79 25 25 25 25 162 216 223 159 153 153 153 41 138 179 35 98 209 240 128 16 232 137 31 127 172 209 104 52 162 184 111 223 146 37 75 150 16 165 167 171 84 42 21 209 138 21 187 118 237 218 69 20 29 109 48 24 12 130 143 235 249 50 184 224 243 254 63 252 112 246 236 217 179 162 168 213 62 125 250 244 41 81 92 220 179 103 207 158 17 69 69 77 76 76 76 16 69 68 76 77 77 77 17 41 20 110 183 219 77 228 241 40 149 74 37 145 211 25 21 21 21 69 100 179 105 52 26 13 145 197 146 152 152 152 72 100 54 167 166 166 166 18 21 21 213 212 212 212 8 1 191 247 130 33 32 180 68 120 255 254 203 47 71 142 28 57 34 138 201 201 131 131 131 131 146 129 67 13 135 35 50 50 50 146 104 100 36 35 35 35 131 168 160 224 85 207 27 126 4 124 227 61 123 246 236 217 179 71 20 91 91 91 91 91 91 5 97 118 68 0 210 204 24 24 216 177 99 199 14 239 51 94 188 224 17 254 244 169 203 229 114 17 141 141 241 214 100 242 120 60 30 34 149 138 207 211 106 21 10 133 130 40 37 133 159 35 53 53 34 34 34 130 40 42 138 143 3 10 31 171 222 208 80 86 86 86 22 209 123 239 205 45 33 126 111 36 55 124 176 68 124 243 141 193 96 48 136 226 71 31 85 86 86 86 122 223 167 167 103 251 246 237 219 137 254 250 203 233 116 58 137 6 7 29 14 135 131 232 201 19 222 55 153 216 165 136 34 111 93 174 232 232 232 104 34 183 91 173 86 171 137 212 106 187 221 110 39 138 142 230 153 19 31 63 57 57 57 73 148 158 206 251 105 105 76 136 78 199 207 167 82 9 194 203 102 6 49 47 94 104 181 90 45 209 253 251 235 214 173 91 71 180 111 95 109 109 109 109 248 8 9 122 6 248 34 226 235 175 217 71 203 241 224 1 19 242 214 91 29 29 29 29 222 191 55 55 111 220 184 113 35 209 240 48 143 88 155 77 167 211 233 136 236 118 54 136 219 205 62 30 80 169 96 72 222 42 149 252 187 32 176 97 69 81 20 69 145 72 161 96 98 52 154 177 177 177 49 162 204 76 147 201 100 34 122 231 29 190 79 124 252 244 235 130 8 183 155 127 191 125 59 47 47 47 143 168 184 248 204 153 51 103 66 79 196 140 47 232 143 8 62 43 240 40 231 243 207 243 243 243 243 137 158 63 95 182 108 217 50 162 169 169 164 164 164 164 151 13 200 134 128 161 35 35 217 135 199 198 198 198 198 198 74 251 216 226 124 143 135 93 148 221 206 4 96 59 53 197 51 34 37 229 241 227 199 143 137 222 125 247 249 243 231 207 137 116 58 38 66 173 158 238 178 108 54 190 206 173 91 185 185 185 185 68 101 101 77 77 77 77 161 35 34 232 11 189 154 136 192 175 243 233 167 197 197 197 197 68 118 59 187 18 32 42 138 163 25 181 154 143 107 52 236 122 180 90 158 17 209 209 236 130 14 29 58 116 232 208 33 255 6 57 127 254 252 249 243 231 69 17 4 88 173 86 171 213 74 36 8 28 101 173 94 253 240 225 195 135 68 89 89 188 230 96 237 240 120 120 32 140 140 48 17 191 253 182 126 253 250 245 68 85 85 13 13 13 13 179 39 98 214 23 144 19 113 231 206 222 189 123 247 138 98 94 222 165 75 151 46 249 255 127 73 73 73 73 73 137 52 194 49 130 221 110 54 68 106 42 135 143 216 86 84 84 84 84 84 132 110 4 234 245 122 189 94 47 138 102 51 207 132 188 188 158 158 158 30 162 183 223 102 130 20 10 118 105 14 7 19 112 231 14 175 37 143 30 109 218 180 105 19 209 241 227 199 143 31 63 30 252 243 132 236 69 174 95 175 174 174 174 22 197 21 43 186 187 187 187 137 86 173 186 122 245 234 213 192 255 95 89 201 139 179 201 196 62 26 68 164 167 167 167 167 167 19 213 213 213 213 213 213 133 63 58 105 108 60 125 250 244 105 81 220 188 249 214 173 91 183 136 146 146 108 54 155 141 200 227 225 223 39 38 120 96 92 191 206 65 135 203 181 118 237 218 181 68 53 53 193 229 23 33 211 130 130 53 60 96 48 24 12 6 131 228 171 225 195 205 102 179 217 108 38 106 108 108 108 108 108 12 127 6 253 217 103 199 142 29 59 38 8 191 255 206 62 95 14 141 134 215 138 244 244 39 79 158 60 33 178 90 71 71 71 71 137 154 155 155 155 155 155 103 254 124 179 38 0 9 84 160 134 47 43 43 43 43 43 243 62 206 18 7 209 197 139 201 201 201 201 210 12 152 156 228 112 210 102 227 145 56 87 40 45 173 175 175 175 23 132 251 247 87 173 90 181 202 59 127 64 190 161 84 14 13 13 13 17 141 143 143 143 143 143 207 252 62 179 38 0 153 171 255 23 42 45 45 45 37 234 235 235 235 235 235 147 142 115 248 74 244 232 17 39 88 195 195 28 166 26 141 124 28 139 111 76 76 76 76 76 76 152 173 254 63 240 193 7 70 163 209 40 8 54 27 162 44 62 142 168 73 167 227 181 3 51 181 169 169 169 169 169 41 240 153 16 52 1 208 106 252 73 6 88 100 123 123 123 123 123 123 137 214 172 89 179 102 205 26 162 252 124 14 63 223 120 227 192 129 3 7 136 254 245 47 142 211 229 68 212 215 179 75 170 174 174 174 174 174 158 63 201 96 120 120 229 202 149 43 95 50 220 127 22 231 196 68 142 146 148 74 118 69 22 139 197 98 177 4 126 221 160 9 128 72 6 252 250 235 182 109 219 182 17 157 56 193 134 45 43 219 191 127 255 126 41 49 202 206 206 206 206 206 38 234 234 234 234 234 234 34 218 178 101 203 150 45 91 136 250 251 251 251 251 251 137 56 129 19 4 95 68 204 76 125 13 61 222 127 95 175 215 235 189 7 0 102 130 74 197 193 3 194 219 64 215 132 160 9 128 58 9 64 171 153 152 136 143 143 143 39 114 185 166 39 80 9 9 9 9 9 9 68 133 133 133 133 133 133 68 3 3 3 3 3 3 68 237 237 237 237 237 237 82 30 177 208 137 120 246 44 37 37 37 69 114 69 90 45 18 56 94 171 144 103 96 27 54 2 32 11 3 16 201 60 158 184 184 184 56 105 228 35 97 210 233 88 90 56 118 140 163 140 182 182 182 182 182 54 239 76 122 161 19 97 54 51 1 64 76 12 191 167 82 201 174 210 233 100 237 42 236 4 200 125 63 212 73 232 241 208 102 176 120 130 8 57 124 73 26 11 149 8 171 149 227 127 201 14 60 211 5 129 159 11 9 36 194 233 150 150 150 150 150 22 223 207 23 52 1 40 132 0 144 133 161 78 202 181 27 127 146 193 235 66 196 135 31 202 19 46 94 132 69 145 7 32 242 23 151 11 30 129 247 67 78 0 42 80 0 244 120 200 194 136 227 161 229 4 138 133 78 196 247 223 159 59 119 238 156 116 125 135 131 9 192 154 7 17 17 51 33 108 4 56 157 60 178 1 36 38 208 227 65 0 92 209 76 177 80 137 208 104 56 238 7 172 86 16 192 239 15 128 8 127 8 154 0 155 141 85 73 0 21 40 20 66 192 188 191 17 240 186 17 161 213 142 140 140 140 72 251 38 19 223 207 233 156 62 211 17 132 132 141 0 20 187 1 200 183 168 64 41 149 92 209 194 98 52 91 44 20 34 18 18 88 3 2 70 71 217 213 56 157 92 159 248 175 97 21 88 156 95 77 68 208 4 152 76 211 195 49 0 165 63 84 160 64 0 244 248 215 149 136 159 127 174 173 173 173 149 254 103 183 243 204 70 9 213 110 231 104 15 6 199 26 224 207 21 5 77 192 238 221 92 43 69 151 129 164 145 176 47 68 233 15 34 90 160 113 241 66 37 162 160 160 161 161 161 65 82 123 145 120 254 253 55 27 220 110 231 25 128 232 15 4 32 47 8 57 1 0 218 59 0 20 187 81 115 77 77 29 30 30 30 150 82 244 80 99 110 136 240 254 125 96 128 93 236 228 228 244 18 170 188 54 29 54 23 4 248 234 171 65 177 27 53 87 148 254 80 129 154 27 34 164 138 157 47 34 184 107 67 110 104 81 252 246 219 87 63 231 159 127 50 1 14 7 175 133 48 52 124 127 68 4 187 98 127 97 120 200 212 197 31 127 228 145 244 230 155 44 55 35 242 65 41 239 143 63 152 144 190 190 13 27 54 108 32 58 113 226 228 201 147 39 195 173 110 250 238 200 243 215 197 225 11 122 61 119 111 60 120 192 25 241 212 20 111 97 112 108 147 147 185 174 225 175 146 23 178 138 24 26 154 208 87 131 53 1 93 6 40 118 231 230 114 229 12 165 191 153 25 114 166 91 223 215 195 140 152 233 123 14 13 241 136 134 225 49 242 33 185 204 180 126 17 242 246 116 52 52 161 175 6 64 152 138 98 55 106 174 23 47 214 213 213 213 249 51 24 12 53 211 173 239 235 193 53 125 247 93 115 115 115 115 224 239 103 179 45 93 186 116 233 203 239 197 218 23 164 7 172 117 216 159 115 2 208 73 134 134 38 244 213 160 189 3 133 12 20 187 55 111 190 121 243 230 77 162 246 246 131 7 15 30 12 151 132 32 17 3 195 127 242 73 90 90 90 26 81 78 78 103 103 103 103 224 87 250 234 171 203 151 47 95 246 238 87 66 233 20 97 55 154 11 252 173 121 97 251 64 3 157 100 104 104 66 95 13 214 4 172 17 216 102 101 113 105 179 187 187 168 168 168 72 20 59 59 171 170 170 170 102 75 136 52 19 16 199 127 241 5 90 21 239 222 189 123 55 248 38 130 11 23 46 92 184 112 65 42 69 202 219 106 16 118 251 171 101 207 89 137 79 175 103 3 232 116 247 238 221 187 71 180 122 53 71 17 232 50 0 124 53 207 162 16 2 61 126 114 146 125 240 238 221 172 78 66 36 131 86 3 201 64 158 185 2 129 26 30 53 107 249 98 205 225 43 81 77 13 207 108 52 140 97 6 32 250 89 178 132 159 179 170 170 170 170 170 202 219 53 206 121 141 245 212 169 83 167 78 157 18 197 168 40 94 140 209 222 1 49 15 37 62 184 42 127 196 4 10 100 174 72 160 10 10 174 93 187 118 205 247 249 185 185 60 115 151 47 95 190 124 249 114 162 142 14 206 27 248 67 21 239 38 228 47 191 228 227 24 249 144 225 125 25 126 222 8 0 206 158 229 162 62 250 106 208 222 129 46 3 20 187 65 8 74 127 168 64 161 16 2 61 30 178 48 212 73 136 100 208 106 32 25 140 141 241 255 206 157 187 113 227 198 13 239 231 66 179 64 78 78 78 78 78 14 81 119 55 15 20 16 226 114 93 185 114 229 10 209 236 218 242 23 0 1 0 138 215 232 171 129 79 69 151 1 138 221 168 185 162 244 135 10 20 10 33 208 227 33 11 187 92 60 2 29 14 14 7 161 213 64 50 144 55 255 34 126 71 229 14 134 223 186 117 235 214 173 91 137 110 222 228 96 97 231 206 157 59 119 238 36 186 125 251 232 209 163 71 103 79 132 202 191 137 194 139 195 135 15 31 62 124 88 122 80 244 213 88 44 236 83 17 214 89 44 60 181 161 173 200 11 30 190 68 47 121 134 170 86 243 76 130 193 17 70 202 227 120 142 94 4 33 49 49 49 49 49 81 20 209 60 16 23 23 23 23 23 39 138 151 47 191 156 71 72 223 71 176 179 146 36 14 127 68 204 251 12 240 7 204 16 121 183 1 22 59 196 219 114 245 17 134 135 54 35 47 145 194 240 216 202 7 130 28 193 126 168 146 153 217 223 223 223 255 26 19 224 11 70 163 209 104 52 138 162 220 240 114 2 228 68 148 151 151 151 151 151 7 47 129 204 236 67 149 133 243 49 224 255 29 96 120 95 251 139 152 35 44 26 254 53 199 191 1 200 20 199 16 138 17 10 59 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!property	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 8 232 73 68 65 84 120 218 237 91 71 72 124 189 23 189 118 84 176 160 130 189 128 136 88 113 41 138 5 68 172 8 54 176 131 11 43 130 32 98 69 65 193 130 226 198 133 109 161 27 11 136 136 88 112 225 194 238 194 133 21 43 138 189 96 239 221 247 95 12 135 252 191 153 111 190 153 167 51 234 175 156 77 200 155 188 188 228 156 228 222 228 38 67 244 23 127 241 39 67 129 95 113 142 251 238 6 255 76 40 240 228 241 255 222 148 174 24 35 222 211 211 211 211 211 83 254 93 226 56 142 147 165 220 178 170 111 126 126 126 126 126 158 232 234 234 234 234 234 74 248 87 254 66 72 120 129 53 249 252 252 252 252 252 156 72 71 71 71 71 71 71 118 4 8 63 151 119 57 89 213 63 54 54 54 54 54 70 148 147 147 147 147 147 67 180 176 176 176 176 176 192 95 8 169 5 120 127 127 127 127 127 39 122 122 122 122 122 122 34 122 126 126 126 126 126 230 47 196 239 2 5 5 5 5 5 5 162 203 203 203 203 203 75 162 192 192 192 192 192 64 254 66 240 22 224 230 230 230 230 230 134 165 210 54 84 210 243 95 173 28 242 138 138 138 138 138 138 31 23 66 81 50 133 31 195 79 33 74 94 229 0 12 76 109 109 109 109 109 109 162 190 190 190 190 190 62 34 71 71 71 71 71 71 148 18 239 125 100 46 192 79 35 10 207 219 219 219 219 219 219 137 66 66 66 66 66 66 136 244 244 244 244 244 244 136 172 172 172 172 172 172 136 22 23 23 23 23 23 63 255 93 8 209 219 219 219 219 219 75 228 224 224 224 224 224 32 94 8 153 9 240 211 136 239 232 232 232 232 232 32 114 113 113 113 113 113 33 202 200 200 200 200 200 96 68 39 36 36 36 36 36 176 247 131 131 131 131 131 131 69 133 144 246 187 200 35 133 16 173 173 173 173 173 173 194 181 49 33 62 45 192 79 33 30 196 121 123 123 123 123 123 51 194 177 106 169 170 170 170 170 170 34 218 218 218 218 218 218 34 106 105 105 105 105 105 33 26 30 30 30 30 30 102 245 5 5 5 5 5 5 49 27 46 45 241 226 132 48 51 51 51 51 51 35 114 115 115 115 115 115 19 237 151 242 239 66 60 76 203 245 245 245 245 245 53 81 113 113 113 113 113 49 19 2 56 59 59 59 59 59 99 66 216 216 216 216 216 216 48 33 48 99 6 6 6 6 6 6 136 156 156 156 156 156 156 62 222 94 73 144 90 0 73 27 153 239 38 94 87 87 87 87 87 151 104 104 104 104 104 104 136 200 216 216 216 216 216 152 232 240 240 240 240 240 240 95 58 174 172 172 172 172 76 180 189 189 189 189 189 205 102 8 0 19 242 217 246 74 226 237 195 51 224 187 136 71 190 176 176 176 176 176 144 117 176 161 161 161 161 161 129 17 119 119 119 119 119 119 71 164 170 170 170 170 170 42 190 253 185 185 185 185 185 185 68 221 221 221 221 221 221 68 209 209 209 209 209 209 68 105 105 105 105 105 105 242 35 158 183 0 194 21 126 23 241 192 196 196 196 196 196 4 81 120 120 120 120 120 56 145 173 173 173 173 173 173 180 189 33 202 202 202 202 202 202 18 37 190 174 174 174 174 174 78 118 253 146 153 0 226 240 213 196 11 195 194 194 194 194 194 130 72 77 77 77 77 77 77 114 123 75 74 74 74 74 74 136 186 186 186 186 186 186 228 71 188 220 77 208 119 17 47 252 252 224 224 224 224 224 64 122 1 12 12 12 12 12 12 88 62 53 53 53 53 53 149 255 119 199 199 199 199 199 199 89 76 8 203 88 56 109 105 77 144 212 203 208 175 114 194 210 190 135 229 29 156 49 108 189 164 84 56 154 11 83 38 237 119 177 174 247 247 247 247 247 247 39 42 43 43 43 43 43 35 242 243 243 243 243 243 99 209 82 225 25 32 142 191 15 239 3 240 129 175 38 30 121 119 119 119 119 119 119 182 94 223 223 223 223 223 223 23 141 85 9 167 120 15 192 8 150 150 248 148 148 148 148 148 20 34 103 103 103 103 103 103 230 67 0 8 49 55 55 55 55 55 39 153 71 185 207 0 89 19 15 32 232 37 76 208 206 206 206 206 206 142 248 244 241 241 241 241 241 145 109 184 96 74 96 138 80 15 226 253 226 136 199 190 1 245 32 15 224 249 191 159 27 124 64 0 190 196 203 187 28 4 208 210 210 210 210 210 98 65 48 68 39 197 165 15 15 15 15 15 15 108 21 100 105 105 105 105 105 201 136 134 16 166 166 166 166 166 166 226 137 127 123 123 123 123 123 99 51 16 27 186 204 204 204 204 204 76 182 33 252 103 84 84 134 2 124 23 241 120 222 214 214 214 214 214 198 58 10 66 140 140 140 140 140 140 136 212 213 213 213 213 213 69 83 140 72 56 203 233 233 233 233 233 105 162 139 139 139 139 139 11 102 82 16 43 194 70 79 120 132 31 29 29 29 29 29 49 223 130 13 29 234 195 192 16 23 130 0 62 189 19 254 46 226 211 211 211 211 211 211 69 71 38 108 189 164 85 17 78 248 144 170 168 168 168 168 168 48 31 1 39 139 122 80 239 241 241 241 241 241 177 104 253 24 8 8 97 224 253 95 118 25 202 151 120 13 13 13 13 13 13 70 132 164 29 176 56 220 223 223 223 223 223 179 20 33 139 215 215 215 215 215 87 241 245 246 244 244 244 244 244 176 124 64 64 64 64 64 128 20 60 254 247 207 76 59 56 47 28 73 34 149 55 241 176 161 30 30 30 30 30 30 44 212 48 59 59 59 59 59 75 100 98 98 98 98 98 194 70 50 14 72 190 10 16 220 199 199 199 199 199 135 72 73 73 73 73 73 137 45 71 225 115 66 67 67 67 67 67 137 38 39 39 39 39 39 89 47 127 108 44 8 196 99 131 3 226 49 226 225 36 113 20 40 236 108 191 10 53 53 53 53 53 53 68 123 123 123 123 123 123 68 77 77 77 77 77 77 114 136 5 125 23 241 0 136 199 9 19 108 50 95 194 97 194 224 140 97 42 176 170 130 208 146 80 95 95 95 95 95 79 212 216 216 216 216 216 200 218 27 31 31 31 31 31 207 70 62 32 214 135 254 247 103 216 43 168 16 183 33 144 126 21 241 56 99 189 189 189 189 189 189 229 127 207 7 209 77 28 77 138 3 86 45 248 158 176 32 253 253 253 253 253 253 108 7 14 211 216 217 217 217 217 217 201 174 237 192 100 195 151 192 4 77 77 77 77 77 77 177 222 75 104 54 186 200 113 2 1 56 78 48 114 56 238 244 244 244 244 244 84 52 21 28 120 176 84 96 155 69 83 193 178 143 227 70 71 71 71 71 71 57 78 208 81 150 206 204 204 204 204 204 112 156 192 215 112 156 192 212 240 79 5 235 122 214 15 193 6 137 227 4 49 36 142 19 132 177 57 78 32 60 199 153 155 155 155 155 155 179 242 194 169 32 248 199 113 213 213 213 213 213 213 172 125 72 5 3 147 125 95 112 30 193 113 174 174 174 174 174 174 194 245 241 152 1 80 242 229 229 229 229 229 133 165 242 26 241 118 118 118 118 118 118 108 36 241 5 54 86 24 249 88 247 15 14 14 14 14 14 138 94 48 147 245 170 14 22 3 231 18 97 97 97 97 97 97 162 51 64 238 203 80 225 231 176 189 177 177 177 177 177 177 44 143 13 144 189 189 189 189 189 61 35 94 92 125 63 149 120 228 229 126 32 195 183 193 32 26 35 30 177 153 230 230 230 230 230 102 230 4 63 59 226 17 74 248 46 226 249 242 38 247 88 144 48 241 48 61 32 62 38 38 38 38 38 230 247 35 94 90 200 109 25 42 137 248 200 200 200 200 200 72 230 91 248 2 59 227 239 54 53 146 202 201 76 0 105 99 65 146 136 135 51 250 40 241 184 112 133 235 38 124 137 255 168 239 250 104 185 47 139 5 73 34 94 248 222 14 95 44 45 45 45 45 45 17 21 20 20 20 20 20 176 245 57 110 67 200 138 120 89 9 244 229 78 24 171 26 16 143 139 81 112 174 8 25 240 197 242 242 242 242 242 50 81 84 84 84 84 84 20 235 32 70 60 130 114 95 69 188 172 76 15 111 1 196 1 91 123 156 44 33 142 158 156 156 156 156 156 204 130 100 124 177 178 178 178 178 178 66 20 23 23 23 23 23 199 66 14 63 157 120 228 165 21 228 195 51 0 196 195 25 98 6 20 21 21 21 21 21 17 9 118 198 252 137 95 93 93 93 93 93 37 74 76 76 76 76 76 252 245 136 231 11 222 51 160 188 188 188 188 188 92 148 248 188 188 188 188 188 60 118 178 196 23 107 107 107 107 107 107 68 73 73 73 73 73 73 44 172 251 187 18 207 91 0 216 240 138 138 138 138 138 10 209 107 223 146 14 159 197 97 125 125 125 125 125 157 205 168 63 133 120 222 2 8 31 46 251 250 250 250 250 250 178 152 7 4 64 57 67 67 67 67 67 67 34 107 107 107 107 107 107 209 250 16 213 44 45 45 45 45 45 101 121 220 80 67 216 25 103 189 210 118 88 94 229 96 130 165 125 15 39 104 50 19 64 216 7 232 235 235 235 235 235 139 158 144 33 76 125 114 114 114 114 114 194 46 80 1 8 78 101 103 103 103 103 103 19 109 108 108 108 108 108 16 213 214 214 214 214 214 18 69 68 68 68 68 68 136 238 140 191 250 223 148 146 158 203 10 82 11 0 211 3 192 102 227 82 44 110 29 32 152 134 145 2 65 64 124 126 126 126 126 126 62 209 230 230 230 230 230 38 27 233 187 187 187 187 187 187 68 149 149 149 149 149 149 146 219 35 45 49 178 46 199 23 176 12 255 140 130 50 72 105 197 68 155 166 169 169 169 169 169 201 46 187 226 126 141 48 64 60 86 71 248 99 196 159 13 102 196 62 233 70 56 14 183 17 188 188 188 188 188 188 216 109 101 152 160 145 145 145 145 145 17 150 23 110 192 159 14 25 17 33 237 228 253 75 252 95 252 48 252 15 157 2 91 74 184 1 204 172 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!perpendicular	^ self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 2 43 73 68 65 84 120 218 237 154 177 106 194 64 24 199 191 136 171 248 2 5 201 32 244 9 220 83 55 103 87 131 155 80 16 103 151 27 178 244 5 218 221 193 39 112 112 210 209 193 232 208 177 80 40 20 92 74 133 34 25 186 8 215 233 40 124 114 36 198 187 220 93 242 253 22 137 201 93 46 191 63 201 229 114 7 64 16 4 65 16 4 65 16 4 65 16 4 65 84 158 223 223 201 100 50 225 220 116 59 42 199 106 229 251 190 207 249 251 123 187 221 110 115 78 65 220 198 108 182 217 44 22 114 127 53 252 199 124 126 60 30 143 0 159 159 231 243 249 12 112 56 44 151 203 165 237 119 132 125 237 18 226 227 248 245 117 191 7 24 12 24 27 143 47 219 89 187 44 152 36 73 226 121 110 6 97 30 44 62 73 190 190 126 126 0 118 187 205 102 187 189 60 254 34 128 48 12 195 48 228 156 130 184 142 52 241 111 111 235 117 28 123 158 180 2 33 94 182 61 28 54 26 141 6 231 118 246 17 230 206 47 196 63 62 190 188 48 198 185 120 212 220 223 119 187 157 206 127 187 24 99 140 177 12 237 116 51 136 226 207 155 87 124 73 130 16 245 167 253 58 40 30 227 102 16 234 41 92 60 198 141 32 212 99 92 60 198 238 32 212 97 157 120 76 89 131 176 94 60 166 44 65 56 39 30 99 54 136 252 229 157 23 143 41 54 8 124 124 246 242 165 19 143 209 27 68 254 253 165 23 143 81 27 68 254 59 164 114 226 49 166 250 136 202 139 199 20 21 4 137 79 65 87 16 36 254 74 84 5 65 226 111 36 111 16 36 94 49 89 131 32 241 154 145 5 145 38 94 60 154 92 17 239 221 94 133 94 132 248 135 135 209 168 223 7 144 205 185 62 63 127 124 124 127 3 180 90 245 122 189 14 112 119 215 235 245 122 0 79 79 205 102 179 9 16 69 81 20 69 158 117 215 91 187 189 10 189 164 137 23 147 221 178 197 3 211 233 233 116 58 153 190 10 57 214 6 144 117 149 65 16 4 65 16 208 42 14 101 100 237 92 133 120 217 182 43 159 193 173 33 239 91 13 22 239 234 124 132 49 84 189 78 150 101 98 168 48 116 189 199 231 13 194 180 143 194 209 61 128 202 26 132 108 127 105 193 34 117 143 92 211 130 168 140 120 76 154 104 213 35 87 18 47 161 232 79 6 36 94 130 173 223 106 116 243 7 21 204 94 20 55 57 135 172 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!macroExecute	^ self formFromGraphic: #(			137			80			78			71			13			10			26			10			0			0			0			13			73			72			68			82			0			0			0			48			0			0			0			48			16			6			0			0			0			7			146			37			196			0			0			0			6			98			75			71			68			255			255			255			255			255			255			9			88			247			220			0			0			0			9			112			72			89			115			0			0			0			72			0			0			0			72			0			70			201			107			62			0			0			20			29			73			68			65			84			120			218			237			91			123			80			84			231			221			126			14			123			99			129			133			133			93			46			203			45			192			202			93			80			64			193			148			5			73			92			208			106			98			99			77			166			161			9			53			73			107			77			147			180			206			52			189			206			180			201			52			51			109			46			181			109			154			56			182			185			181			77			141			210			168			49			106			70			192			152			49			70			16			34			6			188			20			17			4			87			4			228			230			2			187			44			123			191			188			223			31			191			239			157			131			90			199			92			208			164			223			199			111			70			215			179			231			236			57			231			253			93			158			223			243			62			239			43			48			103			115			54			103			115			54			103			55			219			202			202			202			202			202			202			24			139			137			137			137			137			137			97			236			203			126			31			110			194			151			253			2			183			202			162			163			163			163			181			90			198			188			94			159			207			235			5			178			178			114			115			211			211			1			169			52			40			72			161			0			154			154			142			28			57			122			84			184			229			254			248			210			2			112			239			189			53			53			43			86			48			118			225			130			201			116			241			34			48			49			97			54			91			173			64			72			136			74			165			80			0			126			191			207			23			8			0			193			193			74			165			92			14			56			157			14			135			219			13			200			229			50			153			92			14			120			60			46			215			204			243			81			81			26			141			90			13			248			124			94			47			99			128			74			21			26			170			82			1			117			117			251			246			125			240			129			32			132			133			169			84			33			33			140			189			246			218			187			239			254			250			215			128			223			79			85			176			113			227			183			191			253			194			11			64			110			110			78			78			110			46			112			228			200			71			31			53			53			221			186			64			220			180			7			61			244			208			35			143			212			212			48			54			60			60			54			214			223			15			152			76			38			83			95			31			160			80			40			149			50			25			16			27			155			152			168			86			3			69			69			165			165			89			89			64			70			70			94			94			98			34			16			8			8			2			99			128			84			42			8			18			9			224			245			6			2			62			31			224			241			120			189			110			55			32			8			64			80			16			160			80			200			100			50			153			248			60			159			207			239			15			4			128			64			128			177			64			0			168			171			219			182			237			216			49			160			183			183			163			99			120			24			184			112			161			167			103			96			0			120			237			181			253			251			127			241			11			128			49			198			4			129			2			233			245			2			63			251			217			186			117			155			55			139			129			14			9			9			9			9			13			5			38			39			39			38			38			39			111			94			64			102			253			198			121			121			11			22			228			230			50			150			158			158			155			27			31			15			76			78			90			44			22			11			176			106			85			117			117			73			9			160			84			170			213			148			193			228			80			198			128			64			0			240			249			2			1			143			7			8			4			252			126			191			159			28			77			142			165			239			1			186			142			49			65			16			4			64			34			97			76			38			3			130			130			40			80			140			9			130			223			15			72			36			130			64			223			3			82			41			48			54			54			56			232			112			0			111			189			181			121			115			125			61			240			228			147			155			54			221			119			159			248			59			110			140			5			2			130			0			120			189			110			183			199			3			188			250			234			51			207			28			56			0			92			186			116			241			226			232			40			224			116			58			157			78			231			236			7			66			58			91			55			90			184			176			160			32			63			159			177			236			236			194			194			228			100			192			104			92			179			102			225			66			202			104			159			15			176			88			236			246			203			151			129			137			9			155			109			116			20			240			251			201			209			62			31			7			3			126			236			241			80			38			123			189			228			112			198			24			3			4			129			28			47			8			65			65			220			97			0			32			145			72			165			244			13			55			186			78			38			35			168			106			106			58			112			224			236			89			64			46			87			42			37			18			192			229			10			4			166			167			1			175			215			227			113			185			0			175			215			229			242			249			0			192			235			245			251			1			198			130			130			4			1			8			4			168			242			110			150			227			103			61			0			163			163			99			99			35			35			128			209			168			215			207			159			15			216			108			14			199			228			36			224			112			120			60			102			51			96			181			78			77			77			79			3			140			249			124			140			1			19			19			163			163			118			59			208			217			249			201			39			35			35			192			229			203			151			46			77			77			1			86			235			248			184			211			9			168			213			26			141			74			69			16			225			243			1			26			77			116			116			100			36			32			151			43			20			50			25			112			249			242			232			232			196			4			160			84			134			134			42			20			128			66			161			80			72			165			228			88			191			31			240			120			60			30			159			15			232			235			235			233			185			116			9			48			24			238			185			39			51			19			112			58			109			54			155			13			112			187			109			54			183			27			240			120			28			14			159			15			216			189			251			245			215			219			219			129			168			168			232			232			136			8			192			100			58			119			110			112			240			230			247			130			89			11			128			195			97			183			59			157			64			120			120			92			156			32			0			253			253			151			46			153			76			192			217			179			109			109			67			67			64			103			103			107			235			208			16			48			53			53			49			225			114			1			145			145			106			181			90			13			100			100			100			101			165			167			3			205			205			29			29			221			221			226			128			199			198			134			135			45			22			241			254			125			125			189			189			195			195			159			253			189			162			162			98			98			84			42			198			10			11			13			134			228			100			192			233			156			156			116			58			129			237			219			255			252			231			99			199			168			82			100			50			160			191			191			183			119			124			92			16			232			243			102			187			125			22			173			172			172			172			204			96			96			44			58			58			38			70			163			97			236			254			251			191			255			125			163			145			49			189			62			55			55			62			158			49			163			113			245			234			146			146			47			143			119			199			196			232			116			26			13			99			149			149			107			215			46			92			200			88			86			86			65			65			66			194			87			103			30			48			11			3			164			137			77			126			126			126			126			94			30			99			21			21			119			222			89			94			254			213			25			96			118			118			78			78			86			22			99			139			23			47			89			82			80			240			213			121			175			57			155			179			57			155			179			57			155			179			47			77			11			202			207			207			207			47			40			96			44			33			33			41			41			45			13			8			15			15			15			215			104			128			193			193			129			129			238			110			154			104			121			189			64			115			115			115			115			115			243			141			249			120			66			66			66			66			66			2			99			113			113			58			93			98			162			56			179			181			90			173			86			139			5			24			24			24			24			48			153			128			226			226			226			226			146			18			160			169			169			169			169			177			241			214			139			111			87			219			172			205			3			62			173			37			37			37			37			37			37			49			86			86			182			116			233			202			149			192			188			121			25			25			249			249			128			68			34			145			72			36			128			205			102			179			21			23			3			111			188			241			215			191			62			247			220			141			239			183			97			195			134			13			27			54			48			214			210			210			220			124			252			56			240			232			163			143			63			254			244			211			192			212			20			57			222			239			167			25			237			200			200			240			240			224			32			240			143			127			188			241			198			166			77			215			191			95			110			110			110			110			110			46			99			46			151			203			229			114			241			99			96			223			190			125			251			246			237			155			253			128			5			125			222			31			214			212			212			212			212			212			48			150			147			147			147			147			147			195			88			108			108			92			92			124			60			99			223			251			222			250			245			143			62			122			125			186			151			158			158			158			158			147			3			244			244			244			246			118			117			1			93			93			103			206			156			56			1			216			108			83			83			86			43			160			80			200			229			74			37			176			112			97			97			225			146			37			64			101			101			101			101			101			229			245			239			215			219			219			219			219			219			11			100			102			102			101			229			229			137			247			177			219			237			246			233			105			82			71			125			62			64			173			142			136			136			140			4			130			130			130			130			102			138			120			220			170			171			171			171			171			171			25			115			56			28			14			135			131			42			165			188			156			102			218			145			145			64			65			65			65			65			97			33			99			89			89			89			89			89			89			140			85			85			85			85			85			85			125			113			90			251			169			35			186			126			253			250			245			235			215			51			86			95			95			95			95			95			15			196			197			197			197			37			36			0			171			87			223			115			207			195			15			3			102			243			196			196			232			40			176			99			71			109			237			43			175			0			6			131			193			80			90			10			236			218			181			115			231			206			157			98			230			228			231			47			88			80			80			192			152			90			29			25			25			31			15			44			93			90			81			177			98			5			16			28			28			28			28			18			66			14			34			181			83			161			80			42			129			142			142			127			255			187			181			21			56			127			254			252			249			174			46			192			227			113			187			221			110			224			242			229			203			151			135			135			129			59			238			184			227			142			85			171			128			204			204			236			236			5			11			0			158			185			0			9			125			188			178			134			134			46			93			26			24			0			118			237			218			177			227			213			87			1			185			92			46			151			206			168			127			181			58			50			82			171			5			86			173			186			251			238			7			31			4			116			58			157			46			57			25			80			40			130			131			131			131			1			137			132			222			203			225			112			58			29			14			224			119			191			251			205			111			126			248			67			96			222			188			244			116			189			30			104			108			108			108			252			60			144			118			195			31			240			204			56			114			228			200			145			166			38			64			171			141			141			77			72			0			158			120			226			137			39			158			126			26			176			217			166			167			173			86			146			34			166			167			129			214			214			99			199			14			31			6			172			214			201			201			203			151			73			245			116			58			129			209			209			209			209			209			81			192			231			243			249			124			62			160			162			130			28			183			104			209			226			197			229			229			36			126			145			42			234			247			251			124			128			32			144			220			38			145			144			168			230			116			58			28			118			59			96			177			88			173			19			19			64			72			8			85			138			86			27			19			19			27			11			216			237			78			167			221			46			138			116			60			144			65			65			18			73			80			16			73			14			193			193			128			217			108			54			15			15			147			200			102			183			3			161			161			180			110			16			17			17			30			174			86			3			110			55			5			152			191			143			217			108			54			143			142			2			219			182			253			243			159			155			55			3			243			231			231			231			23			21			1			183			223			126			251			237			21			21			64			109			237			91			111			109			217			2			156			63			111			50			245			246			222			132			0			148			151			151			151			151			151			51			102			52			46			95			94			93			13			52			52			212			213			237			218			69			16			114			246			44			176			110			221			186			117			27			55			2			49			49			177			177			58			29			105			145			124			192			114			57			32			149			74			165			82			41			137			104			193			193			228			24			137			132			22			62			234			235			129			75			151			6			7			251			250			0			139			101			98			98			108			12			232			237			237			233			233			236			4			148			202			144			144			224			96			186			143			82			201			181			82			32			56			152			196			183			208			80			202			76			191			159			86			184			166			167			237			118			10			0			73			209			110			183			219			237			116			146			236			204			24			16			22			22			22			22			30			14			164			165			233			245			217			217			128			76			38			151			135			132			0			165			165			6			67			101			37			160			84			42			149			33			33			128			195			65			129			230			234			107			87			87			87			215			233			211			192			238			221			59			119			190			254			58			176			105			211			139			47			110			223			78			129			11			15			7			94			120			225			217			103			127			244			35			160			164			164			184			184			184			24			56			124			248			163			143			154			155			249			56			110			28			144			27			94			80			90			90			90			90			90			202			216			67			15			125			247			187			191			252			37			101			112			32			0			188			255			254			129			3			239			188			3			72			165			18			137			84			10			20			22			46			90			100			48			0			94			175			215			203			245			123			64			28			136			207			71			46			252			253			239			159			123			238			39			63			1			220			110			130			138			167			159			126			230			153			151			94			2			66			66			148			202			176			48			114			68			112			48			160			209			104			181			58			157			168			126			38			36			232			116			90			45			144			149			149			153			153			146			2			132			135			171			84			82			41			173			17			0			192			249			243			189			189			99			99			192			240			240			216			216			196			4			96			183			79			79			59			28			192			200			8			85			158			217			76			144			37			149			74			36			114			57			176			125			251			182			109			175			188			2			180			183			183			181			53			55			3			247			222			123			223			125			143			60			66			189			231			107			95			35			25			60			16			16			223			255			248			241			214			214			198			70			145			77			121			60			30			143			219			77			149			111			179			137			227			173			169			89			183			238			7			63			0			182			110			125			243			205			191			252			229			198			129			184			33			11			146			72			164			82			133			2			168			175			175			171			219			185			147			180			159			164			36			202			100			169			20			200			201			201			205			45			44			4			194			194			84			170			240			112			17			163			125			62			202			76			191			159			32			71			16			104			1			164			164			100			201			146			138			10			224			228			201			246			246			230			102			96			239			222			61			123			182			110			37			172			150			203			137			78			222			118			27			101			230			93			119			209			113			98			162			216			60			121			2			120			60			94			47			189			33			53			66			198			130			130			24			163			37			75			153			12			24			30			182			90			39			39			129			211			167			79			156			104			109			5			90			90			154			155			63			252			144			42			82			34			1			122			122			206			157			235			232			0			230			207			207			203			43			44			4			98			99			227			227			147			146			196			113			211			42			4			245			34			133			2			48			26			171			170			238			185			135			122			135			66			33			94			231			243			249			124			30			143			216			123			84			42			242			195			244			180			205			54			49			241			5			32			40			46			46			46			46			46			142			177			196			68			226			233			15			60			240			157			239			108			220			72			52			113			114			146			154			99			123			59			112			234			212			137			19			31			127			76			37			173			80			16			219			136			136			160			166			88			80			0			164			166			166			166			102			101			17			148			72			165			128			84			202			49			157			50			199			239			103			204			239			167			158			49			49			1			180			180			28			61			90			87			7			156			59			119			238			92			111			47			65			201			204			166			42			149			74			165			114			57			45			204			4			2			148			209			50			25			65			135			211			9			16			234			19			12			49			38			66			163			193			176			116			233			242			229			64			78			78			118			118			126			62			85			170			223			47			54			251			64			32			16			240			251			105			61			193			227			161			241			200			229			192			197			139			23			46			116			119			3			135			14			125			248			225			254			253			51			33			138			254			24			12			101			101			70			35			144			147			147			147			179			104			17			48			60			60			58			218			215			7			188			250			234			150			45			207			63			79			149			226			241			92			191			2			174			57			193			105			95			95			95			95			95			95			31			97			111			80			144			136			201			25			25			233			233			249			249			180			182			27			26			10			36			38			38			39			167			166			82			101			36			36			0			135			15			31			58			180			111			31			5			168			173			13			88			185			114			213			170			251			239			7			146			146			232			58			198			2			1			98			39			188			55			80			224			148			74			90			131			13			14			14			14			86			42			137			117			208			154			48			65			154			219			77			37			207			123			138			82			73			61			128			47			105			58			157			14			135			203			69			238			167			165			70			202			96			222			132			3			1			90			51			230			149			233			114			185			92			78			167			24			96			191			159			154			63			95			129			227			172			236			239			127			255			219			223			54			109			162			249			192			162			69			64			81			209			226			197			101			101			192			201			147			39			79			54			55			3			67			67			131			131			253			253			128			205			70			21			55			52			52			52			116			225			2			160			82			209			196			242			51			67			208			193			131			7			15			30			60			40			8			124			66			242			194			11			127			252			227			142			29			192			143			127			188			113			227			253			247			3			39			78			156			56			209			210			2			188			244			210			150			45			181			181			192			192			64			127			127			127			63			69			218			235			165			18			84			171			9			27			237			118			32			57			57			37			101			222			60			114			60			101			44			65			128			211			73			3			63			115			166			163			163			173			13			56			123			150			230			3			102			179			217			60			50			2			8			2			57			210			96			40			45			53			26			129			236			236			249			243			139			138			0			153			76			42			149			201			0			171			149			92			204			29			198			89			143			68			66			231			7			7			47			94			52			153			128			83			167			78			159			110			109			5			142			29			107			105			57			116			136			50			29			0			22			47			46			46			46			43			3			42			42			150			45			187			251			110			10			232			204			74			224			244			181			176			176			176			208			96			0			250			251			251			251			207			159			23			161			73			167			139			139			75			77			5			230			205			211			235			243			242			128			127			253			107			251			246			45			91			128			111			125			171			186			122			195			6			160			174			110			255			254			93			187			110			12			65			215			4			128			87			192			208			208			208			208			208			144			136			113			119			222			185			108			217			202			149			4			37			18			9			57			130			47			106			251			253			34			187			249			224			131			247			223			223			187			23			168			172			92			190			124			205			26			218			143			19			27			75			208			53			53			5			140			143			19			173			107			108			60			124			184			190			158			104			236			212			20			80			80			80			88			120			251			237			4			97			81			81			128			203			69			189			100			239			222			119			223			125			227			13			162			159			102			51			176			116			233			29			119			172			94			77			25			237			243			81			5			201			229			226			167			213			58			57			57			57			9			236			222			253			238			187			111			190			73			247			211			104			128			7			30			120			240			193			199			31			39			22			21			26			10			52			53			29			62			220			208			0			156			56			241			201			39			71			143			138			24			207			29			239			245			82			239			74			77			213			235			51			51			197			113			229			229			229			229			153			76			98			160			57			36			95			221			19			62			173			221			176			2			0			194			104			222			92			1			128			48			152			154			42			167			157			10			133			66			33			151			3			227			227			227			227			163			163			192			251			239			55			52			188			243			14			96			50			17			93			141			136			136			140			140			138			2			252			126			175			215			235			5			82			82			210			210			244			122			96			254			252			249			243			11			11			69			214			195			3			21			20			68			236			202			106			181			90			215			172			33			22			114			248			48			80			89			89			85			117			239			189			0			165			2			65			5			167			171			114			57			112			242			228			169			83			199			143			139			153			186			114			229			93			119			221			119			31			16			17			17			17			161			213			210			253			45			22			96			193			2			98			59			39			79			82			69			239			223			255			222			123			181			181			180			139			195			108			6			250			250			76			166			158			30			113			113			62			62			62			62			62			49			145			252			179			103			15			176			122			245			55			190			241			192			3			87			78			252			8			242			104			81			255			115			7			224			234			10			160			29			9			226			121			175			151			160			70			16			136			95			243			161			242			73			121			100			100			100			100			116			52			209			203			205			155			73			42			232			236			20			33			166			181			149			28			249			240			195			235			215			191			253			54			209			207			208			80			154			217			90			44			34			230			251			253			52			176			232			232			152			24			157			14			56			119			174			187			187			163			67			132			44			142			245			82			41			177			177			64			64			16			2			1			224			244			233			246			246			99			199			0			173			86			171			141			142			6			22			46			92			184			176			184			24			232			238			238			238			62			115			70			196			126			165			82			169			84			169			168			121			22			22			2			7			15			30			56			176			123			55			240			216			99			79			60			241			243			159			3			82			41			245			166			164			164			132			132			228			100			210			148			252			126			96			211			166			231			159			127			234			41			177			87			57			157			52			51			230			198			89			227			44			86			192			127			54			206			2			40			234			20			8			30			0			149			10			208			235			245			250			121			243			8			26			100			50			160			164			164			164			164			162			66			228			207			34			116			80			83			229			153			198			51			200			235			165			109			41			124			219			73			72			72			72			72			120			56			53			57			106			122			83			83			83			83			226			121			185			156			216			17			39			5			93			93			93			93			167			78			1			106			117			84			84			84			20			237			47			242			251			197			25			110			32			64			106			43			63			78			72			72			74			74			78			166			125			77			139			22			209			134			172			241			113			241			119			211			211			164			49			185			92			30			143			211			41			206			15			174			54			198			232			250			47			92			1			92			58			184			210			229			226			39			113			25			58			230			251			118			120			61			204			108			142			94			47			137			97			156			54			122			60			148			225			129			0			241			121			137			36			36			132			40			35			7			141			43			43			142			242			26			88			176			128			28			243			232			163			143			61			246			211			159			138			162			155			88			125			244			183			74			21			30			30			17			1			212			212			84			87			87			85			137			129			33			89			66			116			92			32			64			207			227			52			216			239			247			249			136			134			18			68			242			74			228			172			139			63			135			239			65			226			205			252			106			243			251			137			109			125			90			187			70			13			229			21			192			143			37			18			162			113			60			227			249			3			102			58			140			170			128			154			176			248			34			34			235			161			193			243			45			85			226			14			55			154			105			18			123			153			121			47			162			150			60			83			169			201			123			189			62			159			211			73			19			156			233			105			192			98			177			88			38			39			233			211			98			17			117			127			151			203			233			116			58			69			205			137			79			24			121			115			189			242			41			244			94			180			211			78			36			21			87			219			204			132			224			91			26			37			18			137			228			63			85			192			213			79			185			145			93			183			2			236			118			187			221			225			0			122			122			186			187			59			59			129			208			208			176			48			149			10			112			58			93			46			135			131			180			144			176			48			130			28			141			230			127			111			246			31			230			213			156			30			10			130			184			227			140			6			66			11			38			188			153			115			71			92			25			86			186			146			7			136			127			210			191			197			74			164			127			93			91			137			28			10			102			74			10			252			9			28			234			120			37			48			198			119			232			241			223			112			89			143			143			67			16			164			82			82			71			149			74			32			60			156			228			109			155			109			122			122			166			20			33			151			147			118			245			185			3			192			43			160			164			164			164			100			201			18			198			158			125			246			183			191			125			242			73			192			96			40			47			55			26			169			185			197			197			1			109			109			109			109			45			45			192			161			67			31			124			176			119			47			101			166			197			114			45			47			231			159			98			142			83			8			120			83			227			123			61			105			144			51			115			147			127			123			181			131			174			12			16			119			146			68			66			21			230			247			211			117			34			4			138			144			64			247			191			178			82			249			252			132			107			85			87			194			223			204			204			166			10			25			25			25			30			190			112			1			104			106			250			232			163			61			123			128			248			248			196			196			140			12			146			88			150			46			5			182			110			221			186			117			203			22			98			141			159			134			142			94			183			2			120			32			138			138			138			138			22			47			102			172			161			161			174			238			157			119			136			206			69			68			0			14			199			244			244			248			56			45			33			154			76			52			65			107			111			23			4			189			94			175			215			235			105			248			60			195			105			224			28			123			103			230			24			160			84			146			74			26			26			74			252			60			16			16			187			11			209			92			42			106			17			242			174			44			124			158			167			51			123			18			253			150			36			10			169			148			36			144			168			168			168			40			173			86			252			126			124			156			18			99			106			202			102			179			90			197			64			243			138			16			195			207			37			16			186			79			102			102			102			102			102			38			144			146			114			219			109			241			241			64			93			29			105			100			3			3			3			3			253			253			34			251			26			29			29			25			25			26			186			49			33			189			110			15			224			129			104			107			107			107			59			126			92			16			12			6			131			193			96			0			70			70			70			70			70			70			4			97			124			124			124			124			120			88			116			188			209			104			52			26			141			140			241			166			37			149			114			154			200			177			149			6			198			213			83			167			147			232			224			241			227			159			124			210			210			2			212			214			110			223			254			202			43			192			129			3			13			13			59			119			82			96			123			123			69			201			130			79			124			102			230			231			204			230			205			195			51			115			65			71			161			0			26			27			63			252			240			192			1			224			229			151			95			124			241			87			191			2			106			107			183			109			251			211			159			128			150			150			198			198			186			58			106			182			110			183			184			69			145			247			42			78			51			35			35			213			106			141			70			172			148			176			176			176			176			176			48			224			204			153			51			103			206			156			33			205			170			187			91			244			15			5			66			244			223			23			174			128			235			29			55			52			52			52			52			52			92			123			94			167			211			233			116			58			198			246			239			223			191			127			231			78			96			197			138			175			127			253			155			223			20			37			132			136			8			181			58			42			138			214			102			55			111			6			98			99			227			226			180			90			90			103			216			189			155			42			174			168			136			177			241			113			179			121			112			144			28			161			86			139			226			152			8			73			87			238			154			230			21			198			155			238			212			20			65			226			246			237			111			189			245			242			203			64			103			103			103			103			71			199			181			239			107			52			86			86			42			149			140			69			71			71			71			199			199			83			6			199			196			0			23			47			246			247			155			76			192			139			47			254			225			15			79			61			69			155			143			135			135			105			102			173			82			17			205			237			234			186			190			127			174			38			51			159			217			174			142			224			103			61			94			182			108			217			178			101			203			24			227			243			137			212			212			212			212			180			52			198			52			26			141			70			163			97			108			237			218			181			107			215			174			189			254			239			43			42			42			42			42			42			24			203			200			200			200			200			206			102			108			249			242			21			43			214			172			97			108			223			190			186			186			211			167			25			219			181			107			207			158			143			63			102			236			237			183			119			237			58			122			148			177			218			218			29			59			142			28			97			108			207			158			247			222			107			111			103			140			32			237			211			191			111			124			124			124			124			124			60			237			170			208			233			24			75			73			73			78			78			75			19			207			87			85			85			85			45			95			254			249			253			113			211			2			49			219			129			187			250			56			45			45			45			45			45			141			49			190			155			130			87			152			86			171			213			106			181			140			169			213			106			181			90			45			254			231			59			189			94			175			79			79			103			44			37			37			37			37			37			133			177			217			126			159			91			230			248			155			29			184			207			122			124			245			46			132			255			183			142			157			109			199			207			246			253			110			117			197			126			101			109			182			95			252			102			59			234			191			214			209			183			218			254			207			100			232			156			205			217			156			205			217			151			111			255			3			80			244			143			206			188			145			181			235			0			0			0			0			73			69			78			68			174			66			96			130		)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!blankFigure	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 8 6 0 0 0 87 2 249 135 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 219 6 29 6 15 22 238 223 233 130 0 0 7 58 73 68 65 84 104 222 237 153 91 76 148 233 25 199 127 223 105 142 200 97 0 135 81 131 39 96 100 55 210 210 208 44 106 54 81 183 222 184 132 52 110 77 140 214 100 107 44 171 92 88 172 122 177 166 27 165 224 213 154 232 133 9 89 111 32 219 84 47 188 88 143 27 21 131 46 198 83 151 18 87 84 16 28 79 227 238 202 65 164 226 56 51 31 243 125 111 47 102 24 134 173 117 65 7 210 52 60 201 155 239 155 153 204 188 255 255 243 252 159 231 125 158 111 96 202 166 108 202 166 108 202 166 108 242 76 196 86 210 76 154 68 224 236 221 187 23 128 237 219 183 39 109 111 117 178 128 231 230 230 98 24 17 158 63 31 196 229 114 209 223 223 207 255 26 129 184 52 100 89 38 47 47 143 170 170 42 102 207 158 141 97 24 8 97 98 154 42 86 171 149 37 75 22 115 226 196 73 145 140 40 72 111 11 120 250 244 233 0 172 94 189 154 146 146 18 102 204 240 32 68 148 139 105 154 152 166 136 93 77 132 16 152 166 65 111 111 47 155 54 109 78 138 140 222 40 2 57 57 57 98 207 158 61 76 155 150 130 44 203 168 170 138 205 102 143 178 18 195 75 196 136 68 151 36 17 123 45 145 157 61 157 252 252 124 186 186 186 222 58 236 242 155 120 190 177 177 17 159 207 135 207 119 143 193 193 23 132 66 33 194 225 16 145 200 16 134 97 96 24 70 130 247 197 40 66 146 20 13 222 134 13 127 32 25 21 105 188 4 196 173 91 183 72 77 157 134 166 105 60 126 252 152 135 15 31 18 12 134 208 245 33 34 17 3 195 136 32 132 153 112 53 98 210 17 241 232 0 20 20 20 144 153 153 57 169 17 16 13 13 13 216 108 54 116 125 136 178 178 50 158 61 235 39 20 10 161 235 97 194 225 48 145 72 4 195 48 137 68 12 76 83 96 24 6 32 226 250 143 255 144 136 202 127 219 182 109 111 29 133 49 19 240 120 60 148 148 148 32 203 50 178 44 99 179 217 8 133 194 232 186 78 48 24 149 144 174 135 19 228 147 40 161 145 92 16 194 140 203 200 235 245 190 117 20 198 90 5 196 145 35 71 88 180 104 17 23 47 54 211 216 216 72 111 111 31 233 233 233 184 92 46 114 115 115 113 58 157 88 44 22 172 86 43 86 171 5 144 144 101 9 144 226 250 143 230 128 132 36 17 187 74 116 116 116 240 233 167 59 223 184 34 141 185 10 157 57 115 134 99 199 142 17 12 6 17 66 144 149 149 69 90 90 26 170 170 34 203 50 146 20 5 42 203 114 28 139 36 69 9 68 43 16 152 230 136 223 36 41 250 157 119 222 121 151 172 172 44 250 250 250 38 86 66 247 238 221 99 254 252 249 228 229 229 145 159 159 143 219 237 198 102 179 225 118 187 81 20 5 77 83 177 90 45 88 44 26 170 170 162 105 26 138 162 162 170 42 138 162 198 164 39 161 40 50 138 34 199 165 40 66 33 254 188 101 203 27 231 194 88 9 72 29 29 29 164 165 165 49 119 238 28 156 78 7 110 183 27 171 213 138 221 110 199 225 112 96 181 218 120 248 240 17 131 131 47 80 213 40 161 68 160 170 170 161 170 35 164 84 85 193 8 135 152 125 226 28 25 146 138 215 235 157 216 131 172 187 187 155 66 89 230 95 233 25 56 28 78 12 195 32 51 211 133 170 170 124 255 253 15 236 219 183 15 93 215 217 188 121 51 30 143 39 174 241 104 226 14 159 204 35 78 190 113 35 141 166 166 34 254 113 237 67 86 217 30 177 113 163 198 142 29 59 198 221 94 140 153 128 97 24 4 114 114 248 213 201 147 180 125 240 1 170 203 21 43 137 2 167 211 137 215 235 165 184 248 151 20 21 21 197 115 34 74 128 56 129 39 79 94 208 220 92 192 185 115 110 180 161 32 107 3 245 252 46 120 159 182 208 70 188 222 66 10 11 11 105 111 111 159 184 86 34 50 52 132 235 254 125 10 30 251 249 193 227 129 88 226 206 156 57 147 161 161 33 190 248 226 32 69 69 191 32 35 35 157 96 48 136 205 102 67 211 44 124 243 77 58 95 127 157 205 131 7 14 138 139 7 216 178 229 1 165 246 127 146 251 183 211 52 149 252 154 223 150 189 196 52 237 236 218 181 139 53 107 214 140 43 10 227 34 160 88 173 4 150 44 97 65 237 30 148 154 26 250 23 47 198 52 13 108 54 27 5 5 5 44 88 176 128 204 204 76 122 123 123 169 175 175 39 28 246 242 221 119 21 204 153 147 197 202 149 125 188 247 94 7 169 169 42 226 233 83 22 174 223 78 79 89 25 5 197 197 4 148 104 130 231 228 184 249 236 179 191 80 83 83 59 102 18 227 106 37 254 126 232 16 189 229 229 244 127 252 49 169 61 61 200 64 74 202 52 82 83 83 41 44 44 100 96 96 0 128 214 214 86 78 159 62 141 221 222 67 93 93 128 186 186 7 148 151 7 200 206 118 96 177 104 104 167 78 97 166 164 224 95 189 154 240 188 121 40 138 26 91 10 43 86 172 32 59 59 107 194 218 105 225 247 251 121 242 237 183 204 107 108 36 48 119 46 47 203 203 1 208 117 61 86 50 21 12 35 194 249 243 23 48 77 147 165 75 151 198 115 33 162 235 56 91 91 153 94 87 199 163 247 223 39 252 251 117 241 19 123 248 160 51 77 147 206 206 78 54 108 216 48 38 124 227 38 224 243 249 112 216 237 240 252 57 174 149 43 209 23 46 228 217 206 157 232 25 25 72 138 50 42 105 163 247 102 124 54 120 122 215 199 187 159 127 78 160 168 136 222 53 107 48 237 246 248 140 48 12 222 48 162 109 72 69 69 5 183 111 223 150 146 42 33 128 190 190 62 236 14 7 90 86 22 61 91 183 98 185 123 23 247 186 117 184 14 31 38 52 248 28 69 81 98 117 94 141 221 107 40 161 48 153 245 13 20 239 216 142 229 199 31 9 174 248 13 74 106 42 138 162 196 150 138 44 43 200 178 18 63 232 106 107 107 198 116 184 141 155 192 241 227 199 227 39 173 99 237 90 2 7 15 162 151 151 147 242 229 151 228 253 177 2 75 91 27 154 166 161 170 202 8 137 151 47 113 158 61 203 192 159 170 120 244 213 87 24 222 5 177 207 149 81 135 93 116 69 137 120 60 51 104 104 168 255 89 18 227 110 160 102 205 154 37 124 62 95 194 224 98 16 137 24 60 185 122 149 252 234 106 228 142 14 244 178 50 132 197 130 94 82 130 118 245 42 182 83 167 120 89 94 206 227 138 10 108 30 79 66 183 58 188 70 58 216 97 9 133 195 97 90 90 90 168 170 170 122 45 206 55 233 0 69 87 87 87 124 88 79 4 18 238 237 193 121 232 48 242 253 251 40 29 29 16 8 16 252 232 35 2 171 86 33 92 174 81 96 135 129 190 138 76 115 243 69 106 107 107 69 79 79 207 95 129 221 201 30 234 197 217 179 103 89 190 124 121 60 241 18 151 16 130 72 36 130 20 10 18 209 44 9 195 189 249 95 61 63 76 166 189 189 157 202 202 74 186 187 187 171 99 123 237 158 144 167 18 165 165 165 226 242 229 203 241 106 147 24 137 97 82 163 201 25 175 241 184 73 91 219 13 62 249 100 83 34 240 68 75 122 4 98 149 82 140 42 153 81 208 230 107 129 38 122 253 217 179 1 90 91 91 89 191 126 125 245 207 236 53 49 4 154 154 154 88 182 108 217 168 55 127 10 244 85 100 58 59 59 185 126 253 58 149 149 149 213 227 216 111 119 210 159 204 157 63 127 254 63 8 68 167 177 209 254 25 30 33 143 30 61 202 129 3 7 104 105 105 169 30 231 86 19 18 129 81 50 250 169 13 123 251 230 205 155 92 184 112 129 173 91 183 38 21 116 210 158 141 190 42 10 126 191 159 75 151 46 177 127 255 126 174 93 187 86 157 108 192 73 125 188 94 90 90 42 174 92 185 130 223 239 231 206 157 59 52 55 55 83 83 83 83 61 145 128 147 253 255 192 238 137 246 240 100 252 193 177 123 178 192 78 217 148 77 217 255 161 253 27 58 98 17 74 10 213 30 16 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'accessing' stamp: ''!pointDefinedByCoordinates	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 180 73 68 65 84 120 218 237 154 193 205 194 48 12 133 211 95 140 192 22 12 193 0 156 184 230 10 136 9 58 69 87 224 156 43 39 6 96 8 182 96 135 254 39 11 41 81 112 210 66 253 76 252 93 162 170 45 181 223 139 157 138 198 57 195 48 12 173 140 163 116 4 218 233 166 221 150 19 190 155 248 123 237 82 41 88 233 140 55 35 22 194 90 208 92 254 164 3 104 157 85 221 229 54 227 193 48 67 230 98 45 72 24 51 64 152 70 215 128 56 15 185 215 230 202 10 160 64 181 190 231 227 77 160 196 128 221 174 239 183 91 188 64 203 160 184 227 17 151 108 5 144 17 186 13 33 112 255 58 73 2 224 4 63 30 135 225 249 148 14 59 101 191 119 238 241 168 78 191 243 222 123 239 199 49 132 16 66 72 143 23 79 36 158 249 239 13 65 173 140 92 43 122 141 36 52 221 17 31 139 81 215 114 0 2 126 27 151 98 35 234 18 69 161 92 248 120 84 34 60 234 91 70 169 208 233 245 74 132 231 18 151 134 23 158 132 190 94 157 219 108 212 183 158 56 113 105 120 225 233 152 12 200 157 87 102 4 110 160 57 97 149 87 0 234 26 240 130 19 150 171 0 101 224 6 206 85 128 116 124 31 2 47 145 243 249 116 58 28 202 43 64 57 250 18 65 51 160 209 239 1 56 52 246 61 0 15 251 36 41 140 25 32 140 173 1 194 216 26 32 140 181 32 97 204 0 97 108 13 16 198 214 0 97 172 5 125 133 242 78 97 6 124 21 222 136 213 212 27 231 93 143 194 82 113 211 115 210 214 157 49 160 180 199 231 126 56 255 192 182 206 243 122 54 215 130 46 151 190 95 175 151 122 26 63 145 103 58 200 205 4 28 114 27 206 110 183 97 184 223 97 182 167 199 130 210 168 181 199 227 243 243 45 136 219 106 9 186 251 27 119 215 131 97 124 148 127 134 246 108 126 47 30 109 160 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGIcons class methodsFor: 'form' stamp: ''!segment: thick color: color mark: mark	| morph |	morph := DrGSegmentMarkMorph new.	morph forcedMark: mark;		borderColor: color;		setVertices: {0@0. self menuExtent x@0};		borderWidth: thick.	^ self iconWithBackground: morph.! !!DrGIcons class methodsFor: 'accessing' stamp: ''!middle	^self formFromGraphic: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255 255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72 0 70 201 107 62 0 0 1 193 73 68 65 84 120 218 237 154 75 170 131 48 20 134 79 46 119 168 139 112 224 182 164 224 172 148 186 153 174 197 81 119 210 81 161 123 232 68 200 29 200 69 140 143 228 228 97 212 252 223 36 40 88 234 255 229 101 56 68 0 0 0 0 56 35 82 142 91 160 242 19 230 103 17 184 41 191 118 143 45 5 44 68 236 23 58 26 158 71 64 44 49 199 29 113 129 166 32 96 138 165 0 243 30 93 215 117 93 215 67 15 85 175 185 84 85 85 85 213 113 123 188 103 212 93 206 114 235 26 252 63 243 2 146 19 98 30 188 218 134 25 1 199 21 192 156 130 76 95 116 58 69 189 94 101 89 150 68 143 71 150 101 89 236 215 222 15 158 23 97 33 198 61 92 136 203 37 207 243 156 232 253 238 186 174 35 250 124 218 182 109 137 190 223 166 105 154 227 246 220 72 44 77 45 250 197 182 23 33 229 243 89 20 69 33 101 63 34 164 212 137 88 159 114 116 109 2 232 130 143 35 34 1 184 193 135 17 145 160 0 215 224 213 158 204 21 113 182 93 144 53 220 15 44 53 184 48 34 84 78 40 230 126 191 221 174 87 251 47 91 223 34 230 73 104 74 178 37 140 8 4 207 198 143 136 105 240 56 51 98 194 21 209 223 69 240 222 209 137 232 25 130 183 91 35 128 22 93 240 126 22 107 96 200 16 124 152 93 19 88 96 57 120 136 8 138 121 240 16 17 8 110 240 16 17 8 221 182 18 34 118 2 68 236 4 156 53 237 132 109 206 154 32 64 139 169 136 254 74 23 48 4 88 195 61 226 48 107 1 155 117 17 124 1 190 10 206 146 67 21 49 14 114 187 74 191 228 153 15 114 59 17 168 231 31 225 218 163 249 101 248 40 79 39 34 151 146 203 245 251 122 32 192 136 105 201 101 127 29 251 127 157 6 251 146 75 44 198 158 112 45 56 3 150 184 6 15 17 158 64 176 145 112 173 244 3 7 231 15 70 90 152 213 40 169 61 128 0 0 0 0 73 69 78 68 174 66 96 130)! !!DrGLabelMorph methodsFor: 'editing' stamp: ''!acceptContents	costume mathItem name: contents asString.! !!DrGLabelMorph methodsFor: 'event handling' stamp: ''!mouseMove: evt	costume 		ifNotNil: 			[costume constraintTextPosition: evt cursorPoint.			self position: costume textPosition].! !!DrGLine2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'2pts'! !!DrGLineAngleBisectorItem commentStamp: ''!Angle bisector given an angle defined by three points!!DrGLineAngleBisectorItem methodsFor: 'xml writing' stamp: ''!nodeType 	^ #angleBisector! !!DrGLineAngleBisectorItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [		| angle v1 v2 |		angle := parents first.		self origin: angle summit point.		[ v1 := (angle side1 point - origin) normalized ] on: ZeroDivide do: [ v1 := 0 @ 0 ].		[ v2 := (angle side2 point - origin) normalized ] on: ZeroDivide do: [ v2 := 0 @ 0 ].		self direction: v1+ v2.		self direction = (0@0) ifTrue: [exist := false]]! !!DrGLineAngleBisectorItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This angle bisector %1' translated! !!DrGLineBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	^ DrGLineCostume! !!DrGLineBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGLine2ptsItem! !!DrGLineBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Line defined by two points' translated! !!DrGLineBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Line' translated! !!DrGLineCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGLineMorph new! !!DrGLineCostume methodsFor: 'updating' stamp: ''!redraw	super redraw ifFalse: [^ self].	morph		from: (drawable worldToMorph: mathItem origin)		direction: (drawable vectorToMorph: mathItem direction).! !!DrGLineCostume methodsFor: 'testing' stamp: ''!basicType	^#line! !!DrGLineCostume methodsFor: 'style' stamp: ''!styleClass	^DrGLineCostumeStyle! !!DrGLineCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current lineColor.	self lineStyle: DrGStylePreference current lineStyle.	self thickness: DrGStylePreference current lineThickness! !!DrGLineHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGLineHomothetyItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGLineHomothetyItem methodsFor: 'updating' stamp: ''!update	self homothetyUpdate ! !!DrGLineItem methodsFor: 'printing' stamp: ''!printOn: aStream 	self printType: DrGLineBuilder title on: aStream.! !!DrGLineItem methodsFor: 'computing' stamp: ''!clone	|pointA pointB clone|	pointA := DrGPointFreeItem newWith: {self origin + (0.2@0.2)}.	pointB := DrGPointFreeItem newWith: {self origin + self direction + (0.2@0.2)}.	clone := DrGLine2ptsItem newWith: {pointA . pointB}.	^ {pointA . pointB . clone}! !!DrGLineItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isLineItem	^true! !!DrGLineItem methodsFor: 'accessing' stamp: ''!basicType	^#line! !!DrGLineItem methodsFor: 'computing' stamp: ''!abscissaOf: aPoint 	| v | 	[ v := vector normalized ] on: ZeroDivide do: [ v := 0 @ 0 ].	^(aPoint - origin dotProduct: v) arcTan 		* DrGDirectionItem invPi + 0.5! !!DrGLineItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	|unitVector|	[ unitVector := vector normalized ] on: ZeroDivide do: [ unitVector := 0 @ 0 ].	^origin + (((aPoint - origin) dotProduct: unitVector) * unitVector)! !!DrGLineItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem	^true! !!DrGLineItem methodsFor: 'computing' stamp: ''!pointAt:	anAbscissa	|point abscissa v |	"In the interval [-0.5 ; 0.5]"	abscissa := anAbscissa - 0.5.	(abscissa = 0.5 or: [abscissa = -0.5]) 		ifTrue:			[point := abscissa * vector.			point x > 0 				ifTrue: [point := Float infinity @ point y] 				ifFalse: [point := 0 - Float infinity @ point y].			point y > 0				ifTrue: [point := point x @ Float infinity] 				ifFalse: [point := point x @ (0 - Float infinity)]]		ifFalse:			[abscissa := abscissa * Float pi.			[ v := vector normalized ] on: ZeroDivide do: [ v := 0 @ 0 ].			point := origin + (abscissa tan * v)].	^point! !!DrGLineItem methodsFor: 'accessing' stamp: ''!costumeClass 	^ DrGLineCostume ! !!DrGLineItem methodsFor: 'computing' stamp: ''!intersectionWith: aCurveItem flag: aFlag	aCurveItem isLineItem 		ifTrue: [^ self intersectionWithDirection: aCurveItem].	(aCurveItem isSegmentItem 		or: [aCurveItem isRayItem 			or: [aCurveItem isCircleItem				or: [aCurveItem isArcItem]]])			ifTrue: [^ aCurveItem intersectionWith: self flag: aFlag].! !!DrGLineItem methodsFor: 'computing' stamp: ''!contains: aPoint	^ (vector crossProduct: (aPoint - origin)) closeTo: 0! !!DrGLineItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This line %1' translated! !!DrGLineMorph commentStamp: ''!A DGLineMorph is extented to the boundary of its parent morph, a drawable in Dr. Geo jargon.!!DrGLineMorph methodsFor: 'layout' stamp: ''!extendHorizontally: aPoint| p1 p2 drawable|	drawable := self costume drawable.	p1 := Point x: drawable left y: aPoint y.	p2 := Point x: drawable right y: aPoint y.	super from: p1 to: p2! !!DrGLineMorph methodsFor: 'layout' stamp: ''!extendFrom: aPoint direction: u| p1 p2 drawable r|	drawable := self costume drawable.	r := u x asFloat / u y.	p1 := Point x: ((drawable top - aPoint y) * r + aPoint x)  y: drawable top.	p2 := Point x: ((drawable bottom - aPoint y) * r + aPoint x)		y: drawable bottom.	super from: p1 to: p2.! !!DrGLineMorph methodsFor: 'accessing' stamp: ''!from: aPoint direction: u	u y abs < 0.001 		ifTrue: [self extendHorizontally: aPoint]		ifFalse: [self extendFrom: aPoint direction: u]! !!DrGLineMorph class methodsFor: 'instance creation' stamp: ''!from: startPoint to: endPoint color: lineColor width: lineWidth| instance |	instance := self vertices: {startPoint. endPoint}			color: Color black borderWidth: lineWidth borderColor: lineColor.	instance blink: false.	^ instance ! !!DrGLineParallelItem commentStamp: ''!A DrGLineParallelItem is a parallel line.parents first is a direction itemparents second is a point!!DrGLineParallelItem methodsFor: 'updating' stamp: ''!move: aPoint	parents size = 1 ifTrue: [origin := origin + aPoint].! !!DrGLineParallelItem methodsFor: 'xml writing' stamp: ''!nodeType	^#parallel! !!DrGLineParallelItem methodsFor: 'updating' stamp: ''!moveParent: aPoint"Only move the origin parent if it is a PointItem instance"	parents isEmptyOrNil ifFalse: [parents second moveEvent: aPoint].	^true! !!DrGLineParallelItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self direction: (parents at: 1) direction.		parents size = 2 ifTrue: [self origin: (parents at: 2) point]].! !!DrGLineParallelItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This parallel line %1' translated! !!DrGLinePerpendicularBisector2ptsItem commentStamp: ''!Perpendicular bisector given two points, extremities of a segment!!DrGLinePerpendicularBisector2ptsItem methodsFor: 'comparing' stamp: ''!equalOtherNodeType: aMathItem 	^ aMathItem		ifNil: [false]		ifNotNil: [self basicType = aMathItem basicType			and: [aMathItem nodeType = #perpendicularBisectorSegment				and: [(aMathItem parents first extremity1 = parents first point						and: [aMathItem parents first extremity2 = parents second point])					or: [aMathItem parents first extremity1 = parents second point						and: [aMathItem parents first extremity2 = parents first point]]]]]! !!DrGLinePerpendicularBisector2ptsItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem"	^ self parents asSet = aMathItem parents asSet"	((parents first = aMathItem parents first) and: [parents second = aMathItem parents second]) 		ifTrue: [^true].	((parents first = aMathItem parents second) and: [parents second = aMathItem parents first]) 		ifTrue: [^true].	^ false! !!DrGLinePerpendicularBisector2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'perpendicularBisector2pts'! !!DrGLinePerpendicularBisector2ptsItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [ 		self direction: (parents first point - parents second point) normal.		self origin: parents first point + parents second point / 2]! !!DrGLinePerpendicularBisector2ptsItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This perpendicular bisector %1' translated! !!DrGLinePerpendicularItem methodsFor: 'xml writing' stamp: ''!nodeType	^#perpendicular! !!DrGLinePerpendicularItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self direction: (parents at: 1) normal.		parents size = 2 	ifTrue: [self origin: (parents at: 2) point]].! !!DrGLinePerpendicularItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This perpendicular line %1' translated! !!DrGLineReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGLineReflexionItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGLineReflexionItem methodsFor: 'updating' stamp: ''!update	self reflexionUpdate! !!DrGLineRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGLineRotationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGLineRotationItem methodsFor: 'updating' stamp: ''!update	self rotationUpdate ! !!DrGLineSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGLineSymmetryItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGLineSymmetryItem methodsFor: 'updating' stamp: ''!update	self symmetryUpdate ! !!DrGLineTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Translation! !!DrGLineTranslationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGLineTranslationItem methodsFor: 'updating' stamp: ''!update	self translationUpdate! !!DrGLoader commentStamp: ''!I animate a loader. !!DrGLoader class methodsFor: 'loader' stamp: ''!loader11Contents^ #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 33 73 68 65 84 120 94 133 83 219 114 132 32 12 117 8 151 33 184 10 211 125 161 91 118 219 105 255 255 27 23 12 168 68 157 158 23 49 57 147 235 201 192 128 232 134 115 144 93 32 10 122 112 191 197 184 39 40 180 140 80 61 219 71 241 16 1 113 35 196 229 231 16 194 54 2 189 57 84 105 128 8 136 97 239 241 158 218 40 121 23 130 109 173 216 37 142 78 233 23 168 145 18 66 16 179 36 13 52 20 245 147 82 250 155 202 171 54 239 98 182 187 156 178 181 226 191 50 197 40 94 17 134 117 90 234 81 130 112 127 215 200 116 79 208 13 30 21 223 137 62 91 77 129 212 4 201 7 71 24 134 207 59 97 62 12 150 240 63 225 34 133 171 41 182 90 212 85 145 53 34 220 166 62 67 191 78 61 26 51 238 13 89 16 184 169 78 122 99 140 239 138 88 54 17 43 101 206 238 241 59 27 159 181 14 81 150 85 118 89 243 24 115 131 194 253 0 176 206 90 215 214 109 177 10 239 53 211 250 1 52 9 70 245 130 89 11 133 28 167 73 78 157 72 18 96 106 162 181 251 22 26 94 0 110 149 125 56 202 94 2 200 238 112 184 238 35 60 251 211 19 231 39 44 240 202 115 121 254 111 248 165 14 102 123 116 206 202 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader12Contents^ #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 43 73 68 65 84 120 94 133 83 127 111 132 32 12 37 69 184 180 220 169 68 182 139 187 53 102 217 190 255 103 60 126 169 128 154 245 15 17 222 163 45 237 171 104 140 200 136 115 211 42 124 129 8 226 22 90 252 206 63 37 65 17 54 132 145 121 220 9 126 81 173 139 95 254 86 27 97 38 58 228 32 153 95 43 193 127 241 152 165 99 238 51 129 200 150 200 48 196 165 103 118 137 128 235 83 48 250 153 156 251 208 225 231 198 172 5 128 48 57 67 176 169 40 248 233 156 123 118 254 105 127 50 185 52 179 63 55 138 182 167 12 95 158 50 214 105 5 216 110 213 194 123 112 210 226 213 141 238 229 116 185 55 164 218 158 76 245 118 135 85 159 172 45 45 36 19 226 113 75 166 27 156 178 253 79 184 8 97 114 136 61 23 184 74 50 239 123 169 234 8 117 221 186 69 202 165 60 240 130 160 221 39 106 41 165 174 174 196 78 204 153 50 121 120 153 195 181 124 0 161 89 161 151 57 142 199 251 216 86 223 93 131 104 214 118 35 101 225 209 4 169 252 254 60 10 70 213 130 41 26 104 54 201 169 163 36 147 80 19 1 203 39 172 102 99 192 44 123 123 148 253 62 49 32 78 117 15 52 215 163 7 231 35 12 116 133 92 142 255 27 198 51 14 251 200 3 212 240 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader2Contents ^ #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 35 73 68 65 84 120 94 117 147 209 118 131 48 8 134 123 136 9 35 108 174 158 121 81 187 178 174 221 251 191 227 146 144 180 6 43 23 42 240 9 63 24 15 189 209 249 60 28 94 219 0 249 26 230 57 20 215 217 252 21 223 214 192 93 190 13 16 16 195 19 112 34 119 91 226 29 63 224 1 220 228 226 45 48 34 126 54 224 40 130 91 149 39 68 175 128 191 200 95 167 95 7 243 136 71 5 80 68 135 32 42 87 231 174 165 161 67 28 40 4 26 69 230 236 195 20 35 167 59 255 56 231 66 18 8 167 177 78 116 75 15 236 99 140 85 233 144 8 55 114 167 40 167 39 104 30 127 37 226 215 230 105 29 128 224 186 193 57 122 54 83 82 239 62 211 12 106 246 133 71 56 86 3 147 111 241 7 64 123 192 78 139 109 152 247 68 182 33 122 17 96 90 230 181 79 235 192 210 201 214 181 119 69 75 104 129 86 189 174 189 5 96 97 45 90 251 180 135 4 50 19 49 215 175 152 95 172 199 130 117 253 41 14 185 181 111 253 137 204 7 100 5 82 205 101 123 36 161 52 82 128 54 155 79 54 149 134 10 84 199 22 128 238 70 27 96 89 113 73 16 188 254 133 33 238 101 154 233 73 95 217 63 178 66 14 153 183 139 109 50 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader9Contents^  #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 33 73 68 65 84 120 94 133 147 219 110 195 32 12 64 17 14 137 48 109 218 104 94 37 150 210 85 138 246 255 191 88 136 33 23 147 118 126 9 216 199 247 160 132 32 58 117 44 172 215 136 154 15 210 110 209 111 1 131 86 0 217 178 126 140 12 49 32 174 128 159 47 85 8 91 0 62 75 49 169 1 6 16 135 157 47 87 236 82 222 25 176 165 21 107 179 97 208 220 72 10 161 153 76 142 67 30 74 172 8 77 58 153 220 188 243 241 230 12 46 173 196 184 85 85 201 60 232 205 152 68 227 70 186 196 128 187 225 58 78 90 239 226 224 234 52 139 116 88 212 152 69 87 131 101 249 31 120 147 162 86 247 31 107 86 166 187 195 62 195 126 112 215 41 132 105 171 240 187 170 90 10 33 80 43 6 135 232 51 50 70 243 244 23 231 125 203 140 121 104 222 101 206 19 194 189 75 139 56 17 125 25 0 163 1 158 101 65 51 112 26 231 14 26 162 81 245 93 215 171 103 164 54 63 76 145 145 168 97 192 1 60 234 95 178 37 186 42 6 84 15 208 84 192 55 253 216 2 168 95 0 57 169 11 209 69 45 64 172 85 62 12 160 155 90 1 213 130 63 126 194 5 120 43 250 124 22 143 242 5 159 241 14 245 151 37 96 90 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!at: integer	^ loader at: integer! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader5Contents^  #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 32 73 68 65 84 120 94 125 83 219 146 131 48 8 205 128 145 9 177 142 206 246 161 238 54 181 157 157 254 255 47 54 145 172 185 233 242 162 9 39 112 128 131 170 140 217 170 99 147 123 96 134 237 71 215 126 195 75 14 120 226 87 5 136 158 248 209 136 207 58 196 204 156 0 15 196 134 138 119 153 63 64 135 56 182 44 117 40 96 3 88 196 181 120 43 188 45 179 22 192 136 40 69 172 107 116 204 32 133 132 16 160 0 177 223 42 25 136 186 240 179 176 127 27 56 105 136 37 63 2 143 137 136 166 157 223 198 48 79 251 246 238 161 207 218 20 8 100 118 35 186 32 228 141 214 156 31 85 71 111 125 56 139 132 72 14 16 171 0 166 23 235 20 71 131 18 208 95 197 190 119 128 57 3 156 164 232 246 20 39 36 199 86 48 5 9 116 84 148 9 94 13 115 126 241 114 238 62 229 93 138 211 72 25 174 206 185 23 166 62 111 243 92 98 22 88 60 24 127 61 228 39 42 93 106 12 227 182 198 88 27 231 66 119 231 36 130 177 165 96 116 108 155 166 225 88 114 62 230 210 74 50 23 173 105 58 95 203 94 14 255 44 14 52 179 241 87 197 234 233 131 28 229 242 158 90 179 254 31 178 93 14 174 214 254 40 176 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader8Contents^ #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 32 73 68 65 84 120 94 133 147 221 110 195 32 12 133 17 196 113 49 43 74 180 220 164 155 219 85 83 223 255 21 7 49 249 193 164 154 111 2 246 103 131 15 142 81 70 20 204 185 137 223 18 89 89 232 184 167 249 8 0 121 5 148 200 254 1 93 98 36 218 129 121 217 52 37 252 10 200 90 27 228 6 4 32 26 171 92 185 113 200 231 46 128 95 91 241 190 4 70 43 141 228 18 86 200 156 56 22 81 210 141 8 242 10 74 243 97 78 187 0 180 181 146 234 54 183 202 225 209 30 100 82 141 131 78 73 5 43 113 131 28 218 190 197 201 54 88 49 157 176 185 169 152 109 132 21 251 31 120 115 68 235 86 192 201 192 84 46 112 177 202 200 178 87 15 120 119 206 117 71 149 72 9 99 251 68 220 97 215 57 203 14 79 39 142 120 73 17 120 36 228 179 76 186 200 254 197 220 119 195 208 1 226 107 225 18 81 198 98 169 30 153 39 211 79 83 111 94 136 113 57 58 86 147 57 49 71 1 236 21 47 237 72 58 102 52 2 24 135 216 55 192 47 127 195 10 152 15 188 106 165 6 230 193 108 64 68 124 40 224 197 79 179 3 102 192 159 243 95 120 5 222 154 191 221 186 218 243 7 48 94 14 167 128 25 78 150 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader1Contents^  #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 33 73 68 65 84 120 94 117 83 237 118 131 32 12 245 4 41 35 233 166 174 217 58 183 246 253 95 115 129 128 53 160 249 33 38 185 220 124 50 88 241 143 199 199 112 44 183 152 190 238 249 116 89 133 214 255 201 223 123 128 199 216 0 38 230 233 5 0 68 223 82 124 241 111 220 0 30 177 203 225 194 124 173 0 33 136 125 150 119 230 177 0 16 23 115 247 146 143 145 249 79 1 17 81 139 136 153 103 12 225 154 107 159 153 111 222 57 79 37 67 88 16 41 157 111 33 132 89 76 241 174 84 3 173 98 39 73 180 150 114 121 23 136 179 173 73 238 101 51 193 36 136 159 214 111 10 241 115 48 51 32 244 212 84 57 90 245 229 6 175 210 78 7 84 104 112 69 26 6 105 166 202 6 192 51 192 73 8 218 66 244 89 29 169 210 70 4 27 193 142 51 181 221 12 112 69 220 221 208 182 27 210 108 90 161 178 151 182 87 3 164 97 37 210 18 167 254 164 53 160 24 169 142 59 93 44 107 65 218 126 177 67 10 237 237 194 236 6 72 10 16 206 181 95 73 93 84 5 68 196 238 225 12 75 14 168 128 162 180 4 96 142 216 1 214 29 78 18 130 227 39 12 120 230 169 162 155 190 147 127 215 208 13 219 203 127 1 212 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loaderSize	^ 12! !!DrGLoader class methodsFor: 'accessing' stamp: ''!isLoaderRunning 	^ isLoaderRunning ifNil: [isLoaderRunning := false]! !!DrGLoader class methodsFor: 'accessing' stamp: ''!stop	isLoaderRunning ifTrue:[		process terminate.		isLoaderRunning := false.		World restoreDisplay]! !!DrGLoader class methodsFor: 'loader' stamp: ''!decorate: form	|newForm|	newForm := Form extent: form extent + 10 depth: 32.	newForm fillWhite.	form displayOn: newForm at: newForm center - (form extent / 2).	newForm  borderWidth: 2 fillColor: Color veryLightGray.	^ newForm! !!DrGLoader class methodsFor: 'accessing' stamp: ''!start	self isLoaderRunning ifTrue: [self stop].	[DrGeoSystem canWeDisplayLoader ifFalse: [^self]] on: Error do: [].	isLoaderRunning := true.	process :=[[1 to: self loaderSize do: [:i| | form|		form := self at: i.		form displayAt: (Display center - (form extent // 2)).		(Delay forMilliseconds: 100) wait]] repeat] fork.! !!DrGLoader class methodsFor: 'class initialization' stamp: ''!initialize"self initialize"	loader := Array new: self loaderSize.	1 to: self loaderSize do: [:i | |form|		form := self formFromPNG: (self perform: ('loader', i asString, 'Contents') asSymbol).		loader at: i put: (self decorate: form)]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader10Contents^ #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 31 73 68 65 84 120 94 133 83 203 114 195 32 12 212 64 20 5 225 16 147 224 131 147 118 166 255 255 149 69 22 174 49 56 233 94 44 208 234 181 194 208 128 217 195 49 244 222 48 27 53 90 191 227 185 38 32 187 134 80 60 219 7 219 20 145 121 35 204 203 161 75 225 86 130 218 45 80 6 80 2 115 220 197 106 199 94 234 46 4 183 142 226 92 113 68 163 131 72 10 163 76 9 140 69 148 220 17 163 88 88 134 247 115 62 121 228 191 81 114 222 174 43 113 71 83 201 212 12 142 109 72 78 184 19 215 107 209 126 23 7 199 96 21 161 21 78 1 240 245 173 24 59 97 21 255 19 222 148 240 165 196 214 203 233 99 207 224 198 231 121 95 97 47 220 109 74 105 170 47 68 254 77 152 199 43 165 244 122 52 194 49 207 133 50 100 247 100 115 218 75 105 212 200 178 100 151 165 78 74 207 81 172 27 209 201 132 96 214 117 203 130 22 194 125 88 38 64 162 17 208 90 148 77 213 15 102 197 72 132 74 200 79 110 238 159 100 32 202 125 40 193 49 119 63 14 12 116 53 43 161 252 3 59 156 137 68 169 66 56 120 247 63 116 129 141 0 120 80 3 106 194 91 120 107 155 208 95 137 155 13 250 175 184 235 210 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'class initialization' stamp: ''!formFromPNG: anArray	^ PNGReadWriter formFromStream: anArray asByteArray readStream! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader4Contents^ #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 32 73 68 65 84 120 94 117 83 203 114 195 32 12 244 136 168 10 82 236 196 49 153 14 77 123 204 255 255 98 1 97 3 198 222 67 76 208 34 173 94 67 11 49 6 134 99 72 250 69 99 48 29 166 189 221 178 175 9 31 186 239 8 192 12 133 48 17 125 246 46 102 230 66 184 210 216 73 9 46 236 74 248 34 50 189 74 100 22 37 192 72 183 230 173 122 19 102 84 130 33 210 36 158 207 108 152 65 19 97 17 68 65 162 71 252 111 94 206 45 241 224 57 188 141 101 192 44 236 114 13 58 150 183 115 238 189 233 75 10 235 178 140 193 252 186 87 101 138 2 42 124 59 247 243 168 223 8 114 147 248 226 198 203 97 47 10 163 24 64 177 35 132 124 19 166 129 51 118 165 53 127 138 223 141 96 207 8 39 33 166 45 196 137 72 233 7 6 218 222 182 33 33 76 195 92 95 248 70 118 168 82 238 70 123 229 161 212 57 245 115 189 0 47 234 52 199 89 15 169 221 214 138 228 190 196 135 234 193 202 54 48 105 118 113 141 111 109 55 114 58 220 172 59 112 52 180 74 176 93 229 183 177 207 235 49 231 232 253 226 148 143 237 8 190 226 13 200 39 59 12 124 102 89 17 83 105 240 15 76 208 14 94 194 124 25 106 0 0 0 0 73 69 78 68 174 66 96 130] ! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader6Contents^ #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 24 73 68 65 84 120 94 133 83 219 110 195 32 12 69 80 82 217 116 52 153 88 165 116 181 122 153 246 255 191 56 192 52 4 231 178 243 2 196 39 62 190 42 1 68 167 214 193 223 53 162 230 139 180 3 142 115 130 69 16 132 98 169 135 149 46 6 196 74 24 243 99 225 2 222 4 190 75 216 148 0 19 16 135 230 95 142 216 37 221 76 128 119 42 44 20 13 131 230 68 146 11 205 204 20 200 221 152 172 20 35 66 155 202 96 75 242 110 140 47 232 140 49 221 20 159 140 202 61 162 249 126 152 149 73 36 158 236 126 94 116 103 177 41 46 152 135 94 237 69 101 84 131 102 8 130 246 12 171 176 64 120 244 71 198 199 68 128 45 194 134 132 157 36 54 130 60 44 7 166 9 162 11 125 163 169 7 209 192 75 8 215 243 188 74 165 27 85 225 59 132 112 233 106 157 115 63 199 162 98 158 62 138 124 69 202 169 116 157 115 76 237 118 0 206 19 189 210 187 191 134 192 30 192 181 3 243 34 50 217 208 127 174 143 156 189 209 83 237 14 237 145 168 87 187 99 255 67 55 187 187 56 134 232 180 32 52 171 23 232 119 125 133 245 162 239 234 191 245 255 3 169 222 15 73 159 10 166 100 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader7Contents^  #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 22 73 68 65 84 120 94 133 147 235 110 195 32 12 133 17 212 161 152 134 150 201 171 148 174 213 222 255 45 7 216 185 0 65 243 159 224 240 225 203 193 168 198 16 189 58 55 254 175 17 53 47 218 125 135 203 17 0 116 13 32 59 251 7 218 16 17 113 7 150 226 116 33 220 10 240 186 53 200 13 48 128 24 171 179 92 177 207 121 11 224 214 86 156 147 141 168 185 145 28 66 51 153 15 70 17 37 85 132 144 87 32 205 251 37 121 30 112 107 37 197 237 170 202 219 81 31 100 106 26 135 246 72 10 88 137 235 57 105 127 23 39 174 215 108 45 0 108 90 161 88 115 125 96 196 254 7 6 41 244 150 98 80 36 244 3 83 229 8 214 84 126 150 189 186 192 171 181 243 116 84 9 27 97 224 97 173 189 134 93 231 34 251 34 81 167 231 37 37 185 37 228 46 147 206 178 231 235 14 214 134 11 209 156 125 51 91 43 99 225 183 129 49 159 143 81 51 81 201 175 205 111 55 114 5 112 47 122 170 193 208 22 64 61 136 238 234 124 236 25 80 223 244 26 60 28 1 38 162 175 14 40 79 79 0 245 67 230 252 9 175 192 208 224 253 14 245 159 63 14 38 13 186 43 109 220 91 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLoader class methodsFor: 'loader' stamp: ''!loader3Contents^  #[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 3 0 0 0 68 164 138 198 0 0 3 0 80 76 84 69 255 255 255 58 60 139 249 249 251 208 208 226 236 236 243 242 242 246 217 218 232 154 155 195 176 177 208 246 246 249 234 234 242 251 251 252 170 170 204 160 161 199 231 231 240 199 199 221 180 181 210 239 239 244 191 192 217 226 227 237 105 107 166 124 125 177 131 132 182 153 154 194 186 187 214 240 240 245 114 116 172 140 142 187 67 69 144 58 60 139 216 216 231 211 211 228 223 224 235 91 93 158 130 131 181 81 82 152 116 117 173 194 194 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 42 88 37 121 0 0 1 0 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 1 110 23 0 0 1 39 73 68 65 84 120 94 125 146 127 115 194 32 12 134 123 73 105 15 98 153 61 163 119 184 177 121 186 125 255 175 56 32 180 5 170 230 143 86 94 30 243 230 71 187 58 96 154 84 247 60 52 197 167 29 71 155 142 67 123 111 240 187 4 38 62 52 64 143 216 111 192 192 60 181 41 126 16 105 5 46 124 213 45 160 16 79 11 240 193 124 220 87 121 67 4 1 244 149 207 85 107 32 47 196 65 128 35 179 52 113 72 149 146 49 115 66 44 162 6 107 161 103 254 140 231 191 135 247 9 116 198 24 21 10 164 91 158 209 233 210 199 70 188 247 156 61 2 97 234 170 213 61 92 63 182 74 117 76 82 2 191 222 127 141 165 66 202 64 9 12 254 110 155 46 169 62 110 187 32 144 104 128 110 149 77 14 104 238 23 125 5 244 43 224 133 197 94 166 183 53 199 73 64 237 80 91 194 28 22 82 10 174 42 59 76 73 182 209 213 146 131 109 206 105 159 139 0 142 36 105 246 89 126 4 144 72 107 162 188 151 248 71 201 32 95 124 210 33 90 171 197 95 87 149 6 153 4 8 57 221 254 147 132 100 36 128 222 77 62 196 156 12 5 200 135 54 1 84 47 189 3 92 193 117 234 137 71 153 232 77 196 86 170 248 7 162 137 15 60 93 182 179 128 0 0 0 0 73 69 78 68 174 66 96 130]! !!DrGLocus2ptsItem methodsFor: 'printing' stamp: ''!printOn: aStream	self printType: DrGLocusBuilder title on: aStream! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!samples: aNumber 	sampleNumber := aNumber! !!DrGLocus2ptsItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem	^ true! !!DrGLocus2ptsItem methodsFor: 'private' stamp: ''!squareNorm: aPoint 	^ aPoint x * aPoint x + (aPoint y * aPoint y)! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!basicType	^ #locus! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!abscissaOf: aPoint 	| i distance |	distance := self squareNorm: aPoint - (p at: 1).	i := 1.	2 to: sampleNumber do: [:n | 		(self squareNorm: (p at: n) - aPoint)	< distance ifTrue: 			[distance := self squareNorm: aPoint - (p at: n).			i := n]].	^ (i / sampleNumber) asFloat! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!closestPointTo: aPoint 	| distance d m |	m := p at: 1.	distance := self squareNorm: aPoint - m.	2 to: sampleNumber do: [:n | 		d := self squareNorm: (p at: n) - aPoint.		d < distance ifTrue: 			[m := p at: n.			distance := d]].	^ m! !!DrGLocus2ptsItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem	^ true! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!pointAt: anAbscissa 	| m |	sampleNumber ifNil: [^0@0].	m := (anAbscissa * sampleNumber) rounded.	m = 0 ifTrue: [m := 1].	^ p at: m! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!samples	^ sampleNumber! !!DrGLocus2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'2pts'! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!costumeClass 	^ DrGLocusCostume ! !!DrGLocus2ptsItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isIntersectableItem	^ false! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!points	^ p! !!DrGLocus2ptsItem methodsFor: 'updating' stamp: ''!update! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!points: aCollection 	p := aCollection! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!constrainedPoint	^ parents second! !!DrGLocus2ptsItem methodsFor: 'accessing' stamp: ''!freePoint	^ parents first! !!DrGLocus2ptsItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This locus %1' translated! !!DrGLocus2ptsItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isLocusItem	^ true! !!DrGLocusBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	freePoint := constrainedPoint := nil! !!DrGLocusBuilder methodsFor: 'accessing' stamp: ''!arguments	^ {freePoint. constrainedPoint}! !!DrGLocusBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint 	super addItem: aMathItemCollection at: aPoint.	aMathItemCollection first isPointItemOnCurve		ifTrue: [freePoint				ifNil: [freePoint := aMathItemCollection first.					^ self].			constrainedPoint				ifNil: [constrainedPoint := aMathItemCollection first]]		ifFalse: [constrainedPoint				ifNil: [constrainedPoint := aMathItemCollection first.					^ self].			freePoint				ifNil: [freePoint := aMathItemCollection first]]! !!DrGLocusBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ freePoint notNil		and: [constrainedPoint notNil]! !!DrGLocusBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty		and: [(aMathItemCollection first isPointItemOnCurve				and: [aMathItemCollection first ~= freePoint				and: [aMathItemCollection first ~= constrainedPoint]])			or: [aMathItemCollection first isConstrainedPointItem 				and: [aMathItemCollection first ~= freePoint				and: [aMathItemCollection first ~= constrainedPoint]]]]! !!DrGLocusBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^ DrGLocus2ptsItem! !!DrGLocusBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Locus defined by a free point on a curve and a relative point.' translated! !!DrGLocusBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Locus' translated.! !!DrGLocusCostume methodsFor: 'as yet unclassified' stamp: ''!exist: aBoolean	super exist: aBoolean.	exist ifTrue: [self updateToVisible] ifFalse: [self updateToInvisible]	! !!DrGLocusCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGLocusMorph new.	morph color: Color red.	morph borderColor: Color orange.	morph width: 2! !!DrGLocusCostume methodsFor: 'updating' stamp: ''!redraw	morph free: mathItem freePoint constrained: mathItem constrainedPoint.	super redraw ifFalse: [^ self].! !!DrGLocusCostume methodsFor: 'testing' stamp: ''!basicType	^ #locus! !!DrGLocusCostume methodsFor: 'style' stamp: ''!styleClass	^ DrGLocusCostumeStyle! !!DrGLocusCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current locusColor.	self lineStyle: DrGStylePreference current locusStyle.	self thickness: DrGStylePreference current locusThickness! !!DrGLocusHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGLocusHomothetyItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [| locusPoints center factor|		center := parents second point.		factor := parents third valueItem.		locusPoints := parents first points.		sampleNumber := parents first samples.		p := Array new: sampleNumber.		1 to: sampleNumber do: [:i |			p at: i put: center + (factor * ((locusPoints at: i) - center))]]! !!DrGLocusMorph commentStamp: ''!- list : a linked list of DrGLocusSample- minAbscissaDelta : the minimum abscissa delta between two samples- maxAbscissaDelta : the maximum abscissa delta between two samples- maxScreenDelta : the maximum delta between two samples in the screen!!DrGLocusMorph methodsFor: 'accessing' stamp: ''!free: freeItem constrained: constrainedItem 	| link0 link1 x0 validSamples|	x0 := freeItem abscissa.	worldBound := drawable worldBound.	free := freeItem.	constrained := constrainedItem.	freeIndex := factory indexOf: free.	constrainedIndex := factory indexOf: constrained.	samples := LinkedList new.	link0 := samples add: (self sample: minAbscissaDelta ).	link1 := samples add: (self sample: 1 - minAbscissaDelta) afterLink: link0.	self samplingFrom: link0 to: link1.	validSamples := self selectValidSamples.	free abscissa: x0.	factory updateAllMathItemsButLocusFrom: freeIndex to: constrainedIndex.	validSamples ifEmpty: [		costume exist: false.		^self].	costume mathItem		points: (validSamples	collect: [:s | s pointWorld]);		samples: validSamples size.	costume exist: true.	vertices := validSamples	collect: [:s | s pointScreen].	self computeBounds! !!DrGLocusMorph methodsFor: 'accessing' stamp: ''!costume:  aCostume	super costume: aCostume.	drawable := aCostume drawable.	factory := aCostume domain factory.! !!DrGLocusMorph methodsFor: 'drawing' stamp: ''!drawBorderOn: aCanvas usingEnds: anArray 	"Display my border on the canvas."	"NOTE: Much of this code is also copied in 	drawDashedBorderOn: 	(should be factored)"	| bigClipRect style |	borderDashSpec		ifNotNil: [^ self drawDashedBorderOn: aCanvas usingEnds: anArray].	style := self borderStyle.	bigClipRect := aCanvas clipRect expandBy: self borderWidth + 1 // 2.	self		lineSegmentsDo: [:p1 :p2 | 			| p1i p2i |			p1i := p1 asIntegerPoint.			p2i := p2 asIntegerPoint.			self hasArrows				ifTrue: ["Shorten line ends so as not to interfere with tip 					of arrow."					((arrows == #back								or: ["Shorten line ends so as not to									interfere with tip 									of arrow."									arrows == #both									"Shorten line ends so as not to									interfere with tip 									of arrow."])							and: [p1 = vertices first])						ifTrue: [p1i := anArray first asIntegerPoint].					((arrows == #forward								or: [arrows == #both])							and: [p2 = vertices last])						ifTrue: [p2i := anArray last asIntegerPoint]].			(closed					or: ["bigClipRect intersects: (p1i rect: p2i) 						optimized:"						((p1i min: p2i)							max: bigClipRect origin)							<= ((p1i max: p2i)									min: bigClipRect corner)						"bigClipRect intersects: (p1i rect: p2i) 						optimized:"])				ifTrue: [(p1i squaredDistanceTo: p2i) < 900 ifTrue:					[style						drawLineFrom: p1i						to: p2i						on: aCanvas]]]! !!DrGLocusMorph methodsFor: 'sampling' stamp: ''!sample: abscissa 	| sample |	sample := DrGLocusSample new x: abscissa.	free abscissa: abscissa.	factory updateAllMathItemsButLocusFrom: freeIndex to: constrainedIndex.	(sample isValid: constrained exist) ifTrue: 		[sample pointWorld: constrained point;		pointScreen: (drawable worldToMorph: constrained point);		offScreen: (worldBound containsPoint: constrained point) not].	^ sample! !!DrGLocusMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas 	| polyPath points prevPoint |		points := self getVertices.	polyPath := aCanvas createPath: [ :builder | 		builder 	absolute.		prevPoint := points first.		builder moveTo: prevPoint .		points allButFirstDo: [ :pt | 			(prevPoint squaredDistanceTo: pt) < 900				ifTrue: [builder lineTo: pt]				ifFalse: [ builder moveTo: pt].			prevPoint := pt ].					closed ifTrue: [ builder lineTo: points first ]	].	aCanvas setShape: polyPath.	closed	ifTrue: [ aCanvas setPaint: self fillStyle. aCanvas draw. ].			(aCanvas setStrokePaint: self borderStyle color) 		width: self borderWidth;		dashes: self dashedBorder offset: 0.		aCanvas draw.	self drawArrowsOnAthensCanvas: aCanvas! !!DrGLocusMorph methodsFor: 'initialization' stamp: ''!initialize	super initialize.	minAbscissaDelta := 0.00001.	maxScreenDelta := 64.	maxAbscissaDelta := 0.1! !!DrGLocusMorph methodsFor: 'sampling' stamp: ''!samplingFrom: link1 to: link2 	| sample1 sample2 sample link |	sample1 := link1 value.	sample2 := link2 value.	(sample2 x - sample1 x > minAbscissaDelta		and: [(sample1 isNotValid or: [sample2 isNotValid]) 			or: [sample2 x - sample1 x > maxAbscissaDelta				or: [(sample1 pointScreen squaredDistanceTo: sample2 pointScreen) > maxScreenDelta]]])		ifTrue: [sample := self sample: sample1 x + sample2 x / 2.			link := samples add: sample afterLink: link1.			self samplingFrom: link1 to: link.			self samplingFrom: link to: link2.			]! !!DrGLocusMorph methodsFor: 'sampling' stamp: ''!selectValidSamples	| validSamples prevLink|	validSamples := OrderedCollection new.	samples		linksDo: [:link | link value isValidAndOnScreen			ifTrue: [validSamples add: link value]			ifFalse: ["unvalid or offscreen, in case it is just offscreen check if next/prev sample is on-screen, so we need this sample for the drawing"				link value isValid ifTrue:					[link nextLink					ifNotNil: [link nextLink value isValidAndOnScreen 						ifTrue: [validSamples add: link value]						ifFalse: [prevLink ifNotNil: 							[prevLink value isValidAndOnScreen ifTrue: [validSamples add: link value]]]]]].				prevLink := link].	^ validSamples ! !!DrGLocusReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGLocusReflexionItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [| locusPoints axe|		axe := parents second.		locusPoints := parents first points.		sampleNumber := parents first samples.		p := Array new: sampleNumber.		1 to: sampleNumber do: [:i |			p at: i put: ((locusPoints at: i) reflexionBy: axe origin direction: axe direction)]]! !!DrGLocusRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGLocusRotationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [| locusPoints center angle|		center := parents second point.		angle := parents third valueItem.		locusPoints := parents first points.		sampleNumber := parents first samples.		p := Array new: sampleNumber.		1 to: sampleNumber do: [:i |			p at: i put: ((locusPoints at: i) rotateBy: angle about: center)]]! !!DrGLocusSample commentStamp: ''!I am sample of a locus with: - the curvilinear abscissa of the free point- my screen coordinates- my world coordinates- offScreen is sample offScreen (the display device)- exist does this sample exist for  its abscissa !!DrGLocusSample methodsFor: 'testing' stamp: ''!offScreen 	^ offScreen ! !!DrGLocusSample methodsFor: 'testing' stamp: ''!isValidAndOnScreen	^ exist and: [offScreen not]! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!offScreen: aBoolean	offScreen  := aBoolean ! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!pointWorld: anObject	pointWorld := anObject! !!DrGLocusSample methodsFor: 'testing' stamp: ''!isNotValid	^ exist not! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!isValid: aBoolean	^ exist := aBoolean ! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!pointWorld	^ pointWorld! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!x: anObject	abscissa := anObject! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!pointScreen: anObject	pointScreen := anObject! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!x	^ abscissa! !!DrGLocusSample methodsFor: 'accessing' stamp: ''!pointScreen	^ pointScreen! !!DrGLocusSample methodsFor: 'testing' stamp: ''!isValid	^ exist! !!DrGLocusSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGLocusSymmetryItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [| locusPoints center|		center := parents second point.		locusPoints := parents first points.		sampleNumber := parents first samples.		p := Array new: sampleNumber.		1 to: sampleNumber do: [:i |			p at: i put: 2 * center - (locusPoints at: i)]]! !!DrGLocusTransformedCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGLocusMorph new! !!DrGLocusTransformedCostume methodsFor: 'updating' stamp: ''!redraw	| vertices |	super redraw ifFalse: [^ self].	vertices := Array new: mathItem samples.	mathItem points doWithIndex: [:point :i| 		vertices at: i put: (drawable worldToMorph: point)].	morph setVertices: vertices! !!DrGLocusTransformedCostume methodsFor: 'testing' stamp: ''!basicType	^ #locus! !!DrGLocusTransformedCostume methodsFor: 'style' stamp: ''!styleClass	^ DrGLocusCostumeStyle! !!DrGLocusTranslationItem methodsFor: 'accessing' stamp: ''!samples: anInteger	self shouldNotImplement ! !!DrGLocusTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #Translation! !!DrGLocusTranslationItem methodsFor: 'accessing' stamp: ''!costumeClass	^ DrGLocusTransformedCostume ! !!DrGLocusTranslationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [| locusPoints direction|		direction := parents second direction.		locusPoints := parents first points.		sampleNumber := parents first samples.		p := Array new: sampleNumber.		1 to: sampleNumber do: [:i |			p at: i put: (locusPoints at: i) + direction]]! !!DrGLocusTranslationItem methodsFor: 'accessing' stamp: ''!points: aCollection	self shouldNotImplement ! !!DrGLocusTranslationItem methodsFor: 'accessing' stamp: ''!constrainedPoint	self shouldNotImplement ! !!DrGLocusTranslationItem methodsFor: 'accessing' stamp: ''!freePoint	self shouldNotImplement ! !!DrGMacro commentStamp: ''!A DrGMacro is a macro-construction definitionInstance Variables	nodes:		<Object>nodes	- xxxxx!!DrGMacro methodsFor: 'accessing' stamp: ''!hiddenNodes	^ nodes select: [:node | node isHiddenNode]! !!DrGMacro methodsFor: 'accessing' stamp: ''!detectId: anId	^ nodes detect: [:node | node isId: anId]! !!DrGMacro methodsFor: 'initialize-release' stamp: ''!from: inputs to: outputs in: domain 	"build the tree nodes"	| items |	items := self 		extractItemsFrom: inputs		to: outputs		in: domain.	nodes := items collect: 		[ :item | 		DrGMacroNode 			on: item			from: inputs			to: outputs ].	self updateParentNodes.	self cleanNodes! !!DrGMacro methodsFor: 'accessing' stamp: ''!description: anObject	description := anObject. 	self saved: false.! !!DrGMacro methodsFor: 'accessing' stamp: ''!outputNodes	^ nodes select: [:node | node isOutputNode]! !!DrGMacro methodsFor: 'xml writting' stamp: ''!writeAsXmlTo: aNode	| node |	self saved: true.	self cleanNodes.	node := XMLElement named: 'macro' attributes: Dictionary new.	node attributeAt: #name put: title asString.	node addElement: ((XMLElement named: #description) addContent: (XMLStringNode string: description asString)).	node 		addElement: self writeInputAsXml;		addElement: self writeOutputAsXml.	aNode addElement: node.	^node		! !!DrGMacro methodsFor: 'comparing' stamp: ''!hash	^nodes hash! !!DrGMacro methodsFor: 'private' stamp: ''!cleanNodes	nodes do: [ :node | 		node itemTemplate: 			((node itemTemplate copy) 				parents: nil;				yourself).		node itemTemplate releaseActionMap.]! !!DrGMacro methodsFor: 'accessing' stamp: ''!constructedNodes	^ nodes select: [:node | node isInputNode not]! !!DrGMacro methodsFor: 'accessing' stamp: ''!title	^ title! !!DrGMacro methodsFor: 'accessing' stamp: ''!saved: bool	saved := bool.! !!DrGMacro methodsFor: 'private' stamp: ''!extractItemsFrom: inputs to: outputs in: domain 	"extract the items to define the whole macro structure"	| items parents tmp |	items := (Set		withAll: inputs)		addAll: outputs;		yourself.	parents := outputs.	[ (inputs includesAllOf: parents) | parents isEmpty ] whileFalse: 		[ tmp := parents.		parents := Set new.		tmp do: [ :item | item parents ifNotNil: [ parents addAll: item parents ] ].		items addAll: parents ].	^ domain factory ordered: items! !!DrGMacro methodsFor: 'comparing' stamp: ''!= aMacro	^ nodes size = aMacro nodes size 		and: 			[nodes with: aMacro nodes do: [:n1 :n2 |				n1 = n2 ifFalse: [^false]].			true]! !!DrGMacro methodsFor: 'accessing' stamp: ''!inputBasicType"The basic type of the input parameters"	^self inputNodes collect: [:n | n itemTemplate basicType]! !!DrGMacro methodsFor: 'accessing' stamp: ''!addNode: aNode	nodes add: aNode! !!DrGMacro methodsFor: 'xml writting' stamp: ''!writeInputAsXml	| element |	element := XMLElement named: 'input'.	self inputNodes do: [:aMacroNode | aMacroNode writeAsXmlTo: element].	^ element ! !!DrGMacro methodsFor: 'accessing' stamp: ''!nodes	^nodes! !!DrGMacro methodsFor: 'accessing' stamp: ''!allButInputNodes	^ nodes reject: [:node | node isInputNode]! !!DrGMacro methodsFor: 'private' stamp: ''!updateParentNodes	nodes do: 		[ :node | 		node isInputNode | node itemTemplate parents isNil ifFalse: 			[ node parentNodes: (node itemTemplate parents collect: [ :item | self itemToNode: item ]) ] ]! !!DrGMacro methodsFor: 'as yet unclassified' stamp: ''!execute: inputs in: app	self cleanNodes.	self inputNodes 		with: inputs		do: [ :node :item | node itemTemplate: item ].	self allButInputNodes do: [:node | 		node itemTemplate 			parents: (node parentNodes collect: [:aNode | aNode itemTemplate])			in: app.		node itemTemplate update; rehash.].	^ self constructedNodes collect: [ :n | n itemTemplate ]! !!DrGMacro methodsFor: 'accessing' stamp: ''!inputNodes	^ nodes select: [:node | node isInputNode]! !!DrGMacro methodsFor: 'initialize-release' stamp: ''!initialize 	nodes := OrderedCollection new.	saved := false! !!DrGMacro methodsFor: 'testing' stamp: ''!isSaved	^ saved! !!DrGMacro methodsFor: 'accessing' stamp: ''!description	^ description! !!DrGMacro methodsFor: 'accessing' stamp: ''!title: anObject	title := anObject! !!DrGMacro methodsFor: 'private' stamp: ''!itemToNode: item	^ nodes detect: [:node |node itemTemplate = item]! !!DrGMacro methodsFor: 'xml writting' stamp: ''!writeOutputAsXml	| element |	element := XMLElement named: 'output'.	self allButInputNodes do: [:aMacroNode | aMacroNode writeAsXmlTo: element].	^ element ! !!DrGMacro class methodsFor: 'testing' stamp: ''!isValidWith: inputs and: outputs 	"check the validity of a macro defined with these input and output items"	| parents |	parents := Set new.	outputs do: [ :item | 		(inputs includes: item) 			ifTrue: 				["item is an input, we don't go to parents, we keep it"				parents add: item]			ifFalse: 				["item isn't an input, we go to its parents"				item parents ifNotNil: [ parents addAll: item parents]]].	parents isEmpty ifTrue: [ ^ false ].	(inputs includesAllOf: parents) ifTrue: [ ^ true ].	^ self 		isValidWith: inputs		and: parents! !!DrGMacroBuildTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint	^self pointCostumesFirstAt: aPoint ! !!DrGMacroBuildTool methodsFor: 'accessing' stamp: ''!selectCostumesFrom: aMathItemCollection 	presenter ifNil: [^self].	self stopBlinking.	selectedCostumes := self app costumesOf: aMathItemCollection.	self startBlinking! !!DrGMacroBuildTool methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self switchState: DrGMacroToolStateNeutral ! !!DrGMacroBuildTool methodsFor: 'updating' stamp: ''!cancel	"the builder informs us the user wants to cancel the macro building process"	presenter move.! !!DrGMacroBuildTool methodsFor: 'accessing' stamp: ''!selectInputCostume	self selectCostumesFrom: builder input! !!DrGMacroBuildTool methodsFor: 'initialize-release' stamp: ''!registerDependant: anObject	builder when: #changedState send: #switchState: to: self.	builder when: #cancel send: #cancel to: self.	builder when: #readyToBuild send: #readyToBuildMacro to: anObject! !!DrGMacroBuildTool methodsFor: 'accessing' stamp: ''!selectOutputCostume	self selectCostumesFrom: builder output! !!DrGMacroBuildTool methodsFor: 'accessing' stamp: ''!selectNoCostume	self selectCostumesFrom: OrderedCollection new! !!DrGMacroBuildToolStateInput commentStamp: ''!When user selects input page, blink the cosumes related to this state. In this state the user can select items as input parameters for the macro. He can also unselect items.!!DrGMacroBuildToolStateInput methodsFor: 'accessing' stamp: ''!context: aContext	super context: aContext.	self context selectInputCostume ! !!DrGMacroBuildToolStateInput methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection 	self context builder		add: (aCostumeCollection collect: [ :c | c mathItem ])				at: (self area gridWorldPoint: self context last);		changed: #inputName.	self context selectInputCostume! !!DrGMacroBuildToolStateOutput commentStamp: ''!When user selects  output page, blink the cosumes related to this state. In this state the user can select items as output parameters for the macro. He can also unselect items.!!DrGMacroBuildToolStateOutput methodsFor: 'handling' stamp: ''!context: aContext	super context: aContext.	self context selectOutputCostume ! !!DrGMacroBuildToolStateOutput methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection 	self context builder		add: (aCostumeCollection collect: [ :c | c mathItem ])			at: (self area gridWorldPoint: self context last);		changed: #outputName.	self context selectOutputCostume! !!DrGMacroBuilder commentStamp: ''!A DrGMacroBuilder is builder to construct a macro-construction.The builder needs an appropriate list of: - input & output mathItems selected in the drawing area - a macro-construction name & descriptionThe builder checks the validity of the macro-construction, ie it checks if the outputsitems are deductible from the input itemsInstance Variables!!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!itemsName: aMathItemCollection	^aMathItemCollection collect: [:mathItem | mathItem descriptiveName]! !!DrGMacroBuilder methodsFor: 'testing' stamp: ''!isLogicValid	"check wheter a macro can be deduced from the input/output item collections"	^ DrGMacro 		isValidWith: input		and: output! !!DrGMacroBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	input := OrderedCollection new.	output := OrderedCollection new.	title := self defaultTitle.	description := self defaultDescription.	self changed: #inputName.	self changed: #ouputName.	self changed: #title.	self changed: #description! !!DrGMacroBuilder methodsFor: 'initialize-release' stamp: ''!removeEvents	wizard removeActionsWithReceiver: self! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!inputName	^ self itemsName: input! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!outputName	^ self itemsName: output! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!input	^input! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!description: string	description := string asString! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!output	^output ! !!DrGMacroBuilder methodsFor: 'initialize-release' stamp: ''!registerEvents	wizard when: #page send: #page: to: self.	wizard when: #apply send: #apply to: self.	wizard when: #cancel send: #cancel to: self.! !!DrGMacroBuilder methodsFor: 'initialize-release' stamp: ''!release	self removeEvents.	wizard delete.	wizard := nil! !!DrGMacroBuilder methodsFor: 'building' stamp: ''!buildItem	self shouldNotImplement! !!DrGMacroBuilder methodsFor: 'testing' stamp: ''!readyToBuild"Only when the user clicks on the wizard 'apply' button,the system checks wheter the macro can be instiated"	^false! !!DrGMacroBuilder methodsFor: 'testing' stamp: ''!isInputMode	^ wizard isInputPage! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!title	^title! !!DrGMacroBuilder methodsFor: 'testing' stamp: ''!isOutputMode	^ wizard isOutputPage! !!DrGMacroBuilder methodsFor: 'testing' stamp: ''!isDescriptionValid	^ ((title = self defaultTitle) | (description = self defaultDescription)) not! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!arguments	self shouldNotImplement! !!DrGMacroBuilder methodsFor: 'building' stamp: ''!buildItem: domain 	| macro |	macro := DrGMacro new		title: title; description: description.	macro 	from: input to: output 	in: domain.	^ macro! !!DrGMacroBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	self isInputMode ifTrue: [self addToggleItem: aMathItemCollection in: input].	self isOutputMode ifTrue: [self addToggleItem: aMathItemCollection in: output]! !!DrGMacroBuilder methodsFor: 'callback' stamp: ''!apply	"the user clicked the apply button, do we have all the needed information	to instantiate a new macro construction?"	DrGeoSystem showVirtualKeyboard: false.	self isMacroValid ifTrue: 		[ "we can instantiate a macro"		self triggerEvent: #readyToBuild.		^self].	self isLogicValid ifFalse: 		[self inform: 'Input and output items don''t match' translated].	self isDescriptionValid ifFalse: 		[self inform: 'Please, enter a proper title and description' translated]! !!DrGMacroBuilder methodsFor: 'constant' stamp: ''!defaultDescription	^'Write down your description there.' asText! !!DrGMacroBuilder methodsFor: 'callback' stamp: ''!page: integer 	"we receive notification from the wizard the user change the wizard	current page"	| newState |	(integer = 1 or: [ integer = 4 ]) ifTrue: [ newState := DrGMacroToolStateNeutral ].	integer = 2 ifTrue: [ newState := DrGMacroBuildToolStateInput ].	integer = 3 ifTrue: [ newState := DrGMacroBuildToolStateOutput ].	integer = 4 ifTrue: [DrGeoSystem showVirtualKeyboard: true].	self 		triggerEvent: #changedState		with: newState! !!DrGMacroBuilder methodsFor: 'initialize-release' stamp: ''!initialize	self reset.	wizard := (DrGWizardMacroBuild builder: self) openInWorld.	wizard position: 0@0.	self registerEvents ! !!DrGMacroBuilder methodsFor: 'callback' stamp: ''!cancel	"the user withdrawn the macro-construction creation"	DrGeoSystem showVirtualKeyboard: false.	self triggerEvent: #cancel! !!DrGMacroBuilder methodsFor: 'building' stamp: ''!getItem	self shouldNotImplement! !!DrGMacroBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty and: 		[ self isInputMode &  (output includes: aMathItemCollection first) not or: [ self isOutputMode & (input includes: aMathItemCollection first) not ] ]! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!description	^description ! !!DrGMacroBuilder methodsFor: 'testing' stamp: ''!isMacroValid 	^self isLogicValid & self isDescriptionValid ! !!DrGMacroBuilder methodsFor: 'accessing' stamp: ''!title: string	title := string! !!DrGMacroBuilder methodsFor: 'constant' stamp: ''!defaultTitle	^'Macro name' asText! !!DrGMacroBuilder methodsFor: 'building' stamp: ''!getItem: domain	self isMacroValid ifTrue:		[^self buildItem: domain].	^nil! !!DrGMacroBuilder methodsFor: 'constant' stamp: ''!mathItemClass	self shouldNotImplement! !!DrGMacroBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Construct a macro-construction with input and output items.' translated! !!DrGMacroBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Build macro' translated.! !!DrGMacroFactory commentStamp: ''!DrGMacroFactory is a unique factory to hold macro construction definition.Class Instance Variables:	uniqueInstance	is the unique macro factory instance!!DrGMacroFactory methodsFor: 'accessing' stamp: ''!addUnique: aMacro	^ (self findInPool: aMacro) 		ifNil: [self add: aMacro].! !!DrGMacroFactory methodsFor: 'accessing' stamp: ''!titles	^ self pool collect: [:m | m title]! !!DrGMacroFactory class methodsFor: 'instance creation' stamp: ''!new	^ uniqueInstance ifNil: [uniqueInstance := super new]! !!DrGMacroFactory class methodsFor: 'as yet unclassified' stamp: ''!purge	"self purge"	self new purge! !!DrGMacroHiddenNode methodsFor: 'accessing' stamp: ''!basicType	^#hiddenMacroNode! !!DrGMacroHiddenNode methodsFor: 'testing' stamp: ''!isHiddenNode	^true! !!DrGMacroHiddenNode methodsFor: 'xml writting' stamp: ''!writeAsXmlTo: aNode	| element statusElement|	statusElement := self statusElement.	aNode addElement: statusElement.	itemTemplate parents: (parentNodes collect: [:each | each itemTemplate]).	element := itemTemplate writeAsXmlTo: statusElement.	^ statusElement ! !!DrGMacroHiddenNode methodsFor: 'initialize-release' stamp: ''!initialize 	super initialize.	parentNodes := OrderedCollection new.! !!DrGMacroHiddenNode methodsFor: 'accessing' stamp: ''!parentNodes: anObject	parentNodes := anObject! !!DrGMacroHiddenNode methodsFor: 'accessing' stamp: ''!parentNodes	^ parentNodes! !!DrGMacroHiddenNode methodsFor: 'xml writting' stamp: ''!statusElement	^ XMLElement named: 'hidden'.! !!DrGMacroHiddenNode methodsFor: 'comparing' stamp: ''!hash	^(super hash) bitXor: parentNodes hash! !!DrGMacroHiddenNode methodsFor: 'comparing' stamp: ''!= aNode	^ super = aNode and:		[parentNodes = aNode parentNodes]! !!DrGMacroInputNode commentStamp: ''!A DrGMacroNode is a node in a macro-construction. It represents an abstracted math item in the macro-construction tree.Instance Variables!!DrGMacroInputNode methodsFor: 'accessing' stamp: ''!basicType	^#inputMacroNode! !!DrGMacroInputNode methodsFor: 'testing' stamp: ''!isInputNode	^true! !!DrGMacroInputNode methodsFor: 'comparing' stamp: ''!hash	^ itemTemplate basicType hash bitXor: self basicType hash! !!DrGMacroInputNode methodsFor: 'comparing' stamp: ''!= aNode"this is what we expect for input item of the macro"	^ self basicType = aNode basicType 		and: [itemTemplate basicType = aNode itemTemplate basicType]		! !!DrGMacroMathItem commentStamp: ''!A class to represent input math item template when reloading from a XML representation.!!DrGMacroMathItem methodsFor: 'accessing' stamp: ''!id: aSymbol	id := aSymbol ! !!DrGMacroMathItem methodsFor: 'accessing' stamp: ''!basicType: symbol	basicType := symbol ! !!DrGMacroMathItem methodsFor: 'accessing' stamp: ''!basicType 	^ basicType ! !!DrGMacroMathItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	"return the newly created element"	| node |	node :=  XMLElement named: self basicType attributes: Dictionary new.	node attributeAt: #type put: 'inputMacroMathItem';		attributeAt: #id put: self id.	aNode addElement: node.	^node! !!DrGMacroMathItem methodsFor: 'accessing' stamp: ''!parents: object! !!DrGMacroMathItem methodsFor: 'accessing' stamp: ''!id 	^ id! !!DrGMacroMathItem methodsFor: 'accessing' stamp: ''!parents	^ #()! !!DrGMacroNode methodsFor: 'accessing' stamp: ''!itemTemplate	^itemTemplate! !!DrGMacroNode methodsFor: 'accessing' stamp: ''!basicType	^#macroNode! !!DrGMacroNode methodsFor: 'testing' stamp: ''!isHiddenNode	^false! !!DrGMacroNode methodsFor: 'testing' stamp: ''!isInputNode	^false! !!DrGMacroNode methodsFor: 'xml writting' stamp: ''!writeAsXmlTo: aNode	^ itemTemplate writeAsXmlTo: aNode! !!DrGMacroNode methodsFor: 'accessing' stamp: ''!itemTemplate: anItem	itemTemplate := anItem! !!DrGMacroNode methodsFor: 'testing' stamp: ''!isId: anID	^ itemTemplate id = anID ! !!DrGMacroNode methodsFor: 'comparing' stamp: ''!hash| hash |	hash := itemTemplate basicType hash bitXor: 		(itemTemplate nodeType hash bitXor: self basicType hash).	itemTemplate isScriptItem ifTrue: [hash := hash bitXor: itemTemplate script hash].	^ hash! !!DrGMacroNode methodsFor: 'testing' stamp: ''!isOutputNode	^false! !!DrGMacroNode methodsFor: 'comparing' stamp: ''!= aNode"This is what we expect for input item of the macro.Handle carrefully when this is a script node"| answer |	answer := self basicType = aNode basicType 		and: [itemTemplate basicType = aNode itemTemplate basicType			and: [itemTemplate  nodeType = aNode itemTemplate nodeType]].	^ answer & itemTemplate isScriptItem 		ifTrue: [itemTemplate script == aNode itemTemplate script]		ifFalse: [false]		! !!DrGMacroNode class methodsFor: 'as yet unclassified' stamp: ''!on: item from: inputs to: outputs"return the appropriate nodes depending on the item is an input, output or intermediate item"	| class |	class := DrGMacroHiddenNode.	(inputs includes: item) ifTrue: [class := DrGMacroInputNode].	(outputs includes: item) ifTrue: [class := DrGMacroOutputNode].	^ class new itemTemplate: item! !!DrGMacroOutputNode methodsFor: 'accessing' stamp: ''!basicType	^#outputMacroNode! !!DrGMacroOutputNode methodsFor: 'testing' stamp: ''!isHiddenNode	^false! !!DrGMacroOutputNode methodsFor: 'xml writting' stamp: ''!statusElement	^ XMLElement named: 'final'.! !!DrGMacroOutputNode methodsFor: 'testing' stamp: ''!isOutputNode	^true! !!DrGMacroPlayTool methodsFor: 'accessing' stamp: ''!presenter: aPresenter	super presenter: aPresenter.	self app notInteractive: true.! !!DrGMacroPlayTool methodsFor: 'initialize-release' stamp: ''!release	super release.	self app notInteractive: false! !!DrGMacroPlayTool methodsFor: 'updating' stamp: ''!changedMacro" the builder inform us the user selected another macro-construction,do some cleaning"	self selectNoCostume! !!DrGMacroPlayTool methodsFor: 'initialize-release' stamp: ''!registerDependant: anObject	builder when: #changedState send: #switchState: to: self.	builder when: #cancel send: #cancel to: self.	builder when: #readyToBuild send: #readyToPlayMacro to: anObject.	builder when: #changedMacro send: #changedMacro to: self! !!DrGMacroPlayToolStateSelect methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection 	self context builder 		add: (aCostumeCollection collect: [ :c | c mathItem ])		at: (self area gridWorldPoint: self context last).	self context selectInputCostume! !!DrGMacroPlayer commentStamp: ''!A DrGMacroPlayer is a builder used to play a macro-construction against a user provided list of input items.It chekcs the validity of the input items against the macro-construction definition.The input parameters type must be user selected in the same other as they appear in the macri inputNodes definition.Instance Variables!!DrGMacroPlayer methodsFor: 'updating' stamp: ''!reset	super reset.	input := OrderedCollection new.	selectedMacro := nil.	self changed: #description.	wizard changed: #selectedMacro! !!DrGMacroPlayer methodsFor: 'initialize-release' stamp: ''!removeEvents	wizard removeActionsWithReceiver: self! !!DrGMacroPlayer methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	self addToggleItem: aMathItemCollection in: input! !!DrGMacroPlayer methodsFor: 'accessing' stamp: ''!input	^input! !!DrGMacroPlayer methodsFor: 'accessing' stamp: ''!description: text 	selectedMacro ifNotNil: [selectedMacro description: text asString]! !!DrGMacroPlayer methodsFor: 'callback' stamp: ''!page: integer 	"we receive notification from the wizard the user change the wizard	current page"	| newState |	integer = 1 		ifTrue: [ newState := DrGMacroToolStateNeutral ]		ifFalse: [ newState := DrGMacroPlayToolStateSelect].	self 		triggerEvent: #changedState		with: newState! !!DrGMacroPlayer methodsFor: 'initialize-release' stamp: ''!registerEvents	wizard when: #page send: #page: to: self.	wizard when: #cancel send: #cancel to: self.! !!DrGMacroPlayer methodsFor: 'initialize-release' stamp: ''!initialize	wizard := (DrGWizardMacroPlay builder: self) openInWorld.	wizard position: 0@0.	input := OrderedCollection new.	self registerEvents! !!DrGMacroPlayer methodsFor: 'initialize-release' stamp: ''!release	self removeEvents.	wizard delete.	wizard := nil! !!DrGMacroPlayer methodsFor: 'building' stamp: ''!buildItem	^selectedMacro execute: input in: app.! !!DrGMacroPlayer methodsFor: 'accessing' stamp: ''!selectedMacro	^selectedMacro ! !!DrGMacroPlayer methodsFor: 'callback' stamp: ''!cancel	self triggerEvent: #cancel! !!DrGMacroPlayer methodsFor: 'testing' stamp: ''!readyToBuild	^ self inputBasicType = selectedMacro inputBasicType! !!DrGMacroPlayer methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	selectedMacro isNil ifTrue: [^false].	^aMathItemCollection notEmpty and: 		[(selectedMacro inputBasicType at: input size + 1 ) == aMathItemCollection first basicType]! !!DrGMacroPlayer methodsFor: 'accessing' stamp: ''!description	^ selectedMacro ifNotNil: [selectedMacro description] ifNil: [^nil]! !!DrGMacroPlayer methodsFor: 'accessing' stamp: ''!constructedNodes	^ selectedMacro constructedNodes ! !!DrGMacroPlayer methodsFor: 'accessing' stamp: ''!selectedMacro: aMacro	"Some cleaning are needed"	selectedMacro := aMacro.	input := OrderedCollection new.	self triggerEvent: #changedMacro.! !!DrGMacroPlayer methodsFor: 'accessing' stamp: ''!inputBasicType	^input collect: [:i | i basicType]! !!DrGMacroPlayer class methodsFor: 'documentation' stamp: ''!description 	^'Execute a pre-built macro-construction on selected input items. To edit a macro description, edit its text and apply with the keys [alt/ctrl]+s.' translated! !!DrGMacroPlayer class methodsFor: 'documentation' stamp: ''!title	^ 'Execute/edit macro' translated! !!DrGMacroPlayerHeadless commentStamp: ''!This is the macro player activated when the user directly selects a macro from the macro-menu in the toolbar. This player does not show up the usual wizard to select the macro to play as it is already selected from the menu.!!DrGMacroPlayerHeadless methodsFor: 'initialize-release' stamp: ''!initialize 	input := OrderedCollection new.! !!DrGMacroPlayerHeadless methodsFor: 'initialize-release' stamp: ''!release! !!DrGMacroToolStateNeutral commentStamp: ''!When user switch to info pages (info and description pages), we unselect all selected costumes. In this state the user can't select any items.!!DrGMacroToolStateNeutral methodsFor: 'accessing' stamp: ''!context: aContext	super context: aContext.	self context selectNoCostume! !!DrGMacroToolStateNeutral methodsFor: 'as yet unclassified' stamp: ''!handleMouseAt: aPoint	^false! !!DrGMathItem commentStamp: ''!This is the root class of the mathematic items hierarchy.The classes in this hierarchy are models of the mathematical items like point, line, circle.These models will have different type of view depending on the ApplicationModel/View/Presenter.id                            - unique id used when importing Dr. Geo 1.1 files / it is used to cache the index position in the factory pool name 				- for example A, (AB), [AD], ddescriptiveName	- 'this point A', 'this line (AB)'longDescription	- the point A, the symmetric of the point B in respect to O'basicType 			- object familly the instance belong to (#point, #line,...), it is part of the class namenodeType 			- the sub type the instance belong to (#2pts, #translation, #intersection), it is the value of XML  'type' attribute!!DrGMathItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents! !!DrGMathItem methodsFor: 'accessing' stamp: ''!safeName	| itsName |	itsName := self name.	^ (itsName isNil or: [itsName isEmpty]) 		ifTrue: [''] 		ifFalse: [itsName]! !!DrGMathItem methodsFor: 'testing' stamp: ''!isLockable	^ false! !!DrGMathItem methodsFor: 'accessing' stamp: ''!name: aString	name := aString ! !!DrGMathItem methodsFor: 'accessing' stamp: ''!basicType	^#mathItem! !!DrGMathItem methodsFor: 'updating' stamp: ''!changed	self triggerEvent: #updateMyView! !!DrGMathItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	self subclassResponsibility ! !!DrGMathItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	"return the newly created element"	| node |	self rehash.	node :=  XMLElement named: self basicType attributes: Dictionary new.	node attributeAt: #type put: self nodeType;		attributeAt: #name put: (name ifNil: ['']);		attributeAt: #id put: self hash asString.	self writeParentsAsXmlTo: node.	aNode addElement: node.	^node! !!DrGMathItem methodsFor: 'initialize-release' stamp: ''!release	self triggerEvent: #deletedMathItem.	"Do it last otherwise our deletedMathItem will never be sent"	super release.! !!DrGMathItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #mathItem! !!DrGMathItem methodsFor: 'accessing' stamp: ''!exist	^exist! !!DrGMathItem methodsFor: 'accessing' stamp: ''!parents: aCollection	parents := aCollection.! !!DrGMathItem methodsFor: 'updating' stamp: ''!moveEvent: aPoint	(self moveParent: aPoint)		ifFalse:			["parents are not moving, we can upate ourself"			self move: aPoint].! !!DrGMathItem methodsFor: 'computing' stamp: ''!intersectionWith: aCurveItem	^ Array 		with: (self intersectionWith: aCurveItem flag: 1)		with: (self intersectionWith: aCurveItem flag: -1)! !!DrGMathItem methodsFor: 'accessing' stamp: ''!name	^name! !!DrGMathItem methodsFor: 'xml writing' stamp: ''!writeParentsAsXmlTo: aNode	parents ifNotNil:		[self writeParents: self parents asXmlTo: aNode]! !!DrGMathItem methodsFor: 'updating' stamp: ''!move: aPoint! !!DrGMathItem methodsFor: 'accessing' stamp: ''!costumeClass	^ DrGMathItemCostume ! !!DrGMathItem methodsFor: 'computing' stamp: ''!intersectionWith: aCurveItem flag: aFlag	self subclassResponsibility ! !!DrGMathItem methodsFor: 'updating' stamp: ''!update! !!DrGMathItem methodsFor: 'comparing' stamp: ''!parentsIncludes: aMathItem "An idendity comparaison"	^ parents notNil and: [parents anySatisfy: [:each | each == aMathItem]]! !!DrGMathItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This math item %1' translated! !!DrGMathItem methodsFor: 'accessing' stamp: ''!parents	^ parents ! !!DrGMathItem methodsFor: 'updating' stamp: ''!property: aProperty 	self subclassResponsibility ! !!DrGMathItem methodsFor: 'accessing' stamp: ''!id: aSymbol	id := aSymbol! !!DrGMathItem methodsFor: 'computing' stamp: ''!clone"Return a collection with the necessary parents (free points) and a clone of myself"	self shouldNotImplement! !!DrGMathItem methodsFor: 'accessing' stamp: ''!parents: aCollection in: app	self parents: aCollection! !!DrGMathItem methodsFor: 'comparing' stamp: ''!rehash	^ hash := (self parents hash bitXor: self nodeType hash) bitXor: self basicType hash! !!DrGMathItem methodsFor: 'computing' stamp: ''!abscissaOf: aPoint	self subclassResponsibility! !!DrGMathItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem 	^ self parents = aMathItem parents! !!DrGMathItem methodsFor: 'computing' stamp: ''!pointAt: anAbscissa	self subclassResponsibility ! !!DrGMathItem methodsFor: 'event' stamp: ''!releaseActionMap	actionMap := nil! !!DrGMathItem methodsFor: 'testing' stamp: ''!isMathItem	^ true! !!DrGMathItem methodsFor: 'updating' stamp: ''!moveParent: aPoint"By default we try reverse dragging (move parents).This behaviour should be overridden for some mathItem, for example a free point on a curve should not reverse dragging the curve it belongs to.Return true if we are doing reverse dragging, otherwise false"	parents ifNotNil:		[parents do: [:parent|			parent moveEvent: aPoint]].	^true.! !!DrGMathItem methodsFor: 'comparing' stamp: ''!hash	^ hash! !!DrGMathItem methodsFor: 'updating' stamp: ''!moveAt: aPoint	self shouldNotImplement! !!DrGMathItem methodsFor: 'accessing' stamp: ''!descriptiveName	^ self adaptiveDescriptiveName 		copyReplaceAll: '%1'		with: self safeName! !!DrGMathItem methodsFor: 'printing' stamp: ''!printInteger: aValue on: aStream	aStream nextPutAll: aValue rounded asString! !!DrGMathItem methodsFor: 'accessing' stamp: ''!id	^id! !!DrGMathItem methodsFor: 'comparing' stamp: ''!= aMathItem 	^ aMathItem isMathItem 		ifFalse: [false]		ifTrue: [self basicType == aMathItem basicType				and: [self nodeType == aMathItem nodeType						and: [self parentsEqual: aMathItem]]]! !!DrGMathItem methodsFor: 'event' stamp: ''!updateableActionMap	actionMap ifNil:		[actionMap := self createActionMap].	^actionMap! !!DrGMathItem methodsFor: 'testing' stamp: ''!isCloneable	^ false! !!DrGMathItem methodsFor: 'printing' stamp: ''!printOn: aStream 	aStream 		nextPutAll: 'a ';		nextPutAll: self basicType capitalized;		nextPutAll: self nodeType capitalized;		nextPut: Character space.! !!DrGMathItem methodsFor: 'accessing' stamp: ''!exist: aBoolean	exist := aBoolean! !!DrGMathItem methodsFor: 'event' stamp: ''!actionMap: anObject	actionMap := anObject ! !!DrGMathItem methodsFor: 'accessing' stamp: ''!position	self shouldBeImplemented.! !!DrGMathItem methodsFor: 'testing' stamp: ''!isPropertyEditable	^ false! !!DrGMathItem methodsFor: 'testing' stamp: ''!doParentsExist	exist := true.	parents 		ifNotNil: 			[parents do: [:parent |			parent exist ifFalse: [^ exist := false]]]		ifNil: [exist := false].	^exist				! !!DrGMathItem methodsFor: 'event' stamp: ''!actionMap	actionMap ifNil: [^self createActionMap].	^ actionMap ! !!DrGMathItem methodsFor: 'initialize-release' stamp: ''!initialize	parents := nil.	exist := true.! !!DrGMathItem methodsFor: 'printing' stamp: ''!printCoordinates: aPoint on: aStream	aPoint ifNotNil: [		aStream nextPut: $(.		self printDecimal: aPoint x on: aStream.		aStream nextPutAll: ' ; '.		self printDecimal: aPoint y on: aStream.		aStream nextPut: $)].! !!DrGMathItem methodsFor: 'printing' stamp: ''!printType: aString on: aStream	aStream nextPutAll: aString;		nextPut: Character space;		nextPutAll: self safeName! !!DrGMathItem methodsFor: 'updating' stamp: ''!property	self subclassResponsibility ! !!DrGMathItem methodsFor: 'testing' stamp: ''!contains: aPoint	self subclassResponsibility ! !!DrGMathItem methodsFor: 'xml writing' stamp: ''!writeParents: collection asXmlTo: aNode"write parents reference in the natural order"|attr|	collection do: [:each | 		attr := Dictionary new.		attr at: #ref put: each hash asString.		aNode addElement: (XMLElement named: #parent attributes: attr)]! !!DrGMathItem methodsFor: 'printing' stamp: ''!printDecimal: aValue on: aStream	aValue isInfinite 		ifTrue: [aStream nextPutAll: 'inf.']		ifFalse: [			(aValue isInteger or: [aValue isFraction]) 			ifFalse: [aStream nextPutAll: (aValue printShowingDecimalPlaces: 1)]			ifTrue: [aStream print: aValue]]! !!DrGMathItem class methodsFor: 'instance creation' stamp: ''!newWith: theParents in: app	"Instantiate this mathItem with these parents	Parents contains other MathItem instance, sometime it contains other object as Point"	^self new 		parents: theParents in: app; 		initialize: theParents;		update;		rehash;		yourself! !!DrGMathItem class methodsFor: 'instance creation' stamp: ''!newWith: theParents	"Instantiate this mathItem with these parents	Parents contains other MathItem instance, sometime it contains other object as Point"	^self new 		parents: theParents; 		initialize: theParents;		update;		rehash;		yourself! !!DrGMathItemBuilder commentStamp: ''!This is the root class of the MathBuilder hierarchy responsible to create new mathematic items.A builder instance is specialized to build one type of object: free point, constrained point, line, segment, transformed mathItem...To effectively build a new mathItem, the builder need to be fed with mathItem with the add: message.At any time it is possible to check wheter the build process is terminated or not with the readyToBuild message.Related patterns: BUILD, TEMPLATE METHOD!!DrGMathItemBuilder methodsFor: 'xml' stamp: ''!basicItemFrom: node| type itemClass item|	"build the item class name from the node description"	type := ((node  attributeAt: #type) copyWithoutAll: '_') capitalized.	itemClass := self class environment 		classNamed: ('DrG' , node tag capitalized , type , 'Item') asSymbol.	item := itemClass new yourself.	self postProcess: item from: node.	^ item! !!DrGMathItemBuilder methodsFor: 'accessing' stamp: ''!app: aDrgeoApp	app := aDrgeoApp ! !!DrGMathItemBuilder methodsFor: 'xml' stamp: ''!parseValuePosition: node	| x y |	x := (node contentStringAt: #x) asNumber.	y := (node contentStringAt: #y) asNumber.	^ x@y.! !!DrGMathItemBuilder methodsFor: 'updating' stamp: ''!reset	point := nil.	flyingCostume ifNotNil:		[flyingCostume release.		flyingCostume := nil]! !!DrGMathItemBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	self subclassResponsibility ! !!DrGMathItemBuilder methodsFor: 'flying costume' stamp: ''!redrawFlyingCostume 	flyingCostume ifNotNil: [flyingCostume update]! !!DrGMathItemBuilder methodsFor: 'event' stamp: ''!releaseActionMap	actionMap := nil! !!DrGMathItemBuilder methodsFor: 'private' stamp: ''!addToggleItem: aMathItemCollection in: aCollection	aCollection 		remove: aMathItemCollection first 		ifAbsent: [aCollection add: aMathItemCollection first]! !!DrGMathItemBuilder methodsFor: 'building' stamp: ''!buildItem	| itemDefinitions |	itemDefinitions := self mathItemClass.	^ itemDefinitions isCollection 		ifFalse:	[{itemDefinitions newWith: self arguments in: app}]		ifTrue: [point := point + (0.2@1.3).			itemDefinitions collect: [:class | 				point := point - (0@0.5).				class newWith: self arguments in: app]]! !!DrGMathItemBuilder methodsFor: 'testing' stamp: ''!readyToBuild	"Can the builder build the math item now?"	self subclassResponsibility ! !!DrGMathItemBuilder methodsFor: 'flying costume' stamp: ''!moveFlyingCostumeAt: aPoint	flyingCostume ifNotNil: [		movingPoint moveAt: aPoint.		flyingItem update.		flyingCostume update]! !!DrGMathItemBuilder methodsFor: 'accessing' stamp: ''!factory	^ self domain factory! !!DrGMathItemBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection at: aPoint"By default we don't need the point position of the click event'"	^ self isWanted: aMathItemCollection ! !!DrGMathItemBuilder methodsFor: 'xml' stamp: ''!itemFrom: node	|item|	item := self itemInstanceFrom: node.	self postProcess: item from: node.	^ {self domain createFromMathItemNoStackNoFactoryCheck: item. true}! !!DrGMathItemBuilder methodsFor: 'event' stamp: ''!updateableActionMap	actionMap ifNil:		[actionMap := self createActionMap].	^actionMap! !!DrGMathItemBuilder methodsFor: 'xml' stamp: ''!parentsById: node"return a collection of the item parent given theirs id in the attributeelements <parent id=xxx>"	|collection|	collection := OrderedCollection new.	node elementsDo: [:each | 		(each tag = #parent) ifTrue: [			collection add: (self factory findInPoolById: (each attributeAt: 'ref') asSymbol)]].	^collection ! !!DrGMathItemBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeArguments	self subclassResponsibility ! !!DrGMathItemBuilder methodsFor: 'building' stamp: ''!add: aMathItemCollection at: aPoint"Add a math item in the selection list of the builder,aPoint is the position where the action took placeReturn true if mathItem accepted"	(self isWanted: aMathItemCollection at: aPoint) ifTrue:		[self addItem: aMathItemCollection at: aPoint.		"Are we done? If so notify our dependent"		self readyToBuild ifTrue: 			[self triggerEvent: #readyToBuild].		^true].	^false! !!DrGMathItemBuilder methodsFor: 'accessing' stamp: ''!arguments"an argument list to give to the MathItem new method"	self subclassResponsibility ! !!DrGMathItemBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	point := aPoint.! !!DrGMathItemBuilder methodsFor: 'event' stamp: ''!actionMap	actionMap ifNil: [^self createActionMap].	^ actionMap ! !!DrGMathItemBuilder methodsFor: 'testing' stamp: ''!isNotInteractive"Are we parsing the figure from a file"	^ app isNotInteractive! !!DrGMathItemBuilder methodsFor: 'xml' stamp: ''!parseValuePosition: node of: item	item position: (self parseValuePosition: node)! !!DrGMathItemBuilder methodsFor: 'building' stamp: ''!getItem	"return an instantiated mathItem or nil if not possible"	self readyToBuild ifTrue:		[^ self buildItem].	^ nil.! !!DrGMathItemBuilder methodsFor: 'xml' stamp: ''!itemInstanceFrom: node"build an item from a XML description"	(self parentsById: node) do: [:each |	self addItem: {each} at: 0@0].	^ self getItem first.! !!DrGMathItemBuilder methodsFor: 'accessing' stamp: ''!area	^ app area! !!DrGMathItemBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection"Check if the builder is interested by aMathItem"	self subclassResponsibility ! !!DrGMathItemBuilder methodsFor: 'xml' stamp: ''!postProcess: item from: node	item id: (node attributeAt: 'id') asSymbol.	(item respondsTo: #isLocked) ifTrue: [		(node attributeAt: #locked) = 'True'			ifTrue: [item locked: true]			ifFalse: [item locked: false]]! !!DrGMathItemBuilder methodsFor: 'accessing' stamp: ''!domain	^ app domain! !!DrGMathItemBuilder methodsFor: 'flying costume' stamp: ''!addToFlyingItem: anItem "Add an item to the flying item representing the item built by this builder "	self isNotInteractive ifTrue: [^self].	self initializeFlyingCostume.	movingPoint := DrGPointFreeItem new point: point + (0.1 @ 0.1).	flyingItem := self mathItemClass newWith: self flyingCostumeArguments.	self showFlyingCostume! !!DrGMathItemBuilder methodsFor: 'flying costume' stamp: ''!initializeFlyingCostume	flyingCostume := self flyingCostumeClass basicNew.	flyingCostume 		drawable: self area; 		exist: true;		instantiateMorph.	flyingCostume morph costume: flyingCostume.	flyingCostume style: flyingCostume styleClass basicNew.	flyingCostume style 		costume: flyingCostume;		color: Color lightRed;		hidden: false.! !!DrGMathItemBuilder methodsFor: 'constant' stamp: ''!mathItemClass"Answer the MathItem class for this builder (i.e. self FreePointItem,...)"	self subclassResponsibility! !!DrGMathItemBuilder methodsFor: 'flying costume' stamp: ''!showFlyingCostume	flyingCostume mathItem: flyingItem.	self area addMorph: flyingCostume morph.	flyingCostume redraw.	flyingCostume morph changed! !!DrGMathItemBuilder class methodsFor: 'xml' stamp: ''!basicItemFrom: node"create a basic item (unitialised) from this node and add it to the domain, return an item partially initialized. Used for macro node"	| builder |	builder := self new.	^ builder basicItemFrom: node! !!DrGMathItemBuilder class methodsFor: 'xml' stamp: ''!itemFrom: node in: aDrgeoApp"create an item from this node and add it to the domain, return a couple {item. boolean}"	| builder |	builder := self new app: aDrgeoApp; yourself.	^ builder itemFrom: node! !!DrGMathItemBuilder class methodsFor: 'documentation' stamp: ''!description	"A description how to use the tool"	self subclassResponsibility! !!DrGMathItemBuilder class methodsFor: 'documentation' stamp: ''!title	"One or two words describing the builder"	self subclassResponsibility ! !!DrGMathItemCommand commentStamp: ''!A command to record a mathItem construction!!DrGMathItemCommand methodsFor: 'accessing' stamp: ''!createMathItem: aBuilder	mathItems := aBuilder getItem.! !!DrGMathItemCommand methodsFor: 'command' stamp: ''!execute	"Remove any previous dependant"	mathItems do: [:aMathItem| 		"record the mathItem in the factory"		domain factory add: aMathItem.		domain triggerEvent: #redoMathItem with: aMathItem].	^mathItems! !!DrGMathItemCommand methodsFor: 'accessing' stamp: ''!fromMathItem: aMathItem	mathItems := {aMathItem}.! !!DrGMathItemCommand methodsFor: 'dependents access' stamp: ''!release	super release.	mathItems do: [:m | m release]! !!DrGMathItemCommand methodsFor: 'command' stamp: ''!unexecute	"remove the mathItem in the factory"	domain factory remove: mathItems! !!DrGMathItemCommand class methodsFor: 'as yet unclassified' stamp: ''!with: aBuilder in: aDomain 	^self new		domain: aDomain;		createMathItem: aBuilder.! !!DrGMathItemCommand class methodsFor: 'as yet unclassified' stamp: ''!for: aMathItem in: aDomain 	^self new		domain: aDomain;		fromMathItem: aMathItem .! !!DrGMathItemCostume commentStamp: ''!This is the root of the costumue hierarchy, a simple Adapter to morph.A costume is a visual representation of a mathItem. The user interact with the mathItem through its costume. mathItem 		- a costume need to know its model dirty 			- boolean, true if it need udpate (repositionned) (deprecated) morph 			- this the adaptee, the graphic representation textMorph     - to display the object name, may be nil drawable 		- a costume need to know where it is printed exist 		   - does the costume exist (ie when its mathItem does or not exist, we need it to keep track when the mathItem exist changed)!!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!removeTextMorph	textMorph ifNotNil:		[drawable removeMorph: textMorph.		textMorph := nil]! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!textMorph: aString	aString ifNil: [^self].	mathItem name: aString.	aString isEmpty		ifTrue: 			[textMorph ifNotNil: [self removeTextMorph]]		ifFalse:			[textMorph 				ifNil: 					[textMorph := DrGLabelMorph new contents: aString.					textMorph costume: self.					exist ifTrue: [drawable addMorph: textMorph.					textMorph position: self textPosition]]				ifNotNil: 					[textMorph contents: aString]].	self update: nil.! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!updateToVisible	exist := true.	style isNotHidden 		ifTrue: [self addMyMorph].	textMorph ifNotNil:		[drawable addMorph: textMorph.		textMorph position: self textPosition].! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!width: anInteger	morph borderWidth: anInteger! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!removeEvents	mathItem ifNotNil: 		[mathItem removeActionsWithReceiver: self].	self breakDependents ! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isValueCostume	^self basicType == #value or: [self basicType == #angle]! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!color: aColor	morph color: aColor ! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isLockable	^ mathItem isLockable! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!textPositionDelta: aPoint	textPositionDelta := aPoint! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!registerEvents	mathItem		ifNotNil: [			mathItem				when: #deletedMathItem				send: #deleteCostume:				to: drawable app				with: self.			mathItem 				when: #updateMyView				send: #updateAllMathItems				to: self domain]! !!DrGMathItemCostume methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode 	"We wrote from the costume because it knows both the model and the	view of the math item"	self writeAttributesTo: (mathItem writeAsXmlTo: aNode)! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!release	super release.	self morph ifNotNil: [self removeMyMorph.].	self removeTextMorph.	self removeEvents.	style release! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!reInitialize	"we recover from an undo operation, so let's reInitialize some of my	aspect "	self registerEvents.	self addMyMorph.	self redraw.	self textMorph: mathItem name.	self forceVisible: false! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!updateToInvisible	self removeMyMorph.	textMorph ifNotNil:		[drawable removeMorph: textMorph].	exist := false! !!DrGMathItemCostume methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode 	aNode	attributeAt: #delta put: textPositionDelta asString.	self isLockable ifTrue: [		aNode attributeAt: #locked put: mathItem isLocked asString capitalized].	style writeAttributesTo: aNode.! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!exist	^exist! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isLocusCostume	^self basicType == #locus! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!morph	^morph ! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isCircleCostume	^self basicType = #circle! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!name	^textMorph ifNotNil: [textMorph contents asString]		ifNil: ['']! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!app	^ self drawable app! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!borderColor: aColor	! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!style	^style! !!DrGMathItemCostume methodsFor: 'converting' stamp: ''!asString	^ mathItem 		ifNil: ['nil']		ifNotNil: [mathItem descriptiveName] ! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isLocked	^ mathItem isLocked! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!unhide "make this costume visible in case it was hidden"	style isHidden ifTrue: [		self forceVisible: true.		style hidden: false]! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isArcCostume	^self basicType = #arc! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!startBlinking	morph startBlinking! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!style: aStyle	style := aStyle ! !!DrGMathItemCostume methodsFor: 'style' stamp: ''!styleClass	^DrGCostumeStyle! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!locked: boolean	self isLockable ifTrue: [		mathItem locked: boolean.		self update: nil.]! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!update	mathItem exist		ifTrue: [			exist ifFalse: [self updateToVisible].			self redraw]		ifFalse: [exist ifTrue: [self updateToInvisible]].! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!makeBothArrows	morph makeBothArrows! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!forceVisible: aBoolean 	(exist not or: [style isNotHidden]) ifTrue: [^false].	aBoolean 		ifTrue: 			[self addMyMorph.			self redraw.			morph color: DrGStylePreference hiddenColor.			textMorph ifNotNil:				[drawable addMorph: textMorph.				textMorph position: self textPosition]]		ifFalse: 			[drawable removeMorph: morph.			morph color: style color.			textMorph ifNotNil:				[drawable removeMorph: textMorph]].	^true! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!stopBlinking	morph stopBlinking! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!containsPoint: aPoint	^exist and: [morph visible and: [morph containsPoint: aPoint]]! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!mathItem: aMathItem	self removeEvents.	mathItem := aMathItem.	self registerEvents.! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isCompositeCostume	^self basicType == #composite! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!morph: aMorph	morph := aMorph ! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isAngleCostume	^self basicType = #angle! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isRayCostume	^self basicType == #ray! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!redraw	(exist and: [style isNotHidden or: [self isForceVisible]]) ifFalse: [^ false].	textMorph		ifNotNil: [textMorph position: self textPosition].	^ true! !!DrGMathItemCostume methodsFor: 'layout' stamp: ''!computeTextPositionDelta: aVector	| distance |	textMorph ifNil: [ ^ 0 @ 0 ].	aVector = (0 @ 0)		ifFalse: [ distance := aVector r.			distance := distance min: 40.			^ aVector / aVector r * distance				+ (textMorph fullBounds origin - textMorph fullBounds center) ]		ifTrue: [ ^ textMorph fullBounds origin - textMorph fullBounds center ]! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!textMorph	^textMorph! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isCurveCostume	^false! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!makeForwardArrow	morph makeForwardArrow! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!presenter	^drawable presenter! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!makeNoArrows	morph makeNoArrows! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!mathItem	^mathItem ! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!removeMyMorph	drawable removeMorph: morph! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isForceVisible	^ drawable presenter isForceVisible ! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!drawable: aDrawable	drawable := aDrawable ! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!locked	^ mathItem isLocked! !!DrGMathItemCostume methodsFor: 'layout' stamp: ''!textPosition"get an up to date text position"	self subclassResponsibility! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!emphasis	morph borderWidth: 8.	morph color: Color lightRed! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isVectorCostume	^self basicType == #vector! !!DrGMathItemCostume methodsFor: 'scripting' stamp: ''!openViewer	morph ifNotNil: [morph beViewed]! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!exist: aBoolean	exist := aBoolean ! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isPointCostume	^self basicType == #point! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	self subclassResponsibility ! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!addMyMorph	exist ifTrue: [		self isBitmapCostume 			ifTrue: [drawable addMorphBack: self morph]			ifFalse: [drawable addMorph: self morph]].! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!dash: aDashMotif	morph dashedBorder: aDashMotif! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!initialize	"costume should update itself regarding its model (mathItem)"	self instantiateMorph.	textPositionDelta := 7 @ 7.	self morph costume: self.	exist := mathItem exist.	self style: (self styleClass newWith: self).	self addMyMorph.	self redraw! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isSegmentCostume	^self basicType == #segment! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!update: object	self app saved: false.	morph changed! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!view	^drawable view! !!DrGMathItemCostume methodsFor: 'layout' stamp: ''!constraintTextPosition: aPoint"Force the text arround the mathItemCostume to a position"	self subclassResponsibility ! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!toggleLocked	self isLockable ifTrue: [		mathItem locked: mathItem isLocked not]! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!editMyProperty 	self subclassResponsibility ! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isLineCostume	^self basicType == #line! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!domain	^drawable presenter domain! !!DrGMathItemCostume methodsFor: 'accessing' stamp: ''!drawable	^drawable! !!DrGMathItemCostume methodsFor: 'updating' stamp: ''!makeBackArrow	morph makeBackArrow! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isBitmapCostume	^self basicType = #bitmap! !!DrGMathItemCostume methodsFor: 'testing' stamp: ''!isFinitCurveCostume	^self isArcCostume 		or: [self isCircleCostume			or: [self isSegmentCostume]]! !!DrGMathItemCostume methodsFor: 'initialize-release' stamp: ''!releasePropertyWidget ! !!DrGMathItemCostume class methodsFor: 'as yet unclassified' stamp: ''!basicNew: mathItem	^ self basicNew ! !!DrGMathItemCostume class methodsFor: 'instance creation' stamp: ''!for: aMathItem in: aDrawable	^ (aMathItem costumeClass basicNew: aMathItem)		drawable: aDrawable;		mathItem: aMathItem;		initialize.! !!DrGMathItemFactory commentStamp: ''!See superclass comments.This factory interface in extended to handle mathItem specific action!!DrGMathItemFactory methodsFor: 'updating' stamp: ''!updateAllMathItemsButLocusFrom: startIndex to: endIndex 	"stupidly update math item in the given range"	pool		from: startIndex		to: endIndex		do: [:aMathItem | aMathItem isLocusItem not				ifTrue: [aMathItem update]]! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!directChildrenOf: parent"return the collection of my direct child"	^ pool select: [:item| | parents|		parents := item parents.		parents notNil and: [(parents anySatisfy: [:aParent | aParent = parent])]].! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!ordered: aMathItemCollection"sort the the math item according to the pool order"	^ pool select: [:item | aMathItemCollection includes: item]! !!DrGMathItemFactory methodsFor: 'updating' stamp: ''!rehash	pool do: [:mathIten | mathIten rehash]! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!dependentMathItem: theMathItem 	"Return a collection of the dependents items of theMathItem, 	Caution: it is not following the creation order, further traitment is need for that"	^ self dependentMathItem: theMathItem in: (self subPool: theMathItem )! !!DrGMathItemFactory methodsFor: 'updating' stamp: ''!updateAllMathItems	"stupidly update all math item"	pool		do: [:aMathItem | aMathItem update]! !!DrGMathItemFactory methodsFor: 'updating' stamp: ''!updateAllMathItemsButLocus	"stupidly update all math item but the loci ones"	pool		do: [:aMathItem | aMathItem isLocusItem not ifTrue: [ aMathItem update]]! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!orderedDependentMathItem: aMathItem	^self ordered: (self dependentMathItem: aMathItem )! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!childrenOf: mathItemIndex	|children directChildren|	directChildren := OrderedCollection withAll: (self directChildrenOf: mathItemIndex).	children := Set new addAll: directChildren; yourself.	directChildren do: [:childIndex | children addAll: (self childrenOf: childIndex)].	^ children! !!DrGMathItemFactory methodsFor: 'testing' stamp: ''!is: item parentWithTest: testSelector	self from: item do: [:aChild |		((aChild perform: testSelector)			and: [aChild parents includes: item]) ifTrue: [^ true]].	^ false! !!DrGMathItemFactory methodsFor: 'updating' stamp: ''!updateDirtyMathItems: aCollection	"update the collection"	aCollection		do: [:aMathItem | aMathItem update]! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!findInPoolById: anID"Try to find an item given its unique ID, it used to load Dr. Geo 1.1 file"	^ pool detect: [:each | each id = anID ]	! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!dependentMathItem: theMathItem in: subPool	"Return a collection of the dependents items of theMathItem in a subpool"	| dependents |	dependents := IdentitySet with: theMathItem.	subPool do: [:aMathItem |		(aMathItem parentsIncludes: theMathItem) ifTrue: 			[dependents addAll: 				(self dependentMathItem: aMathItem in: (self subPool: aMathItem from: subPool))]].	^ dependents! !!DrGMathItemFactory methodsFor: 'accessing' stamp: ''!moveableParentsOf: theMathItem in: parents	"Return a collection of the parents items of theMathItem, sensidble to reverse dragging	Caution: we may have duplicated item"	| safeParents areParentsMoveable |	safeParents := theMathItem parents.	theMathItem parents: #().	areParentsMoveable := theMathItem moveParent: 0@0.	theMathItem parents: safeParents.	areParentsMoveable ifTrue: [		(parents addAll: safeParents) do: [:aParent |			self moveableParentsOf: aParent in: parents]].! !!DrGMergeCommand commentStamp: ''!A command to merge 'mathItem' in 'target': all the direct children of mathItem will become direct children of target.- directChildren : the children with the position of the mathItem in the parents collection.!!DrGMergeCommand methodsFor: 'command' stamp: ''!execute	"replace mathItem as target in the parent item"	directChildren do: [:array |		array first parents 			at: array second 			put: target].	domain factory remove: {mathItem}.	domain updateAllMathItems.! !!DrGMergeCommand methodsFor: 'command' stamp: ''!unexecute	"unmerge target and mathItem"	domain factory add: mathItem beforeIndex: mathItemIndex.	domain triggerEvent: #redoMathItem with: mathItem.	directChildren do: [:array |		array first parents 			at: array second 			put: mathItem].	domain updateAllMathItems.! !!DrGMergeCommand methodsFor: 'initialize-release' stamp: ''!merge: aMathItem with: aTarget	|children|	mathItem := aMathItem.	target := aTarget.	mathItemIndex := domain factory indexOf: mathItem.	children := domain factory directChildrenOf: mathItem.	directChildren := OrderedCollection new.	children do:[:aChild |		directChildren add: (			Array 				with: aChild 				with: (aChild parents indexOf: mathItem))]! !!DrGMergeCommand class methodsFor: 'as yet unclassified' stamp: ''!merge: aMathItem with: aTarget in: aDomain	^ self new 		domain: aDomain;		merge: aMathItem with: aTarget ! !!DrGMiddleBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointA := pointB := segment := nil! !!DrGMiddleBuilder methodsFor: 'accessing' stamp: ''!arguments	segment ifNotNil: [^{segment}].	^{pointA . pointB}! !!DrGMiddleBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	aMathItemCollection first isPointItem 		ifTrue:			[pointA ifNil: 				[pointA := aMathItemCollection first.				^self].			pointB ifNil:				[pointB := aMathItemCollection  first.				^self]]		ifFalse: [segment := aMathItemCollection  first]! !!DrGMiddleBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ segment notNil or: [pointA notNil and: [pointB notNil]]! !!DrGMiddleBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^ aMathItemCollection  notEmpty 		and: [(aMathItemCollection first isPointItem			and: [aMathItemCollection first ~= pointA])			or: [aMathItemCollection first isSegmentItem and: [pointA isNil]]]! !!DrGMiddleBuilder methodsFor: 'constant' stamp: ''!mathItemClass	segment ifNotNil: [^DrGPointMiddlesegmentItem].	^DrGPointMiddle2ptsItem! !!DrGMiddleBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'The midpoint of a segment or between two points.' translated! !!DrGMiddleBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Middle' translated. ! !!DrGMorph commentStamp: ''!A DrGMorph is xxxxxxxxx.Instance Variables	blink:		<Object>	costume:		<Object>blink	- xxxxxcostume	- xxxxx!!DrGMorph methodsFor: 'stepping and presenter' stamp: ''!stopStepping	super stopStepping.	self color: costume style color.! !!DrGMorph methodsFor: 'accessing' stamp: ''!costume: aCostume	costume := aCostume! !!DrGMorph methodsFor: 'initialization' stamp: ''!initialize	super initialize.	blink := false.! !!DrGMorph methodsFor: 'geometry' stamp: ''!leftCenter"We want float computation"	^ self left @ self center y! !!DrGMorph methodsFor: 'stepping and presenter' stamp: ''!startBlinking	blink := true.	self startStepping ! !!DrGMorph methodsFor: 'accessing' stamp: ''!costume	^costume! !!DrGMorph methodsFor: 'event handling' stamp: ''!handlesMouseDown: evt	^ false! !!DrGMorph methodsFor: 'as yet unclassified' stamp: ''!isMorphCostume	^true! !!DrGMorph methodsFor: 'stepping and presenter' stamp: ''!step	blink ifFalse: [^self].	super step.	self color = DrGStylePreference blinkingColor 		ifTrue: [self color: costume style color]		ifFalse: [self color: DrGStylePreference blinkingColor]! !!DrGMorph methodsFor: 'geometry' stamp: ''!center"We want float computation"	^ bounds topLeft + bounds bottomRight / 2! !!DrGMorph methodsFor: 'stepping and presenter' stamp: ''!stopBlinking	blink := false.	self stopStepping.! !!DrGMorph methodsFor: 'stepping and presenter' stamp: ''!stepTime	^500! !!DrGMorph methodsFor: 'geometry' stamp: ''!rightCenter"We want float computation"	^ self right @ self center y! !!DrGMoveCommand methodsFor: 'command' stamp: ''!execute	domain moveEvent: mathItem inDirection: vector! !!DrGMoveCommand methodsFor: 'accessing' stamp: ''!vector: aPoint	vector := aPoint	! !!DrGMoveCommand methodsFor: 'command' stamp: ''!unexecute	domain moveEvent: mathItem inDirection: vector negated! !!DrGMoveCommand methodsFor: 'accessing' stamp: ''!mathItem: aMathItem	mathItem := aMathItem ! !!DrGMoveCommand class methodsFor: 'as yet unclassified' stamp: ''!for: aMathItem with: aPoint in: aDomain	^self new		domain: aDomain;		mathItem: aMathItem;		vector: aPoint! !!DrGMutatorToolStateDragged methodsFor: 'accessing' stamp: ''!context: aContext	super context: aContext.	originalPointClass := context mathItem class.! !!DrGMutatorToolStateDragged methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint	|costumes aTip|	"First handle the redraw"	super handleMouseAt: aPoint.	"Detect for mutation candidate"	costumes := self context targetMutationCostumeAt: aPoint.	(costumes isEmpty and: [self isMutantFreePoint not]) ifTrue: [		aTip := 'Change as a free point on the plane.' translated].	costumes size = 1 ifTrue: [		aTip := 'Change as a free point on this curve.' translated].	costumes size > 1 ifTrue: [		aTip := 'Change as this intersection.' translated].	aTip 		ifNil: [self area hideTip]		ifNotNil: [self area tip: aTip at: aPoint].	^ aTip isNil not! !!DrGMutatorToolStateDragged methodsFor: 'as yet unclassified' stamp: ''!isMutantFreePoint	^ originalPointClass = DrGPointFreeItem! !!DrGMutatorToolStateDragged methodsFor: 'handling' stamp: ''!handleRelease: aPoint	|costumes|	self area hideTip.	"Detect for mutation candidate"	costumes := self context targetMutationCostumeAt: aPoint.	costumes size = 1 ifTrue: [		self context domain			mutate: self mathItem 			asFreeOn: costumes first mathItem 			at: (self area gridWorldPoint: aPoint)].	costumes size > 1 ifTrue: [		self context domain 			mutate: self mathItem 			asIntersectionWith: costumes first mathItem  			and: costumes second mathItem  			at: (self area gridWorldPoint: aPoint)]. 	self app saved: false.	self switchState: DrGSelectToolStateNeutral.	self context reset! !!DrGMutatorToolStateGrabbed methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint 	"The user is moving, detach the point as a free point and switch to dragging state"	|griddedPoint|	self switchState: DrGMutatorToolStateDragged.	griddedPoint := self context gridPoint: aPoint.	self context		start: griddedPoint;		last: griddedPoint.	self context domain mutateAsFreePoint: self mathItem.	^ true! !!DrGMutatorToolStateSelected methodsFor: 'handling' stamp: ''!handlePress: aPoint 	| costumes |	self area hideTip.	costumes := self context costumesAt: aPoint.	(costumes includes: self context costume) 		ifTrue: [			self context updateDirtyItemsList.			self switchState: DrGMutatorToolStateGrabbed.			^true]		ifFalse: [ 			self context reset.			^false]! !!DrGParallelBuilder commentStamp: ''!pointA can accept a PointItem instance or just a Point instance.!!DrGParallelBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeArguments	^{direction. movingPoint}.! !!DrGParallelBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointA := direction := nil! !!DrGParallelBuilder methodsFor: 'accessing' stamp: ''!arguments	^{direction . pointA}! !!DrGParallelBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	point := aPoint.	aMathItemCollection first isPointItem 		ifTrue: [pointA := aMathItemCollection first].	aMathItemCollection first isDirectionItem 		ifTrue:[direction := aMathItemCollection first.			self addToFlyingItem: direction].	! !!DrGParallelBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^pointA notNil and: [direction notNil]! !!DrGParallelBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	aMathItemCollection ifEmpty: [^false].	^ (aMathItemCollection first isPointItem 		and: [pointA isNil])			or: [aMathItemCollection first isDirectionItem and: [direction isNil]] ! !!DrGParallelBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGLineParallelItem! !!DrGParallelBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Line passing through one point and parallel to a line, half-line, etc.' translated! !!DrGParallelBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Parallel' translated! !!DrGPerSessionResource commentStamp: ''!A DrGPerSessionResource  manages access to aresource that is only valid during one Smalltalk session. If  after the shutdown and startup the session changed, the resource has to be reloaded.!!DrGPerSessionResource methodsFor: 'session management' stamp: ''!checkSession	session = Smalltalk session ifFalse: [self reloadResource]! !!DrGPerSessionResource methodsFor: 'session management' stamp: ''!reloadResource	resource := self createResource.	session := Smalltalk session.! !!DrGPerSessionResource methodsFor: 'initialize' stamp: ''!initialize	super initialize.	session := nil.	resource := nil.! !!DrGPerSessionResource methodsFor: 'accessing' stamp: ''!getCheckedResource	self checkSession.	^ resource! !!DrGPerpendicularBisectorBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	segment := nil! !!DrGPerpendicularBisectorBuilder methodsFor: 'accessing' stamp: ''!arguments 	^ segment 		ifNil: [{pointA . pointB}] 		ifNotNil: [{segment}]! !!DrGPerpendicularBisectorBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	| item |	point := aPoint.	(item := aMathItemCollection first) isSegmentItem ifTrue: 		[^segment ifNil: [segment := item]].	pointA 		ifNil: [pointA := item.			self addToFlyingItem: pointA.]		ifNotNil: [pointB := item]	! !!DrGPerpendicularBisectorBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ segment notNil or:		[pointA notNil and: [pointB notNil]]! !!DrGPerpendicularBisectorBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection| item |	^ aMathItemCollection notEmpty 		and: [((item := aMathItemCollection first) isPointItem 		and: [item ~= pointA])			or: [item isSegmentItem and: [pointA isNil]]]! !!DrGPerpendicularBisectorBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	^ segment 		ifNotNil: [DrGPerpendicularBisectorItem]		ifNil: [DrGLinePerpendicularBisector2ptsItem].! !!DrGPerpendicularBisectorBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Perpendicular bisector defined by a segment or two points.' translated! !!DrGPerpendicularBisectorBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Perpendicular bisector' translated! !!DrGPerpendicularBisectorItem commentStamp: ''!Perpendicular bisector given a segment!!DrGPerpendicularBisectorItem methodsFor: 'comparing' stamp: ''!equalOtherNodeType: aMathItem 	^ aMathItem		ifNil: [false]		ifNotNil: [self basicType = aMathItem basicType			and: [aMathItem nodeType = #'perpendicularBisector2pts'				and: [(parents first extremity1 = aMathItem parents first point						and: [parents first extremity2 = aMathItem parents second point])					or: [parents first extremity1 = aMathItem parents second point						and: [parents first extremity2 = aMathItem parents first point]]]]]! !!DrGPerpendicularBisectorItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #perpendicularBisector! !!DrGPerpendicularBisectorItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [ |segment |		segment := parents first.		self direction: segment normal.		self origin: segment middle]! !!DrGPerpendicularBisectorItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This perpendicular bisector %1' translated! !!DrGPerpendicularBisectorItem methodsFor: 'comparing' stamp: ''!= aMathItem	^ aMathItem isMathItem 		ifFalse: [false]		ifTrue: [super = aMathItem or: [ self equalOtherNodeType: aMathItem ]]! !!DrGPerpendicularBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGLinePerpendicularItem! !!DrGPerpendicularBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Line passing through one point and orthogonal to a line, half-line, etc.' translated! !!DrGPerpendicularBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Perpendicular' translated! !!DrGPlatform commentStamp: ''!I am an abstract class to modelise access to plateform preferences and information.Pattern: strategy!!DrGPlatform methodsFor: 'user interface' stamp: ''!showVirtualKeyboard: boolean! !!DrGPlatform methodsFor: 'initialize-release' stamp: ''!reset	toolbarIconSize := nil! !!DrGPlatform methodsFor: 'user interface' stamp: ''!smallFontSize	^ 13! !!DrGPlatform methodsFor: 'testing' stamp: ''!isWorkstation"Preferences for Windows/Linux/Mac workstation"	^ false! !!DrGPlatform methodsFor: 'testing' stamp: ''!isSugar	^ false! !!DrGPlatform methodsFor: 'testing' stamp: ''!isAndroid	^ false! !!DrGPlatform methodsFor: 'initialize-release' stamp: ''!startUp	Author fullName: 'DrGeoUser'.	self installFont.	self setFontPreferences.	self checkForPaths.! !!DrGPlatform methodsFor: 'testing' stamp: ''!isEtoys	^ false! !!DrGPlatform methodsFor: 'path' stamp: ''!mySketchesPath	^self rootPath / 'MySketches'! !!DrGPlatform methodsFor: 'user interface' stamp: ''!setFontPreferences ! !!DrGPlatform methodsFor: 'user interface' stamp: ''!canvasFontSize	^ 9! !!DrGPlatform methodsFor: 'accessing' stamp: ''!canWeDisplayLoader	^ canWeDisplayLoader! !!DrGPlatform methodsFor: 'initialize-release' stamp: ''!checkForPaths	self mySketchesPath ensureCreateDirectory ! !!DrGPlatform methodsFor: 'as yet unclassified' stamp: ''!openURI: string! !!DrGPlatform methodsFor: 'user interface' stamp: ''!toolbarIconSize	^ 24! !!DrGPlatform methodsFor: 'testing' stamp: ''!isiPad	^ false! !!DrGPlatform methodsFor: 'user interface' stamp: ''!wheelWidth	^ 45! !!DrGPlatform methodsFor: 'path' stamp: ''!mySharesPath	^self rootPath / 'MyShares'! !!DrGPlatform methodsFor: 'accessing' stamp: ''!release: boolean	release := boolean ! !!DrGPlatform methodsFor: 'path' stamp: ''!examplesPath	^ self rootPath / 'examples'! !!DrGPlatform methodsFor: 'path' stamp: ''!myExportsPath	^ self shouldNotImplement! !!DrGPlatform methodsFor: 'user interface' stamp: ''!wizardExtent	^550@350! !!DrGPlatform methodsFor: 'accessing' stamp: ''!premium: boolean	premium := boolean ! !!DrGPlatform methodsFor: 'testing' stamp: ''!isSystem"Preferences for a DrGeo development environment"	^ false! !!DrGPlatform methodsFor: 'path' stamp: ''!myScriptsPath	^self rootPath / 'SmalltalkSketches'! !!DrGPlatform methodsFor: 'initialize-release' stamp: ''!splash | splash copy  background position splashMorph |	canWeDisplayLoader := false.	UIManager default defer: [ 	splash := ImageReadWriter formFromFileNamed: (self rootPath / 'splash.bmp') pathString.	position := Display center - (splash extent // 2).	background := Form fromDisplay: (position extent: splash extent).	0.0 to: 1.0 by: 0.2 do: [:t |		copy := background deepCopy.		copy copyBits: splash at: 0@0 translucent: t.		copy displayAt:  position.		(Delay forMilliseconds: 100) wait].	splashMorph := splash asMorph.	splashMorph		position: position;		openInWorld.	(Delay forSeconds: 2) wait.	splashMorph delete.	canWeDisplayLoader := true]! !!DrGPlatform methodsFor: 'user interface' stamp: ''!wheelHeight	^ 150! !!DrGPlatform methodsFor: 'initialize-release' stamp: ''!installFont	| font |	FreeTypeFontProvider resetCurrent.	font := self fontPath / DrGeoSystem fontFile.	FreeTypeFontProvider current updateFromFile: font.	FreeTypeFontProvider current buildFamilies.! !!DrGPlatform methodsFor: 'testing' stamp: ''!isPremium	^ premium ifNil: [premium := true]! !!DrGPlatform methodsFor: 'path' stamp: ''!fontPath	^  FileLocator imageDirectory asFileReference! !!DrGPlatform methodsFor: 'path' stamp: ''!rootPath	^ FileLocator imageDirectory asFileReference parent parent! !!DrGPlatform methodsFor: 'user interface' stamp: ''!fontSize	^ 15! !!DrGPlatform methodsFor: 'testing' stamp: ''!isRelease	^ release ifNil: [release := false]! !!DrGPointBlockItem commentStamp: ''!Point item defined by a block closure!!DrGPointBlockItem methodsFor: 'testing' stamp: ''!doParentsExist 	^ super doParentsExist and: [pointBlock isNil not]! !!DrGPointBlockItem methodsFor: 'comparing' stamp: ''!rehash	^ hash := super rehash bitXor: pointBlock hash! !!DrGPointBlockItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	|node|	node := super writeAsXmlTo: aNode.	node addElement: ((XMLElement named: #code) addContent: (XMLStringNode string: pointBlock asString)).	^node! !!DrGPointBlockItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Block! !!DrGPointBlockItem methodsFor: 'updating' stamp: ''!update| result |	self doParentsExist ifTrue:		[parents size = 1			ifTrue: [result := [ pointBlock value: parents first ] on: Error do: [exist := false]]			ifFalse: [result := [pointBlock cull: parents] on: Error do: [exist := false]]. 	exist ifTrue: [ self point: result ].	].! !!DrGPointBlockItem methodsFor: 'accessing' stamp: ''!pointBlock	^ pointBlock ! !!DrGPointBlockItem methodsFor: 'accessing' stamp: ''!parents: aCollection	aCollection isEmptyOrNil ifTrue: [		parents := aCollection.		^ self].	aCollection first isBlock 		ifTrue: [			self pointBlock: aCollection first.			parents := aCollection allButFirst]		ifFalse: [parents := aCollection].! !!DrGPointBlockItem methodsFor: 'comparing' stamp: ''!= aMathItem	^ super = aMathItem and: [ pointBlock = aMathItem pointBlock ]! !!DrGPointBlockItem methodsFor: 'accessing' stamp: ''!pointBlock: aBlock	pointBlock := aBlock ! !!DrGPointByCoordinatesBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	script := valueX := valueY := nil! !!DrGPointByCoordinatesBuilder methodsFor: 'accessing' stamp: ''!arguments	^script 		ifNotNil: [{script}]		ifNil: [{valueX . valueY}]! !!DrGPointByCoordinatesBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	aMathItemCollection first isScriptItem 		ifTrue: 			[script := aMathItemCollection first]		ifFalse: 			[valueX 				ifNil: [valueX := aMathItemCollection first.]				ifNotNil: [valueY ifNil: [valueY := aMathItemCollection first]]]! !!DrGPointByCoordinatesBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ (valueX notNil and: [valueY notNil])		or: [script notNil]! !!DrGPointByCoordinatesBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^ aMathItemCollection notEmpty		and: [(aMathItemCollection first isScriptItem				and: [aMathItemCollection first ~= script])						or: [aMathItemCollection first isValueItem				and: [aMathItemCollection first ~= valueX				and: [aMathItemCollection first ~= valueY]]]]			! !!DrGPointByCoordinatesBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^script 		ifNotNil: [DrGPointScriptItem ]		ifNil: [DrGPointCoordinateItem]! !!DrGPointByCoordinatesBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Point given its coordinates: select two numbers or a point coordinates (@).' translated! !!DrGPointByCoordinatesBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Coordinates' translated! !!DrGPointCoordinateItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointCoordinateItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Coordinate! !!DrGPointCoordinateItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self point: parents first valueItem @ parents second valueItem]. ! !!DrGPointCostume methodsFor: 'updating' stamp: ''!shape: aShape! !!DrGPointCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGPointMorph new! !!DrGPointCostume methodsFor: 'updating' stamp: ''!pointSize: anExtent	morph extent: anExtent.	exist ifTrue: [morph center: (drawable worldToMorph: mathItem point)].! !!DrGPointCostume methodsFor: 'updating' stamp: ''!redraw	super redraw 		ifFalse: [^ self].	morph		center: (drawable worldToMorph: mathItem point)! !!DrGPointCostume methodsFor: 'testing' stamp: ''!basicType	^#point! !!DrGPointCostume methodsFor: 'style' stamp: ''!styleClass	^DrGPointCostumeStyle! !!DrGPointCostume methodsFor: 'layout' stamp: ''!constraintTextPosition: aPoint|center vector|	center := drawable worldToMorph: mathItem point.	vector := aPoint - center.	^textPositionDelta := self computeTextPositionDelta: vector	! !!DrGPointCostume methodsFor: 'updating' stamp: ''!editFreePointOnCurveProperty	| answer |	answer := self view 		textEntry:  'Edit this curvilinear abscissa in [0;1]' translated 		title: 'Edit this value' translated 		entryText: mathItem abscissa asString.	answer isEmptyOrNil ifTrue: [^self]. " cancelled"	[answer := answer asNumber]		on: Error		do: [^ self view alert: 'I can''t read your value.' translated].	self domain propertyCommandFor: mathItem with: answer! !!DrGPointCostume methodsFor: 'layout' stamp: ''!distanceTo: aPoint	^morph center dist: aPoint  ! !!DrGPointCostume methodsFor: 'updating' stamp: ''!editMyProperty	mathItem isPropertyEditable ifFalse: [^self].	DrGeoSystem showVirtualKeyboard: true.	mathItem isPointItemOnCurve 		ifTrue: [self editFreePointOnCurveProperty]		ifFalse: [self editFreePointProperty].	DrGeoSystem showVirtualKeyboard: false.! !!DrGPointCostume methodsFor: 'layout' stamp: ''!textPosition	^(drawable worldToMorph: mathItem point) + textPositionDelta! !!DrGPointCostume methodsFor: 'updating' stamp: ''!editFreePointProperty	| answer |	answer := self view 		textEntry:  'Edit the coordinates' translated 		title: 'Edit the coordinates' translated 		xEntryText: mathItem point x		yEntryText: mathItem point y.	(answer anySatisfy: [:each | each isNil]) ifTrue: [^self]. " cancelled"	[answer := answer first asNumber @ answer second asNumber]		on: Error		do: [^ self view alert: 'I can''t read your value.' translated].	self domain propertyCommandFor: mathItem with: answer! !!DrGPointCostumeStyle methodsFor: 'widget' stamp: ''!shapeMorphCollection	^ DrGStylePreference shapeMorphCollection ! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!abscissa	^ self mathItem point x asString! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!shape: anObject	"Set the value of shape"	shape := anObject.	self changed.! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!pointSize: anObject	"Set the value of thickness"	pointSize := anObject.	costume pointSize: (DrGStylePreference pointExtentFor: anObject).	self changed! !!DrGPointCostumeStyle methodsFor: 'widget' stamp: ''!shapeWidget	^  'Shape' translated ->		(self view			newMorphDropListFor: self 			list: #shapeMorphCollection			getSelected: #shapeIndex			setSelected: #shapeIndex: 			help: 'Set the shape of the point.' translated)! !!DrGPointCostumeStyle methodsFor: 'widget' stamp: ''!sizeMorphCollection	^ DrGStylePreference sizeMorphCollection ! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!curvilinearAbscissa	^ self mathItem abscissa asString! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!curvilinearAbscissa: aText	|number|	[number := aText asString asNumber]		on: Error		do: [^ false].	self mathItem abscissa: number.	self changed.	^ true! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!pointSize	"Answer the value of thickness"	^ pointSize! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!pointSizeIndex	"Answer the index of thickness"	^DrGStylePreference pointSizeIndexOf: pointSize! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!abscissa: aText	|number|	[number := aText asString asNumber]		on: Error		do: [^ false].	self mathItem x: number.	self changed.	^ true! !!DrGPointCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current pointColor.	self pointSize: DrGStylePreference current pointSize.	self shape: DrGStylePreference current pointShape! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!pointSizeIndex: index	"Set the value of thickness"	self pointSize: (DrGStylePreference pointSizeFor: index).! !!DrGPointCostumeStyle methodsFor: 'widget' stamp: ''!freePointPropertyWidget	|widgetX widgetY|	widgetX := 'X' ->		((self view			newTextEntryFor: self			getText: #abscissa  			setText: #abscissa: 			help: 'Edit this abscissa.' translated) minWidth: 10;				acceptAction: [:text| 					(self abscissa: text) ifTrue:						[costume domain propertyCommandFor: self mathItem with: self mathItem point]]).	widgetY := 'Y' ->		((self view			newTextEntryFor: self			getText: #ordinate  			setText: #ordinate: 			help: 'Edit this ordinate.' translated) minWidth: 10;				acceptAction: [:text| 					(self ordinate: text) ifTrue:						[costume domain propertyCommandFor: self mathItem with: self mathItem point]]).	^ Array with: widgetX with: widgetY! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!shape	"Answer the value of shape"	^ shape! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!ordinate	^ self mathItem point y asString! !!DrGPointCostumeStyle methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	|attr|	super writeAttributesTo: aNode.	self pointSize = #small ifTrue: [attr := 'Dashed'].	self pointSize = #medium ifTrue: [attr := 'Normal'].	self pointSize = #large ifTrue: [attr := 'Thick'].	aNode attributeAt: #thickness put: attr.	attr := self shape asString capitalized.	self shape = #square ifTrue: [attr := 'Rectangular'].	self shape = #round ifTrue: [attr := 'Round'].	aNode attributeAt: #style put: attr! !!DrGPointCostumeStyle methodsFor: 'widget' stamp: ''!myWidgets 	^ super myWidgets addAll: {self shapeWidget. self sizeWidget}; yourself! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!ordinate: aText	|number|	[number := aText asString asNumber]		on: Error		do: [^ false].	self mathItem y: number.	self changed.	^ true! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!shapeIndex	"Answer the index of the shape"	^ DrGStylePreference pointShapeIndexOf: shape! !!DrGPointCostumeStyle methodsFor: 'widget' stamp: ''!freePointOnCurvePropertyWidget	^ Array with: ('Curvilinear abscissa' translated ->		((self view			newTextEntryFor: self			getText: #curvilinearAbscissa  			setText: #curvilinearAbscissa: 			help: 'Edit this curvilinear abscissa in [0;1].' translated) minWidth: 10;				acceptAction: [:text| 					(self curvilinearAbscissa: text) ifTrue:						[costume domain propertyCommandFor: self mathItem with: self mathItem abscissa]]))! !!DrGPointCostumeStyle methodsFor: 'accessing' stamp: ''!shapeIndex: index	"Set the value of shape"	self shape: (DrGStylePreference pointShapeFor: index)! !!DrGPointCostumeStyle methodsFor: 'widget' stamp: ''!sizeWidget	^  'Size' translated ->		(self view			newMorphDropListFor: self 			list: #sizeMorphCollection			getSelected: #pointSizeIndex			setSelected: #pointSizeIndex: 			help: 'Set the size of the point.' translated)! !!DrGPointFreeItem commentStamp: ''!I represent a free point in the plane!!DrGPointFreeItem methodsFor: 'updating' stamp: ''!property: aProperty 	self point: aProperty.! !!DrGPointFreeItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self point: theParents first.! !!DrGPointFreeItem methodsFor: 'accessing' stamp: ''!point: aPoint	super point: aPoint.	self rehash ! !!DrGPointFreeItem methodsFor: 'testing' stamp: ''!isLockable 	^ true! !!DrGPointFreeItem methodsFor: 'testing' stamp: ''!doParentsExist	^ true! !!DrGPointFreeItem methodsFor: 'accessing' stamp: ''!isLocked	^ locked ifNil: [locked := false]! !!DrGPointFreeItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isFreePointOnPlaneItem	^true! !!DrGPointFreeItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem	^ self point = aMathItem point! !!DrGPointFreeItem methodsFor: 'comparing' stamp: ''!rehash	^hash := super rehash bitXor: point hash! !!DrGPointFreeItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	"It is important to return the node"	| node|	node :=  super writeAsXmlTo: aNode.	node addElement:  ((XMLElement named: #x) addContent: (XMLStringNode string: point x asString));		addElement: ((XMLElement named: #y) addContent: (XMLStringNode string: point y asString)).	^node! !!DrGPointFreeItem methodsFor: 'updating' stamp: ''!move: aPoint	self isLocked ifFalse: [		self point: point + aPoint]	! !!DrGPointFreeItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Free! !!DrGPointFreeItem methodsFor: 'updating' stamp: ''!property 	^ self point! !!DrGPointFreeItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isFreePointItem	^true! !!DrGPointFreeItem methodsFor: 'accessing' stamp: ''!locked: aBoolean	locked := aBoolean ! !!DrGPointFreeItem methodsFor: 'updating' stamp: ''!moveAt: aPoint	self isLocked ifFalse: [		self point: aPoint]	! !!DrGPointFreeItem methodsFor: 'accessing' stamp: ''!x: aNumber	self point: aNumber @ self point y! !!DrGPointFreeItem methodsFor: 'accessing' stamp: ''!y: aNumber	self point: self point x @ aNumber! !!DrGPointFreeItem methodsFor: 'accessing' stamp: ''!parents: aCollection	parents := nil.! !!DrGPointHomothetyItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGPointHomothetyItem methodsFor: 'updating' stamp: ''!update|center|	self doParentsExist ifTrue:		[center := parents second point.		point := center + 			(parents third valueItem * (parents first point - center))].! !!DrGPointIntersectionBuilder commentStamp: ''!The build the intersection between two curves. One or two output may be created!!DrGPointIntersectionBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	curveItemA := curveItemB := nil! !!DrGPointIntersectionBuilder methodsFor: 'testing' stamp: ''!isArcSelected	"does the user selected two arcs ?"	^ (curveItemA isCircleItem or: [curveItemA isArcItem]) or: [		curveItemB isCircleItem or: [curveItemB isArcItem]]! !!DrGPointIntersectionBuilder methodsFor: 'accessing' stamp: ''!arguments 	^{curveItemA . curveItemB.  point}! !!DrGPointIntersectionBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	curveItemA ifNil: [		curveItemA := aMathItemCollection first.		^self].	curveItemB ifNil: [curveItemB := aMathItemCollection first]! !!DrGPointIntersectionBuilder methodsFor: 'updating' stamp: ''!buildItem 	^ self isArcSelected		ifFalse: [super buildItem] 		ifTrue: [{			self mathItemClass newWith: self arguments k: 1.			self mathItemClass newWith: self arguments k: -1}]! !!DrGPointIntersectionBuilder methodsFor: 'testing' stamp: ''!readyToBuild 	^ curveItemA notNil & curveItemB notNil ! !!DrGPointIntersectionBuilder methodsFor: 'xml' stamp: ''!itemInstanceFrom: node	"We only want intersection point"	|arguments k|	arguments := self parentsById: node.	"We by-pass the builder because it requires the user mouse position at intersection request "	k :=  (node attributeAt: 'extra') asInteger = 0 ifTrue: [-1] ifFalse: [1].	^self mathItemClass newWith: arguments k: k.! !!DrGPointIntersectionBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	aMathItemCollection ifEmpty: [^false].	^ aMathItemCollection first isIntersectableItem 		and: [curveItemA isNil or: [curveItemB isNil]]! !!DrGPointIntersectionBuilder methodsFor: 'as yet unclassified' stamp: ''!postProcess: item from: node	|k|	super postProcess: item from: node.	k :=  (node attributeAt: 'extra') asInteger = 0 ifTrue: [-1] ifFalse: [1].	item k: k! !!DrGPointIntersectionBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	^ DrGPointIntersectionItem! !!DrGPointIntersectionBuilder class methodsFor: 'documentation' stamp: ''!description	^'Intersection(s) of two curves.' translated! !!DrGPointIntersectionBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Intersection' translated! !!DrGPointIntersectionItem commentStamp: ''!k 				- (-1) or 1 when they are 2 intersection points!!DrGPointIntersectionItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents"check for the right intersection point when one parent is a circle or an arc"|pointA pointB clicPoint|	super initialize: theParents.	k := 0. "0 when only one intersection"	(theParents first isCircleItem 		or: [theParents second isCircleItem	 		or: [theParents first isArcItem				or: [theParents second isArcItem]]])		ifFalse: [^self].	pointA := [theParents first intersectionWith: theParents second flag: -1] on: Error do: [nil].	pointB := [theParents first intersectionWith: theParents second flag: 1] on: Error do: [nil].	pointA ifNil: [^ self k: 1].	pointB ifNil: [^ self k: -1].	clicPoint := theParents third.	(pointA squaredDistanceTo: clicPoint) < (pointB squaredDistanceTo: clicPoint)		ifTrue: [self k: -1] 		ifFalse: [self k: 1]! !!DrGPointIntersectionItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointIntersectionItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isIntersectionPointItem	^true! !!DrGPointIntersectionItem methodsFor: 'comparing' stamp: ''!rehash	^hash := (super rehash bitXor: k ) bitXor: point hash ! !!DrGPointIntersectionItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode 	| node |	node := super writeAsXmlTo: aNode.	node		attributeAt: #extra		put: (k = 1				ifTrue: ['1']				ifFalse: ['0']).	^node! !!DrGPointIntersectionItem methodsFor: 'accessing' stamp: ''!k	^k! !!DrGPointIntersectionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Intersection! !!DrGPointIntersectionItem methodsFor: 'updating' stamp: ''!update	|aPoint|	self doParentsExist ifTrue:		[aPoint := [(parents first intersectionWith: parents second flag: k)] on: Error do: [nil].		aPoint 			ifNil: [exist := false]			ifNotNil: 				[exist := true.				self point: aPoint]].! !!DrGPointIntersectionItem methodsFor: 'accessing' stamp: ''!k: integer 	k := integer.	self update.	self rehash! !!DrGPointIntersectionItem methodsFor: 'accessing' stamp: ''!parents: aCollection 	"We only need the 1st and 2nd mathItem in the collection. The 3rd one is a Point instance (position the user clicked) only used at initialization time"	aCollection isEmptyOrNil ifTrue: 		[parents := aCollection.		^self].	parents := OrderedCollection new		add: aCollection first;		add: aCollection second;		yourself.! !!DrGPointIntersectionItem methodsFor: 'comparing' stamp: ''!= aMathItem	^ super = aMathItem and: [k = aMathItem k]! !!DrGPointIntersectionItem class methodsFor: 'as yet unclassified' stamp: ''!newWith: theParents k: integer	"Instantiate this mathItem with these parents	Parents contains other MathItem instance, sometime it contains other object as Point"	^self new 		parents: theParents; 		k: integer;		update;		rehash;		yourself! !!DrGPointItem methodsFor: 'printing' stamp: ''!printOn: aStream	self printType: DrGFlyPointBuilder title on: aStream.	self printCoordinates: point on: aStream! !!DrGPointItem methodsFor: 'accessing' stamp: ''!point: aPoint	point := aPoint .! !!DrGPointItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem	^true! !!DrGPointItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isPointItem	^true! !!DrGPointItem methodsFor: 'testing' stamp: ''!isPropertyEditable	^ self isFreePointItem ! !!DrGPointItem methodsFor: 'accessing' stamp: ''!basicType	^#point! !!DrGPointItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	^ self point  ! !!DrGPointItem methodsFor: 'scripting' stamp: ''!moveTo: aPoint	self moveAt: aPoint.	self update.	self rehash.! !!DrGPointItem methodsFor: 'accessing' stamp: ''!costumeClass 	^DrGPointCostume ! !!DrGPointItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGPointItem methodsFor: 'updating' stamp: ''!moveAt: aPoint! !!DrGPointItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This point %1' translated! !!DrGPointItem methodsFor: 'accessing' stamp: ''!point	^point ! !!DrGPointMiddle2ptsItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointMiddle2ptsItem methodsFor: 'comparing' stamp: ''!rehash	^ hash := ((self parents sorted: [:ptA :ptB | ptA point <= ptB point]) hash bitXor: self nodeType hash) bitXor: self basicType hash! !!DrGPointMiddle2ptsItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem	((parents first = aMathItem parents first) and: [parents second = aMathItem parents second]) 		ifTrue: [^true].	((parents first = aMathItem parents second) and: [parents second = aMathItem parents first]) 		ifTrue: [^true].	^ false! !!DrGPointMiddle2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'Middle_2pts'! !!DrGPointMiddle2ptsItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self point: (parents first point + parents second point) / 2].! !!DrGPointMiddlesegmentItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem 	^ parents first = aMathItem parents first! !!DrGPointMiddlesegmentItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #'Middle_segment'! !!DrGPointMiddlesegmentItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self point: (parents first origin + (parents first direction / 2))].! !!DrGPointMorph methodsFor: 'change reporting' stamp: ''!invalidRect: damageRect	^ super invalidRect: (damageRect  expandBy:  2)! !!DrGPointMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas| shape |	shape := costume style shape.	shape == #square ifTrue:		[shape := self bounds. 		aCanvas setPaint: self color].	shape == #round ifTrue:		[aCanvas setPaint: self color.		shape := aCanvas createPath: [ :builder |			builder absolute;				moveTo: self leftCenter;				cwArcTo: self rightCenter angle: Float pi;				cwArcTo: self leftCenter angle: Float pi].			aCanvas setPaint: self color].	shape == #cross ifTrue:		[shape := aCanvas createPath: [ :builder |			builder absolute;				moveTo: self topLeft;				lineTo: self bottomRight;				moveTo: self topRight;				lineTo: self bottomLeft].		(aCanvas setStrokePaint: self color) width: 2].	aCanvas setShape: shape .	aCanvas draw! !!DrGPointMorph methodsFor: 'initializing' stamp: ''!initialize	super initialize.	self extent: 4@4! !!DrGPointMorph methodsFor: 'geometry testing' stamp: ''!containsPoint: aPoint	^(self bounds expandBy: 20) containsPoint: aPoint! !!DrGPointMorph methodsFor: 'drawing' stamp: ''!drawOn: aCanvas|shape|	shape := costume style shape.	shape == #square ifTrue:		[aCanvas fillRectangle: self bounds color: self color].	shape == #round ifTrue:		[aCanvas fillOval: self bounds color: self color].	shape == #cross ifTrue:		[aCanvas 			line: self topLeft + (1@1) 			to: self bottomRight - (1@1) 			width: 2 			color: self color.		aCanvas 			line: self topRight + (-1@1) 			to: self bottomLeft - (-1@1) 			width: 2				color: self color]! !!DrGPointOncurveItem methodsFor: 'accessing' stamp: ''!property: aProperty 	self setCurveAbscissa: aProperty.! !!DrGPointOncurveItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents. 	self doParentsExist ifTrue:		[self point: (theParents first closestPointTo: theParents second).		self abscissa: (theParents first abscissaOf: self point)].	self rehash! !!DrGPointOncurveItem methodsFor: 'accessing' stamp: ''!abscissa	^abscissa! !!DrGPointOncurveItem methodsFor: 'testing' stamp: ''!isLockable 	^ true! !!DrGPointOncurveItem methodsFor: 'comparing' stamp: ''!rehash	^hash := super rehash bitXor: abscissa hash! !!DrGPointOncurveItem methodsFor: 'accessing' stamp: ''!isLocked	^ locked ifNil: [locked := false]! !!DrGPointOncurveItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isPointItemOnCurve	^true! !!DrGPointOncurveItem methodsFor: 'accessing' stamp: ''!abscissa: anAbscissa	abscissa := anAbscissa.	abscissa > 1 ifTrue: [abscissa := 1].	abscissa < 0 ifTrue: [abscissa := 0].	self rehash! !!DrGPointOncurveItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	"It is important to return the node"	| node|	node := super writeAsXmlTo: aNode.	node addElement:  ((XMLElement named: #value) addContent: (XMLStringNode string: abscissa  asString)).	^node! !!DrGPointOncurveItem methodsFor: 'updating' stamp: ''!move: aPoint	self isLocked ifFalse: [		self point: (parents first closestPointTo: point + aPoint).		self abscissa: (parents first abscissaOf: self point)]! !!DrGPointOncurveItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'On_curve'! !!DrGPointOncurveItem methodsFor: 'accessing' stamp: ''!property 	^ self abscissa ! !!DrGPointOncurveItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isFreePointItem	^true! !!DrGPointOncurveItem methodsFor: 'accessing' stamp: ''!locked: aBoolean	locked := aBoolean ! !!DrGPointOncurveItem methodsFor: 'updating' stamp: ''!moveAt: aPoint	self isLocked ifFalse: [		self point: (parents first closestPointTo: aPoint).		self abscissa: (parents first abscissaOf: self point)]! !!DrGPointOncurveItem methodsFor: 'scripting' stamp: ''!setCurveAbscissa: aFloat 	self abscissa: aFloat.	self update! !!DrGPointOncurveItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self point: (parents first pointAt: abscissa).		(point x isInfinite or: [point y isInfinite ]) ifTrue: [exist := false]].! !!DrGPointOncurveItem methodsFor: 'accessing' stamp: ''!parents: aCollection"We only need the first mathItem in the collection. The second one is a Point instance (position the user clicked) only used at initialization time"	aCollection isEmptyOrNil ifTrue: 		[parents := aCollection.		^self].	parents := OrderedCollection new add: aCollection first;yourself.! !!DrGPointOncurveItem methodsFor: 'comparing' stamp: ''!= aMathItem	^ super = aMathItem 		and: [self abscissa = aMathItem abscissa ]! !!DrGPointReflexionItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGPointReflexionItem methodsFor: 'updating' stamp: ''!update	self doParentsExist	ifTrue:		[self point: (parents first point					reflexionBy: parents second origin 					direction: parents second direction)].! !!DrGPointRotationItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGPointRotationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist	ifTrue:		[self point: (parents first point			rotateBy: parents third valueItem negated 			about: parents second point)].! !!DrGPointScriptItem commentStamp: ''!A DrGPointByScriptItem is definied by the returned value of a script.The script valueItem should understand asPoint.Instance Variables!!DrGPointScriptItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Script! !!DrGPointScriptItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self point: parents first valueItem asPoint]. ! !!DrGPointSymmetryItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGPointSymmetryItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: 		[self point: (2 * parents second point) - parents first point].! !!DrGPointTranslationItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^true! !!DrGPointTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Translation! !!DrGPointTranslationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self point: parents first point + parents second direction].! !!DrGPolygonBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	points := OrderedCollection new! !!DrGPolygonBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	^ DrGPolygonCostume ! !!DrGPolygonBuilder methodsFor: 'accessing' stamp: ''!arguments	^points allButLast! !!DrGPolygonBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	points add: aMathItemCollection first.	self addToFlyingItem: points last.! !!DrGPolygonBuilder methodsFor: 'initialize-release' stamp: ''!initialize	points := OrderedCollection new.! !!DrGPolygonBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ points size > 2 and: [points first = points last]! !!DrGPolygonBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection^aMathItemCollection notEmpty	and: [aMathItemCollection first isPointItem	and: [points isEmpty		or: [(points first = aMathItemCollection first and: [ points size > 2])		or: [(points includes: aMathItemCollection first) not]]]]! !!DrGPolygonBuilder methodsFor: 'flying costume' stamp: ''!addToFlyingItem: anItem	self isNotInteractive ifTrue: [^self].	points size = 2 ifTrue: [		self initializeFlyingCostume.		movingPoint := DrGPointFreeItem new point: anItem point + (0.1 @ 0.1).		flyingItem := self mathItemClass 			newWith: ((OrderedCollection withAll: points) add: movingPoint; yourself).		self showFlyingCostume].	points size > 2 ifTrue: [		movingPoint := DrGPointFreeItem new point: anItem point + (0.1 @ 0.1).		flyingItem parents: (flyingItem parents								add: movingPoint;								yourself).		flyingCostume redraw.		flyingCostume morph changed]! !!DrGPolygonBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGPolygonNptsItem! !!DrGPolygonBuilder methodsFor: 'xml' stamp: ''!parentsById: node	|arguments|	"To instantiate a polygon we need the first summit to be duplucated at the end of the point collection"	arguments := super parentsById: node.	arguments addLast: arguments first.	^ arguments ! !!DrGPolygonBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Polygon by n points: last point must be the initial point to terminate.' translated! !!DrGPolygonBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Polygon' translated! !!DrGPolygonCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGPolygoneMorph new.! !!DrGPolygonCostume methodsFor: 'updating' stamp: ''!redraw	super redraw ifFalse: [^ self].	morph setVertices: (mathItem points collect: [:point | drawable worldToMorph: point])! !!DrGPolygonCostume methodsFor: 'testing' stamp: ''!basicType	^#polygon! !!DrGPolygonCostume methodsFor: 'style' stamp: ''!styleClass	^DrGPolygonCostumeStyle ! !!DrGPolygonCostume methodsFor: 'layout' stamp: ''!constraintTextPosition: aPoint|center vector answer|	answer := mathItem closestPointInfoTo: (drawable morphToWorld: aPoint).	center := answer first.	anchorAbscissa := answer second.	center := drawable worldToMorph: center.	vector := aPoint - center.	^textPositionDelta := self computeTextPositionDelta: vector.! !!DrGPolygonCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current polygonColor.	self lineStyle: DrGStylePreference current polygonStyle.	self thickness: DrGStylePreference current polygonThickness.	self fill: DrGStylePreference current polygonFilled.	self translucent: DrGStylePreference current polygonTranslucent.	self arrow: #makeNoArrows! !!DrGPolygonHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGPolygonHomothetyItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGPolygonHomothetyItem methodsFor: 'updating' stamp: ''!update|center factor|	self doParentsExist ifTrue:		[center := parents second point.		factor := parents third valueItem.		points := OrderedCollection new.		parents first points do: [:point |			points add: (center + (factor * (point - center)))].		self computeLength].! !!DrGPolygonItem methodsFor: 'testing' stamp: ''!isCloneable	^ true! !!DrGPolygonItem methodsFor: 'printing' stamp: ''!printOn: aStream 	self printType: DrGPolygonBuilder title on: aStream.	aStream nextPutAll: ' edges=' translated;		nextPutAll: points size printString! !!DrGPolygonItem methodsFor: 'computing' stamp: ''!clone	|clonedPoints clone|	clonedPoints := points collect: [:aPoint | DrGPointFreeItem newWith: {aPoint + (0.2@0.2)}].	clone := DrGPolygonNptsItem newWith: clonedPoints.	^ (OrderedCollection withAll: clonedPoints) add: clone; yourself! !!DrGPolygonItem methodsFor: 'accessing' stamp: ''!length	^length ! !!DrGPolygonItem methodsFor: 'accessing' stamp: ''!sidesLength	^ sidesLength ! !!DrGPolygonItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem	^true! !!DrGPolygonItem methodsFor: 'computing' stamp: ''!abscissaOf: aPoint in: side"To speed up calculs, we better know the side where is the point"|distanceToPoint|	distanceToPoint := 0.	1 to: side - 1 do: [:i |		distanceToPoint := distanceToPoint + (sidesLength at: i)].	distanceToPoint := distanceToPoint + (aPoint dist: (points at: side)).	^ distanceToPoint / length! !!DrGPolygonItem methodsFor: 'computing' stamp: ''!abscissaOf: aPoint ^ (self closestPointInfoTo: aPoint) second! !!DrGPolygonItem methodsFor: 'accessing' stamp: ''!basicType	^#polygon! !!DrGPolygonItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	^ (self closestPointInfoTo: aPoint) first! !!DrGPolygonItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem 	^ true! !!DrGPolygonItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isPolygonItem	^true! !!DrGPolygonItem methodsFor: 'computing' stamp: ''!closestPointInfoTo: aPoint"the closest point on the polygon and its curvilinear abscissa in [0 ; 1]"|closestPoint smallestDistance side|	smallestDistance := 1e9.	points withIndexDo: [:p :i | | distance point |		point := self closestPointTo: aPoint 					from: p					to:  (points at: i + 1 ifAbsent: [points at: 1]).		distance := aPoint dist: point.		distance < smallestDistance			ifTrue:				[smallestDistance := distance.				closestPoint := point.				side := i]].	^{closestPoint . self abscissaOf: closestPoint in: side}! !!DrGPolygonItem methodsFor: 'accessing' stamp: ''!costumeClass 	^ DrGPolygonCostume ! !!DrGPolygonItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isIntersectableItem	^ false! !!DrGPolygonItem methodsFor: 'computing' stamp: ''!pointAt: anAbscissa|distanceToPoint leftDistanceToPoint sum|	distanceToPoint := leftDistanceToPoint := anAbscissa * length.	sum := 0.	sidesLength withIndexDo: [:s :i |		sum := sum + s.		sum >= distanceToPoint 			ifTrue:				["point is on this side"				|pointA pointB vector|				pointA := points at: i.				pointB := points at: i + 1 ifAbsent: [points at: 1].				pointA = pointB 					ifTrue: [vector := 0@0]					ifFalse:	[vector := (pointB - pointA) / (pointA dist: pointB)].				^pointA + (vector * leftDistanceToPoint)].		leftDistanceToPoint := leftDistanceToPoint - s]! !!DrGPolygonItem methodsFor: 'accessing' stamp: ''!points	^points! !!DrGPolygonItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint from: pointA to: pointB"the closest point to aPoint in [AB]"|abscissa vector squareNorm|	vector := pointB - pointA.	squareNorm := vector dotProduct: vector.	abscissa := (aPoint - pointA) dotProduct: vector.	abscissa < 0 ifTrue: [abscissa := 0].	abscissa > squareNorm ifTrue: 		[abscissa := squareNorm].	^ pointA + (abscissa * vector / squareNorm asFloat)! !!DrGPolygonItem methodsFor: 'updating' stamp: ''!computeLength	length := 0.	sidesLength := OrderedCollection new.	points  withIndexDo: [:p :i |		length := length + 			(sidesLength add: (p dist: (points at: i + 1 ifAbsent: [points at: 1])))].	^length! !!DrGPolygonItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName| sides |	sides := self points size.	sides = 3 ifTrue: [^ 'This triangle %1' translated].	sides = 4 ifTrue: [^ 'This quadrilateral %1' translated].	^ 'This polygon %1' translated! !!DrGPolygonNptsItem methodsFor: 'comparing' stamp: ''!parentsEqual: aPolygon	|shiftedCollection|	self parents size = aPolygon parents size ifFalse: [^false].	shiftedCollection := self parents.	shiftedCollection size timesRepeat: [		shiftedCollection = aPolygon parents ifTrue: [^true].		shiftedCollection := shiftedCollection shiftRight].	shiftedCollection := self parents reverse.	shiftedCollection size timesRepeat: [		shiftedCollection = aPolygon parents ifTrue: [^true].		shiftedCollection := shiftedCollection shiftRight].	^ false! !!DrGPolygonNptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #npts! !!DrGPolygonNptsItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[points := OrderedCollection new.		parents do: [:pointItem |			points add: pointItem point].		self computeLength].! !!DrGPolygonReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGPolygonReflexionItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGPolygonReflexionItem methodsFor: 'updating' stamp: ''!update|axe|	self doParentsExist 	ifTrue:		[axe := parents second.		points := OrderedCollection new.		parents first points do: [:point |			points add: (point reflexionBy: axe origin direction: axe direction)].		self computeLength].! !!DrGPolygonRegularBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	center := pointA := value := nil! !!DrGPolygonRegularBuilder methodsFor: 'accessing' stamp: ''!arguments	^ {center. pointA. value}! !!DrGPolygonRegularBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint| item |	super addItem: aMathItemCollection at: aPoint.	item := aMathItemCollection first.	item isPointItem ifTrue: [		center isNil ifTrue: [^ center := item].		pointA isNil ifTrue: [^ pointA := item]].	(item isValueItem and: [value isNil]) ifTrue: [		value := item]! !!DrGPolygonRegularBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^(center notNil and: [pointA notNil and: [value notNil ]])! !!DrGPolygonRegularBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^ aMathItemCollection notEmpty and: [		(aMathItemCollection first isPointItem and: [center isNil or: [pointA isNil]]) or: [			aMathItemCollection first isValueItem and: [value isNil]]]! !!DrGPolygonRegularBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	^ DrGPolygonRegularItem ! !!DrGPolygonRegularBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Regular polygon defined by its center, a vertex and its sides number.' translated! !!DrGPolygonRegularBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Regular polygon' translated! !!DrGPolygonRegularItem commentStamp: ''!A regular polygon defined by its center, a vertex and a value (number of summit).!!DrGPolygonRegularItem methodsFor: 'xml writing' stamp: ''!nodeType	^ #Regular! !!DrGPolygonRegularItem methodsFor: 'updating' stamp: ''!moveParent: aPoint"We only move center and the summit, not the value, number of summit."	parents first moveEvent: aPoint.	parents second moveEvent: aPoint.	^ true! !!DrGPolygonRegularItem methodsFor: 'updating' stamp: ''!update|center pointA angle sides|	self doParentsExist ifTrue: [		center := parents first point.		pointA := parents second point.		sides := parents third valueItem rounded abs.		sides < 3 ifTrue: [^ exist := false].		angle := Float twoPi / sides.		points := OrderedCollection new.		sides timesRepeat: [			pointA := points add: (pointA rotateBy: angle about: center)].		self computeLength]! !!DrGPolygonRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGPolygonRotationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGPolygonRotationItem methodsFor: 'updating' stamp: ''!update|center angle|	self doParentsExist ifTrue:		[center := parents second point.		angle := parents third valueItem negated.		points := OrderedCollection new.		parents first points do: [:point |			points add: (point 				rotateBy: angle				about: center)].		self computeLength].! !!DrGPolygonSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGPolygonSymmetryItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGPolygonSymmetryItem methodsFor: 'updating' stamp: ''!update|center|	self doParentsExist 	ifTrue:		[center := parents second point.		points := OrderedCollection new.		parents first points do: [:point |			points add: (2 * center - point)].		self computeLength].! !!DrGPolygonTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Translation! !!DrGPolygonTranslationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGPolygonTranslationItem methodsFor: 'updating' stamp: ''!update|translation|	self doParentsExist 	ifTrue:		[translation := parents second direction.		points := OrderedCollection new.		parents first points do: [:point |			points add: point + translation].		self computeLength].! !!DrGPolygoneMorph methodsFor: 'as yet unclassified' stamp: ''!isCurvier	^ false! !!DrGPolygoneMorph methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self makeClosed.! !!DrGPolygoneMorph methodsFor: 'as yet unclassified' stamp: ''!containsPoint: aPoint	^ costume style isFilled 		"filled: check its area"		ifTrue: [(self bounds containsPoint: aPoint) 			and: [(self filledForm pixelValueAt: aPoint - bounds topLeft + 1) > 0] ]		"not filled: check its lines boundaries"		ifFalse: [ super containsPoint: aPoint ]	! !!DrGPolylineMorph methodsFor: 'stepping and presenter' stamp: ''!stopStepping	super stopStepping.	self color: (costume style isFilled ifTrue: [costume style color] ifFalse: [Color transparent]).	self borderColor: costume style borderColor.! !!DrGPolylineMorph methodsFor: 'accessing' stamp: ''!costume: aCostume	costume := aCostume! !!DrGPolylineMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas 	| polyPath points |		points := self getVertices.	polyPath := aCanvas createPath: [ :builder | 		builder 	absolute.		builder moveTo: (points first).		points allButFirstDo: [ :pt | builder lineTo: pt ].					closed ifTrue: [ builder lineTo: points first ]	].	aCanvas setShape: polyPath.	closed	ifTrue: [ aCanvas setPaint: self fillStyle. aCanvas draw. ].			(aCanvas setStrokePaint: self borderStyle color) 		width: self borderWidth;		dashes: self dashedBorder offset: 0.		aCanvas draw.	self drawArrowsOnAthensCanvas: aCanvas! !!DrGPolylineMorph methodsFor: 'initialization' stamp: ''!initialize	owner := nil.	submorphs := EmptyArray.	bounds := self defaultBounds.	color := self defaultColor.	self borderInitialize.	arrows := #none.	vertices := Array with: 5 @ 0 with: 20 @ 10	with: 0 @ 20.	self makeOpenAndStraight.	blink := false.	self sticky: true.! !!DrGPolylineMorph methodsFor: 'drawing' stamp: ''!drawArrowOnAthensCanvas: aCanvas at: endPoint from: priorPoint	| points wingBase trianglePath|	points := self arrowBoundsAt: endPoint from: priorPoint.	wingBase := points size = 4 				ifTrue: [points third]				ifFalse: [(points copyFrom: 2 to: 3) average].	trianglePath := aCanvas createPath: [ :builder | 		builder 	absolute.		builder moveTo: (points first).		points allButFirstDo: [ :pt | builder lineTo: pt ].					closed ifTrue: [ builder lineTo: points first ]	].	aCanvas setShape: trianglePath.	aCanvas setPaint: self fillStyle. aCanvas draw.	aCanvas draw.	^ wingBase ! !!DrGPolylineMorph methodsFor: 'stepping and presenter' stamp: ''!startBlinking	blink := true.	self startStepping.! !!DrGPolylineMorph methodsFor: 'accessing' stamp: ''!costume	^costume! !!DrGPolylineMorph methodsFor: 'event handling' stamp: ''!handlesMouseDown: evt	^ false! !!DrGPolylineMorph methodsFor: 'as yet unclassified' stamp: ''!isMorphCostume	^true! !!DrGPolylineMorph methodsFor: 'drawing' stamp: ''!drawArrowsOnAthensCanvas: aCanvas	"Answer (possibly modified) endpoints for border drawing"	"ArrowForms are computed only upon demand"	| array |	self hasArrows		ifFalse: [^ #() ].	"Nothing to do"	array := Array with: vertices first with: vertices last.	"Prevent crashes for #raised or #inset borders"	borderColor isColor		ifFalse: [ ^array ].	(arrows == #forward or: [arrows == #both])		ifTrue: [ array at: 2 put: (self				drawArrowOnAthensCanvas: aCanvas				at: vertices last				from: self nextToLastPoint) ].	(arrows == #back or: [arrows == #both])		ifTrue: [ array at: 1 put: (self				drawArrowOnAthensCanvas: aCanvas				at: vertices first				from: self nextToFirstPoint) ].	^array! !!DrGPolylineMorph methodsFor: 'initialization' stamp: ''!makeOpenAndStraight	smoothCurve := false.	closed := false.	self computeBounds.! !!DrGPolylineMorph methodsFor: 'accessing' stamp: ''!blink: aBoolean	blink := aBoolean ! !!DrGPolylineMorph methodsFor: 'stepping and presenter' stamp: ''!step	blink ifFalse: [^self].	super step.	self borderColor = DrGStylePreference blinkingColor 		ifTrue: [self borderColor: costume style borderColor]		ifFalse: [self borderColor: DrGStylePreference blinkingColor]! !!DrGPolylineMorph methodsFor: 'stepping and presenter' stamp: ''!stopBlinking	blink := false.	self stopStepping.! !!DrGPolylineMorph methodsFor: 'geometry testing' stamp: ''!containsPoint: aPoint	self lineSegmentsDo:		[:p1 :p2 |		(aPoint onLineFrom: p1 to: p2 within: 20.0)				ifTrue: [^ true]].	^ false! !!DrGPolylineMorph methodsFor: 'drawing' stamp: ''!drawOn: aCanvas 	|array |	closed ifTrue:		[aCanvas drawPolygon: self getVertices fillStyle: self fillStyle].	array := self drawArrowsOn: aCanvas.	self drawBorderOn: aCanvas usingEnds: array.! !!DrGPolylineMorph methodsFor: 'stepping and presenter' stamp: ''!stepTime	^500! !!DrGPropertyCommand commentStamp: ''!A command to record property editing!!DrGPropertyCommand methodsFor: 'accessing' stamp: ''!property: aProperty	property := aProperty ! !!DrGPropertyCommand methodsFor: 'command' stamp: ''!execute	|temp|	temp := mathItem property.	mathItem property: property.	property := temp. 	mathItem changed! !!DrGPropertyCommand methodsFor: 'command' stamp: ''!unexecute	self execute! !!DrGPropertyCommand methodsFor: 'accessing' stamp: ''!mathItem: aMathItem 	mathItem := aMathItem ! !!DrGPropertyCommand class methodsFor: 'as yet unclassified' stamp: ''!for: aMathItem with: aProperty in: aDomain	^self new		domain: aDomain;		mathItem: aMathItem;		property: aProperty! !!DrGPropertyTool commentStamp: ''!A tool to edit the property of some object like free point, free point on curve,  free value and script!!DrGPropertyTool methodsFor: 'as yet unclassified' stamp: ''!presenter: aPresenter	super presenter: aPresenter.	self app forceVisible: false.! !!DrGPropertyTool methodsFor: 'updating' stamp: ''!reset	super reset.	self switchState: DrGPropertyToolState! !!DrGPropertyTool methodsFor: 'as yet unclassified' stamp: ''!costume: aCostume	costume ifNotNil: [		costume stopBlinking.		costume releasePropertyWidget].	costume := aCostume.	costume ifNotNil: [costume startBlinking]	! !!DrGPropertyTool methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection" only items whose property are editable "	^ aMathItemCollection first isPropertyEditable! !!DrGPropertyTool class methodsFor: 'documentation' stamp: ''!description	^ 'Edit an item''s property' translated! !!DrGPropertyTool class methodsFor: 'documentation' stamp: ''!title	^ 'Property' translated! !!DrGPropertyToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	aCostumeCollection 		ifNotEmpty: 			[self context costume: aCostumeCollection first.			aCostumeCollection first editMyProperty].! !!DrGRay2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'2pts'! !!DrGRayBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	^ DrGRayCostume! !!DrGRayBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGRay2ptsItem! !!DrGRayBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Half-Line defined by two points, the first selected point is the origin.' translated! !!DrGRayBuilder class methodsFor: 'documentation' stamp: ''!title	^'Ray' translated ! !!DrGRayCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGRayMorph new! !!DrGRayCostume methodsFor: 'updating' stamp: ''!redraw	super redraw 		ifFalse: [^ self].	morph		from: (drawable worldToMorph: mathItem origin)		direction: (drawable vectorToMorph: mathItem direction)! !!DrGRayCostume methodsFor: 'testing' stamp: ''!basicType	^#ray! !!DrGRayCostume methodsFor: 'style' stamp: ''!styleClass	^DrGRayCostumeStyle! !!DrGRayCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current rayColor.	self lineStyle: DrGStylePreference current rayStyle.	self thickness: DrGStylePreference current rayThickness! !!DrGRayHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGRayHomothetyItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGRayHomothetyItem methodsFor: 'updating' stamp: ''!update	self homothetyUpdate! !!DrGRayItem methodsFor: 'printing' stamp: ''!printOn: aStream 	self printType: DrGRayBuilder title on: aStream.	self printCoordinates: origin on: aStream! !!DrGRayItem methodsFor: 'computing' stamp: ''!clone	|pointA pointB clone|	pointA := DrGPointFreeItem newWith: {self origin + (0.2@0.2)}.	pointB := DrGPointFreeItem newWith: {self origin + self direction + (0.2@0.2)}.	clone := DrGRay2ptsItem newWith: {pointA . pointB}.	^ {pointA . pointB . clone}! !!DrGRayItem methodsFor: 'accessing' stamp: ''!basicType	^#ray! !!DrGRayItem methodsFor: 'computing' stamp: ''!abscissaOf: aPoint 	| v |	[ v := vector normalized ] on: ZeroDivide do: [ v := 0 @ 0 ].	^(aPoint - origin dotProduct: v) arcTan 		* DrGDirectionItem inv2Pi! !!DrGRayItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	|unitVector abscissa|	[ unitVector := vector normalized ] on: ZeroDivide do: [ unitVector := 0 @ 0 ].		abscissa := aPoint - origin dotProduct: unitVector.	abscissa < 0 ifTrue: [abscissa := 0].	^origin + (abscissa * unitVector)! !!DrGRayItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem	^true! !!DrGRayItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isRayItem	^true! !!DrGRayItem methodsFor: 'computing' stamp: ''!pointAt: anAbscissa	|point|	anAbscissa = 1 		ifTrue:			[|infX infY|			point := vector.			point x > 0 				ifTrue: [infX := Float infinity] 				ifFalse: [infX := 0 - Float infinity].			point y > 0				ifTrue: [infY :=	Float infinity] 				ifFalse: [infY := 0 - Float infinity].			point := infX@infY]		ifFalse:			[anAbscissa = 0				ifTrue: [point := origin]				ifFalse:					[| v |					[ v := vector normalized ] on: ZeroDivide do: [ v := 0 @ 0 ].					point := origin + ((anAbscissa * Float halfPi) tan * v)]].	^point! !!DrGRayItem methodsFor: 'accessing' stamp: ''!costumeClass 	^DrGRayCostume ! !!DrGRayItem methodsFor: 'computing' stamp: ''!intersectionWith: aCurveItem flag: aFlag|aPoint|	aCurveItem isLineItem 		ifTrue: 			[aPoint := self intersectionWithDirection: aCurveItem.			(self contains: aPoint)				ifTrue: [^aPoint]				ifFalse: [^nil]].	(aCurveItem isSegmentItem or: [aCurveItem isRayItem])		ifTrue:			[aPoint := self intersectionWithDirection: aCurveItem.			((self contains: aPoint) and: [aCurveItem contains: aPoint])				ifTrue: [^aPoint]				ifFalse: [^nil]].	(aCurveItem isCircleItem		or: [aCurveItem isArcItem])		ifTrue:			[^aCurveItem intersectionWith: self flag: aFlag].! !!DrGRayItem methodsFor: 'testing' stamp: ''!contains: aPoint	^ ((vector crossProduct: (aPoint - origin)) closeTo: 0) 		and: [((aPoint - origin) dotProduct: vector) >= 0]! !!DrGRayItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This half-line %1' translated! !!DrGRayMorph commentStamp: ''!A DGRayMorph is extended in one 'sens' to the boundary of its parents morph, a drawable in Dr. Geo   jargon.!!DrGRayMorph methodsFor: 'layout' stamp: ''!extendFrom: origin direction: u	| border drawable r |	drawable := costume drawable.	r := u x asFloat / u y.	border := u y > 0		ifTrue: [ Point				x: (drawable bottom - origin y) * r + origin x				y: drawable bottom ]		ifFalse: [ Point x: (drawable top - origin y) * r + origin x y: drawable top ].	super from: origin to: border! !!DrGRayMorph methodsFor: 'accessing' stamp: ''!from: aPoint direction: u	u y abs < 0.001 		ifTrue: [self extendHorizontally: aPoint direction: u]		ifFalse: [self extendFrom: aPoint direction: u]! !!DrGRayMorph methodsFor: 'layout' stamp: ''!extendHorizontally: origin direction: u	| border drawable |	drawable := costume drawable.	border := u x > 0		ifTrue: [ Point x: drawable right y: origin y ]		ifFalse: [ Point x: drawable left y: origin y ].	self from: origin to: border! !!DrGRayReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGRayReflexionItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGRayReflexionItem methodsFor: 'updating' stamp: ''!update	self reflexionUpdate ! !!DrGRayRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGRayRotationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGRayRotationItem methodsFor: 'updating' stamp: ''!update	self rotationUpdate ! !!DrGRaySymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGRaySymmetryItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGRaySymmetryItem methodsFor: 'updating' stamp: ''!update	self symmetryUpdate ! !!DrGRayTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Translation! !!DrGRayTranslationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGRayTranslationItem methodsFor: 'updating' stamp: ''!update	self translationUpdate ! !!DrGReflectionBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	axe := mathItem := nil! !!DrGReflectionBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection  at: aPoint.	(aMathItemCollection first isLineItem and: [axe isNil])		ifTrue: [axe := aMathItemCollection first]		ifFalse: [mathItem := aMathItemCollection first]! !!DrGReflectionBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^axe notNil and: [mathItem notNil]! !!DrGReflectionBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty 		and: [(aMathItemCollection first isLineItem 		and: [axe isNil])			or: [aMathItemCollection first isGeometricItem 				and: [mathItem isNil]]]! !!DrGReflectionBuilder methodsFor: 'accessing' stamp: ''!arguments: aMathItem	^{aMathItem . axe}! !!DrGReflectionBuilder methodsFor: 'constant' stamp: ''!mathItemClass: aMathItem	|className|	className := 'DrG', aMathItem basicType capitalized, 'ReflexionItem'.	^(self class environment classNamed: className)! !!DrGReflectionBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Reflexion: select a line and a geometric object. Reflexion axe is the first selected line.' translated! !!DrGReflectionBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Reflection' translated! !!DrGRotationBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	center := value := mathItem := nil! !!DrGRotationBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	(aMathItemCollection first isPointItem and: [center isNil])		ifTrue: [center := aMathItemCollection first. ^self].	(aMathItemCollection first isValueItem and: [value isNil])		ifTrue: [value := aMathItemCollection first. ^self].	mathItem := aMathItemCollection first! !!DrGRotationBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^center notNil and: [value notNil and: [mathItem notNil]]! !!DrGRotationBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^ aMathItemCollection notEmpty 		and: [(aMathItemCollection first isPointItem and: [center isNil])			or: [(aMathItemCollection first isValueItem and: [value isNil])			or: [aMathItemCollection first isGeometricItem and: [mathItem isNil]]]]! !!DrGRotationBuilder methodsFor: 'accessing' stamp: ''!arguments: aMathItem	^{aMathItem . center . value}! !!DrGRotationBuilder methodsFor: 'constant' stamp: ''!mathItemClass: aMathItem	|className|	className := 'DrG', aMathItem basicType capitalized, 'RotationItem'.	^(self class environment classNamed: className)! !!DrGRotationBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Rotation: select a point, a value and a geometric object. The first selected point is the rotation center.' translated! !!DrGRotationBuilder class methodsFor: 'documentation' stamp: ''!title 	^ 'Rotation' translated! !!DrGScriptBrowser commentStamp: ''!I can browse Dr. Geo user scripts.!!DrGScriptBrowser methodsFor: 'querying' stamp: ''!methodsIn: composite  	composite wrapper  title: 'Methods' translated;		show: [ :wrapper |			wrapper fastList 				display: [ :aClass | aClass methods collect: [ :m | m asRingDefinition ]];				format: [ :aCompiledMethod | aCompiledMethod selector asString ] ].	composite wrapper title:  'Script data' translated;		show: [ :wrapper |			wrapper fastList 				display: [ :aClass | aClass class methods collect: [ :m | m asRingDefinition ]];				format: [ :aCompiledMethod | aCompiledMethod selector asString ] ].	composite updateOn: MethodModified from: [ SystemAnnouncer uniqueInstance ].	composite onChangeOfPort: #activePresentation act: [ :presentation | 		(presentation pane port: #activePresentation) value ifNotNil: [ :activePresentation | 			((browser paneNamed: #methods) port: #selection) value: (activePresentation defaultPane port: #selection) value ] ].! !!DrGScriptBrowser methodsFor: 'instance creation' stamp: ''!open: title	self buildBrowser.	browser title:  title.	browser openOn: self organizer.! !!DrGScriptBrowser methodsFor: 'querying' stamp: ''!sourceIn: composite	^ composite pharoMethod 		title: 'Source code' translated;		smalltalkClass: [ :each | each methodClass];		display: [ :aCompiledMethod | aCompiledMethod sourceCode ];		updateOn: MethodModified from: [ SystemAnnouncer uniqueInstance ];		act: [ :presentation :compiledMethod |			compiledMethod methodClass compile: presentation text.			presentation update.] 		on: $s 		entitled: 'Save' translated! !!DrGScriptBrowser methodsFor: 'querying' stamp: ''!scriptsIn: constructor	constructor fastList		title: 'Scripts' translated;		display: [ :organiser |  organiser ];		format: #scriptName;		updateOn: MethodModified from: [ SystemAnnouncer uniqueInstance ].! !!DrGScriptBrowser methodsFor: 'querying' stamp: ''!organizer	^ DrGeoUserScript allSubclasses ! !!DrGScriptBrowser methodsFor: 'submorphs-add/remove' stamp: ''!delete	browser ifNotNil: [ 		browser window ifNotNil: [ :view | view delete ].		browser := nil]! !!DrGScriptBrowser methodsFor: 'building' stamp: ''!buildBrowser	browser := GLMTabulator new.	browser initialExtent: 550@450.	browser		row: [ :aRow | aRow column: #scripts; column: #methods ];		row: #source.	browser transmit	to: #scripts; andShow: [ :a | 			self scriptsIn: a ].	browser transmit	from: #scripts;  to: #methods; andShow: [ :composite | 			self methodsIn: composite ].	browser transmit from: #methods; to: #source;  andShow: [ :composite | 		self sourceIn: composite ].	^ browser! !!DrGScriptBrowser class methodsFor: 'instance creation' stamp: ''!open	^ self open:  'Dr. Geo script browser' translated.! !!DrGScriptBrowser class methodsFor: 'instance creation' stamp: ''!open: title	^ self new open: title! !!DrGScriptCostume commentStamp: ''!A costume for script.The morph view is deduced from the DrGeoScript specific class. Class known by the MathItemScript instance.!!DrGScriptCostume methodsFor: 'accessing' stamp: ''!borderColor: aColor	morph borderColor: aColor! !!DrGScriptCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGTextMorph new autoFit: true.	morph contents: '';		font: DrGeoSystem canvasFont;		backgroundColor: Color white.	mathItem valueItem isText		ifTrue: [morph contents: mathItem valueItem]		ifFalse: [morph contents: self roundedValueString]! !!DrGScriptCostume methodsFor: 'accessing' stamp: ''!fontSize: integer	morph font: (DrGeoSystem canvasFont: integer).! !!DrGScriptCostume methodsFor: 'style' stamp: ''!styleClass	^ DrGTextCostumeStyle ! !!DrGScriptCostume methodsFor: 'updating' stamp: ''!editMyProperty	DrGeoSystem showVirtualKeyboard: true.	editor := DrGScriptEditor openOnScript: mathItem script class.	SystemAnnouncer uniqueInstance weak when: MethodModified send: #update: to: self domain.! !!DrGScriptCostume methodsFor: 'initialize-release' stamp: ''!releasePropertyWidget	editor ifNotNil: 		[ editor  delete.		editor := nil.		DrGeoSystem showVirtualKeyboard: false ]! !!DrGScriptCostume methodsFor: 'accessing' stamp: ''!backgroundColor: aColor	morph backgroundColor: aColor! !!DrGScriptDesignerDialog commentStamp: ''!I am a dialog to design a DrGeo script: - its name- its description- its attributes types!!DrGScriptDesignerDialog methodsFor: 'instance creation' stamp: ''!newAddArgumentButton	^ self newButtonFor: self 		getState: nil 		action: #addArgument		arguments: nil		getEnabled: nil		label: 'Add argument' translated		help: 'Add an argument to this script.' translated.! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!description: anObject	description := anObject.	self changed: #description! !!DrGScriptDesignerDialog methodsFor: 'instance creation' stamp: ''!newOKButton	^ self newButtonFor: self		getState: nil		action: #ok		arguments: nil		getEnabled: #isValid		label: 'Build' translated 		help: 'Build a script with these settings.'! !!DrGScriptDesignerDialog methodsFor: 'actions' stamp: ''!newContentMorph	self scriptNameMorph: self newScriptNameMorph.	self descriptionMorph: self newDescriptionMorph.	self argumentsMorph: self newArgumentsMorph .	^ self newLabelGroup: {		'Name' translated -> self scriptNameMorph.		'Description' translated -> self descriptionMorph.		'Arguments' translated -> self argumentsMorph}! !!DrGScriptDesignerDialog methodsFor: 'geometry' stamp: ''!minimumExtent	^ 620@300! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!argumentsMorph: aMorph	argumentsMorph := aMorph ! !!DrGScriptDesignerDialog methodsFor: 'initialization' stamp: ''!morphicLayerNumber	^ 90! !!DrGScriptDesignerDialog methodsFor: 'instance creation' stamp: ''!newArgumentsMorph	^ (AlignmentMorph inARow: {addArgumentButton := self newAddArgumentButton})		borderWidth: 0;		wrapDirection: #topToBottom;		hResizing: #spaceFill;		yourself.! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!scriptNameMorph: anObject	scriptNameMorph := anObject! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!arguments "The arguments as selected by the user"|alignments|	alignments := self argumentsMorph submorphs select: [ :morph | morph class = AlignmentMorph].	^  alignments collect: [ :each | each submorphs second selectedItem].	! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!descriptionMorph	^ descriptionMorph ! !!DrGScriptDesignerDialog methodsFor: 'actions' stamp: ''!removeArgument: alignment	argumentsMorph removeMorph: alignment ! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!descriptionMorph: anObject	descriptionMorph := anObject! !!DrGScriptDesignerDialog methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self title: 'Build a new script' translated.	self addCornerGrips.! !!DrGScriptDesignerDialog methodsFor: 'instance creation' stamp: ''!newScriptNameMorph	^(self		newTextEntryFor: self		getText: #scriptName		setText: #scriptName:		getEnabled: nil		help: 'The name of the script.' translated)		acceptOnCR: false;		changedAction: [:text | self changed: #isValid ];		selectAll! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!argumentsType"The arguments type as selected by the user, tpye=class from the MathItem hierarchy"|dict|	dict := self class labelToType.	^ self arguments collect: [:aLabel | dict at: aLabel]! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!scriptName	^ scriptName! !!DrGScriptDesignerDialog methodsFor: 'as yet unclassified' stamp: ''!newButtons	"Answer new buttons as appropriate."	^{self newOKButton isDefault: false. self newCancelButton}! !!DrGScriptDesignerDialog methodsFor: 'instance creation' stamp: ''!newDescriptionMorph	^(self		newTextEditorFor: self		getText: #description		setText: #description:		getEnabled: nil)		acceptOnCR: false;		setBalloonText: 'A description of the script. To help the user, describe carefully what the script does and the input arguments to select to use it.' translated;		changedAction: [:text | self changed: #isValid ];		selectAll! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!argumentsMorph	^ argumentsMorph ! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!description	^ description! !!DrGScriptDesignerDialog methodsFor: 'actions' stamp: ''!addArgument	"user just request for a new argument: add a del button and a droplist with the argument type the user can select"	| button dropList alignment |	alignment := AlignmentMorph newRow		color: Color transparent;		wrapCentering: #center;		cellPositioning: #center.	dropList := self		newDropListFor:			(ListModel new				items: self class labels;				setSelectedIndex: (self class indexOfLabel: 'Any type' translated))		list: #getList		getSelected: #selectedIndex		setSelected: #setSelectedIndex:		help: 'Select the type of this script argument.' translated.	dropList minWidth: 80.	button := self		newButtonFor: self		getState: nil		action: #removeArgument:		arguments: {alignment}		getEnabled: nil		labelForm: #smallCancelIcon asIcon		help: 'Remove this script argument.' translated.	alignment		addMorphBack: button;		addMorphBack: dropList.	argumentsMorph addMorph: alignment inFrontOf: addArgumentButton! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!scriptName: anObject	scriptName := anObject.	self changed: #scriptName.	self scriptNameMorph selectAll! !!DrGScriptDesignerDialog methodsFor: 'testing' stamp: ''!isValid"respond wheter the given input data is valid to build a script"| name |	name := self scriptNameMorph textMorph contents asString.	name withBlanksCondensed isEmpty ifTrue: [ ^ false ].	self descriptionMorph textMorph contents asString withBlanksCondensed isEmpty ifTrue: [ ^ false ].	(Smalltalk hasClassNamed: #DrGeoScript, name hash printString) ifTrue: [ ^ false ].	^ true! !!DrGScriptDesignerDialog methodsFor: 'accessing' stamp: ''!scriptNameMorph	^ scriptNameMorph ! !!DrGScriptDesignerDialog methodsFor: 'focus handling' stamp: ''!defaultFocusMorph	^ self scriptNameMorph textMorph! !!DrGScriptDesignerDialog class methodsFor: 'as yet unclassified' stamp: ''!labels	^ self labelToType keys sorted! !!DrGScriptDesignerDialog class methodsFor: 'as yet unclassified' stamp: ''!labelToType	^ Dictionary newFrom: {		'Any type' translated -> DrGMathItem.		'Point' translated -> DrGPointItem.		'Direction' translated -> DrGDirectionItem.		'Line' translated -> DrGLineItem.		'Ray' translated -> DrGRayItem.		'Segment' translated -> DrGSegmentItem.		'Polygon' translated -> DrGPolygonItem.		'Vector' translated -> DrGVectorItem.		'Circle' translated -> DrGCircleItem.		'Arc' translated -> DrGArcItem.		'Locus' translated -> DrGLocus2ptsItem.		'Value' translated -> DrGValueItem.		'Angle' translated -> DrGAngleItem}! !!DrGScriptDesignerDialog class methodsFor: 'as yet unclassified' stamp: ''!typeToLabel	| dict |	dict := Dictionary new.	self labelToType associationsDo: [ :assoc | 		dict add: assoc value -> assoc key ].	^ dict	! !!DrGScriptDesignerDialog class methodsFor: 'as yet unclassified' stamp: ''!indexOfLabel: string	^ self labels indexOf: string! !!DrGScriptEditor commentStamp: ''!I can browser *one* Dr. Geo user script, to view or/and to edit its contents.!!DrGScriptEditor methodsFor: 'instance creation' stamp: ''!open: scriptClass	self buildBrowser.	browser title:  ('Edit script: {1}' translated format: {scriptClass scriptName}) .	browser openOn: scriptClass ! !!DrGScriptEditor methodsFor: 'building' stamp: ''!buildBrowser	browser := GLMTabulator new.	browser initialExtent: 550@450.	browser row:  #methods;  row: #source.	browser transmit	to:  #methods; andShow: [ :composite | 			self methodsIn: composite ].	browser transmit from: #methods; to: #source;  andShow: [ :composite | 		self sourceIn: composite ].	^ browser! !!DrGScriptEditor class methodsFor: 'instance creation' stamp: ''!open	self shouldNotImplement ! !!DrGScriptEditor class methodsFor: 'instance creation' stamp: ''!open: title	self shouldNotImplement ! !!DrGScriptEditor class methodsFor: 'instance creation' stamp: ''!openOnScript: scriptClass	^ self new open: scriptClass ! !!DrGScriptPlayTool methodsFor: 'updating' stamp: ''!changedScript" the builder inform us the user selected another script,do some cleaning"	self selectNoCostume! !!DrGScriptPlayTool methodsFor: 'initialize-release' stamp: ''!registerDependant: anObject	builder when: #changedState send: #switchState: to: self.	builder when: #cancel send: #cancel to: self.	builder when: #readyToBuild send: #readyToBuild to: anObject.	builder when: #changedScript send: #changedScript to: self! !!DrGScriptPlayer methodsFor: 'xml' stamp: ''!basicItemFrom: node"create a scrip item then set its script from the xml node information"| item |	item := super basicItemFrom: node.	item script: (node attributeAt: #class) asClass.	^ item! !!DrGScriptPlayer methodsFor: 'testing' stamp: ''!reset	super reset.	input := OrderedCollection new.! !!DrGScriptPlayer methodsFor: 'initialize-release' stamp: ''!removeEvents	wizard removeActionsWithReceiver: self! !!DrGScriptPlayer methodsFor: 'accessing' stamp: ''!arguments	^ (OrderedCollection withAll: input)		add: scriptClass;		add: point;		yourself! !!DrGScriptPlayer methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint"Take the point position only when the user clic somewhere in the background"	aMathItemCollection ifEmpty: 		[point := aPoint.		^self].	input size < scriptClass argumentsType size		ifTrue: [self addToggleItem: aMathItemCollection in: input]		ifFalse: [input remove: aMathItemCollection first ifAbsent: []]! !!DrGScriptPlayer methodsFor: 'accessing' stamp: ''!input	^input! !!DrGScriptPlayer methodsFor: 'accessing' stamp: ''!description: aText 	! !!DrGScriptPlayer methodsFor: 'callback' stamp: ''!page: integer 	"we receive notification from the wizard the user change the wizard	current page"	| newState |	integer = 1 		ifTrue: [ newState := DrGMacroToolStateNeutral ]		ifFalse: [ newState := DrGMacroPlayToolStateSelect].	self 		triggerEvent: #changedState		with: newState! !!DrGScriptPlayer methodsFor: 'initialize-release' stamp: ''!registerEvents	wizard when: #page send: #page: to: self.	wizard when: #cancel send: #cancel to: self.! !!DrGScriptPlayer methodsFor: 'initialize-release' stamp: ''!initialize	wizard := (DrGWizardScript builder: self) openInWorld.	input := OrderedCollection new.	self registerEvents! !!DrGScriptPlayer methodsFor: 'dependents access' stamp: ''!release	self removeEvents.	wizard delete.	wizard := nil! !!DrGScriptPlayer methodsFor: 'accessing' stamp: ''!scriptClass: anObject	scriptClass := anObject.	input := OrderedCollection new.	self triggerEvent: #changedScript.! !!DrGScriptPlayer methodsFor: 'initialize-release' stamp: ''!basicInitialize	input := OrderedCollection new.! !!DrGScriptPlayer methodsFor: 'callback' stamp: ''!cancel	self triggerEvent: #cancel! !!DrGScriptPlayer methodsFor: 'testing' stamp: ''!readyToBuild	scriptClass ifNil: [^false].	^ input size = scriptClass argumentsType size and: [ point isNil not ]! !!DrGScriptPlayer methodsFor: 'xml' stamp: ''!itemInstanceFrom: node	self scriptClass: (node attributeAt: #class) asClass.	self add: #() at: 0@0.	(self parentsById: node) do: [:each |	self addItem: {each} at: 0@0].	^ self getItem first.! !!DrGScriptPlayer methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	"We are now performing type checking for script, we are also interestedin empty aMathItemCollection, (ie: just get the clic position in the background)"	scriptClass ifNil: [^false].	aMathItemCollection ifEmpty: [ ^ true ].	^ input size = scriptClass argumentsType size 		ifTrue: 			[input includes: aMathItemCollection first]		ifFalse: 			[aMathItemCollection first class includesBehavior: (scriptClass argumentsType at: input size + 1)]! !!DrGScriptPlayer methodsFor: 'accessing' stamp: ''!description	| comment |	^ scriptClass		ifNil: [nil]		ifNotNil: 			[comment := scriptClass description.			comment isEmpty 				ifTrue: ['No description, write one in the description method of this script.' translated]				ifFalse: [comment]]! !!DrGScriptPlayer methodsFor: 'accessing' stamp: ''!scriptClass	^ scriptClass! !!DrGScriptPlayer methodsFor: 'xml' stamp: ''!postProcess: item from: node	super postProcess: item from: node.	self parseValuePosition: node of: item! !!DrGScriptPlayer methodsFor: 'testing' stamp: ''!mathItemClass	^DrGValueScriptItem ! !!DrGScriptPlayer class methodsFor: 'xml' stamp: ''!basicItemFrom: node"create a basic item (unitialised) from this node and add it to the domain, return an item partially initialized. Use for macro node"	| builder |	builder := self basicNew basicInitialize.	^ builder basicItemFrom: node! !!DrGScriptPlayer class methodsFor: 'xml' stamp: ''!itemFrom: node in: aDrgeoApp"create an item from this node and add it to the domain, return a couple {item. boolean}"	| builder |	builder := self basicNew basicInitialize; app: aDrgeoApp; yourself.	^ builder itemFrom: node! !!DrGScriptPlayer class methodsFor: 'documentation' stamp: ''!description	^ 'Insert a Smalltalk script in the drawing area.' translated! !!DrGScriptPlayer class methodsFor: 'documentation' stamp: ''!title	^ 'Use a script' translated! !!DrGScriptPlayerHeadless methodsFor: 'as yet unclassified' stamp: ''!initialize	input := OrderedCollection new.! !!DrGScriptPlayerHeadless methodsFor: 'as yet unclassified' stamp: ''!release! !!DrGSegment2ptsItem methodsFor: 'comparing' stamp: ''!rehash	^ hash := ((self parents sorted: [:ptA :ptB | ptA point <= ptB point]) hash bitXor: self nodeType hash) bitXor: self basicType hash! !!DrGSegment2ptsItem methodsFor: 'comparing' stamp: ''!parentsEqual: aMathItem	((parents first = aMathItem parents first) and: [parents second = aMathItem parents second]) 		ifTrue: [^true].	((parents first = aMathItem parents second) and: [parents second = aMathItem parents first]) 		ifTrue: [^true].	^ false! !!DrGSegment2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'2pts'! !!DrGSegmentBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeArguments	^ {pointA. movingPoint}.! !!DrGSegmentBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointA := pointB := nil! !!DrGSegmentBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	^ DrGSegmentCostume! !!DrGSegmentBuilder methodsFor: 'accessing' stamp: ''!arguments	^{pointA . pointB}! !!DrGSegmentBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection  at: aPoint.	pointA ifNil: 		[pointA := aMathItemCollection first.		self addToFlyingItem: pointA.		^ self].	pointB ifNil: [		pointB := aMathItemCollection first]	! !!DrGSegmentBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^ pointA notNil and: [pointB notNil]! !!DrGSegmentBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^aMathItemCollection notEmpty		and: [aMathItemCollection first isPointItem			and: [aMathItemCollection first ~= pointA]]! !!DrGSegmentBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGSegment2ptsItem! !!DrGSegmentBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Segment defined by two points.' translated! !!DrGSegmentBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Segment' translated! !!DrGSegmentCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGSegmentMarkMorph new! !!DrGSegmentCostume methodsFor: 'updating' stamp: ''!redraw	super redraw 		ifFalse: [^ self].	morph		from: (drawable worldToMorph: mathItem origin)		to: (drawable worldToMorph: mathItem origin + mathItem direction)! !!DrGSegmentCostume methodsFor: 'testing' stamp: ''!basicType	^#segment! !!DrGSegmentCostume methodsFor: 'style' stamp: ''!styleClass	^DrGSegmentCostumeStyle! !!DrGSegmentCostumeStyle methodsFor: 'widget' stamp: ''!markMorphCollection	^ DrGStylePreference markMorphCollection! !!DrGSegmentCostumeStyle methodsFor: 'accessing' stamp: ''!mark	^ mark ifNil: [mark := #none]! !!DrGSegmentCostumeStyle methodsFor: 'as yet unclassified' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current segmentColor.	self lineStyle: DrGStylePreference current segmentStyle.	self thickness: DrGStylePreference current segmentThickness.	self mark: DrGStylePreference current segmentMark.	self arrow: DrGStylePreference current segmentArrow! !!DrGSegmentCostumeStyle methodsFor: 'widget' stamp: ''!markWidget	^ 'Mark' translated ->		(self view			newMorphDropListFor: self			list: #markMorphCollection			getSelected: #markIndex			setSelected: #markIndex:			help: 'Set a mark to the segment.' translated)! !!DrGSegmentCostumeStyle methodsFor: 'accessing' stamp: ''!markIndex: index	self mark: (DrGStylePreference markFor: index)! !!DrGSegmentCostumeStyle methodsFor: 'accessing' stamp: ''!mark: aSymbol	mark := aSymbol.	self changed! !!DrGSegmentCostumeStyle methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	super writeAttributesTo: aNode.	aNode attributeAt: #mark put: self mark! !!DrGSegmentCostumeStyle methodsFor: 'accessing' stamp: ''!markIndex	mark ifNil: [mark := #none].	^DrGStylePreference markIndexOf: mark! !!DrGSegmentCostumeStyle methodsFor: 'widget' stamp: ''!myWidgets 	^ super myWidgets addAll: {self markWidget}; yourself! !!DrGSegmentHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGSegmentHomothetyItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGSegmentHomothetyItem methodsFor: 'updating' stamp: ''!update	self homothetyUpdate ! !!DrGSegmentItem methodsFor: 'printing' stamp: ''!printOn: aStream 	self printType: DrGSegmentBuilder title on: aStream.	aStream nextPut: Character space.	self printDecimal: self length on: aStream.! !!DrGSegmentItem methodsFor: 'computing' stamp: ''!clone	|pointA pointB clone|	pointA := DrGPointFreeItem newWith: {self extremity1 + (0.2@0.2)}.	pointB := DrGPointFreeItem newWith: {self extremity2 + (0.2@0.2)}.	clone := DrGSegment2ptsItem newWith: {pointA . pointB}.	^ {pointA . pointB . clone}! !!DrGSegmentItem methodsFor: 'accessing' stamp: ''!length	^ self direction r! !!DrGSegmentItem methodsFor: 'accessing' stamp: ''!basicType	^#segment! !!DrGSegmentItem methodsFor: 'computing' stamp: ''!abscissaOf: aPoint	^((aPoint - origin) dotProduct: vector) / (vector dotProduct: vector)! !!DrGSegmentItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	|abscissa squareNorm|	abscissa := (aPoint - origin) dotProduct: vector.	squareNorm := vector dotProduct: vector.	abscissa < 0 ifTrue: [abscissa := 0].	abscissa > squareNorm ifTrue: 		[abscissa := squareNorm].	^ origin + (abscissa * vector / squareNorm asFloat)! !!DrGSegmentItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem	^true! !!DrGSegmentItem methodsFor: 'computing' stamp: ''!pointAt: anAbscissa	^ origin + (anAbscissa * vector)! !!DrGSegmentItem methodsFor: 'accessing' stamp: ''!costumeClass 	^DrGSegmentCostume ! !!DrGSegmentItem methodsFor: 'computing' stamp: ''!intersectionWith: aCurveItem flag: aFlag|aPoint|	aCurveItem isLineItem		ifTrue:			[aPoint := self intersectionWithDirection: aCurveItem.			aPoint ifNil: [^nil].			(self contains: aPoint)				ifTrue: [^aPoint]				ifFalse: [^nil]].	aCurveItem isSegmentItem		ifTrue:			[aPoint := self intersectionWithDirection: aCurveItem.			aPoint ifNil: [^nil].			((self contains: aPoint) and: [aCurveItem contains: aPoint])				ifTrue: [^aPoint]				ifFalse: [^nil]].	(aCurveItem isRayItem 		or: [aCurveItem isCircleItem			or: [aCurveItem isArcItem]])		ifTrue:			[^aCurveItem intersectionWith: self flag: aFlag].			! !!DrGSegmentItem methodsFor: 'accessing' stamp: ''!extremity1	^ origin ! !!DrGSegmentItem methodsFor: 'testing' stamp: ''!contains: aPoint|anAbscissa|	^ ((vector crossProduct: (aPoint - origin)) closeTo: 0) 		and: [(anAbscissa := self abscissaOf: aPoint) >= 0			and: [anAbscissa <= 1]]! !!DrGSegmentItem methodsFor: 'accessing' stamp: ''!extremity2	^ self pointAt: 1! !!DrGSegmentItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This segment %1' translated! !!DrGSegmentItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isSegmentItem	^true! !!DrGSegmentItem methodsFor: 'accessing' stamp: ''!middle	^ self extremity1 + self extremity2 / 2! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawDiscOn: aCanvas 	| rectangle|	rectangle := Rectangle 		center: (vertices first + vertices second // 2)		extent: (4 @ 4 + (self borderWidth  * 2)).	aCanvas fillOval: rectangle color: self borderColor.! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawOn: aCanvas	super drawOn: aCanvas.	self drawMarkOn: aCanvas! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMark2On: aCanvas 	|center vector u n startPoint endPoint |	startPoint := vertices at: 1.	endPoint := vertices at: 2.	vector := endPoint - startPoint.	[u := vector normalized] on: ZeroDivide do: [u := 0@1].	n := u y @ u x negated.	vector :=  (u + n ) normalized * (self borderWidth + 1 * 3).	center := (startPoint + endPoint / 2) - (u * (self borderWidth  * 1.5)).	2 timesRepeat: [		aCanvas 			line: center - vector			to: center + vector			width: self borderWidth  			color: self borderColor.		center := center + (u * (self borderWidth  * 3))].! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMark1On: aCanvas 	|center vector u n startPoint endPoint |	startPoint := vertices at: 1.	endPoint := vertices at: 2.	center := startPoint + endPoint / 2.	vector := endPoint - startPoint.	[u := vector normalized] on: ZeroDivide do: [u := 0@1].	n := u y @ u x negated.	vector :=  (u + n ) normalized * (self borderWidth + 1 * 3).	aCanvas 		line: center - vector		to: center + vector		width: self borderWidth  		color: self borderColor.! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawCircleOnAthens: aCanvas 	|rectangle path|	rectangle := Rectangle 		center:  (vertices first + vertices second / 2)		extent: (4 @ 4 + (self borderWidth  * 2)).	path := aCanvas createPath: [ :builder |		builder absolute;			moveTo: rectangle leftCenter;			cwArcTo: rectangle rightCenter angle: Float pi;			cwArcTo: rectangle leftCenter angle: Float pi].	aCanvas setShape: path.	(aCanvas setStrokePaint: self borderColor) width: self borderWidth.	aCanvas draw! !!DrGSegmentMarkMorph methodsFor: 'accessing' stamp: ''!forcedMark: symbol	forcedMark := symbol! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas	super drawOnAthensCanvas: aCanvas.	self drawMarkOnAthensCanvas: aCanvas! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawCircleOn: aCanvas 	|rectangle|	rectangle := Rectangle 		center:  (vertices first + vertices second / 2)		extent: (4 @ 4 + (self borderWidth  * 2)).	aCanvas frameOval: rectangle width: self borderWidth color: self borderColor.! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawDiscOnAthens: aCanvas 	| rectangle path|	rectangle := Rectangle 		center: (vertices first + vertices second / 2)		extent: (4 @ 4 + (self borderWidth  * 2)).	path := aCanvas createPath: [ :builder |		builder absolute;			moveTo: rectangle leftCenter;			cwArcTo: rectangle rightCenter angle: Float pi;			cwArcTo: rectangle leftCenter angle: Float pi].	aCanvas setShape: path;		setPaint: self borderColor;		draw.	(aCanvas setStrokePaint: self borderColor)	 width: self borderWidth.	aCanvas draw.! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMarkOn: aCanvas	|mark|	forcedMark 		ifNotNil: [mark := forcedMark]		ifNil: [mark := costume style mark].	mark == #none ifTrue: [^self].	mark == #mark1 ifTrue: [^ self drawMark1On: aCanvas].	mark == #mark2 ifTrue: [^ self drawMark2On: aCanvas].	mark == #mark3 ifTrue: [^ self drawMark3On: aCanvas].	mark == #disc ifTrue: [^ self drawDiscOn: aCanvas].	mark == #circle ifTrue: [^ self drawCircleOn: aCanvas].	! !!DrGSegmentMarkMorph methodsFor: 'accessing' stamp: ''!costumeMark	forcedMark ifNotNil: [^forcedMark].	costume ifNil: [^#none].	costume style ifNil: [^#none].	^ costume style mark ifNil: [#none]! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMark1OnAthens: aCanvas 	|center vector u n startPoint endPoint path|	startPoint := vertices at: 1.	endPoint := vertices at: 2.	center := startPoint + endPoint / 2.	vector := endPoint - startPoint.	[u := vector normalized] on: ZeroDivide do: [u := 0@1].	n := u y @ u x negated.	vector :=  (u + n ) normalized * (self borderWidth + 1 * 3).	path := aCanvas createPath: [ :builder |		builder absolute;			moveTo: center - vector;			lineTo: center + vector].	aCanvas setShape: path.	(aCanvas setStrokePaint: self borderColor) width: self borderWidth.	aCanvas draw! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMark3On: aCanvas 	|center vector u n startPoint endPoint |	startPoint := vertices at: 1.	endPoint := vertices at: 2.	vector := endPoint - startPoint.	[u := vector normalized] on: ZeroDivide do: [u := 0@1].	n := u y @ u x negated.	vector :=  (u + n ) normalized * (self borderWidth + 1 * 3).	center := (startPoint + endPoint / 2) - (u * (self borderWidth * 3)).	3 timesRepeat: [		aCanvas 			line: center - vector			to: center + vector			width: self borderWidth 			color: self borderColor.		center := center + (u * (self borderWidth  * 3))].! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMarkOnAthensCanvas: aCanvas	|mark|	forcedMark 		ifNotNil: [mark := forcedMark]		ifNil: [mark := costume style mark].	mark == #none ifTrue: [^self].	mark == #mark1 ifTrue: [^ self drawMark1OnAthens: aCanvas].	mark == #mark2 ifTrue: [^ self drawMark2OnAthens: aCanvas].	mark == #mark3 ifTrue: [^ self drawMark3OnAthens: aCanvas].	mark == #disc ifTrue: [^ self drawDiscOnAthens: aCanvas].	mark == #circle ifTrue: [^ self drawCircleOnAthens: aCanvas].	! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMark3OnAthens: aCanvas 	|center vector u n startPoint endPoint path |	startPoint := vertices at: 1.	endPoint := vertices at: 2.	vector := endPoint - startPoint.	[u := vector normalized] on: ZeroDivide do: [u := 0@1].	n := u y @ u x negated.	vector :=  (u + n ) normalized * (self borderWidth + 1 * 3).	center := (startPoint + endPoint / 2) - (u * (self borderWidth * 3)).	3 timesRepeat: [		path := aCanvas createPath: [ :builder |			builder absolute;				moveTo: center - vector;				lineTo: center + vector].		aCanvas setShape: path.		(aCanvas setStrokePaint: self borderColor) width: self borderWidth.		aCanvas draw.				center := center + (u * (self borderWidth  * 3))].! !!DrGSegmentMarkMorph methodsFor: 'private' stamp: ''!computeBounds 	super computeBounds. 	self costumeMark ~= #none ifTrue: [		bounds := bounds merge: (Rectangle			center: (vertices at: 1) + (vertices at: 2) //2			extent: (self borderWidth * 6 + 9) asPoint).		self layoutChanged.		self changed].	! !!DrGSegmentMarkMorph methodsFor: 'drawing' stamp: ''!drawMark2OnAthens: aCanvas 	|center vector u n startPoint endPoint path |	startPoint := vertices at: 1.	endPoint := vertices at: 2.	vector := endPoint - startPoint.	[u := vector normalized] on: ZeroDivide do: [u := 0@1].	n := u y @ u x negated.	vector :=  (u + n ) normalized * (self borderWidth + 1 * 3).	center := (startPoint + endPoint / 2) - (u * (self borderWidth  * 1.5)).	2 timesRepeat: [		path := aCanvas createPath: [ :builder |			builder absolute;				moveTo: center - vector;				lineTo: center + vector].		aCanvas setShape: path.		(aCanvas setStrokePaint: self borderColor) width: self borderWidth.		aCanvas draw.				center := center + (u * (self borderWidth  * 3))].! !!DrGSegmentMorph methodsFor: 'initializing' stamp: ''!initialize	super initialize.	vertices := Array with: 0@0 with: 0@0.! !!DrGSegmentMorph methodsFor: 'accessing' stamp: ''!from: startPoint to: endPoint  	vertices at: 1 put: startPoint.	vertices at: 2 put: endPoint.	self computeBounds! !!DrGSegmentReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGSegmentReflexionItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGSegmentReflexionItem methodsFor: 'updating' stamp: ''!update	self reflexionUpdate ! !!DrGSegmentRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGSegmentRotationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGSegmentRotationItem methodsFor: 'updating' stamp: ''!update	self rotationUpdate ! !!DrGSegmentSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGSegmentSymmetryItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGSegmentSymmetryItem methodsFor: 'updating' stamp: ''!update	self symmetryUpdate ! !!DrGSegmentTranslationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Translation! !!DrGSegmentTranslationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGSegmentTranslationItem methodsFor: 'updating' stamp: ''!update	self translationUpdate ! !!DrGSelectTool commentStamp: ''!start					- the position where start the draggingmathItems                    - the mathItems impacted by the dragging operationcostumes                     - the costumes impacted by the draggin oprationbuilder 				- we have the clone builder, ready to serve, so we have to instantiate it.!!DrGSelectTool methodsFor: 'accessing' stamp: ''!mathItems 	^ mathItems ! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint	^ self pointCostumesFirstAt: aPoint! !!DrGSelectTool methodsFor: 'updating' stamp: ''!reset	super reset.	start := nil.	self switchState: DrGSelectToolStateNeutral.	costumes := nil.	mathItems := nil.	builder ifNotNil: [builder reset].! !!DrGSelectTool methodsFor: 'private' stamp: ''!myCostumesAt: aPoint"	Only costumes where feedback and action are wished, 	not hidden, wanted and under mouse cursor"	^self app costumes select: [:aCostume | 		aCostume style isNotHidden 			and: [(self isWanted: {aCostume mathItem})			and: [aCostume containsPoint: aPoint]]]! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!costumes	^ costumes ! !!DrGSelectTool methodsFor: 'updating' stamp: ''!grabClone: clone"We cloned!! We want to grab the clone to let the user move it somewhere in the canvas"	self costume: (self app costumeOf: clone).	builder reset.	self switchState: DrGSelectToolStateDragged.! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!start	^start! !!DrGSelectTool methodsFor: 'initialize-release' stamp: ''!initialize	self reset.	builder := DrGCloneBuilder new.! !!DrGSelectTool methodsFor: 'as yet unclassified' stamp: ''!updateDirtyItemsList"dirty items are the one needing update, both model and view""	mathItems := self factory dirtyItemsWhen: costume mathItem.	costumes := self app costumesOf: mathItems. "	mathItems := self factory pool.	costumes := self app costumes! !!DrGSelectTool methodsFor: 'as yet unclassified' stamp: ''!pointCostumeToMergeWithAt: aPoint"A collection of point we can merge with. Only free point on plane are merge-able, and the merger should not depend on the initial point as well"	| dependents myCostumes |	^ costume mathItem isFreePointOnPlaneItem 		ifTrue: [			dependents := self app domain factory dependentMathItem: costume mathItem.			myCostumes := self pointCostumesAt: aPoint.			myCostumes select: [:aCostume | aCostume mathItem  ~~ costume mathItem 					and: [(dependents includes: aCostume mathItem) not]]]		ifFalse: [#()]! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!mutableCostumesAt: aPoint"select the costume we can mutate"	^ (self costumesAt: aPoint) select: [:aCostume | |item|		item := aCostume mathItem.		item isFreePointOnPlaneItem 			or: [(item isPointItemOnCurve and: [(self factory is: item parentWithTest: #isLocusItem) not])				or: [item isIntersectionPointItem]]]! !!DrGSelectTool methodsFor: 'testing' stamp: ''!isCloning	^ builder readyToBuild ! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!start: aPoint	start := aPoint ! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!targetMutationCostumeAt: aPoint	"Only the relevant item as target to mute a point, in our case curve,	We need to fine tune this target list"	| curves intersectables |	curves := (self myCostumesAt: aPoint) select: [:aCostume |		aCostume mathItem isCurveItem 		and: [self domain factory is: aCostume mathItem before: self mathItem]].	"if several curves check for the intersectables"	^ curves size > 1 		ifTrue: [  			intersectables := curves select: [ :aCostume |  aCostume mathItem isIntersectableItem].			intersectables size > 1				ifTrue: [intersectables]				ifFalse: [#()]]		ifFalse: [ curves ]! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!description	^ self class description! !!DrGSelectTool methodsFor: 'initialize-release' stamp: ''!registerDependant: anObject	builder when: #readyToBuild send: #readyToBuildClone to: anObject! !!DrGSelectTool methodsFor: 'accessing' stamp: ''!builder	^ builder! !!DrGSelectTool class methodsFor: 'documentation' stamp: ''!description	^ 'Select and move an object.' translated! !!DrGSelectTool class methodsFor: 'documentation' stamp: ''!title 	^ 'Select and Move' translated! !!DrGSelectToolState commentStamp: ''!An abstract state for the select tool and derivate.!!DrGSelectToolState methodsFor: 'accessing' stamp: ''!mathItem "the selected math item"	^ self context mathItem ! !!DrGSelectToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection 	aCostumeCollection 		ifNotEmpty: 			[self context costume: aCostumeCollection first.			self switchState: DrGSelectToolStateSelected.			^true]		ifEmpty: 			[self context reset.			^false]! !!DrGSelectToolStateDragged methodsFor: 'handling' stamp: ''!handleStillPress: aPoint	|merger|	(merger := self context pointCostumeToMergeWithAt: aPoint) notEmpty  ifTrue: 		["I keep pressing while holding a free point"		merger size = 1 			ifTrue: [self handleChoice: merger]			ifFalse: [self context chooseCostume: merger title: 'Select a point to merge with' translated]]! !!DrGSelectToolStateDragged methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint|griddedPoint|	griddedPoint := self context gridPoint: aPoint.	(self context isGridded and: [self mathItem isFreePointItem])		ifFalse:			[self context domain 				moveEvent: self mathItem				inDirection: (self area morphToVector: 									griddedPoint - self context last)				withDirty: self context mathItems.]		ifTrue:			[self context domain 				moveEvent: self mathItem				at: (self area gridWorldPoint: griddedPoint)				withDirty: self context mathItems].	self context last: griddedPoint.	self area updateDottedLinesToParents.	self area restartMouseStillDownHandle.	^ true! !!DrGSelectToolStateDragged methodsFor: 'handling' stamp: ''!handleRelease: aPoint 	self switchState: DrGSelectToolStateNeutral.	"issue a moveCommand"	self context domain 		moveMathItem: self mathItem 		with: (self area morphToVector: 			self context last - self context start).	self area removeDottedLinesToParents.	self context reset.	self app saved: false! !!DrGSelectToolStateDragged methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection "In this state, handle a choice to merge two points"	aCostumeCollection ifNotEmpty: [		aCostumeCollection do: [:aCostume | aCostume stopBlinking].		self context mathItem point: (self area morphToWorld: self context start).		self context domain 			merge: self context mathItem with: aCostumeCollection first mathItem.		self app saved: false].	self context reset.! !!DrGSelectToolStateDraggedBitmap methodsFor: 'accessing' stamp: ''!context: aContext	super context: aContext.	draggedCorner := self context costume isAnyCornerIn: self context start.! !!DrGSelectToolStateDraggedBitmap methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint 	draggedCorner 		ifNil: [super handleMouseAt: aPoint]		ifNotNil: [self magnifyBitmap: aPoint].	^ true! !!DrGSelectToolStateDraggedBitmap methodsFor: 'handling' stamp: ''!magnifyBitmap: aPoint	| displacement unitVector image factor griddedPoint |	griddedPoint := self context gridPoint: aPoint.	displacement := griddedPoint - self context start.	image := self context costume morph.	draggedCorner = #topLeft ifTrue: [		corner ifNil: [corner := image position].		[unitVector := (image center - corner) normalized] on: ZeroDivide do: [unitVector := 0@0]].	draggedCorner =#bottomRight ifTrue: [		corner ifNil: [corner := image position].		[unitVector := (corner - image center) normalized] on: ZeroDivide do: [unitVector := 0@0]].	draggedCorner = #topRight ifTrue: [		corner ifNil: [corner := image topRight].		[unitVector := (image center - corner) normalized] on: ZeroDivide do: [unitVector := 0@0]].	draggedCorner = #bottomLeft ifTrue: [		corner ifNil: [corner := image topRight].		[unitVector := (corner - image center) normalized] on: ZeroDivide do: [unitVector := 0@0]].	factor := (displacement dotProduct: unitVector) / (corner dist: image center).	factor > 1 ifTrue: [factor := 0.9].	originalMagnifyBy ifNil: [originalMagnifyBy := self context mathItem magnifyBy].	self context mathItem magnifyBy: (1 - factor) * originalMagnifyBy.	self context domain updateAllMathItems.	self context last: griddedPoint.! !!DrGSelectToolStateGrabbed methodsFor: 'handling' stamp: ''!handleStillPress: aPoint"The user keeps pressing without moving, he wants a clone"	self context 		start: aPoint;		last: aPoint.	self context builder 		add: {self context mathItem}		at: aPoint.! !!DrGSelectToolStateGrabbed methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint 	"The user is moving, switch to dragging state"	self context		start: aPoint;		last: aPoint.	self context costume isBitmapCostume 		ifTrue: [self switchState: DrGSelectToolStateDraggedBitmap] 		ifFalse: [self area dottedLinesToParentsOf: self  mathItem.			self switchState: DrGSelectToolStateDragged].	^ true! !!DrGSelectToolStateGrabbed methodsFor: 'handling' stamp: ''!handleRelease: aPoint 	self switchState: DrGSelectToolStateNeutral.	self context reset.	self context factory rehash. "After move event rehash the the free positionnable item"! !!DrGSelectToolStateNeutral methodsFor: 'handling' stamp: ''!handleShiftKeyMouseAt: aPoint	"Let's inform about the mutate mode"	| costumes aTip |	costumes := self context mutableCostumesAt: aPoint.	costumes ifEmpty: [		aTip := 'Pressing down the [Shift] key you can drag and change the nature of free point or intersection point.' translated].	costumes size = 1 ifTrue: [		aTip := 'Drag this point to change its nature.' translated].	costumes size > 1 ifTrue: [		aTip := 'Several objects can be selected. Please, select one clicking the mouse.' translated. ].	self area tip: aTip at: aPoint.	^ aTip notNil! !!DrGSelectToolStateNeutral methodsFor: 'handling' stamp: ''!handlePressShiftKey: aPoint 	| costumes griddedPoint|	self area hideTip.	griddedPoint := self context gridPoint: aPoint.	costumes := self context mutableCostumesAt: aPoint.	costumes size = 1 		ifTrue: 			[self context last: griddedPoint.			self context costume: costumes first.			self context updateDirtyItemsList.			self switchState: DrGMutatorToolStateGrabbed. 			^true].	"More than one math item under mouse"	costumes size > 1 		ifTrue: 			[self context last: griddedPoint.			(self context chooseCostume: costumes) 				ifTrue: [self switchState: DrGMutatorToolStateSelected].			^true].	"The user clicked in the background, clear the selection"	self context reset.	^false! !!DrGSelectToolStateNeutral methodsFor: 'testing' stamp: ''!isSelectNeutral	^ true! !!DrGSelectToolStateNeutral methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint	 (super handleMouseAt: aPoint)		ifTrue: [			Cursor webLink isCurrent ifFalse: [ 				self currentHand showTemporaryCursor: Cursor webLink]] 		ifFalse: [			Cursor normal isCurrent ifFalse: [ 				self currentHand showTemporaryCursor: Cursor normal]]! !!DrGSelectToolStateNeutral methodsFor: 'handling' stamp: ''!handlePress: aPoint 	| costumes griddedPoint|	self area hideTip.	griddedPoint := self context gridPoint: aPoint.	costumes := self context costumesAt: aPoint.	costumes size = 1 		ifTrue: 			[self context last: griddedPoint.			self context costume: costumes first.			self context updateDirtyItemsList.			self switchState: DrGSelectToolStateGrabbed.			^true].	"More than one math item under mouse"	costumes size > 1 		ifTrue: 			[self context last: griddedPoint.			self context chooseCostume: costumes.			^true].	"The user clicked in the background, clear the selection"	self context reset.	^false! !!DrGSelectToolStateSelected methodsFor: 'handling' stamp: ''!handleMouseAt: aPoint	|costumes|	costumes := self context costumesAt: aPoint.	^ (costumes includes: self context costume)		ifTrue:			[self area 				tip: self mathItem descriptiveName				at: aPoint.			true]		ifFalse: [self area hideTip.			false]! !!DrGSelectToolStateSelected methodsFor: 'handling' stamp: ''!handlePress: aPoint 	| costumes |	self area hideTip.	costumes := self context costumesAt: aPoint.	(costumes includes: self context costume) 		ifTrue: [			self context updateDirtyItemsList.			self switchState: DrGSelectToolStateGrabbed.			^true]		ifFalse: [ 			self context reset.			^false]! !!DrGService commentStamp: ''!I am a DrGeo app without toolbar, I only come with the wheels and the top menu. I am used to display computed sketches (i.e. sketches constrcuted from Smalltalk code with the DrGeo API)!!DrGService methodsFor: 'accessing' stamp: ''!app	^ app! !!DrGService methodsFor: 'accessing' stamp: ''!app: anObject	app := anObject! !!DrGService methodsFor: 'testing' stamp: ''!isService	^true! !!DrGService methodsFor: 'menus' stamp: ''!popupMenu"Do nothing, we don't have pop up"! !!DrGService methodsFor: 'initialize-release' stamp: ''!installTools 	self 		addMorph: (self wrapMeInAthens: area)		fullFrame: LayoutFrame identity.	area layoutChanged! !!DrGService methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: Color white .	self borderWidth: 1.	self clipSubmorphs: true.	self layoutPolicy: ProportionalLayout new.	area := DrGDrawable newOn: app.	self installTools.	self extent: 800 @ 600! !!DrGService methodsFor: 'accessing' stamp: ''!fullScreen	self position: 0@0.	self extent: World extent! !!DrGService methodsFor: 'accessing' stamp: ''!presenter	^ app presenter! !!DrGService methodsFor: 'initialize-release' stamp: ''!wrapMeInAthens: aMorph	|athensMorph|	athensMorph := AthensWrapMorph new		layoutPolicy: TableLayout new;		hResizing: #spaceFill;		vResizing: #spaceFill;		addMorph: aMorph.	area hResizing: #spaceFill.	^ athensMorph ! !!DrGService methodsFor: 'accessing' stamp: ''!area	^ area! !!DrGService methodsFor: 'accessing' stamp: ''!title	^ 'Unnamed Dr. Geo service' translated! !!DrGService methodsFor: 'accessing' stamp: ''!title: string! !!DrGService methodsFor: 'testing' stamp: ''!isApplication	^false! !!DrGService class methodsFor: 'instance creation' stamp: ''!for: aDrgeo	^ self basicNew app: aDrgeo;		initialize! !!DrGStringMorph methodsFor: 'stepping and presenter' stamp: ''!stopStepping	super stopStepping.	self color: costume style color.! !!DrGStringMorph methodsFor: 'accessing' stamp: ''!costume: anObject	"Set the value of costume"	costume := anObject! !!DrGStringMorph methodsFor: 'geometry testing' stamp: ''!strickContainsPoint: aPoint	^ self bounds containsPoint: aPoint! !!DrGStringMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas"Work around for the conflicting size font problem"	aCanvas pathTransform restoreAfter: [	aCanvas pathTransform scaleBy: 1.00001.		"draw text here"		super drawOnAthensCanvas: aCanvas].! !!DrGStringMorph methodsFor: 'initialization' stamp: ''!initialize	super initialize.	blink := false.	self font: DrGeoSystem canvasFont! !!DrGStringMorph methodsFor: 'stepping and presenter' stamp: ''!startBlinking	blink := true.	self startStepping ! !!DrGStringMorph methodsFor: 'accessing' stamp: ''!costume	"Answer the value of costume"	^ costume! !!DrGStringMorph methodsFor: 'event handling' stamp: ''!handlesMouseDown: evt	^true! !!DrGStringMorph methodsFor: 'stepping and presenter' stamp: ''!step	blink ifFalse: [^self].	super step.	self color = DrGStylePreference blinkingColor 		ifTrue: [self color: costume style color]		ifFalse: [self color: DrGStylePreference blinkingColor]! !!DrGStringMorph methodsFor: 'stepping and presenter' stamp: ''!stopBlinking	blink := false.	self stopStepping.! !!DrGStringMorph methodsFor: 'geometry testing' stamp: ''!containsPoint: aPoint	^ (self bounds expandBy: 20) containsPoint: aPoint! !!DrGStringMorph methodsFor: 'testing' stamp: ''!stepTime	^500! !!DrGStylePreference commentStamp: ''!A singleton to hold the prefered user style for the mathematic items.(SettingBrowser forKeywords: #('drgeosettings')) open.!!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentArrow	^ segmentArrow ifNil: [ segmentArrow := #makeNoArrows ]! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!valueColor: anObject	valueColor := anObject! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!textBorderColor: anObject	textBorderColor := anObject! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonColor: anObject	polygonColor := anObject! !!DrGStylePreference methodsFor: 'line' stamp: ''!lineStyle: anObject	lineStyle := anObject! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleFilled: anObject	circleFilled := anObject! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleStyle: anObject	circleStyle := anObject! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleThickness: anObject	circleThickness := anObject! !!DrGStylePreference methodsFor: 'point' stamp: ''!pointSize	^ pointSize ifNil: [ pointSize := #small ]! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonStyle	^ polygonStyle ifNil: [ polygonStyle := #plain ]! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcFilled	^ arcFilled ifNil: [ arcFilled := false ]! !!DrGStylePreference methodsFor: 'ray' stamp: ''!rayStyle	^ rayStyle ifNil: [ rayStyle := #plain ]! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleTranslucent	^ circleTranslucent ifNil: [ circleTranslucent := true ]! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!textBackgroundColor: anObject	textBackgroundColor := anObject! !!DrGStylePreference methodsFor: 'vector' stamp: ''!vectorThickness: anObject	vectorThickness := anObject! !!DrGStylePreference methodsFor: 'line' stamp: ''!lineColor: anObject	lineColor := anObject! !!DrGStylePreference methodsFor: 'point' stamp: ''!pointColor	^ pointColor ifNil: [ pointColor := Color red ]! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleColor: anObject	circleColor := anObject! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentStyle	^ segmentStyle ifNil: [ segmentStyle := #plain ]! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentThickness: anObject	segmentThickness := anObject! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcColor: anObject	arcColor := anObject! !!DrGStylePreference methodsFor: 'point' stamp: ''!pointShape	^ pointShape ifNil: [ pointShape := #round ]! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonFilled	^ polygonFilled ifNil: [ polygonFilled := true ]! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonColor	^ polygonColor ifNil: [ polygonColor := Color blue ]! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentColor	^ segmentColor ifNil: [ segmentColor := Color black ]! !!DrGStylePreference methodsFor: 'locus' stamp: ''!locusStyle	^ locusStyle ifNil: [ locusStyle := #plain ]! !!DrGStylePreference methodsFor: 'line' stamp: ''!lineColor	^ lineColor ifNil: [ lineColor := Color black ]! !!DrGStylePreference methodsFor: 'locus' stamp: ''!locusColor	^ locusColor ifNil: [ locusColor := Color red ]! !!DrGStylePreference methodsFor: 'vector' stamp: ''!vectorThickness	^ vectorThickness ifNil: [ vectorThickness := #small ]! !!DrGStylePreference methodsFor: 'point' stamp: ''!pointShape: anObject	pointShape := anObject! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleThickness	^ circleThickness ifNil: [ circleThickness := #small ]! !!DrGStylePreference methodsFor: 'line' stamp: ''!lineThickness: anObject	lineThickness := anObject! !!DrGStylePreference methodsFor: 'ray' stamp: ''!rayColor: aColor	rayColor := aColor! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!textColor	^ textColor ifNil: [ textColor := Color black ]! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleTranslucent: anObject	circleTranslucent := anObject! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonTranslucent	^ polygonTranslucent ifNil: [ polygonTranslucent := true ]! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentColor: anObject	segmentColor := anObject! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcStyle	^ arcStyle ifNil: [ arcStyle := #plain ]! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!valueColor	^ valueColor ifNil: [ valueColor := Color black ]! !!DrGStylePreference methodsFor: 'vector' stamp: ''!vectorColor	^ vectorColor ifNil: [ vectorColor := Color black ]! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleStyle	^ circleStyle ifNil: [ circleStyle := #plain ]! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!textColor: anObject	textColor := anObject! !!DrGStylePreference methodsFor: 'vector' stamp: ''!vectorStyle: anObject	vectorStyle := anObject! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleFilled	^ circleFilled ifNil: [ circleFilled := false ]! !!DrGStylePreference methodsFor: 'point' stamp: ''!pointSize: anObject	pointSize := anObject! !!DrGStylePreference methodsFor: 'locus' stamp: ''!locusColor: aColor	locusColor := aColor! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonFilled: anObject	polygonFilled := anObject! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcTranslucent: anObject	arcTranslucent := anObject! !!DrGStylePreference methodsFor: 'line' stamp: ''!lineStyle	^ lineStyle ifNil: [ lineStyle := #plain ]! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcTranslucent	^ arcTranslucent ifNil: [ arcTranslucent := true ]! !!DrGStylePreference methodsFor: 'circle' stamp: ''!circleColor	^ circleColor ifNil: [ circleColor := Color black ]! !!DrGStylePreference methodsFor: 'ray' stamp: ''!rayThickness: aSymbol	rayThickness := aSymbol ! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonStyle: anObject	polygonStyle := anObject! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentArrow: anObject	segmentArrow := anObject! !!DrGStylePreference methodsFor: 'vector' stamp: ''!vectorColor: anObject	vectorColor := anObject! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcThickness: anObject	arcThickness := anObject! !!DrGStylePreference methodsFor: 'locus' stamp: ''!locusStyle: aSymbol	locusStyle := aSymbol ! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcColor	^ arcColor ifNil: [ arcColor := Color black ]! !!DrGStylePreference methodsFor: 'ray' stamp: ''!rayColor	^ rayColor ifNil: [ rayColor := Color black ]! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentMark: anObject	segmentMark := anObject! !!DrGStylePreference methodsFor: 'line' stamp: ''!lineThickness	^ lineThickness ifNil: [ lineThickness := #small ]! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcStyle: anObject	arcStyle := anObject! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonThickness: anObject	polygonThickness := anObject! !!DrGStylePreference methodsFor: 'point' stamp: ''!pointColor: anObject	pointColor := anObject! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcArrow	^ arcArrow ifNil: [ arcArrow := #makeNoArrows ]! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonThickness	^ polygonThickness ifNil: [ polygonThickness := #small ]! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!textBorderColor	^ textBorderColor ifNil: [ textBorderColor := Color transparent]! !!DrGStylePreference methodsFor: 'vector' stamp: ''!vectorStyle	^ vectorStyle ifNil: [ vectorStyle := #plain ]! !!DrGStylePreference methodsFor: 'locus' stamp: ''!locusThickness: aSymbol	locusThickness := aSymbol ! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcArrow: anObject	arcArrow := anObject! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcFilled: anObject	arcFilled := anObject! !!DrGStylePreference methodsFor: 'value & text' stamp: ''!textBackgroundColor	^ textBackgroundColor ifNil: [ textBackgroundColor := Color white ]! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentThickness	^ segmentThickness ifNil: [ segmentThickness := #small ]! !!DrGStylePreference methodsFor: 'locus' stamp: ''!locusThickness	^ locusThickness ifNil: [ locusThickness := #small ]! !!DrGStylePreference methodsFor: 'ray' stamp: ''!rayStyle: aSymbol	rayStyle := aSymbol ! !!DrGStylePreference methodsFor: 'ray' stamp: ''!rayThickness	^ rayThickness ifNil: [ rayThickness := #small ]! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentMark	^ segmentMark ifNil: [ segmentMark := #none ]! !!DrGStylePreference methodsFor: 'arc' stamp: ''!arcThickness	^ arcThickness ifNil: [ arcThickness := #small ]! !!DrGStylePreference methodsFor: 'polygon' stamp: ''!polygonTranslucent: anObject	polygonTranslucent := anObject! !!DrGStylePreference methodsFor: 'segment' stamp: ''!segmentStyle: anObject	segmentStyle := anObject! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'line' stamp: ''!thicknessMorphCollection	^ self thicknessSymbols collect: [:symbol |		(DrGIcons 			segment: (self widthFor: symbol)			color: Color black			dash: nil) asMorph]! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcFilled	^ self current arcFilled! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcColorIndex	^ self colorIndexOf: self current arcColor! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayColorIndex	^ self colorIndexOf: self current rayColor! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayThicknessWidget	^ self thicknessWidget: #rayThicknessIndex! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'line' stamp: ''!styleFor: aStyle	"possible lineStyle"	aStyle = #dot ifTrue: [^ #(2 3)].	aStyle = #dash ifTrue: [^ #(5 8)].	^ nil! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!valueStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #value)		label: 'Value' translated;		order: 100;		parent: #drgeoStyle;		description: 'Set the default style for value.' translated;		with: [ 			(aBuilder setting: #valueColor)				label: 'Colour' translated]! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayThicknessIndex: anIndex	^ self current rayThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointSizeIndex	^ self pointSizeIndexOf: self current pointSize! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcThicknessIndex	^ self thicknessIndexOf: self current arcThickness! !!DrGStylePreference class methodsFor: 'color' stamp: ''!colorFor: index	^ Color perform: (self colorSymbols at: index)! !!DrGStylePreference class methodsFor: 'curve finit' stamp: ''!arrowFor: index	^ self arrowSymbols at: index! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!settingInputWidgetForNode: aSettingDeclaration	^ (aSettingDeclaration name, 'Widget') asSymbol value: self.! !!DrGStylePreference class methodsFor: 'line' stamp: ''!styleLineMorphCollection	^ self lineStyleSymbols collect: [:symbol |		(DrGIcons 			segment: (self widthFor: #small)			color: Color black			dash: (self styleFor: symbol)) asMorph]! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleThicknessWidget	^ self thicknessWidget: #circleThicknessIndex! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineStyleIndexOf: aLineStyle	^ self lineStyleSymbols indexOf: aLineStyle! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcThicknessIndex: anIndex	^ self current arcThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointSizeWidget	^ (UITheme builder			newMorphDropListFor: self			list: #sizeMorphCollection			getSelected: #pointSizeIndex			setSelected: #pointSizeIndex:			help: nil) ! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'point' stamp: ''!shapeMorphCollection	^ self pointShapeSymbols collect: [:symbol |		(DrGIcons 			point: (self pointExtentFor: #medium) 			color: Color black 			shape: symbol) asMorph].! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonFilled: aBoolean	^ self current polygonFilled: aBoolean! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentArrowIndex	^ self arrowIndexOf: self current segmentArrow! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textColorIndex: anIndex	^ self current textColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayStyleIndex	^ self lineStyleIndexOf: self current rayStyle! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointShapeFor: index	^ self pointShapeSymbols at: index! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineColorIndex: anIndex	^ self current lineColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointShapeWidget	^ (UITheme builder			newMorphDropListFor: self			list: #shapeMorphCollection			getSelected: #pointShapeIndex			setSelected: #pointShapeIndex:			help: nil) ! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentStyleIndex	^ self lineStyleIndexOf: self current segmentStyle! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusStyleWidget	^ self styleWidget: #locusStyleIndex! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!arcStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #arc)		label: 'Arc' translated;		order: 70;		parent: #drgeoStyle;		description: 'Set the default style for arc.' translated;		with: [			(aBuilder setting: #arcColor)				order: 1;				label: 'Colour' translated.			(aBuilder setting: #arcStyle)				order: 2;				label: 'Style' translated.			(aBuilder setting: #arcThickness)				order: 3;				label: 'Thickness' translated.			(aBuilder setting: #arcArrow)				order: 4;				label: 'Arrow' translated.				(aBuilder setting: #arcFilled)				order: 5;				label: 'Fill' translated.			(aBuilder setting: #arcTranslucent)				order: 6;				label: 'Translucent' translated].! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!uiThemeClass	^ UITheme current class! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentMarkIndex	^ self markIndexOf: self current segmentMark! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorStyleIndex: anIndex	^ self current vectorStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentArrow"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcStyleIndex: anIndex	^ self current arcStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusThicknessWidget	^ self thicknessWidget: #locusThicknessIndex! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleThicknessIndex	^ self thicknessIndexOf: self current circleThickness! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleThicknessIndex: anIndex	^ self current circleThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleStyleIndex	^ self lineStyleIndexOf: self current circleStyle! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointSize"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!lineStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #line)		label: 'Line' translated;		order:20;		parent: #drgeoStyle;		description: 'Set the default style for line.' translated;		with: [ 			(aBuilder setting: #lineColor)				label: 'Colour' translated.			(aBuilder setting: #lineStyle)				label: 'Style' translated.			(aBuilder setting: #lineThickness)				label: 'Thickness' translated]! !!DrGStylePreference class methodsFor: 'instance creation' stamp: ''!new	self error: 'You may access my unique instance with the #current message.'! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointSizeIndex: anIndex	^ self current pointSize: (self pointSizeFor: anIndex)! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!markIndexOf: aMark	^ self markSymbols indexOf: aMark! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointShapeSymbols	^ #(#cross #round #square)! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcArrowIndex	^ self arrowIndexOf: self current arcArrow! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleColorIndex	^ self colorIndexOf: self current circleColor! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonThicknessWidget	^ self thicknessWidget: #polygonThicknessIndex! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorStyleWidget	^ self styleWidget: #vectorStyleIndex! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonFilled	^ self current polygonFilled! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayStyleIndex: anIndex	^ self current rayStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'instance creation' stamp: ''!current	^UniquieInstance ifNil: [ 		UniquieInstance := self basicNew initialize ]! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcThicknessWidget	^ self thicknessWidget: #arcThicknessIndex! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointSizeSymbols	^ #(#small #medium #large)! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!circleStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #circle)		label: 'Circle' translated;		order:60;		parent: #drgeoStyle;		description: 'Set the default style for circle.' translated;		with: [			(aBuilder setting: #circleColor)				order: 1;				label: 'Colour' translated.			(aBuilder setting: #circleStyle)				order: 2;				label: 'Style' translated.			(aBuilder setting: #circleThickness)				order: 3;				label: 'Thickness' translated.			(aBuilder setting: #circleFilled)				order: 4;				label: 'Fill' translated.			(aBuilder setting: #circleTranslucent)				order: 5;				label: 'Translucent' translated].! !!DrGStylePreference class methodsFor: 'helpers' stamp: ''!thicknessWidget: getAccessor	^ (UITheme builder			newMorphDropListFor: self			list: #thicknessMorphCollection			getSelected: getAccessor			setSelected: (getAccessor, ':') asSymbol 			help: nil) minWidth: DrGIcons menuExtent x + 35! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentColorIndex: anIndex	^ self current segmentColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'helpers' stamp: ''!colorWidget: getAccessor	^ (UITheme builder			newMorphDropListFor: self			list: #colorMorphCollection			getSelected: getAccessor			setSelected: (getAccessor, ':') asSymbol			help: nil) minWidth: DrGIcons menuExtent x + 35! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!uiThemeClass: aUIThemeClass	| themeClass |	themeClass := aUIThemeClass 		ifNil: [ UITheme standardThemeClass ]. 	 themeClass beCurrent.! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleTranslucent: aBoolean	^ self current circleTranslucent: aBoolean! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!segmentStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #segment)		label: 'Segment' translated;		order:40;		parent: #drgeoStyle;		description: 'Set the default style for segment.' translated;		with: [			(aBuilder setting: #segmentColor)				order: 1;				label: 'Colour' translated.			(aBuilder setting: #segmentStyle)				order: 2;				label: 'Style' translated.			(aBuilder setting: #segmentThickness)				order: 3;				label: 'Thickness' translated.			(aBuilder setting: #segmentArrow)				order: 4;				label: 'Arrow' translated.				(aBuilder setting: #segmentMark)				order: 5;				label: 'Mark' translated].! !!DrGStylePreference class methodsFor: 'point' stamp: ''!sizeMorphCollection	^ self  pointSizeSymbols collect: [:symbol |		(DrGIcons 			point: (self pointExtentFor: symbol) 			color: Color black 			shape: #square) asMorph].! !!DrGStylePreference class methodsFor: 'helpers' stamp: ''!arrowWidget: getAccessor	^ (UITheme builder			newMorphDropListFor: self			list: #arrowMorphCollection			getSelected: getAccessor			setSelected: (getAccessor, ':') asSymbol			help: nil) minWidth: DrGIcons menuExtent x + 35! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcTranslucent: aBoolean	^ self current arcTranslucent: aBoolean! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleColorWidget	^ self colorWidget: #circleColorIndex! !!DrGStylePreference class methodsFor: 'color' stamp: ''!hiddenColor	^Color lightGray lighter lighter lighter! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusColorIndex	^ self colorIndexOf: self current locusColor! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusThicknessIndex	^ self thicknessIndexOf: self current locusThickness! !!DrGStylePreference class methodsFor: 'helpers' stamp: ''!styleWidget: getAccessor	^ (UITheme builder			newMorphDropListFor: self			list: #styleLineMorphCollection			getSelected: getAccessor			setSelected: (getAccessor, ':') asSymbol			help: nil) minWidth: DrGIcons menuExtent x + 35! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcColorWidget	^ self colorWidget: #arcColorIndex! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayColorWidget	^ self colorWidget: #rayColorIndex! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcStyleIndex	^ self lineStyleIndexOf: self current arcStyle! !!DrGStylePreference class methodsFor: 'line' stamp: ''!thicknessIndexOf: thickness	^ self thicknessSymbols indexOf: thickness! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentMarkIndex: anIndex	^ self current segmentMark: (self markFor: anIndex)! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textBackgroundColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleStyleIndex: anIndex	^ self current circleStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonTranslucent: aBoolean	^ self current polygonTranslucent: aBoolean! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentMarkWidget	^ (UITheme builder			newMorphDropListFor: self			list: #markMorphCollection			getSelected: #segmentMarkIndex			setSelected: #segmentMarkIndex:			help: nil) minWidth: DrGIcons menuExtent x + 35! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcArrowWidget	^ self arrowWidget: #arcArrowIndex! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointColorIndex	^ self colorIndexOf: self current pointColor! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonColorIndex: anIndex	^ self current polygonColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!vectorStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #vector)		label: 'Vector' translated;		order:50;		parent: #drgeoStyle;		description: 'Set the default style for vector.' translated;		with: [			(aBuilder setting: #vectorColor)				label: 'Colour' translated.			(aBuilder setting: #vectorStyle)				label: 'Style' translated.			(aBuilder setting: #vectorThickness)				label: 'Thickness' translated].! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleFilled: aBoolean	^ self current circleFilled: aBoolean! !!DrGStylePreference class methodsFor: 'line' stamp: ''!thicknessFor: index	^ self thicknessSymbols at: index! !!DrGStylePreference class methodsFor: 'color' stamp: ''!colorIndexOf: aColor	^self colors indexOf: (aColor alpha: 1)! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointShapeIndex	^ self pointShapeIndexOf: self current pointShape! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineStyleIndex	^ self lineStyleIndexOf: self current lineStyle! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonColorWidget	^ self colorWidget: #polygonColorIndex! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineColorWidget	^ self colorWidget: #lineColorIndex! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorThicknessIndex	^ self thicknessIndexOf: self current vectorThickness! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentThicknessIndex	^ self thicknessIndexOf: self current segmentThickness! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointShape"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointShapeIndex: anIndex	^ self current pointShape: (self pointShapeFor: anIndex) ! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentThicknessWidget	^ self thicknessWidget: #segmentThicknessIndex! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!valueColorIndex	^ self colorIndexOf: self current valueColor! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcStyleWidget	^ self styleWidget: #arcStyleIndex! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointSizeFor: index	^ self pointSizeSymbols at: index! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusStyleIndex: anIndex	^ self current locusStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!rayStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #ray)		label: 'Ray' translated;		order:30;		parent: #drgeoStyle;		description: 'Set the default style for ray.' translated;		with: [ 			(aBuilder setting: #rayColor)				label: 'Colour' translated.			(aBuilder setting: #rayStyle)				label: 'Style' translated.			(aBuilder setting: #rayThickness)				label: 'Thickness' translated ]! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!drgeoStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #drgeoStyle)		label: 'Style' translated;		description: 'Dr. Geo style settings' translated! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentThicknessIndex: anIndex	^ self current segmentThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineThicknessIndex: anIndex	^ self current lineThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointColorIndex: anIndex	^ self current pointColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonStyleIndex: anIndex	^ self current polygonStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'line' stamp: ''!thicknessSymbols	^ #(#small #medium #large)! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusColorWidget	^ self colorWidget: #locusColorIndex! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorColorIndex: anIndex	^ self current vectorColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorColorIndex	^ self colorIndexOf: self current vectorColor! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!pointStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #point)		label: 'Point' translated;		order:10;		parent: #drgeoStyle;		description: 'Set the default style for point.' translated;		with: [ 			(aBuilder setting: #pointColor)				label: 'Colour' translated.			(aBuilder setting: #pointShape)				label: 'Shape' translated.			(aBuilder setting: #pointSize)				label: 'Size' translated ]! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayThicknessIndex	^ self thicknessIndexOf: self current rayThickness! !!DrGStylePreference class methodsFor: 'color' stamp: ''!colorMorphCollection	^ self colors collect: [:aColor |		(DrGIcons colorForm: aColor ) asMorph]! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentArrowIndex: anIndex	^ self current segmentArrow: (self arrowFor: anIndex)! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcArrowIndex: anIndex	^ self current arcArrow: (self arrowFor: anIndex)! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonTranslucent	^ self current polygonTranslucent! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineThicknessWidget	^ self thicknessWidget: #lineThicknessIndex! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointExtentFor: pointSize	pointSize == #small ifTrue: [^ 6@6].	pointSize == #large ifTrue: [^ 10@10].	^ 8@8.! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'initialization' stamp: ''!reset"reset all the style preference"	self allInstVarNames do: [ :instVarName |		self current instVarNamed: instVarName put: nil]! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleFilled	^ self current circleFilled! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorThicknessIndex: anIndex	^ self current vectorThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!valueColorWidget	^ self colorWidget: #valueColorIndex! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointSizeIndexOf: aSize	^ self pointSizeSymbols indexOf: aSize! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcColorIndex: anIndex	^ self current arcColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayColorIndex: anIndex	^ self current rayColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!valueColorIndex: anIndex	^ self current valueColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineStyleIndex: anIndex	^ self current lineStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'curve finit' stamp: ''!arrowIndexOf: aSymbol	^ self arrowSymbols indexOf: aSymbol! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'curve finit' stamp: ''!arrowSymbols	^ #(#makeBackArrow #makeForwardArrow #makeBothArrows #makeNoArrows) ! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!appearanceSettingsOn: aBuilder 	<drgeosettings>	(aBuilder pickOne: #uiThemeClass)		parent: #drgeoStyle;		label: 'User interface theme' translated;		description: 'Select a graphic theme between:- Dark theme. A dark graphic user interface theme, best used on a computer screen display,- Light theme. A light graphic user interface theme, best used on a video projector display.' translated;		target: self;		default: UITheme standardThemeClass;		order: 1;		domainValues: {'Dark theme' translated ->PharoDarkTheme. 'Light theme' translated ->PharoLightTheme}.! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusStyleIndex	^ self lineStyleIndexOf: self current locusStyle! !!DrGStylePreference class methodsFor: 'curve finit' stamp: ''!arrowMorphCollection	^ self arrowSymbols collect: [:symbol |		(DrGIcons 			segment: (self widthFor: #small) 			color: Color black			dash: (self styleFor: #plain)			arrow: symbol) asMorph]! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleColorIndex: anIndex	^ self current circleColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonColorIndex	^ self colorIndexOf: self current polygonColor! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcFilled: aBoolean	^ self current arcFilled: aBoolean! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointColorWidget	^ self colorWidget: #pointColorIndex! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorStyleIndex	^ self lineStyleIndexOf: self current vectorStyle! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!markSymbols	^ #(#none #mark1 #mark2 #mark3 #disc #circle)! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusThicknessIndex: anIndex	^ self current locusThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'ray' stamp: ''!rayStyleWidget	^ self styleWidget: #rayStyleIndex! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentMark"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineThicknessIndex	^ self thicknessIndexOf: self current lineThickness! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineStyleWidget	^ self styleWidget: #lineStyleIndex! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleTranslucent	^ self current circleTranslucent! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentStyleWidget	^ self styleWidget: #segmentStyleIndex! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentArrowWidget	^ self arrowWidget: #segmentArrowIndex! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorThickness"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentColorWidget	^ self colorWidget: #segmentColorIndex! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonStyleIndex	^ self lineStyleIndexOf: self current polygonStyle! !!DrGStylePreference class methodsFor: 'line' stamp: ''!widthFor: aThickness	"give the width"	aThickness = #small ifTrue: [^1].	aThickness = #medium ifTrue: [^2].	aThickness = #large ifTrue: [^3].	^ 0! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textBackgroundColorWidget	^ self colorWidget: #textBackgroundColorIndex! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentColorIndex	^ self colorIndexOf: self current segmentColor! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!valueColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!textStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #Text)		label: 'Text' translated;		order: 110;		parent: #drgeoStyle;		description: 'Set the default style for text.' translated;		with: [ 			(aBuilder setting: #textColor)				order: 1;				label: 'Colour' translated.			(aBuilder setting: #textBackgroundColor)				order: 2;				label: 'Background' translated]! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!markMorphCollection	^ self markSymbols collect: [:symbol |		 (DrGIcons 			segment: (self widthFor: #small) 			color: Color black 			mark: symbol) asMorph]! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textColorWidget	^ self colorWidget: #textColorIndex! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textBackgroundColorIndex	^ self colorIndexOf: self current textBackgroundColor! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonStyleWidget	^ self styleWidget: #polygonStyleIndex! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!locusStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #locus)		label: 'Locus' translated;		order: 90;		parent: #drgeoStyle;		description: 'Set the default style for locus.' translated;		with: [ 			(aBuilder setting: #locusColor)				label: 'Colour' translated.			(aBuilder setting: #locusStyle)				label: 'Style' translated.			(aBuilder setting: #locusThickness)				label: 'Thickness' translated]! !!DrGStylePreference class methodsFor: 'locus' stamp: ''!locusColorIndex: anIndex	^ self current locusColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!markFor: index	^ self markSymbols at: index! !!DrGStylePreference class methodsFor: 'point' stamp: ''!pointShapeIndexOf: pointShape	^ self pointShapeSymbols indexOf: pointShape! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcTranslucent	^ self current arcTranslucent! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleColor"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'color' stamp: ''!colorSymbols	^#(#black #blue #brown #green #magenta #orange #red #yellow #white)! !!DrGStylePreference class methodsFor: 'settings' stamp: ''!polygonStylesOn: aBuilder	<drgeosettings>	(aBuilder group: #polygon)		label: 'Polygon' translated;		order: 80;		parent: #drgeoStyle;		description: 'Set the default style for polygon.' translated;		with: [			(aBuilder setting: #polygonColor)				order: 1;				label: 'Colour' translated.			(aBuilder setting: #polygonStyle)				order: 2;				label: 'Style' translated.			(aBuilder setting: #polygonThickness)				order: 3;				label: 'Thickness' translated.			(aBuilder setting: #polygonFilled)				order: 4;				label: 'Fill' translated.			(aBuilder setting: #polygonTranslucent)				order: 5;				label: 'Translucent' translated].! !!DrGStylePreference class methodsFor: 'circle' stamp: ''!circleStyleWidget	^ self styleWidget: #circleStyleIndex! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineStyleFor: index	^ self lineStyleSymbols at: index! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonThicknessIndex	^ self thicknessIndexOf: self current polygonThickness! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineStyleSymbols	^ #(#dot #dash #plain) ! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textBackgroundColorIndex: anIndex	^ self current textBackgroundColor: (self colorFor: anIndex)! !!DrGStylePreference class methodsFor: 'arc' stamp: ''!arcArrow"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'polygon' stamp: ''!polygonThicknessIndex: anIndex	^ self current polygonThickness: (self thicknessFor: anIndex)! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorStyle"respond the singleton, widget build up set later"	^ self current! !!DrGStylePreference class methodsFor: 'segment' stamp: ''!segmentStyleIndex: anIndex	^ self current segmentStyle: (self lineStyleFor: anIndex)! !!DrGStylePreference class methodsFor: 'value & text' stamp: ''!textColorIndex	^ self colorIndexOf: self current textColor! !!DrGStylePreference class methodsFor: 'color' stamp: ''!colors	^ self colorSymbols collect: [:symbol | Color perform: symbol]! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorThicknessWidget	^ self thicknessWidget: #vectorThicknessIndex! !!DrGStylePreference class methodsFor: 'color' stamp: ''!blinkingColor	^Color lightGray lighter lighter! !!DrGStylePreference class methodsFor: 'vector' stamp: ''!vectorColorWidget	^ self colorWidget: #vectorColorIndex! !!DrGStylePreference class methodsFor: 'line' stamp: ''!lineColorIndex	^ self colorIndexOf: self current lineColor! !!DrGStyleTool commentStamp: ''!A tool to edit the style of the costume.!!DrGStyleTool methodsFor: 'accessing' stamp: ''!presenter: aPresenter	super presenter: aPresenter.	self app forceVisible: true.! !!DrGStyleTool methodsFor: 'accessing' stamp: ''!costumesAt: aPoint	^self pointCostumesFirstAt: aPoint ! !!DrGStyleTool methodsFor: 'updating' stamp: ''!reset	super reset.	self switchState: DrGStyleToolState! !!DrGStyleTool methodsFor: 'private' stamp: ''!myCostumesAt: aPoint"return the list of costume at position aPoint"	^self app costumes select: [:aCostume |		(self isWanted: aCostume mathItem)		and: [aCostume containsPoint: aPoint]]! !!DrGStyleTool methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self reset.! !!DrGStyleTool methodsFor: 'initialize-release' stamp: ''!release	self app forceVisible: false.	self presenter view setStyler: nil.	DrGeoSystem showVirtualKeyboard: false.	super release.! !!DrGStyleTool methodsFor: 'accessing' stamp: ''!description 	^ self class description! !!DrGStyleTool methodsFor: 'accessing' stamp: ''!costumeStyle	^ self costume style! !!DrGStyleTool class methodsFor: 'documentation' stamp: ''!description 	^ 'Edit an object style.' translated! !!DrGStyleTool class methodsFor: 'documentation' stamp: ''!title	^ 'Edit Style' translated! !!DrGStyleToolState methodsFor: 'as yet unclassified' stamp: ''!costumeStyle	^ self context costumeStyle! !!DrGStyleToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	aCostumeCollection 		ifNotEmpty: 			[self context costume: aCostumeCollection first.			self view setStyler: self costumeStyle styleWidget].	self context reset! !!DrGStyleToolState methodsFor: 'handling' stamp: ''!handlePress: aPoint	|costumes|	self area hideTip.	costumes := self context costumesAt: aPoint.	costumes size = 1 ifTrue:		[self context last: aPoint.		self handleChoice: costumes.		^true].	"More than one math item under mouse"	costumes size > 1 ifTrue:		[self context last: aPoint.		self context chooseCostume: costumes.		^true].	"The user clicked in the background, clear the selection"	self context reset.	^false! !!DrGSugar commentStamp: ''!Preferences for OLPC sugar based laptop!!DrGSugar methodsFor: 'testing' stamp: ''!isWorkstation	^ false! !!DrGSugar methodsFor: 'testing' stamp: ''!isSugar	^ true! !!DrGSugar methodsFor: 'initialize-release' stamp: ''!initialize	canWeDisplayLoader := true.	WorldState desktopMenuTitle: 'Dr. Geo'.	WorldState desktopMenuPragmaKeyword:  'drgeoMenu'.	Display newDepth: 16.	(Smalltalk at: #UIThemeSugar) resetDefaultSettings.	PolymorphSystemSettings uiThemeClass:  (Smalltalk at: #UIThemeSugar).	UITheme currentSettings fastDragging: true.	UITheme currentSettings fadedBackgroundWindows: false.	World color: Color white.	SystemWindow fullscreenMargin: 0.! !!DrGSugar methodsFor: 'user interface' stamp: ''!setFontPreferences	StandardFonts codeFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 14).	StandardFonts listFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 14).	StandardFonts menuFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 14).	StandardFonts windowTitleFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 14).	StandardFonts balloonFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 12).	StandardFonts haloFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 12).	StandardFonts buttonFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 14).	StandardFonts defaultFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 14).! !!DrGSugar methodsFor: 'path' stamp: ''!rootPath	^   FileLocator imageDirectory asFileReference! !!DrGSurfacePaintResource commentStamp: ''!A DrGSurfacePaintResource provides AthensSurface based paints, that have tobe reloaded prior use in every new Smalltalk session.!!DrGSurfacePaintResource methodsFor: 'accessing' stamp: ''!createResource	^ surfaceProvider surface createFormPaint: data form! !!DrGSurfacePaintResource methodsFor: 'accessing' stamp: ''!data: anObject	data := anObject! !!DrGSurfacePaintResource methodsFor: 'accessing' stamp: ''!surfaceProvider: anObject	surfaceProvider := anObject! !!DrGSurfacePaintResource methodsFor: 'initialize' stamp: ''!initialize	super initialize.	data := nil.	surfaceProvider := nil.! !!DrGSurfacePaintResource methodsFor: 'accessing' stamp: ''!asForm	^ data! !!DrGSurfacePaintResource methodsFor: 'accessing' stamp: ''!extent	^ data extent! !!DrGSurfacePaintResource class methodsFor: 'instance creation' stamp: ''!forSurfaceProvider: aSurfaceProvider withData: data	^ self new surfaceProvider: aSurfaceProvider;  		data: data; 		yourself! !!DrGSymmetryBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	mathItem := center := nil! !!DrGSymmetryBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	(aMathItemCollection first isPointItem and: [center isNil])		ifTrue: [center := aMathItemCollection first]		ifFalse: [mathItem := aMathItemCollection first]! !!DrGSymmetryBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^center notNil and: [mathItem notNil]! !!DrGSymmetryBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty		and: [(aMathItemCollection first isPointItem 				and: [center isNil])			or:	[aMathItemCollection first isGeometricItem 				and: [mathItem isNil]]]! !!DrGSymmetryBuilder methodsFor: 'accessing' stamp: ''!arguments: aMathItem	^{aMathItem . center}! !!DrGSymmetryBuilder methodsFor: 'constant' stamp: ''!mathItemClass: aMathItem	|className|	className := 'DrG', aMathItem basicType capitalized, 'SymmetryItem'.	^(self class environment classNamed: className)! !!DrGSymmetryBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Symmetry: select a point and a geometric object. The first selected point is the symmetry center.' translated! !!DrGSymmetryBuilder class methodsFor: 'documentation' stamp: ''!title	^'Symmetry' translated ! !!DrGTablet commentStamp: ''!Preferences common to tablets!!DrGTablet methodsFor: 'initialize-release' stamp: ''!reset	super reset.	wheelHeight := nil! !!DrGTablet methodsFor: 'initialize-release' stamp: ''!startUp	super startUp.	self splash.	(World submorphs anySatisfy: [:morph | morph class == DrGeoWindow]) ifFalse:		[DrGeo newFullScreen]! !!DrGTablet methodsFor: 'user interface' stamp: ''!setFontPreferences	StandardFonts codeFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 12).	StandardFonts listFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 14).	StandardFonts menuFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 14).	StandardFonts windowTitleFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 14).	StandardFonts balloonFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 12).	StandardFonts haloFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 12).	StandardFonts buttonFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 16).	StandardFonts defaultFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 14).! !!DrGTablet methodsFor: 'user interface' stamp: ''!wheelHeight	^ wheelHeight ifNil: [ |maxWheelHeight|		maxWheelHeight := (Display height - (3.4 * self toolbarIconSize) - 32 - self wheelWidth) // 2.		wheelHeight := 180 min: maxWheelHeight]! !!DrGTablet methodsFor: 'user interface' stamp: ''!canvasFontSize	^ 12! !!DrGTablet methodsFor: 'user interface' stamp: ''!wheelWidth	^ 55! !!DrGTextBuilder methodsFor: 'accessing' stamp: ''!arguments	^ {point}! !!DrGTextBuilder methodsFor: 'testing' stamp: ''!readyToBuild 	^ point notNil! !!DrGTextBuilder methodsFor: 'xml' stamp: ''!itemInstanceFrom: node	self addItem: #() at: 0@0.	^ self getItem first.! !!DrGTextBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection	^ aMathItemCollection isEmpty! !!DrGTextBuilder methodsFor: 'xml' stamp: ''!postProcess:  item from: node	super postProcess: item from: node.	self parseValuePosition: node of: item.	item text: (node contentStringAt: #contents)! !!DrGTextBuilder methodsFor: 'constant' stamp: ''!mathItemClass 	^ DrGTextItem! !!DrGTextBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Free text you can edit and move around.' translated! !!DrGTextBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Text' translated! !!DrGTextCostume methodsFor: 'updating' stamp: ''!updateMyText	morph contents: mathItem text.! !!DrGTextCostume methodsFor: 'accessing' stamp: ''!borderColor: aColor	morph borderColor: aColor ! !!DrGTextCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGTextMorph new autoFit: true.	self app isNotInteractive		ifFalse: [ DrGeoSystem showVirtualKeyboard: true.			self editMyProperty.			DrGeoSystem showVirtualKeyboard: false ].	morph		contents: '';		font: DrGeoSystem canvasFont;		contents: mathItem text;		backgroundColor: Color white! !!DrGTextCostume methodsFor: 'updating' stamp: ''!redraw	exist		ifFalse: [^ self].	morph center: self textPosition! !!DrGTextCostume methodsFor: 'testing' stamp: ''!basicType	^#text! !!DrGTextCostume methodsFor: 'updating' stamp: ''!registerEvents	mathItem		ifNotNil: [			mathItem				when: #deletedMathItem				send: #deleteCostume:				to: drawable app				with: self.			mathItem 				when: #updateMyView				send: #updateMyText				to: self]! !!DrGTextCostume methodsFor: 'accessing' stamp: ''!fontSize: integer	morph font: (DrGeoSystem canvasFont: integer).! !!DrGTextCostume methodsFor: 'style' stamp: ''!styleClass	^ DrGTextCostumeStyle! !!DrGTextCostume methodsFor: 'updating' stamp: ''!editMyProperty	| answer |	DrGeoSystem showVirtualKeyboard: true.	answer := self view 		textEditor: 'Edit this text' translated 		title: 'Edit this text' translated 		entryText: mathItem text.	DrGeoSystem showVirtualKeyboard: false.	answer isEmptyOrNil ifTrue: [^self]. " cancelled"	self domain propertyCommandFor: mathItem with: answer string! !!DrGTextCostume methodsFor: 'layout' stamp: ''!textPosition	^(drawable worldToMorph: mathItem position)! !!DrGTextCostume methodsFor: 'accessing' stamp: ''!textMorph: aString	"no label for text object"	mathItem name: aString! !!DrGTextCostume methodsFor: 'accessing' stamp: ''!backgroundColor: aColor	morph backgroundColor: aColor ! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!setTranslucent: aColor	aColor isTransparent 		ifFalse: [self backgroundColor: (aColor alpha: "0.3" 1)] 		ifTrue: [self backgroundColor:" aColor" Color white]! !!DrGTextCostumeStyle methodsFor: 'widget' stamp: ''!styleWidget| controls |	controls := 	OrderedCollection new		add: self fontSizeWidget;		add: self colorWidget;		add: self backgroundWidget;		add: self borderWidget;		yourself.	controls addAll: self myWidgets.	controls add: self feedbackWidget. 	controls add: self hiddenWidget.	costume isLockable ifTrue: [controls add: self lockedWidget].	^ (self view newLabelGroup: controls) layoutInset: 4! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!borderColor: aColor	borderColor := aColor.	costume borderColor: aColor.	self changed! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!borderColor	^ borderColor ! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!backgroundColorIndex: index	| aColor |	aColor := Color perform: (self class backgroundColorSymbols at: index).	self setTranslucent: aColor! !!DrGTextCostumeStyle methodsFor: 'widget' stamp: ''!backgroundWidget	^  'Background' translated ->		((self view			newMorphDropListFor: self 			list: #backgroundMorphCollection			getSelected: #backgroundColorIndex 			setSelected: #backgroundColorIndex:			help: 'Set the background colour.' translated) minWidth: DrGIcons menuExtent x+35)! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!fontSizeIndex	^ self fontSizes indexOf: fontSize	! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!borderColorIndex	^ self class backgroundColors indexOf: borderColor! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!backgroundColorIndex	^ self class backgroundColors indexOf: self baseBackgroundColor	! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!fontSize: integer	fontSize := integer.	costume fontSize: integer.	self changed! !!DrGTextCostumeStyle methodsFor: 'widget' stamp: ''!fontSizeWidget	^  'Font size' translated ->		((self view			newDropListFor: self 			list: #fontSizes			getSelected: #fontSizeIndex 			setSelected: #fontSizeIndex:			help: 'Set the font size.' translated) minWidth: DrGIcons menuExtent x+35)! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!baseBackgroundColor "This color whithout transparency"	^ backgroundColor isTransparent 		ifFalse: [backgroundColor alpha: 1.0] 		ifTrue: [backgroundColor]! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!borderColorIndex: index	| aColor |	aColor := Color perform: (self class backgroundColorSymbols at: index).	self borderColor: aColor! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!backgroundColor	^ backgroundColor ! !!DrGTextCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize 	super initialize.	self color: DrGStylePreference current textColor.	self backgroundColor: DrGStylePreference current textBackgroundColor.	self borderColor: DrGStylePreference current textBorderColor.	fontSize := DrGeoSystem canvasFontSize.! !!DrGTextCostumeStyle methodsFor: 'widget' stamp: ''!backgroundMorphCollection	^ self class backgroundColors collect: [:aColor |		(DrGIcons colorForm: aColor) asMorph]! !!DrGTextCostumeStyle methodsFor: 'xml writing' stamp: ''!writeAttributesTo: aNode	super writeAttributesTo: aNode.	aNode attributeAt: #background put: self baseBackgroundColor name asString capitalized.	aNode attributeAt: #border put: self borderColor name asString capitalized.	aNode attributeAt: #fontSize put: fontSize asString! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!fontSizes	^#(9 10 12 14 16)! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!fontSizeIndex: index	self fontSize: (self fontSizes at: index)! !!DrGTextCostumeStyle methodsFor: 'accessing' stamp: ''!backgroundColor: aColor	backgroundColor := aColor.	costume backgroundColor: aColor muchLighter.	self changed! !!DrGTextCostumeStyle methodsFor: 'widget' stamp: ''!borderWidget	^  'Border' translated ->		((self view			newMorphDropListFor: self 			list: #backgroundMorphCollection			getSelected: #borderColorIndex 			setSelected: #borderColorIndex:			help: 'Set the border colour.' translated) minWidth: DrGIcons menuExtent x+35)! !!DrGTextCostumeStyle class methodsFor: 'as yet unclassified' stamp: ''!backgroundColors	^ self backgroundColorSymbols collect: [:symbol | Color perform: symbol]! !!DrGTextCostumeStyle class methodsFor: 'as yet unclassified' stamp: ''!backgroundColorSymbols	^ OrderedCollection new		add: #transparent;		addAll: DrGStylePreference colorSymbols;		yourself ! !!DrGTextItem methodsFor: 'updating' stamp: ''!property: aProperty 	self text: aProperty ! !!DrGTextItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self position: theParents last! !!DrGTextItem methodsFor: 'accessing' stamp: ''!position: aPoint 	position := aPoint.	self rehash! !!DrGTextItem methodsFor: 'testing' stamp: ''!isLockable 	^ true! !!DrGTextItem methodsFor: 'comparing' stamp: ''!rehash	^ hash := (self basicType hash bitXor: text hash) bitXor: position hash! !!DrGTextItem methodsFor: 'xml writing' stamp: ''!writeAsXmlPositionTo: aNode 	"return the newly created element"	aNode		addElement: ((XMLElement named: #x)				addContent: (XMLStringNode string: position x asString));		addElement: ((XMLElement named: #y)				addContent: (XMLStringNode string: position y asString)).	^ aNode! !!DrGTextItem methodsFor: 'accessing' stamp: ''!basicType	^#text! !!DrGTextItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint ^ position! !!DrGTextItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isTextItem	^ true! !!DrGTextItem methodsFor: 'accessing' stamp: ''!text: aText	text := aText.	self rehash! !!DrGTextItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	|node|	node := super writeAsXmlTo: aNode.	node addElement:  ((XMLElement named: #contents) addContent: (XMLStringNode string: self text)).	^ self writeAsXmlPositionTo: node! !!DrGTextItem methodsFor: 'xml writing' stamp: ''!nodeType	^#free! !!DrGTextItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^ false! !!DrGTextItem methodsFor: 'accessing' stamp: ''!descriptiveName 	^ self adaptiveDescriptiveName! !!DrGTextItem methodsFor: 'accessing' stamp: ''!parents: aCollection	parents := nil.! !!DrGTextItem methodsFor: 'comparing' stamp: ''!= aMathItem	^ super = aMathItem and: [text = aMathItem text and: [position = aMathItem position]]! !!DrGTextItem methodsFor: 'printing' stamp: ''!printOn: aStream	self printType: DrGTextBuilder title on: aStream ! !!DrGTextItem methodsFor: 'accessing' stamp: ''!text	^ text! !!DrGTextItem methodsFor: 'accessing' stamp: ''!position	^ position! !!DrGTextItem methodsFor: 'testing' stamp: ''!isPropertyEditable 	^ true! !!DrGTextItem methodsFor: 'testing' stamp: ''!doParentsExist 	^ true! !!DrGTextItem methodsFor: 'accessing' stamp: ''!isLocked	^ locked ifNil: [locked := false]! !!DrGTextItem methodsFor: 'initialize-release' stamp: ''!initialize 	super initialize.	text := 'Edit me' translated! !!DrGTextItem methodsFor: 'updating' stamp: ''!move: aPoint	self isLocked ifFalse: [position := position + aPoint]! !!DrGTextItem methodsFor: 'accessing' stamp: ''!costumeClass 	^ DrGTextCostume ! !!DrGTextItem methodsFor: 'updating' stamp: ''!property	^ self text! !!DrGTextItem methodsFor: 'accessing' stamp: ''!locked: aBoolean	locked := aBoolean ! !!DrGTextItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This text' translated! !!DrGTextMorph methodsFor: 'stepping and presenter' stamp: ''!stopStepping	super stopStepping.	self color: costume style color.! !!DrGTextMorph methodsFor: 'accessing' stamp: ''!borderColor: newColor	super borderColor: newColor.	myForm := nil! !!DrGTextMorph methodsFor: 'accessing' stamp: ''!contents: stringOrText	self contents = stringOrText ifTrue: [ ^ self ].	myForm := nil.	^ super contents: stringOrText! !!DrGTextMorph methodsFor: 'accessing' stamp: ''!costume: aDrGTextCostume 	costume := aDrGTextCostume! !!DrGTextMorph methodsFor: 'events-processing' stamp: ''!handlesMouseOver: anEvent	^ false! !!DrGTextMorph methodsFor: 'accessing' stamp: ''!color: aColor	self textColor: aColor.	myForm := nil! !!DrGTextMorph methodsFor: 'as yet unclassified' stamp: ''!font: aFont	| theContents theColor|	"Text morph sucks..."	theColor := self color.	theContents := self contents.	self contents: ''.	super font: aFont.	self contents: theContents.	self color: theColor.	! !!DrGTextMorph methodsFor: 'drawing' stamp: ''!drawOnAthensCanvas: aCanvas	| cached |	myForm ifNil: [myForm := self imageForm].	cached := aCanvas cacheAt: myForm ifAbsentPut: [		myForm asAthensPaintOn: aCanvas.	].	aCanvas setPaint: cached.	aCanvas paintTransform restoreAfter: [		aCanvas paintTransform translateBy: self fullBounds origin truncated.		aCanvas drawShape: self fullBounds].		! !!DrGTextMorph methodsFor: 'events-processing' stamp: ''!handleMouseMove: anEvent	^ false! !!DrGTextMorph methodsFor: 'initialization' stamp: ''!initialize 	super initialize.	blink := false.	self borderWidth: 3.	self margins: 2.	"self crAction: (MessageSend receiver: self selector: #ok)."! !!DrGTextMorph methodsFor: 'stepping and presenter' stamp: ''!startBlinking	blink := true.	self startStepping ! !!DrGTextMorph methodsFor: 'accessing' stamp: ''!costume	^ costume! !!DrGTextMorph methodsFor: 'events-processing' stamp: ''!handlesMouseDown: anEvent	^ false! !!DrGTextMorph methodsFor: 'stepping and presenter' stamp: ''!step	blink ifFalse: [^self].	super step.	self color = DrGStylePreference blinkingColor 		ifTrue: [self color: costume style color]		ifFalse: [self color: DrGStylePreference blinkingColor]! !!DrGTextMorph methodsFor: 'stepping and presenter' stamp: ''!stopBlinking	blink := false.	self stopStepping.! !!DrGTextMorph methodsFor: 'accessing' stamp: ''!backgroundColor: newColor	super backgroundColor: newColor.	myForm := nil! !!DrGTextMorph methodsFor: 'stepping and presenter' stamp: ''!stepTime	^500! !!DrGTransformationBuilder commentStamp: ''!Transformation builder can handle compositeItem, we need to specializeits behavior.!!DrGTransformationBuilder methodsFor: 'accessing' stamp: ''!arguments	^self arguments: mathItem! !!DrGTransformationBuilder methodsFor: 'building' stamp: ''!buildItem	mathItem class = DrGCompositeItem 		ifTrue:			[^ mathItem subItems collect: [:aMathItem|					(self mathItemClass: aMathItem) 						newWith: (self arguments: aMathItem)]]		ifFalse:			[^super buildItem]! !!DrGTransformationBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^ self mathItemClass: mathItem! !!DrGTransformationBuilder methodsFor: 'xml' stamp: ''!parentsById: node	^ (super parentsById: node) reverse! !!DrGTranslationBuilder commentStamp: ''!curveItem : segment, vector, circle, arc!!DrGTranslationBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	vector := mathItem := nil.! !!DrGTranslationBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	(aMathItemCollection first isVectorItem and: [vector isNil])		ifTrue: [vector := aMathItemCollection first]		ifFalse: [mathItem := aMathItemCollection first]! !!DrGTranslationBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^vector notNil and: [mathItem notNil]! !!DrGTranslationBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	^ aMathItemCollection notEmpty 		and: [(aMathItemCollection first isVectorItem 				and: [vector isNil])			or:	[aMathItemCollection first isGeometricItem 				and: [aMathItemCollection first isVectorItem not 				and: [mathItem isNil]]]]! !!DrGTranslationBuilder methodsFor: 'accessing' stamp: ''!arguments: aMathItem	^{aMathItem . vector}! !!DrGTranslationBuilder methodsFor: 'constant' stamp: ''!mathItemClass: aMathItem	|className|	className := 'DrG', aMathItem basicType capitalized, 'TranslationItem'.	^(self class environment classNamed: className)! !!DrGTranslationBuilder class methodsFor: 'documentation' stamp: ''!description	^ 'Translation: select a vector and a geometric object.' translated! !!DrGTranslationBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Translation' translated! !!DrGTreeMorph methodsFor: 'testing' stamp: ''!wantsSteps 	^ true! !!DrGTreeMorph methodsFor: 'initialization' stamp: ''!initialize	super initialize.	rowColors := Array 		with: self theme backgroundColor lighter		with: self theme backgroundColor darker.! !!DrGTreeMorph methodsFor: 'events-processing' stamp: ''!mouseMove: anEvent	anEvent redButtonPressed ifTrue: [		(anEvent endPoint - anEvent startPoint) y < 0 			ifTrue: [scrollBar scrollDown: 2]			ifFalse: [scrollBar scrollUp: 2]]	 		! !!DrGTreeMorph methodsFor: 'stepping and presenter' stamp: ''!step	self updateList! !!DrGTreeMorph methodsFor: 'updating' stamp: ''!updateList 	|value|	value := scrollBar value.	super updateList.	self vScrollValue: value! !!DrGTreeMorph methodsFor: 'testing' stamp: ''!stepTime 	 ^2000! !!DrGUIControlsManager commentStamp: ''!A manager for the DrGeo user interface controls (menu, button, etc.):- build the standard UI for a given Dr. Geo window- or build a customized UI for a given Dr. Geo windowI hold:- the data to build the UI- the methods to do it- the preferences I can load/save from/to a xml description- usedControls: ordered dictionnary indicating the used controls for a customized interface, key are symbols (#angle) and value are booleans!!DrGUIControlsManager methodsFor: 'accessing' stamp: ''!presenter: aPresenter	presenter := aPresenter! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!transformationTools	^ #(#symmetry #reflection #translation #rotation #homothety)! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!translationButtonData	^ {DrGTranslationBuilder title. #translation. #createTranslation. DrGTranslationBuilder description}! !!DrGUIControlsManager methodsFor: 'widgets' stamp: ''!customizerDialog"Open a dialog to customize the set of used controls"	| dialog allTools |	allTools := self allTools.	dialog := (self window newPluggableDialogWindow: 'Customize user interface' translated) useOKDefaultCancelButton.	dialog contentMorph: (dialog newColumn: {		dialog newRow: (self miscControls collect: [:symbol | self checkBoxFor: symbol in: dialog]).		dialog newRow: { 			dialog newColumn: ((allTools first: allTools size // 3) 				collect: [:symbol | self checkBoxFor: symbol in: dialog]).			dialog newVerticalSeparator.			dialog newColumn: (allTools 				collect: [:symbol | self checkBoxFor: symbol in: dialog]				from: allTools size // 3 + 1				to: allTools size * 2 // 3).			dialog newVerticalSeparator.			dialog newColumn: ((allTools last: allTools size // 3 + 1) 				collect: [:symbol | self checkBoxFor: symbol in: dialog])		}	});	model: self.	self customized: (self window openModal: dialog) cancelled not! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!undoButtonData	^ {'Undo' translated.	#undo .	#undo .	'Undo last action' translated}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!curveMenu	| lineMenu |	lineMenu := self window newMenu.	self curveTools  do: [ :symbol | self addMenuItem: symbol to: lineMenu ].	^ lineMenu! !!DrGUIControlsManager methodsFor: 'helpers' stamp: ''!horizontalExpander	^ Morph new color: Color transparent;		height: 1;		hResizing: #spaceFill;		yourself! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!middleButtonData	^ {DrGMiddleBuilder title. #middle. #createMiddlePoint. DrGMiddleBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!editGroupButtonData	^ {'Edit group' translated.	#editGroup .	#editSelection .	'Distance between objects, curve length, free value' translated}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!fileMenu	| fileMenu |	fileMenu := self window newMenu.	self addMenuItem: #new to: fileMenu.	fileMenu 		addToggle: 'Change title' translated		target: self window		selector: #relabel.	fileMenu addLine.	self addMenuItem: #open to: fileMenu.	fileMenu 		addToggle: 'Open at...' translated		target: presenter		selector: #openFigureAt. 	fileMenu addLine.	self addMenuItem: #keep to: fileMenu.	fileMenu 		addToggle: 'Save as...' translated		target:  presenter		selector: #saveFigureAs.	fileMenu lastItem setBalloonText: 'Keep this sketch under a different name.' translated.	fileMenu 		addToggle: 'Save at...' translated		target:  presenter 		selector: #saveFigureAt.	fileMenu lastItem setBalloonText: 'Keep this sketch at a different location.' translated.	fileMenu 		addToggle: 'Save multiple' translated		target:  presenter		selector: #saveMultiple.	fileMenu lastItem setBalloonText: 'Keep several sketches and macro-constructions in one file.' translated.	self addMenuItem: #exportBitmap to: fileMenu.	fileMenu addLine.	fileMenu 		addToggle: 'Close sketch' translated		target: self window		selector: #delete.	self addMenuItem: #quit to: fileMenu.	^ fileMenu		! !!DrGUIControlsManager methodsFor: 'controls instalation' stamp: ''!installMenu|menu shiftY |	^  (DrGeoSystem isTablet not and: [self isMenu])		ifTrue: [ 			menu := self mainMenu.			shiftY := menu minExtent y.			self window 				addMorph: menu				fullFrame: (LayoutFrame identity bottomFraction: 0 offset: shiftY).			shiftY]		ifFalse: [ 0 ]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!polygonRegularButtonData	^ {DrGPolygonRegularBuilder title. #polygonRegular. #createPolygonRegular. DrGPolygonRegularBuilder  description}! !!DrGUIControlsManager methodsFor: 'helpers' stamp: ''!wrapMeInAthens: aMorph	|athensMorph|	athensMorph := AthensWrapMorph new		layoutPolicy: TableLayout new;		hResizing: #spaceFill;		vResizing: #spaceFill;		addMorph: aMorph.	^ athensMorph ! !!DrGUIControlsManager methodsFor: 'toolbars' stamp: ''!additionalToolbar	^ self isCustomized 		ifTrue: [ self customToolbar ] ifFalse: [ self defaultToolbar  ]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!arcButtonData	^ {DrGArcBuilder title. #arc. #createArc. DrGArcBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!vectorButtonData	^ {DrGVectorBuilder title. #vector. #createVector. DrGVectorBuilder description}! !!DrGUIControlsManager methodsFor: 'widgets' stamp: ''!checkBoxFor: toolSymbol in: dialog	| array |	"access the button data"	array := self perform: (toolSymbol, #ButtonData) asSymbol. 	^ dialog 		newCheckboxFor: self 		getSelected: toolSymbol		setSelected: (toolSymbol, ':') asSymbol		label: array first 		help: array fourth.! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!homothetyButtonData	^ {DrGHomothetyBuilder title. #scale. #createHomothety. DrGHomothetyBuilder description}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!numericMenu	| menu |	menu := self window newMenu.	self numericTools do: [ :symbol | self addMenuItem: symbol to: menu ].	^ menu		! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!exportBitmapButtonData	^ {'Save as picture' translated. #exportToBitmap. #exportToBitmap. 'Export this sketch as PNG picture.' translated }! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!freePointButtonData	^ {DrGFlyPointBuilder title. #freePoint. #createFreePoint. DrGFlyPointBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!lineButtonData	^ {DrGLineBuilder title. #line. #createLine. DrGLineBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!macroExecuteButtonData	^ {DrGMacroPlayer title. #macroExecute. #executeMacro. DrGMacroPlayer description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!propertyButtonData	^ {DrGPropertyTool title.	#property .	#property .	DrGPropertyTool description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!animate3ButtonData	^ {'Animate x3' translated. #animate3. #animate3. 'Animate at speed 3.' translated}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!updateScriptMenu	| scripts scriptMenu |	scriptMenu := self window scriptMenu.	scriptMenu removeAllMorphs.	self scriptTools do: [ :symbol |  self addMenuItem: symbol to: scriptMenu].	scripts := DrGeoUserScript subclasses sorted: [:script1 :script2 | 		script1 scriptName asLowercase < script2 scriptName asLowercase].	scripts ifNotEmpty: [scriptMenu addLine].	scripts do: [:aScript |		scriptMenu 			add: aScript scriptName  			target: presenter 			selector: #useScript:			argument: aScript.		scriptMenu lastItem			font: self theme menuFont;			setBalloonText: aScript description]! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!numericTab	^ self window newTable: (		self numericTools collect: [:aSymbol | self toolButtonFor: aSymbol])! !!DrGUIControlsManager methodsFor: 'accessing' stamp: ''!customized: aBoolean	customized := aBoolean.! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!wheelZButtonData	 ^ {'Zoom wheel' translated . nil . #scale: . 'A wheel to zoom in, zoom out the sketch.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!textButtonData	^ {DrGTextBuilder title. #text. #createText. DrGTextBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!distanceButtonData	^ {DrGValueBuilder title. #distance. #createDistance. DrGValueBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!customizeControlsButtonData	^ {'Customise interface' translated.  #customizeInterface . #openCustomizerDialog. 'Open a dialog to customise the user interface: select the controls and tools you want with your sketch. You need to save and load the sketch to experiment the customised user interface.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!angleButtonData	^ {DrGAngleBuilder title. #angle. #createAngle. DrGAngleBuilder description}! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!scriptTab	| collection |	collection := self scriptTools.	DrGeoSystem ifTablet: [ collection := collection allButLast: 2].	^ self window newTable: (collection collect: [:aSymbol | self toolButtonFor: aSymbol])! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!newButtonData	^ {'New' translated. #blankFigure. #newFigure. 'Open a new blank sketch.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!macroBuildButtonData	^ {DrGMacroBuilder title. #macroBuild. #createMacro. DrGMacroBuilder description}! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!miscControls	^ #(#menu #tree #wheelX #wheelY #wheelZ)! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!wheelYButtonData	 ^ {'Vertical wheel' translated . nil . #moveOy: . 'A wheel to move vertically the sketch.' translated}! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!additionalTools	^ #(#axes #exportBitmap #quit)! !!DrGUIControlsManager methodsFor: 'testing' stamp: ''!isCustomized	^ customized! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!locusButtonData	^ {DrGLocusBuilder title. #locus. #createLocus. DrGLocusBuilder description}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!mainMenu	| menuBar |	menuBar := self window newToolDockingBar.	menuBar		add: 'File' translated		font: self theme menuBarFont		icon: nil		help: 'Load, save or export Dr. Geo figure.' translated		subMenu: self fileMenu.	menuBar		add: 'Edit' translated		font: self theme menuBarFont		icon: nil		help: 'Erase or edit style and properties of items.' translated		subMenu: self editMenu.	menuBar 		add: 'Points' translated		font: self theme menuBarFont		icon: nil 		help: 'Create points: free, on curve, intersection or middle point.' translated 		subMenu: self pointMenu.	menuBar 		add: 'Lines' translated		font: self theme menuBarFont		icon: nil 		help: 'Create different curve types: line, half-line, segment, vector, circle...' translated 		subMenu: self curveMenu.	menuBar 		add: 'Transformations' translated		font: self theme menuBarFont		icon: nil 		help: 'Transform an object with a geometric transformation: symmetry, reflexion, rotation, translation or homothety (scale).' translated 		subMenu: self transformationMenu.	menuBar 		add: 'Numerics & Text' translated		font: self theme menuBarFont		icon: nil 		help: 'Create several numeric objects: free value, distance, length, angle, coordinates, equation and text.' translated 		subMenu: self numericMenu.	menuBar 		add: 'Script' translated		font: self theme menuBarFont		icon: nil 		help: 'Script: use, edit or create script to plug in the sketch.' translated 		subMenu: self scriptMenu.	menuBar lastSubmorph 		on: #mouseEnter		send: #updateScriptMenu		to: self.			menuBar 		add: 'Macro-construction' translated		font: self theme menuBarFont		icon: nil 		help: 'Build or execute macro-construction. A macro is a construction template you can apply to items in the sketch area.' translated 		subMenu: self macroconstructionMenu.	menuBar lastSubmorph		on: #mouseEnter		send: #updateMacroMenu		to: self.			menuBar 		add: 'Animate' translated		font: self theme menuBarFont		icon: nil 		help: 'Animate a free point on curve.' translated 		subMenu: self animateMenu.					^ menuBar ! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!redoButtonData	^ {'Redo' translated.	#redo .	#redo .	'Redo last action.' translated}! !!DrGUIControlsManager methodsFor: 'reflective operations' stamp: ''!doesNotUnderstand: aMessage"catch the message sent from the customizer dialog, see method customizerDialog"	| getter | "Without :"	getter := aMessage selector endsWithAColon ifTrue: [aMessage selector allButLast  asSymbol] ifFalse: [aMessage selector].	^ (usedControls includesKey: getter)  		ifFalse: [super doesNotUnderstand: aMessage]		ifTrue: [				aMessage selector isKeyword 				ifTrue: [usedControls at: getter put:  aMessage argument] 				ifFalse: [usedControls at: getter]]	! !!DrGUIControlsManager methodsFor: 'accessing' stamp: ''!theme	^ self window theme! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!reflectionButtonData	^ {DrGReflectionBuilder title. #axialSymmetry. #createReflection.DrGReflectionBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!axesButtonData	^ {'Axes' translated. #grid. #axesOnOff. 'Show or hide the ox and oy axes.' translated. #isAxesVisible}! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!numericTools	^ #(#distance #angle #coordinates #text)! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!pointTab	^ self window newTable: (		self pointTools collect: [:aSymbol | self toolButtonFor: aSymbol])! !!DrGUIControlsManager methodsFor: 'xml' stamp: ''!readXmlFrom: controlNode	controlNode attributes keysDo: [ :attribute | usedControls at: attribute asSymbol put: true ]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!circleButtonData	^ {DrGCircleBuilder title. #circle. #createCircle. DrGCircleBuilder description}! !!DrGUIControlsManager methodsFor: 'controls instalation' stamp: ''!installToolbarsAndTabsAt: deltaY|bar shiftY|	self app isToolbarless ifTrue: [^ deltaY].	bar := self additionalToolbar.	shiftY := deltaY.	self window addMorph: bar		fullFrame: (LayoutFrame identity			topOffset: shiftY;			bottomFraction: 0 offset: shiftY + bar minExtent y).	shiftY := shiftY + bar minExtent y.		self isCustomized ifTrue: [^ shiftY]. "no default toolbar with a custom UI"		bar := self toolsInTab.	self window addMorph: bar		fullFrame: (LayoutFrame identity			topOffset: shiftY;			bottomFraction: 0 offset: shiftY + bar minExtent y).	^ shiftY + bar minExtent y.	! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!curveTab	^ self window newTable: (		self curveTools collect: [:aSymbol | self toolButtonFor: aSymbol])! !!DrGUIControlsManager methodsFor: 'widgets' stamp: ''!horizontalWheel 	| array |	array := self wheelXButtonData.	 ^ WheelMorph new beHorizontal; 		factor: 0.05; 		setBalloonText: array first;		target: presenter; 		actionSelector: array third; 		color: Color green muchDarker! !!DrGUIControlsManager methodsFor: 'controls instalation' stamp: ''!installWheelsFrom: shiftY to: statusHeight| wheel |	self isWheelY ifTrue: [		self window 			addMorph: (wheel := self verticalWheel)			fullFrame: (LayoutFrame identity 				leftFraction: 1 offset: DrGeoSystem wheelWidth negated;				topFraction: 1 offset: DrGeoSystem wheelHeight negated - statusHeight;				bottomOffset: statusHeight negated).		wheel borderStyle: (BorderStyle inset width: 2)].	self isWheelX ifTrue: [		self window 			addMorph: (wheel := self  horizontalWheel)			fullFrame: (LayoutFrame identity 				leftFraction: 1 offset: (DrGeoSystem wheelWidth + DrGeoSystem wheelHeight) negated;				topFraction: 1 offset: statusHeight negated;				rightOffset: DrGeoSystem wheelWidth negated).		wheel borderStyle: (BorderStyle inset width: 2)].				self isWheelZ ifTrue: [		self window 			addMorph: (wheel := self zoomWheel)			fullFrame: (LayoutFrame identity 				leftFraction: 1 offset: DrGeoSystem wheelWidth negated;				topOffset: shiftY ;				bottomFraction: 0 offset: shiftY + DrGeoSystem wheelHeight).		wheel borderStyle: (BorderStyle inset width: 2)]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!multipleModeButtonData	^ {'Create Multiple' translated. #createMultiple. #createMultipleOnOff. 'Toggle between the build of several geometric objects and the build of one geometric object then move it.' translated. #isCreateMultipleMode}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!moveButtonData	^ {DrGSelectTool title. #move. #move. DrGSelectTool description}! !!DrGUIControlsManager methodsFor: 'initialization' stamp: ''!initialize	usedControls := OrderedIdentityDictionary new.	self customized: false.	"By default, not control is used in a customized UI"	(self allTools, self miscControls) do: [ :aControl | usedControls at: aControl put: false].! !!DrGUIControlsManager methodsFor: 'initialization' stamp: ''!myRelease	presenter := nil.! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!toolButtonFor: toolSymbol	| array |	"access the buttonData method from the tool symbol"	array := self perform: (toolSymbol, #ButtonData) asSymbol. 	^ self window newButtonFor: presenter 		getState: #isTool:		action: array third 		arguments: {array second}		getEnabled: nil		label: array first 		help: array fourth! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!angleBisectorButtonData	^ {DrGAngleBisectorBuilder  title. #angleBisector. #createAngleBisector. DrGAngleBisectorBuilder description}! !!DrGUIControlsManager methodsFor: 'widgets' stamp: ''!verticalWheel 	| array |	array := self wheelYButtonData.	 ^ WheelMorph new 		beVertical; 		factor: 0.05; 		setBalloonText: array first; 		target: presenter; 		actionSelector: array third; 		color: Color green muchDarker;		borderStyle: (BorderStyle inset width: 2)! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!openButtonData	^ {'Open' translated. #open. #openFigureThumbnail. 'Open a sketch.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!animate4ButtonData	^ {'Animate x4' translated. #animate4. #animate4. 'Animate at speed 4.' translated}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!animateMenu	| menu |	menu := self window newMenu.	self animateTools do: [ :symbol | self addMenuItem: symbol to: menu ].	^ menu		! !!DrGUIControlsManager methodsFor: 'widgets' stamp: ''!zoomWheel 	| array |	array := self wheelZButtonData.	 ^ WheelMorph new 		beVertical; 		factor: 1; 		setBalloonText: array first; 		target: presenter; 		actionSelector: array third; 		color: Color orange twiceDarker! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!pointMenu	| pointMenu |	pointMenu := self window newMenu.	self pointTools do: [ :symbol | self addMenuItem: symbol to: pointMenu ].	^ pointMenu		! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!animateTools	^ #(#animate1 #animate2 #animate3 #animate4)! !!DrGUIControlsManager methodsFor: 'controls instalation' stamp: ''!installTreeFrom: menuBarShiftY status: statusHeight 	| treeMorph splitter |	(self app isToolbarless or: [self isTree not])		ifTrue: [ "no tree"			self window addMorph: self window sideContainer 				fullFrame: (LayoutFrame identity 					topOffset:  menuBarShiftY;					rightOffset:  DrGeoSystem wheelWidth negated;					bottomOffset: statusHeight negated)]		ifFalse: [ "Add tree morph and side container"			self window tree: (DrGeoTree on: self app).			self window tree on: MorphTreeChangeRequest send: #updateSelection to: presenter.			treeMorph := self window tree defaultTreeMorph buildContents.			splitter := ProportionalSplitterMorph new.			splitter addLeftOrTop: treeMorph;				addRightOrBottom: self window sideContainer.			self window addMorph: treeMorph 				fullFrame: (LayoutFrame identity					topOffset: menuBarShiftY;					rightFraction: 0.2;					bottomOffset: statusHeight negated).			self window addMorph: splitter 				fullFrame: (LayoutFrame identity 					leftFraction: 0.2 offset: -3;					topOffset: menuBarShiftY;					rightFraction: 0.2 offset: 19;					bottomOffset: statusHeight negated).			self window 				addMorph: self window sideContainer 				fullFrame: (LayoutFrame identity 					leftFraction: 0.2 offset: 14;					topOffset: menuBarShiftY ;					rightOffset: DrGeoSystem wheelWidth negated;					bottomOffset: statusHeight negated)].! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!wheelXButtonData 	^ {'Horizontal wheel' translated. nil . #moveOx: . 'A wheel to move horizontally the sketch.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!animate2ButtonData	^ {'Animate x2' translated. #animate2. #animate2. 'Animate at speed 2.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!groupButtonData	^ {'Create Group' translated.	#group .	#captureSelection .	'Create a selection group. To do a selection: i. set moving object mode, ii. select a zone by shift+drag over a backgroudn area.' translated}! !!DrGUIControlsManager methodsFor: 'testing' stamp: ''!isTree	"Do we have a tree view"	^ self isCustomized not or: [usedControls at: #tree]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!scriptRunButtonData	^ {DrGScriptPlayer title. #useScript. #useScript. DrGScriptPlayer description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!treeButtonData 	^ {'Construction tree' translated. nil . nil . 'The hierarchy tree presenting the visible constructed items.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!scriptEditButtonData	^ {'Edit a script' translated.	#editScript.	#editScript .	'Edit a Smalltalk script.' translated}! !!DrGUIControlsManager methodsFor: 'initialization' stamp: ''!activateWheels	#(#wheelX #wheelY #wheelZ) do: [ :aControl | usedControls at: aControl put: true ].! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!pointByCoordinatesButtonData	^ {DrGPointByCoordinatesBuilder title. #pointDefinedByCoordinates. #createPointByCoordinates. DrGPointByCoordinatesBuilder description}! !!DrGUIControlsManager methodsFor: 'xml' stamp: ''!writeAsXmlTo: aNode	usedControls keysAndValuesDo: [ :tool :isUsed |		isUsed ifTrue: [ aNode attributeAt: tool put: 'True']]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!helpButtonData	^ {'Help' translated. #help. #help. 'Open a web help page.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!rotationButtonData	^ {DrGRotationBuilder title. #rotation. #createRotation. DrGRotationBuilder description}! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!curveTools	^ #(#line #parallel #perpendicular #perpendicularBisector #angleBisector #ray #segment #vector #circle #arc #arcCenter #polygon #polygonRegular #locus)! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!addMenuItem: toolSymbol to: menu	| array |	"access the buttonData method from the tool symbol"	array := toolSymbol isSymbol		ifTrue: [ self perform: (toolSymbol , #ButtonData) asSymbol ]		ifFalse: [ toolSymbol ].	menu addToggle: array first target: presenter selector: array third.	menu lastItem		font: self theme menuFont;		setBalloonText: array fourth.	"do we have a stock icon for this tool?"	(DrGIcons respondsTo: array second)		ifFalse: [ ^ self ].	(DrGeoSystem isSugar or: [ self app isToolbarless ])		ifFalse: [ menu lastItem icon: (DrGIcons scaled: array second to: 16) ]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!scriptCreateButtonData	^ {'Create a script' translated. #createScript . #createScript . 'Create a Smalltalk script.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!perpendicularBisectorButtonData	^ {DrGPerpendicularBisectorBuilder  title. #perpendicularBisector. #createPerpendicularBisector. DrGPerpendicularBisectorBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!gridButtonData	^ {'Grid' translated. #grid. #gridOnOff. 'Show or hide grid.' translated. #isGridVisible}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!segmentButtonData	^ {DrGSegmentBuilder title. #segment. #createSegment. DrGSegmentBuilder description}! !!DrGUIControlsManager methodsFor: 'accessing' stamp: ''!app	^ presenter app! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!updateMacroMenu	| macroMenu |	macroMenu := self window macroMenu.	macroMenu removeAllMorphs.	self macroTools do: [ :symbol |  self addMenuItem: symbol to: macroMenu].	DrGMacroFactory new pool ifNotEmpty: [ macroMenu addLine ].	DrGMacroFactory new pool do: [:aMacro |		macroMenu 			add: aMacro title  			target: presenter 			selector: #executeMacro:			argument: aMacro.		macroMenu lastItem			font: self theme menuFont;			setBalloonText: aMacro description]! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!toolsInTab	| tabGroup |	tabGroup := self window newTabGroupTool: {		'Points' translated -> 	self pointTab.		'Lines' translated -> self curveTab.		'Transformations' translated -> self transformationTab.		'Numerics & Text' translated -> self numericTab.		'Script' translated -> self scriptTab.			'Macro-construction' translated -> self macroconstructionTab.		'Animate' translated -> self animateTab}.	tabGroup firstSubmorph  vResizing: #shrinkWrap.	^ tabGroup! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!defaultToolbarToolsWithoutSpacer	^ self defaultToolbarTools reject: [ :symbol | symbol == #spacer ]! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!pointTools	^ #(#freePoint #middle #intersection #pointByCoordinates)! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!intersectionButtonData	^ {DrGPointIntersectionBuilder title. #intersection. #createPointIntersection. DrGPointIntersectionBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!polygonButtonData	^ {DrGPolygonBuilder title. #polygon. #createPolygon. DrGPolygonBuilder description}! !!DrGUIControlsManager methodsFor: 'testing' stamp: ''!isWheelZ	^ self isCustomized not or: [usedControls at: #wheelZ]! !!DrGUIControlsManager methodsFor: 'controls instalation' stamp: ''!installTools	| menuBarShiftY statusHeight sideContainer |	menuBarShiftY := self installMenu.	menuBarShiftY := self installToolbarsAndTabsAt: menuBarShiftY.	statusHeight := (self window statusbar minExtent y max: DrGeoSystem wheelWidth) 		max: StandardFonts defaultFont height + 4.	self installWheelsFrom: menuBarShiftY to: statusHeight.	self window addMorph: self window statusbar		fullFrame: (LayoutFrame identity 			topFraction: 1 offset: statusHeight negated;			rightOffset: (DrGeoSystem wheelWidth + DrGeoSystem wheelHeight) negated).	self window statusbar		borderStyle: (BorderStyle inset width: 1);		cornerStyle: #square.	sideContainer := AlignmentMorph  inARow: {self wrapMeInAthens: self window area}.	self window sideContainer: sideContainer.	sideContainer layoutInset: 0.	self window area hResizing: #spaceFill.	self installTreeFrom: menuBarShiftY status: statusHeight.! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!macroDeleteButtonData	^ {'Delete macro' translated.	#eraser .	#deleteMacro .	'Delete a macro-construction from the registry.' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!styleButtonData	^ {DrGStyleTool title. #style. #style. DrGStyleTool description}! !!DrGUIControlsManager methodsFor: 'testing' stamp: ''!isMenu	"Do we have a menu"	^ self isCustomized not or: [usedControls at: #menu]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!quitButtonData	^ {'Quit' translated. #quit. #quit. 'Quit' translated}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!keepButtonData	^ {'Save' translated. #keep. #saveFigure. 'Keep this sketch permanently.' translated}! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!allTools	| allTools |	"Collect all tool in a flat collection"	allTools := OrderedCollection new.	 #(#defaultToolbarToolsWithoutSpacer #additionalTools #pointTools #curveTools #transformationTools #numericTools #scriptTools #macroTools #animateTools) do: [ :tools | allTools addAll: (self perform: tools) ].	^ allTools! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!parallelButtonData	^ {DrGParallelBuilder title. #parallel. #createParallel. DrGParallelBuilder description}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!scriptMenu	| menu |	self window scriptMenu: (menu := self window newMenu).	 self scriptTools do: [ :symbol | self addMenuItem: symbol to: menu].	^ menu 		! !!DrGUIControlsManager methodsFor: 'toolbars' stamp: ''!defaultToolbar	|tools collection|	collection := self defaultToolbarTools collect: [ :symbol | self buttonWith: symbol ].	DrGeoSystem ifTablet: [		collection addAll: {			self horizontalExpander.			self buttonWith: #help.			self buttonWith: #quit}].	tools := self window newToolbar: collection.	tools hResizing: #spaceFill.	^ self window newToolDockingBar addMorph: tools.! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!macroconstructionTab	^ self window newTable: (		self macroTools collect: [:aSymbol | self toolButtonFor: aSymbol])! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!animateTab	^ self window newTable: (		self animateTools collect: [:aSymbol | self toolButtonFor: aSymbol])! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!viewerButtonData	^ {DrGViewerTool title. #viewer. #openItemViewer. DrGViewerTool description}! !!DrGUIControlsManager methodsFor: 'toolbars' stamp: ''!buttonIcon: selector	^ DrGIcons scaled: selector to: DrGeoSystem toolbarIconSize! !!DrGUIControlsManager methodsFor: 'testing' stamp: ''!isWheelX	^ self isCustomized not or: [usedControls at: #wheelX]! !!DrGUIControlsManager methodsFor: 'tabular groups' stamp: ''!transformationTab	^ self window newTable: (		self transformationTools collect: [:aSymbol | self toolButtonFor: aSymbol])! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!symmetryButtonData	^ {DrGSymmetryBuilder title. #centralSymmetry. #createSymmetry. DrGSymmetryBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!arcCenterButtonData	^ {DrGArcCenterBuilder title. #arcCenter. #createArcCenter. DrGArcCenterBuilder description}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!perpendicularButtonData	^ {DrGPerpendicularBuilder title. #perpendicular. #createPerpendicular. DrGPerpendicularBuilder description}! !!DrGUIControlsManager methodsFor: 'accessing' stamp: ''!window	^ presenter view ! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!scriptTools	^ #(#scriptRun #scriptEdit #scriptCreate)! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!transformationMenu	| menu |	menu := self window newMenu.	self transformationTools do: [ :symbol | self addMenuItem: symbol to: menu ].	^ menu		! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!eraserButtonData	^ {DrGDeleteTool title. #eraser. #eraser. DrGDeleteTool description}! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!macroTools	^ #(#macroBuild #macroExecute)! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!animate1ButtonData	^ {'Animate x1' translated. #animate1. #animate1. 'Animate at speed 1.' translated}! !!DrGUIControlsManager methodsFor: 'controls enumerate' stamp: ''!defaultToolbarTools	^ #(#new #open #keep 	#spacer #spacer	#undo #redo 	#spacer #spacer	#grid #gridMagnet 	#spacer #spacer 	#multipleMode #move 	#spacer #spacer 	#eraser #style #property)! !!DrGUIControlsManager methodsFor: 'testing' stamp: ''!isWheelY	^ self isCustomized not or: [usedControls at: #wheelY]! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!rayButtonData	^ {DrGRayBuilder title. #ray. #createRay. DrGRayBuilder description}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!editMenu	| menu |	menu := self window newMenu.	self addMenuItem: self moveButtonData to: menu.	self addState: #isCreateMultipleMode menuItem: self multipleModeButtonData to: menu.	menu addLine.	self addMenuItem: self undoButtonData to: menu.	self addMenuItem: self redoButtonData to: menu.	menu addLine.	self addMenuItem: self eraserButtonData to: menu.	self addMenuItem: self styleButtonData to: menu.	self addMenuItem: self propertyButtonData  to: menu.	menu addLine.	self addState: #isGridVisible menuItem: self gridButtonData to: menu.	self addState: #isAxesVisible menuItem: self axesButtonData to: menu.	self addState: #isGridded menuItem: self gridMagnetButtonData to: menu.	menu addLine.	self addMenuItem: self customizeControlsButtonData to: menu.	^ menu		! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!coordinatesButtonData	^ {DrGCoordinatesBuilder title. #coordinates. #createCoordinates. DrGCoordinatesBuilder description}! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!macroconstructionMenu	| menu |	self window macroMenu: (menu := self window newMenu).	 self macroTools do: [ :symbol | self addMenuItem: symbol to: menu].	^ menu! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!gridMagnetButtonData	^ {'Magnetic Grid' translated. #gridMagnet. #gridStuckOnOff. 'Snap to grid.' translated. #isGridded}! !!DrGUIControlsManager methodsFor: 'controls data' stamp: ''!menuButtonData 	^ {'Menu' translated. nil . nil . 'An unobtrusive menu with all Dr. Geo tools.' translated}! !!DrGUIControlsManager methodsFor: 'toolbars' stamp: ''!customToolbar	|tools collection|	collection := OrderedCollection new.	self allTools do: [ :key | (usedControls at: key) ifTrue: [ collection add: (self buttonWith: key)]].	DrGeoSystem ifTablet: [		collection addAll: {			self horizontalExpander.			self buttonWith: #help.			self buttonWith: #quit}].	tools := self window newToolbar: collection.	tools hResizing: #spaceFill.	^ self window newToolDockingBar addMorph: tools.! !!DrGUIControlsManager methodsFor: 'menus' stamp: ''!addState: stateSymbol menuItem: array to: menu	menu 		addToggle: array first 		target: presenter		selector: array third		getStateSelector: stateSymbol.	menu lastItem		font: self theme menuFont;		setBalloonText: array fourth.	"do we have a stock icon for this tool?"	(DrGIcons respondsTo: array second) ifFalse: [^self].	menu lastItem icon: (DrGIcons scaled: array second to: 16) ! !!DrGUIControlsManager methodsFor: 'toolbars' stamp: ''!buttonWith: symbolOrArray 	"array first = menu label or button label	array second = button form = selection mode	array third = symbol callback	array fourth = help string	"		| array |	symbolOrArray isSymbol 		ifTrue: [ 			symbolOrArray == #spacer ifTrue: [ ^ self window newToolSpacer ].			array := self perform: (symbolOrArray, #ButtonData) asSymbol]		ifFalse: [ array := symbolOrArray].		^ (DrGIcons respondsTo: array second) 		ifTrue: [ 			self window				newButtonFor: presenter				getState: (array at: 5 ifAbsent: [ #isTool: ])				action: array third				arguments: {array second}				getEnabled: nil				labelForm: (self buttonIcon: array second)				help: array fourth]		ifFalse: [ 			self window				newButtonFor: presenter				getState: (array at: 5 ifAbsent: [ #isTool: ])				action: array third				arguments: {array second}				getEnabled: nil				label: array first				help: array fourth]! !!DrGUIControlsManager class methodsFor: 'instance creation' stamp: ''!for: aPresenter	^ self new 		presenter: aPresenter;		activateWheels! !!DrGValueArclengthItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'arc_length'! !!DrGValueArclengthItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: 		[value := parents first length abs * parents first radius].! !!DrGValueArclengthItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This arc length %1' translated! !!DrGValueBuilder methodsFor: 'updating' stamp: ''!reset	super reset.	pointA := pointB := curveItem := nil! !!DrGValueBuilder methodsFor: 'accessing' stamp: ''!arguments	(pointA notNil and: [curveItem notNil]) 		ifTrue: [^{pointA . curveItem. point}].	curveItem ifNotNil: [^{curveItem. point}].	pointB ifNotNil: [^{pointA . pointB. point}].	^{point}! !!DrGValueBuilder methodsFor: 'private' stamp: ''!addItem: aMathItemCollection at: aPoint	super addItem: aMathItemCollection at: aPoint.	aMathItemCollection ifEmpty: [^self].	aMathItemCollection first isPointItem 		ifTrue: 			[pointA ifNil:				[pointA := aMathItemCollection first.				^self].			pointB ifNil:				[pointB := aMathItemCollection first.				^self]]		ifFalse: [curveItem := aMathItemCollection first]! !!DrGValueBuilder methodsFor: 'testing' stamp: ''!readyToBuild	^(point notNil 		and: [curveItem isNil			and: [pointA isNil				and: [pointB isNil]]])		or: [pointB notNil			or: [curveItem notNil]]! !!DrGValueBuilder methodsFor: 'xml' stamp: ''!itemInstanceFrom: node	(self parentsById: node) do: [:each |	self addItem: {each} at: 0@0].	"give a chance to a Free value (ValueValueItem) to be instantiated, otherwise it does not hurt"	self addItem: #() at: 0@0.	^ self getItem first.! !!DrGValueBuilder methodsFor: 'testing' stamp: ''!isWanted: aMathItemCollection 	aMathItemCollection		ifEmpty: [^ true].	aMathItemCollection first isPointItem		ifTrue: [^ true].	((aMathItemCollection first isLineItem				or: [aMathItemCollection first isSegmentItem				or: [aMathItemCollection first isVectorItem				or: [aMathItemCollection first isCircleItem				or: [aMathItemCollection first isArcItem				or: [aMathItemCollection first isPolygonItem]	]]]])			and: [pointA isNil])		ifTrue: [^ true].	(pointA notNil	and: [aMathItemCollection first isLineItem])		ifTrue: [^ true].	^ false! !!DrGValueBuilder methodsFor: 'xml' stamp: ''!postProcess: item from: node	super postProcess: item from: node.	self parseValuePosition: node of: item.	(node attributeAt: #type) asSymbol == #value 		ifTrue: [item valueItem: (node contentStringAt: #value) asNumber]! !!DrGValueBuilder methodsFor: 'constant' stamp: ''!mathItemClass	pointA		ifNotNil: [curveItem				ifNotNil: [curveItem isLineItem						ifTrue: [^ DrGValueDistanceptlineItem]]].	curveItem		ifNotNil: [curveItem isLineItem				ifTrue: [^ DrGValueSlopeItem].			curveItem isSegmentItem				ifTrue: [^ DrGValueSegmentlengthItem].			curveItem isCircleItem				ifTrue: [^ DrGValueCircleperimeterItem].			curveItem isVectorItem				ifTrue: [^ DrGValueVectornormItem].			curveItem isArcItem				ifTrue: [^ DrGValueArclengthItem].			curveItem isPolygonItem				ifTrue: [ ^ DrGValuePolygonperimeterItem]				].	pointB		ifNotNil: [^ DrGValueDistance2ptsItem].	^ DrGValueValueItem! !!DrGValueBuilder class methodsFor: 'documentation' stamp: ''!description 	^ 'Distance between objects, curve length, free value.' translated! !!DrGValueBuilder class methodsFor: 'documentation' stamp: ''!title	^ 'Distance, length, value' translated! !!DrGValueCircleperimeterItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'circle_perimeter'! !!DrGValueCircleperimeterItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[value := parents first radius * DrGDirectionItem twoPi].! !!DrGValueCircleperimeterItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This circle perimeter %1' translated! !!DrGValueCostume methodsFor: 'accessing' stamp: ''!contents: aString	morph contents: aString! !!DrGValueCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGValueMorph new.	(mathItem class = DrGValueValueItem and: [self app isNotInteractive not]) ifTrue: ["we do want pop up dialog now"		self editMyProperty].	morph contents: self roundedValueString! !!DrGValueCostume methodsFor: 'updating' stamp: ''!roundedValueString	^ (mathItem valueItem isPoint or: [mathItem valueItem isNumber])		ifTrue: [			mathItem valueItem isFraction 				ifTrue: [mathItem valueItem printString] 				ifFalse: [mathItem valueItem printShowingDecimalPlaces: 2]]		ifFalse: [mathItem valueItem asString]! !!DrGValueCostume methodsFor: 'updating' stamp: ''!redraw	exist ifFalse: [^ self].	(mathItem name isNil or: [mathItem name isEmpty])		ifTrue: [			mathItem valueItem isText				ifTrue: [self contents: mathItem valueItem]				ifFalse: [self contents: self roundedValueString]]		ifFalse: [self contents: mathItem name , ' = ' , self roundedValueString].	self redrawValue.! !!DrGValueCostume methodsFor: 'testing' stamp: ''!basicType	^#value! !!DrGValueCostume methodsFor: 'updating' stamp: ''!launchMiniEditor	morph contents: self valueString.	morph launchMiniEditor: ActiveHand lastEvent! !!DrGValueCostume methodsFor: 'updating' stamp: ''!valueString	^mathItem valueItem asString! !!DrGValueCostume methodsFor: 'updating' stamp: ''!redrawValue	morph topLeft: self textPosition! !!DrGValueCostume methodsFor: 'style' stamp: ''!styleClass	^DrGValueCostumeStyle! !!DrGValueCostume methodsFor: 'layout' stamp: ''!constraintTextPosition: aPoint	^ aPoint! !!DrGValueCostume methodsFor: 'updating' stamp: ''!editMyProperty	| answer |	mathItem isPropertyEditable ifFalse: [^self].	DrGeoSystem showVirtualKeyboard: true.	answer := self view 		textEntry:  'Edit this value' translated 		title: 'Edit this value' translated 		entryText: self valueString.	answer isEmptyOrNil ifTrue: [^self]. " cancelled"	[answer := answer asNumber]		on: Error		do: [^ self view alert: 'I can''t read your value.' translated].	self domain propertyCommandFor: mathItem with: answer.		DrGeoSystem showVirtualKeyboard: false.! !!DrGValueCostume methodsFor: 'updating' stamp: ''!textPosition	^(drawable worldToMorph: mathItem position)! !!DrGValueCostume methodsFor: 'accessing' stamp: ''!textMorph: aString 	"We don't have label for ValueCostume"	mathItem name: aString.! !!DrGValueCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize 	super initialize.	self color: DrGStylePreference current valueColor.! !!DrGValueCostumeStyle methodsFor: 'accessing' stamp: ''!rename|answer|	DrGeoSystem showVirtualKeyboard: true.	self mathItem name 		ifNotNil:	[			answer := self view 				textEntry:  'Rename this value' translated 				title: 'Rename this value' translated 				entryText: self mathItem name.]		ifNil: [			answer := self view 				textEntry:  'Name this value' translated 				title: 'Name this value' translated].	answer ifNil: [^self].	answer isEmpty ifTrue: [answer := nil].	self mathItem name: answer.	costume redraw.	self changed! !!DrGValueCostumeStyle methodsFor: 'widget' stamp: ''!nameWidget	^ 'Name' translated ->		((self view			newTextEntryFor: self mathItem 			getText: #name 			setText: #name: 			help: 'Rename this object.' translated) minWidth: 10;				changedAction: [:text| 					self mathItem name: text asString.					costume redraw])! !!DrGValueDistance2ptsItem methodsFor: 'accessing' stamp: ''!name"When my name is empty, I try to deduce a name from my parent's names if any"	^ name isEmptyOrNil 		ifTrue: [			(parents first name isEmptyOrNil or: [ parents second name isEmptyOrNil])				ifFalse: [parents first name, parents second name]				ifTrue: [name]]		ifFalse: [name]! !!DrGValueDistance2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'distance_2pts'! !!DrGValueDistance2ptsItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[value := parents first point dist: parents second point].! !!DrGValueDistance2ptsItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This distance between two points %1' translated! !!DrGValueDistanceptlineItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'distance_pt_line'! !!DrGValueDistanceptlineItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[value := ((parents first point - parents second origin) 					dotProduct: parents second direction normal) abs].! !!DrGValueDistanceptlineItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This point-line distance %1' translated! !!DrGValueItem methodsFor: 'printing' stamp: ''!printOn: aStream	self printTypeOn: aStream.	self printValueOn: aStream ! !!DrGValueItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self position: theParents last! !!DrGValueItem methodsFor: 'accessing' stamp: ''!position: aPoint	position := aPoint.! !!DrGValueItem methodsFor: 'accessing' stamp: ''!position	^position! !!DrGValueItem methodsFor: 'accessing' stamp: ''!valueItem	^value! !!DrGValueItem methodsFor: 'testing' stamp: ''!isLockable 	^ true! !!DrGValueItem methodsFor: 'xml writing' stamp: ''!writeAsXmlPositionTo: aNode 	"return the newly created element"	aNode		addElement: ((XMLElement named: #x)				addContent: (XMLStringNode string: position x asString));		addElement: ((XMLElement named: #y)				addContent: (XMLStringNode string: position y asString)).	^ aNode! !!DrGValueItem methodsFor: 'accessing' stamp: ''!isLocked	^ locked ifNil: [locked := false]! !!DrGValueItem methodsFor: 'accessing' stamp: ''!basicType	 ^#value! !!DrGValueItem methodsFor: 'computing' stamp: ''!closestPointTo: aPoint	^ position! !!DrGValueItem methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	value := 0! !!DrGValueItem methodsFor: 'updating' stamp: ''!move: aPoint	self isLocked ifFalse: [self position: position + aPoint].! !!DrGValueItem methodsFor: 'printing' stamp: ''!printTypeOn: aStream|safeName|	self printNameOn: aStream.	(safeName := self safeName) ifNotEmpty: [			aStream nextPutAll: self safeName;			nextPutAll: ' = '].! !!DrGValueItem methodsFor: 'accessing' stamp: ''!costumeClass 	 ^ DrGValueCostume ! !!DrGValueItem methodsFor: 'accessing' stamp: ''!locked: aBoolean	locked := aBoolean ! !!DrGValueItem methodsFor: 'updating' stamp: ''!moveParent: aPoint"Don't move my parent"	^false! !!DrGValueItem methodsFor: 'printing' stamp: ''!printValueOn: aStream 	self printDecimal: value on: aStream ! !!DrGValueItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This value %1' translated! !!DrGValueItem methodsFor: 'accessing' stamp: ''!parents: aCollection 	"last is the initial screen position of the value"	aCollection isEmptyOrNil ifTrue: 		[ parents := aCollection.		^ self ].	aCollection last isPoint 		ifTrue: [ parents := aCollection allButLast ]		ifFalse: [ parents := aCollection ].! !!DrGValueItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isValueItem	^true! !!DrGValueItem methodsFor: 'printing' stamp: ''!printNameOn: aStream	aStream nextPutAll: 'Value ' translated.! !!DrGValueMorph methodsFor: 'events-processing' stamp: ''!handleMouseDown: anEvent	^false! !!DrGValueMorph methodsFor: 'editing' stamp: ''!acceptContents	[costume mathItem valueItem: contents asNumber] 		on: Error		do: [costume view alert: 'I can''t read your value.' translated.			costume mathItem valueItem: 0].	self contents: costume roundedValueString.! !!DrGValueMorph methodsFor: 'as yet unclassified' stamp: ''!isMorphCostume	^true! !!DrGValueMorph methodsFor: 'editing' stamp: ''!lostFocusWithoutAccepting	"no update in that case"	^ self! !!DrGValuePolygonperimeterItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'polygon_perimeter'! !!DrGValuePolygonperimeterItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[value := parents first length].! !!DrGValuePolygonperimeterItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This polygon perimeter %1' translated! !!DrGValuePtabscissaItem methodsFor: 'xml writing' stamp: ''!nodeType 	^#'pt_abscissa'! !!DrGValuePtabscissaItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [		value := parents first point x]! !!DrGValuePtabscissaItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This point abscissa %1' translated! !!DrGValuePtordinateItem methodsFor: 'xml writing' stamp: ''!nodeType 	^#'pt_ordinate'! !!DrGValuePtordinateItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [		value := parents first point y]! !!DrGValuePtordinateItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This point ordinate %1' translated! !!DrGValueScriptItem commentStamp: ''!Script	- script: a script class instance 	- parents: a collection of costume (BEWARE, and not math item)!!DrGValueScriptItem methodsFor: 'printing' stamp: ''!printNameOn: aStream	aStream nextPutAll: 'Script ' translated.! !!DrGValueScriptItem methodsFor: 'initialization' stamp: ''!initialize: theParentsCostume 	super initialize: theParentsCostume.	self script: (theParentsCostume at: theParentsCostume size - 1)! !!DrGValueScriptItem methodsFor: 'accessing' stamp: ''!compute"Do the script computation and return its result "	^ self script compute! !!DrGValueScriptItem methodsFor: 'testing' stamp: ''!isScriptItem	^true! !!DrGValueScriptItem methodsFor: 'accessing' stamp: ''!parents: aCollection in: app	"last is the initial screen position of the value, and previous last is the script class"	self parents: aCollection.	parents ifNotNil: [parentsCostume := app costumesOf: parents].	"reinject the argument in the script in cas it is already instanciated"	script ifNotNil: [script arguments: parentsCostume]! !!DrGValueScriptItem methodsFor: 'accessing' stamp: ''!script	^script! !!DrGValueScriptItem methodsFor: 'accessing' stamp: ''!costumes	^ parentsCostume ! !!DrGValueScriptItem methodsFor: 'testing' stamp: ''!isPropertyEditable	^ DrGeoSystem isTablet 		ifTrue: [false]  		ifFalse:  [true]! !!DrGValueScriptItem methodsFor: 'comparing' stamp: ''!rehash	^hash := super rehash bitXor: script class hash! !!DrGValueScriptItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	|node|	node := super writeAsXmlTo: aNode.	node attributeAt: #class put: script class printString.	node addElement: (		(XMLElement named: #code) addContent: (			XMLStringNode string: (String streamContents: [:out |script class fileOutOn: out]))).	^ self writeAsXmlPositionTo: node.! !!DrGValueScriptItem methodsFor: 'xml writing' stamp: ''!nodeType	^#script! !!DrGValueScriptItem methodsFor: 'accessing' stamp: ''!costumeClass 	 ^ DrGScriptCostume ! !!DrGValueScriptItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [ value := script compute]! !!DrGValueScriptItem methodsFor: 'accessing' stamp: ''!script: aScriptClass	script := aScriptClass new arguments: self costumes.	self rehash ! !!DrGValueScriptItem methodsFor: 'printing' stamp: ''!printValueOn: aStream	value isNumber 		ifTrue: [^ self printDecimal: value on: aStream].	value isPoint 		ifTrue: [^ self printCoordinates: value on:  aStream].	aStream print: value! !!DrGValueScriptItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	| string |	parents size > 0 		ifFalse: [string := 'This script "{1}"' translated]		ifTrue: 			[parents size = 1 				ifTrue: [string := 'This script "{1}" with argument: %2' translated]				ifFalse: [string := 'This script "{1}" with arguments: %2' translated].			string := string copyReplaceAll: '%2' with: self argumentsName].	^string format: {script class scriptName}.! !!DrGValueScriptItem methodsFor: 'accessing' stamp: ''!parents: aCollection 	"last is the initial screen position of the value, and previous last is the script class"	aCollection isEmptyOrNil ifTrue: 		[parents := aCollection.		parentsCostume := aCollection.		^ self ].	aCollection last isPoint 		ifTrue: [ parents := aCollection allButLast: 2 ]		ifFalse: 			[ "play nicely with macro"			parents := aCollection ].! !!DrGValueScriptItem methodsFor: 'comparing' stamp: ''!= aScriptItem	^super = aScriptItem and: [self script class == aScriptItem script class]! !!DrGValueScriptItem methodsFor: 'private' stamp: ''!argumentsName	"collect parents name in a string as A, B, C"	| stream |	parents size = 0 ifTrue: [ ^ '' ].	stream := ReadWriteStream on: String new.	parents allButLast do: 		[ :item | 		stream			nextPutAll: (item safeName ifEmpty: [item printString]);			nextPutAll: ', ' ].	stream nextPutAll: (parents last safeName ifEmpty: [parents last printString]).	^ stream contents! !!DrGValueSegmentlengthItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'segment_length'! !!DrGValueSegmentlengthItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[value := parents first direction r].! !!DrGValueSegmentlengthItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This segment length %1' translated! !!DrGValueSlopeItem methodsFor: 'xml writing' stamp: ''!nodeType	^#slope! !!DrGValueSlopeItem methodsFor: 'updating' stamp: ''!update	|v|	self doParentsExist ifTrue:		[v := parents first direction.		v x= 0 ifTrue: [exist := false]		ifFalse: [value := v y / v x.]].! !!DrGValueSlopeItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This line slope %1' translated! !!DrGValueValueItem commentStamp: ''!Free value!!DrGValueValueItem methodsFor: 'updating' stamp: ''!property: aProperty 	self valueItem: aProperty ! !!DrGValueValueItem methodsFor: 'as yet unclassified' stamp: ''!position: aPoint	position := aPoint.	self rehash! !!DrGValueValueItem methodsFor: 'testing' stamp: ''!isPropertyEditable	^ true! !!DrGValueValueItem methodsFor: 'testing' stamp: ''!doParentsExist	^ true! !!DrGValueValueItem methodsFor: 'comparing' stamp: ''!rehash	^ hash := (super rehash bitXor: position hash) bitXor: value hash! !!DrGValueValueItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode 	"return the newly created element"	| node |	node := super writeAsXmlTo: aNode.	node addElement:  ((XMLElement named: #value) addContent: (XMLStringNode string: value asFloat asString)).	^ self writeAsXmlPositionTo: node.! !!DrGValueValueItem methodsFor: 'xml writing' stamp: ''!nodeType	^#value! !!DrGValueValueItem methodsFor: 'updating' stamp: ''!property	^ self valueItem! !!DrGValueValueItem methodsFor: 'accessing' stamp: ''!valueItem: aValue	value := aValue.	self rehash! !!DrGValueValueItem methodsFor: 'comparing' stamp: ''!= aMathItem	^super = aMathItem 		and: [self valueItem = aMathItem valueItem		and: [self position = aMathItem position]]! !!DrGValueVectorabscissaItem methodsFor: 'xml writing' stamp: ''!nodeType 	^#'vector_abscissa'! !!DrGValueVectorabscissaItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [		value := parents first direction x]! !!DrGValueVectorabscissaItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This vector abscissa %1' translated! !!DrGValueVectornormItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'vector_norm'! !!DrGValueVectornormItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This Vector''s norm %1' translated! !!DrGValueVectorordinateItem methodsFor: 'xml writing' stamp: ''!nodeType 	^ #'vector_ordinate'! !!DrGValueVectorordinateItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue: [		value := parents first direction y]! !!DrGValueVectorordinateItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This vector ordinate %1' translated! !!DrGVector2ptsItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self origin: (theParents first point).! !!DrGVector2ptsItem methodsFor: 'xml writing' stamp: ''!nodeType	^#'2pts'! !!DrGVector2ptsItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self direction: (parents at: 2) point - (parents at: 1) point].! !!DrGVectorBuilder methodsFor: 'flying costume' stamp: ''!flyingCostumeClass	^ DrGVectorCostume! !!DrGVectorBuilder methodsFor: 'constant' stamp: ''!mathItemClass	^DrGVector2ptsItem! !!DrGVectorBuilder class methodsFor: 'documentation' stamp: ''!description 	^'Vector defined by two points.' translated! !!DrGVectorBuilder class methodsFor: 'documentation' stamp: ''!title	^'Vector' translated ! !!DrGVectorCostume methodsFor: 'initialize-release' stamp: ''!instantiateMorph	morph := DrGVectorMorph new! !!DrGVectorCostume methodsFor: 'testing' stamp: ''!basicType	^#vector! !!DrGVectorCostume methodsFor: 'style' stamp: ''!styleClass	^DrGVectorCostumeStyle! !!DrGVectorCostumeStyle methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	self color: DrGStylePreference current vectorColor.	self lineStyle: DrGStylePreference current vectorStyle.	self thickness: DrGStylePreference current vectorThickness! !!DrGVectorHomothetyItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self origin: parents second point.! !!DrGVectorHomothetyItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Scale! !!DrGVectorHomothetyItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGVectorHomothetyItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[vector := parents first direction * parents third valueItem].! !!DrGVectorItem methodsFor: 'printing' stamp: ''!printOn: aStream	self printType: DrGVectorBuilder title on: aStream.	self printCoordinates: vector on: aStream ! !!DrGVectorItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isVectorItem	^true! !!DrGVectorItem methodsFor: 'computing' stamp: ''!clone	|pointA pointB clone|	pointA := DrGPointFreeItem newWith: {self origin + (0.2@0.2)}.	pointB := DrGPointFreeItem newWith: {self origin + self direction + (0.2@0.2)}.	clone := DrGVector2ptsItem newWith: {pointA . pointB}.	^ {pointA . pointB . clone}! !!DrGVectorItem methodsFor: 'accessing' stamp: ''!basicType	^#vector! !!DrGVectorItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem	^false! !!DrGVectorItem methodsFor: 'xml writing' stamp: ''!writeAsXmlTo: aNode	|node|	node := super writeAsXmlTo: aNode.	node attributeAt: #origin put: origin asString.	^ node! !!DrGVectorItem methodsFor: 'updating' stamp: ''!move: aPoint	origin := origin + aPoint.! !!DrGVectorItem methodsFor: 'accessing' stamp: ''!costumeClass 	^ DrGVectorCostume ! !!DrGVectorItem methodsFor: 'updating' stamp: ''!moveParent: aPoint"We don't want to move the parents, as the whole vector representation can be move all arround"	^false! !!DrGVectorItem methodsFor: 'private' stamp: ''!adaptiveDescriptiveName	^ 'This vector %1' translated! !!DrGVectorItem methodsFor: '*DrGeoII-Core-testing' stamp: ''!isSegmentItem	^false! !!DrGVectorMorph methodsFor: 'initializing' stamp: ''!initialize	super initialize.	arrows := #forward.! !!DrGVectorReflexionItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self origin: parents first origin.! !!DrGVectorReflexionItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Reflexion! !!DrGVectorReflexionItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGVectorReflexionItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self direction: (parents first direction 								vectorReflexionBy: parents second direction)].! !!DrGVectorRotationItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self origin: parents first origin.! !!DrGVectorRotationItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Rotation! !!DrGVectorRotationItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGVectorRotationItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[vector := parents first direction 			rotateVector: parents third valueItem].! !!DrGVectorSymmetryItem methodsFor: 'initialize-release' stamp: ''!initialize: theParents	super initialize: theParents.	self origin: (parents first origin)! !!DrGVectorSymmetryItem methodsFor: 'xml writing' stamp: ''!nodeType	^#Symmetry! !!DrGVectorSymmetryItem methodsFor: 'updating' stamp: ''!moveParent: aPoint	^false! !!DrGVectorSymmetryItem methodsFor: 'updating' stamp: ''!update	self doParentsExist ifTrue:		[self direction: parents first direction negated].! !!DrGViewerTool commentStamp: ''!A tool to select an item to open its viewer!!DrGViewerTool methodsFor: 'updating' stamp: ''!reset	super reset.	self switchState: DrGViewerToolState! !!DrGViewerTool class methodsFor: 'documentation' stamp: ''!description 	^ 'Open the Etoys script viewer for a given geometric object.' translated! !!DrGViewerTool class methodsFor: 'documentation' stamp: ''!title	^'Etoys Viewer' translated  ! !!DrGViewerToolState methodsFor: 'handling' stamp: ''!handleChoice: aCostumeCollection	aCostumeCollection 		ifNotEmpty: 			[self context presenter 				openViewerForCostume: aCostumeCollection first].	self context reset! !!DrGWizard commentStamp: ''!A DrGMacroMorph is an abstractact dialog to build and play macro.It emits event when  - the user changes the page with the next and previous buttons - the user press apply and cancelInstance Variables	pages:		dictionary of pages Morphpages	- xxxxx!!DrGWizard methodsFor: 'accessing' stamp: ''!builder: aBuilder	builder := aBuilder ! !!DrGWizard methodsFor: 'actions' stamp: ''!newMainPanel	^ self panel! !!DrGWizard methodsFor: 'actions' stamp: ''!panel	^ panel ifNil: [ panel := self newDialogPanel]! !!DrGWizard methodsFor: 'callback' stamp: ''!apply	self triggerEvent: #apply! !!DrGWizard methodsFor: 'accessing' stamp: ''!goPage: integer"	(contentMorph findA: DrGWizardPage) ifNotNilDo: 		[:page | self removeMorph: page]."	self panel removeAllMorphs.	self panel addMorph: (self pageAt: integer).	self title: (self pageAt: integer) title.	self triggerEvent: #page with: integer.! !!DrGWizard methodsFor: 'initialization' stamp: ''!initialize	super initialize.	pages := OrderedCollection new.! !!DrGWizard methodsFor: 'accessing' stamp: ''!addPage: aPage	pages add: aPage.	currentPage ifNil: 		[self panel addMorph: aPage.		self title: aPage title.		currentPage := 1]! !!DrGWizard methodsFor: 'testing' stamp: ''!isResizeable 	^ true! !!DrGWizard methodsFor: 'callback' stamp: ''!cancel	self triggerEvent: #cancel! !!DrGWizard methodsFor: 'callback' stamp: ''!previous	currentPage > 1 ifFalse: [^self].	self goPage: (currentPage := currentPage - 1)! !!DrGWizard methodsFor: 'meta-actions' stamp: ''!delete	super delete.	pages do: [:page | page delete].! !!DrGWizard methodsFor: 'initialization' stamp: ''!pageModel	|page|	page := Morph new color: Color transparent .	page		layoutPolicy: TableLayout new;		listDirection: #bottomToTop;		cellPositioning: #topLeft;		layoutInset: 0@3;		cellInset: 0@5.	^ page! !!DrGWizard methodsFor: 'accessing' stamp: ''!pageAt: integer	^ pages at: integer ! !!DrGWizard methodsFor: 'callback' stamp: ''!next	currentPage < pages size ifFalse: [^ self].	self goPage: (currentPage := currentPage + 1)! !!DrGWizard methodsFor: 'wiw support' stamp: ''!morphicLayerNumber	^ 90! !!DrGWizard methodsFor: 'initialization' stamp: ''!initialExtent	^DrGeoSystem wizardExtent! !!DrGWizard class methodsFor: 'as yet unclassified' stamp: ''!example	"DrGWizard example openInWorld"	| wizard |	wizard := self new.	wizard		addPage: ((DrGWizardPage firstPage: 'Step 1/3') model: wizard);		addPage: ((DrGWizardPage standardPage: 'Step 2/3') model: wizard;			content: 'We can change content :	1. One	2. Two	3. Three' asTextMorph);		addPage: ((DrGWizardPage applyPage: 'Step 3/3') model: wizard).	^ wizard! !!DrGWizard class methodsFor: 'instance creation' stamp: ''!builder: aBuilder 	^ self basicNew		builder: aBuilder;		initialize ! !!DrGWizardMacroBuild methodsFor: 'initialization' stamp: ''!fourthPage	| page morph |	page := self pageModel.		page addMorph: 'Title:' translated asStringMorph.	morph := PluggableTextMorph 		on: builder text: #title accept: #title:.	morph acceptTextInModel.	morph	autoAccept: true;		hResizing: #spaceFill;		height: 16;		hideScrollBarsIndefinitely.	page addMorph: morph.	page addMorph: 'Description:' translated asStringMorph.	morph := PluggableTextMorph 		on: builder text: #description accept: #description:.	morph	autoAccept: true;		hResizing: #spaceFill;		vResizing: #spaceFill.	page addMorph: morph.	morph acceptTextInModel.	^(DrGWizardPage applyPage: 'Give a name and a description' translated) 				model: self;				content: page! !!DrGWizardMacroBuild methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self 		addPage: self firstPage;		addPage: self secondPage;		addPage: self thirdPage;		addPage: self fourthPage.		! !!DrGWizardMacroBuild methodsFor: 'initialization' stamp: ''!thirdPage	| list page |	page := self pageModel.	list := PluggableListMorph 		on: builder 		list: #outputName		selected: nil 		changeSelected: nil.	list hResizing: #spaceFill;		vResizing: #spaceFill.	page addMorph: list .	^ (DrGWizardPage new standardPage: 'Select output parameters' translated) 		model: self;		content: page! !!DrGWizardMacroBuild methodsFor: 'testing' stamp: ''!isInputPage	^ currentPage  = 2! !!DrGWizardMacroBuild methodsFor: 'testing' stamp: ''!isOutputPage	^ currentPage  = 3! !!DrGWizardMacroBuild methodsFor: 'meta-actions' stamp: ''!delete	super delete.	builder := nil.! !!DrGWizardMacroBuild methodsFor: 'initialization' stamp: ''!secondPage	| list page |	page := self pageModel.	list := PluggableListMorph 		on: builder		list: #inputName 		selected: nil 		changeSelected: nil.	list hResizing: #spaceFill;		vResizing: #spaceFill.	page addMorph: list.	^ (DrGWizardPage new standardPage: 'Select input parameters' translated) 		model: self;		content: page! !!DrGWizardMacroBuild methodsFor: 'initialization' stamp: ''!firstPage	^ (DrGWizardPage firstPage: 'Build a macro-construction' translated) 				model: self;				content: 'To build a macro-construction, 1. First select the input paramaters, 2. Next select the output parameters, 3. Next chose a name and a description, 4. Last apply the selection.' translated asTextMorph lock! !!DrGWizardMacroPlay methodsFor: 'accessing' stamp: ''!selectedMacro	^ macroFactories indexOf: builder selectedMacro! !!DrGWizardMacroPlay methodsFor: 'initialization' stamp: ''!initialize	super initialize.	macroFactories := DrGMacroFactory new.	self		addPage: self firstPage;		addPage: self secondPage.! !!DrGWizardMacroPlay methodsFor: 'testing' stamp: ''!isSelectPage	^ currentPage = 2! !!DrGWizardMacroPlay methodsFor: 'meta-actions' stamp: ''!delete	super delete.	builder := nil.! !!DrGWizardMacroPlay methodsFor: 'accessing' stamp: ''!macroList	^ macroFactories titles! !!DrGWizardMacroPlay methodsFor: 'initialization' stamp: ''!secondPage	|list page morph |	page := Morph new color: Color transparent.	page		layoutPolicy: TableLayout new;		listDirection: #bottomToTop;		cellPositioning: #topLeft;		layoutInset: 0@3;		cellInset: 0@5.	page addMorph: 'Title:' translated asStringMorph.	list := PluggableListMorph		on: self		list: #macroList		selected: #selectedMacro		changeSelected: #selectedMacro:.	list hResizing: #spaceFill;		height: 50.	page addMorph: list.	page addMorph: 'Description:' translated asStringMorph.	morph := PluggableTextMorph 		on: builder text: #description accept: #description:.	morph		hResizing: #spaceFill;		vResizing: #spaceFill.	page addMorph: morph.	morph acceptTextInModel.	^(DrGWizardPage lastPage: 'Select a macro-construction then the figure items' translated) 		model: self;		content: page! !!DrGWizardMacroPlay methodsFor: 'accessing' stamp: ''!selectedMacro: anIndex	builder selectedMacro: (macroFactories at: anIndex).	self changed: #selectedMacro.	builder changed: #description.! !!DrGWizardMacroPlay methodsFor: 'initialization' stamp: ''!firstPage	^ (DrGWizardPage firstPage: 'Execute a macro-construction' translated) 				model: self;				content: 'To execute a macro-construction, 1. First select a macro-construction from the list, 2. Select items on the figure. Only items relevant to the selected macro-construction are selectable. Once enough items are selected, the macro is automaticly executed. To start press the ''next'' button.' translated asTextMorph lock! !!DrGWizardPage commentStamp: ''!A DrGWizardPage is a page morph to add in a wizard dialog..Content can be added with the #content: messageAlternatively, it can be subclassed this class, to do sooverride intialiaze with super call and at the end of initialize use #content: messageInstance Variables	buttons:		<Object>	cancel:		<Object>	content:		<Object>	model:		<Object>	nextOrApply:		<Object>	previous:		<Object>buttons	- xxxxxcancel	- xxxxxcontent	- xxxxxmodel	- xxxxxnextOrApply	- xxxxxprevious	- xxxxx!!DrGWizardPage methodsFor: 'controls' stamp: ''!newGroupbox: aString forAll: controls	"Answer a groupbox with the given label and controls."	^self theme		newGroupboxIn: self		label: aString		forAll: controls! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newGroupboxFor: control	"Answer a plain groupbox with the given control."	^self theme		newGroupboxIn: self		for: control! !!DrGWizardPage methodsFor: 'services' stamp: ''!centeredAlert: aStringOrText title: aString configure: aBlock	"Open an alert dialog.	Configure the dialog with the 1 argument block	before opening modally."	^self theme		centeredAlertIn: self		text: aStringOrText		title: aString		configure: aBlock! !!DrGWizardPage methodsFor: 'initialization' stamp: ''!firstPage: aTitle	self title: aTitle.	self 		addButton: self cancelBtn;		addButton: (self previousBtn disable);		addButton: self nextBtn! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newFuzzyLabelFor: aModel label: aString offset: offset alpha: alpha getEnabled: enabledSel	"Answer a new fuzzy label."	^self theme		newFuzzyLabelIn: self		for: aModel		label: aString		offset: offset		alpha: alpha		getEnabled: enabledSel! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAutoAcceptTextEntryFor: aModel get: getSel set: setSel class: aClass getEnabled: enabledSel font: aFont help: helpText entryCompletion: anEntryCompletion	"Answer a text entry for the given model."	^self theme		newAutoAcceptTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: aClass		getEnabled: enabledSel		font: aFont		help: helpText		entryCompletion: anEntryCompletion! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newEditableDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel addToList: addSel class: aClass default: defaultValue ghostText: ghostText getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer an editable drop list for the given model."	^self theme		newEditableDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		addToList: addSel		class: aClass		default: defaultValue		ghostText: ghostText		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a drop list for the given model."	^self theme		newDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newOKButton	"Answer a new OK button."	^self newOKButtonFor: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newToolbar	"Answer a toolbar."	^self theme		newToolbarIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTreeFor: aModel list: listSelector selected: getSelector changeSelected: setSelector	"Answer a new tree morph."		^self theme		newTreeIn: self		for: aModel		list: listSelector		selected: getSelector		changeSelected: setSelector! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newGroupboxForAll: controls	"Answer a plain groupbox with the given controls."	^self theme		newGroupboxIn: self		forAll: controls! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCloseButton	"Answer a new close button."	^self newCloseButtonFor: self ! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCloseControlFor: aModel action: aValuable help: helpText	"Answer a new cancel button."	^self theme		newCloseControlIn: self		for: aModel		action: aValuable		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newFuzzyLabel: aString	"Answer a new fuzzy label."	^self theme		newFuzzyLabelIn: self		for: nil		label: aString		offset: 1		alpha: 0.5		getEnabled: nil! !!DrGWizardPage methodsFor: 'callback' stamp: ''!next	model next! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileOpen: title extensions: exts path: path	"Answer the result of a file open dialog with the given title, extensions to show and path."	^self 		fileOpen: title		extensions: exts		path: path		preview: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newListFor: aModel list: listSelector selected: getSelector changeSelected: setSelector getEnabled: enabledSel help: helpText	"Answer a list for the given model."	^self theme		newListIn: self		for: aModel		list: listSelector		selected: getSelector		changeSelected: setSelector		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newScrollPaneFor: aMorph	"Answer a new scroll pane morph to scroll the given morph."		^self theme		newScrollPaneIn: self		for: aMorph! !!DrGWizardPage methodsFor: 'accessing' stamp: ''!model: aMacroMorph 	model := aMacroMorph! !!DrGWizardPage methodsFor: 'services' stamp: ''!abort: aStringOrText	"Open an error dialog."	^self abort: aStringOrText title: 'Error' translated! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newSliderFor: aModel getValue: getSel setValue: setSel help: helpText	"Answer a slider with the given selectors."	^self theme		newSliderIn: self		for: aModel		getValue: getSel		setValue: setSel		min: 0		max: 1		quantum: nil		getEnabled: nil		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a drop list for the given model."	^self		newDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newToolbar: controls	"Answer a toolbar with the given controls."	^self theme		newToolbarIn: self		for: controls! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileOpen: title extensions: exts path: path preview: preview	"Answer the result of a file open dialog with the given title, extensions to show, path and preview type."	^self theme		fileOpenIn: self		title: title		extensions: exts		path: path		preview: preview! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newListFor: aModel list: listSelector selected: getSelector changeSelected: setSelector help: helpText	"Answer a list for the given model."	^self		newListFor: aModel		list: listSelector		selected: getSelector		changeSelected: setSelector		getEnabled: nil		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!question: aStringOrText	"Open a question dialog."	^self question: aStringOrText title: 'Question' translated! !!DrGWizardPage methodsFor: 'button' stamp: ''!addButton: btn	buttons addMorphBack: btn! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newOKButtonFor: aModel getEnabled: enabledSel	"Answer a new OK button."	^self theme		newOKButtonIn: self		for: aModel		getEnabled: enabledSel! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newLabelGroup: labelsAndControls	"Answer a morph laid out with a column of labels and a column of associated controls.	Controls having a vResizing value of #spaceFill will	cause their row to use #spaceFill also, otherwise #shrinkWrap."	^self theme		newLabelGroupIn: self		for: labelsAndControls! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseColor: aColor title: title	"Answer the result of a color selector dialog with the given title and initial colour."	^self theme		chooseColorIn: self		title: title		color: aColor! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newImage: aForm	"Answer a new image."	^self theme		newImageIn: self		form: aForm! !!DrGWizardPage methodsFor: 'services' stamp: ''!questionWithoutCancel: aStringOrText	"Open a question dialog."	^self questionWithoutCancel: aStringOrText title: 'Question' translated! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAutoAcceptTextEntryFor: aModel get: getSel set: setSel class: aClass getEnabled: enabledSel font: aFont help: helpText	"Answer a text entry for the given model."	^self theme		newAutoAcceptTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: aClass		getEnabled: enabledSel		font: aFont		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newListFor: aModel list: listSelector selected: getSelector changeSelected: setSelector icon: iconSelector getEnabled: enabledSel help: helpText	"Answer a list for the given model."	^self theme		newListIn: self		for: aModel		list: listSelector		selected: getSelector		changeSelected: setSelector		icon: iconSelector		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newSeparator	"Answer an horizontal separator."	^self theme		newSeparatorIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newBracketSliderFor: aModel getValue: getSel setValue: setSel min: minValue max: maxValue quantum: quantum getEnabled: enabledSel help: helpText	"Answer a bracket slider with the given selectors."	^self theme		newBracketSliderIn: self		for: aModel		getValue: getSel		setValue: setSel		min: minValue		max: maxValue		quantum: quantum		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newToolbarHandle	"Answer a toolbar handle."	^self theme		newToolbarHandleIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newOKButtonFor: aModel	"Answer a new OK button."	^self		newOKButtonFor: aModel		getEnabled: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newExpander: aString forAll: controls	"Answer an expander with the given label and controls."	^self theme		newExpanderIn: self		label: aString		forAll: controls! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newRow: controls	"Answer a morph laid out with a row of controls."	^self theme		newRowIn: self		for: controls! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newToolDockingBar	"Answer a tool docking bar."	^self theme		newToolDockingBarIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAutoAcceptTextEntryFor: aModel getText: getSel setText: setSel getEnabled: enabledSel font: aFont help: helpText	"Answer a text entry for the given model."	^self theme		newAutoAcceptTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: String		getEnabled: enabledSel		font: aFont		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMenu	"Answer a new menu."	^self theme		newMenuIn: self		for: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newImage: aForm size: aPoint	"Answer a new image."	^self theme		newImageIn: self		form: aForm		size: aPoint! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newColorPresenterFor: aModel getColor: getSel help: helpText	"Answer a color presenter with the given selectors."	^self theme		newColorPresenterIn: self		for: aModel		getColor: getSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTextEntryFor: aModel getText: getSel setText: setSel getEnabled: enabledSel help: helpText entryCompletion: anEntryCompletion	"Answer a text entry for the given model."	^self theme		newTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: String		getEnabled: enabledSel 		help: helpText		entryCompletion: anEntryCompletion! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTitle: aString for: control	"Answer a morph laid out with a column with a title."	^self theme		newTitleIn: self		label: aString		for: control! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newPluggableDialogWindow	"Answer a new pluggable dialog."	^self		newPluggableDialogWindow: 'Dialog'! !!DrGWizardPage methodsFor: 'button' stamp: ''!buttons	buttons := Morph new.	buttons color: Color transparent.	buttons layoutPolicy: TableLayout new;		listDirection: #leftToRight;		vResizing: #shrinkWrap;		hResizing: #spaceFill;		layoutInset: 5;		cellInset: 5;		listCentering: #bottomRight.	^ buttons! !!DrGWizardPage methodsFor: 'accessing' stamp: ''!defaultContent	self content: (Morph new		color:  (Color r: 0.85 g: 0.9 b: 1.0)).! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileOpen: title extensions: exts	"Answer the result of a file open dialog with the given title and extensions to show."	^self		fileOpen: title		extensions: exts		path: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAlphaSelector: aModel getAlpha: getSel setAlpha: setSel help: helpText	"Answer an alpha channel selector with the given selectors."	^self theme		newAlphaSelectorIn: self		for: aModel		getAlpha: getSel		setAlpha: setSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newButtonFor: aModel getState: stateSel action: actionSel arguments: args getEnabled: enabledSel labelForm: aForm help: helpText	"Answer a new button."	^self theme		newButtonIn: self for: aModel		getState: stateSel		action: actionSel		arguments: args		getEnabled: enabledSel 		label: (AlphaImageMorph new image: aForm)		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newNoButtonFor: aModel	"Answer a new No button."	^self theme		newNoButtonIn: self		for: aModel! !!DrGWizardPage methodsFor: 'services' stamp: ''!questionWithoutCancel: aStringOrText title: aString	"Open a question dialog and answer true if yes,	false if no and nil if cancelled."	^self theme		questionWithoutCancelIn: self		text: aStringOrText		title: aString! !!DrGWizardPage methodsFor: 'initialization' stamp: ''!lastPage: aTitle	self title: aTitle.	self		addButton: self cancelBtn;		addButton: self previousBtn;		addButton: (self nextBtn disable)! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newColumn: controls	"Answer a morph laid out with a column of controls."	^self theme		newColumnIn: self		for: controls! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newButtonFor: aModel action: actionSel getEnabled: enabledSel label: stringOrText help: helpText	"Answer a new button."	^self		newButtonFor: aModel		getState: nil		action: actionSel		arguments: nil		getEnabled: enabledSel 		label: stringOrText		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseColor: aColor 	"Answer the result of a color selector dialog with the given color."	^self theme		chooseColorIn: self		title: 'Colour Selector' translated		color: aColor! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newHueSelector: aModel getHue: getSel setHue: setSel help: helpText	"Answer a hue selector with the given selectors."	^self theme		newHueSelectorIn: self		for: aModel		getHue: getSel		setHue: setSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newGroupbox: aString	"Answer a groupbox with the given label."	^self theme		newGroupboxIn: self		label: aString! !!DrGWizardPage methodsFor: 'submorphs-add/remove' stamp: ''!delete	super delete.	model := nil.	content release; delete! !!DrGWizardPage methodsFor: 'initialization' stamp: ''!applyPage: aTitle	self title: aTitle.	self 		addButton: self cancelBtn;		addButton:  self previousBtn;		addButton: self applyBtn.! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newYesButton	"Answer a new Yes button."	^self newYesButtonFor: self! !!DrGWizardPage methodsFor: 'initialization' stamp: ''!standardPage: aTitle	self title: aTitle.	self 		addButton: self cancelBtn;		addButton: self previousBtn;		addButton: self nextBtn! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileSave: title path: path	"Answer the result of a file save open dialog with the given title."	^self		fileSave: title		extensions: nil		path: path! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newPluggableDialogWindow: title for: contentMorph	"Answer a new pluggable dialog with the given content."	^self theme		newPluggableDialogWindowIn: self		title: title		for: contentMorph! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newString: aStringOrText	"Answer a new embossed string."	^self theme		newStringIn: self		label: aStringOrText		font: self theme labelFont		style: #plain! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newWindowFor: aModel title: titleString	"Answer a new window morph."		^self theme		newWindowIn: self		for: aModel		title: titleString! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAutoAcceptTextEntryFor: aModel getText: getSel setText: setSel getEnabled: enabledSel help: helpText	"Answer a text entry for the given model."	^self theme		newAutoAcceptTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: String		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newDialogPanel	"Answer a new main dialog panel."	^self theme		newDialogPanelIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newLabelFor: aModel label: aString getEnabled: enabledSel	"Answer a new text label."	^self theme		newLabelIn: self		for: aModel		label: aString		getEnabled: enabledSel! !!DrGWizardPage methodsFor: 'services' stamp: ''!deny: aStringOrText title: aString	"Open a denial dialog."	^self theme		denyIn: self		text: aStringOrText		title: aString! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMorphDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a morph drop list for the given model."	^self 		newMorphDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseDirectory: title 	"Answer the result of a file dialog with the given title, answer a directory."	^self		chooseDirectory: title		path: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newButtonFor: aModel getState: stateSel action: actionSel arguments: args getEnabled: enabledSel getLabel: labelSel help: helpText	"Answer a new button."	^self theme		newButtonIn: self for: aModel		getState: stateSel		action: actionSel		arguments: args		getEnabled: enabledSel 		getLabel: labelSel		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileSave: title initialAnswer: aFileName extensions: exts path: path	^self theme		fileSaveIn: self		title: title		initialAnswer: aFileName		extensions: exts		path: path! !!DrGWizardPage methodsFor: 'services' stamp: ''!textEntry: aStringOrText title: aString	"Open a text entry dialog."	^self		textEntry: aStringOrText		title: aString		entryText: ''! !!DrGWizardPage methodsFor: 'callback' stamp: ''!apply	model apply! !!DrGWizardPage methodsFor: 'services' stamp: ''!question: aStringOrText title: aString	"Open a question dialog and answer true if yes,	false if no and nil if cancelled."	^self theme		questionIn: self		text: aStringOrText		title: aString! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseFont	"Answer the result of a font selector dialog."	^self chooseFont: nil! !!DrGWizardPage methodsFor: 'button' stamp: ''!applyBtn	nextOrApply := self newButtonFor: self		action: #apply 		label:  'apply' translated		help: nil.	^nextOrApply ! !!DrGWizardPage methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self color: Color transparent .	self clipSubmorphs: true.	self layoutPolicy: TableLayout new;		listDirection: #topToBottom;		hResizing: #spaceFill;		vResizing:  #spaceFill;		layoutInset: 3.	self addMorph: self buttons.	self defaultContent.! !!DrGWizardPage methodsFor: 'button' stamp: ''!nextBtn	nextOrApply := self newButtonFor: self		action: #next 		label:  'next' translated		help: nil.	^ nextOrApply! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCheckboxFor: aModel getSelected: getSel setSelected: setSel label: stringOrText help: helpText	"Answer a checkbox with the given label."	^self theme		newCheckboxIn: self		for: aModel		getSelected: getSel		setSelected: setSel		getEnabled: nil		label: stringOrText		help: helpText! !!DrGWizardPage methodsFor: 'callback' stamp: ''!cancel	model cancel! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newStack	"Answer a morph laid out as a stack."	^self theme		newStackIn: self		for: #()! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCancelButton	"Answer a new cancel button."	^self newCancelButtonFor: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newString: aStringOrText font: aFont style: aStyle	"Answer a new embossed string."	^self theme		newStringIn: self		label: aStringOrText		font: aFont		style: aStyle! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a drop list for the given model."	^self theme		newDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMenuFor: aModel	"Answer a new menu."	^self theme		newMenuIn: self		for: aModel! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseDirectory: title path: path	"Answer the result of a file dialog with the given title, answer a directory."	^self theme		chooseDirectoryIn: self		title: title		path: path! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTabGroup: labelsAndPages	"Answer a tab group with the given tab labels associated with pages."	^self theme		newTabGroupIn: self		for: labelsAndPages! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newRow	"Answer a morph laid out as a row."	^self theme		newRowIn: self		for: #()! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseColor	"Answer the result of a color selector dialog ."	^self chooseColor: Color black! !!DrGWizardPage methodsFor: 'button' stamp: ''!cancelBtn	cancel := self newCancelButtonFor: self. 	^ cancel! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCloseButtonFor: aModel	"Answer a new close button."	^self theme		newCloseButtonIn: self		for: aModel! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newStack: controls	"Answer a morph laid out with a stack of controls."	^self theme		newStackIn: self		for: controls! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newBalloonHelp: aTextStringOrMorph for: aMorph corner: cornerSymbol	"Answer a new balloon help with the given contents for aMorph	at a given corner."	^self theme		newBalloonHelpIn: self		contents: aTextStringOrMorph		for: aMorph		corner: cornerSymbol! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAutoAcceptTextEntryFor: aModel getText: getSel setText: setSel getEnabled: enabledSel font: aFont help: helpText entryCompletion: anEntryCompletion	"Answer a text entry for the given model."	^self theme		newAutoAcceptTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: String		getEnabled: enabledSel		font: aFont		help: helpText		entryCompletion: anEntryCompletion! !!DrGWizardPage methodsFor: 'services' stamp: ''!alert: aStringOrText title: aString configure: aBlock	"Open an alert dialog.	Configure the dialog with the 1 argument block	before opening modally."	^self theme		alertIn: self		text: aStringOrText		title: aString		configure: aBlock! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newButtonLabel: aString	"Answer a new button text label."	^self		newButtonLabelFor: nil		label: aString		getEnabled: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newPluggableDialogWindow: title	"Answer a new pluggable dialog with the given content."	^self		newPluggableDialogWindow: title		for: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newExpander: aString for: aControl	"Answer an expander with the given label and control."	^self theme		newExpanderIn: self		label: aString		forAll: {aControl}! !!DrGWizardPage methodsFor: 'services' stamp: ''!deny: aStringOrText	"Open a denial dialog."	^self deny: aStringOrText title: 'Access Denied' translated! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newEmbeddedMenu	"Answer a new menu."	^self theme		newEmbeddedMenuIn: self		for: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMorphListFor: aModel list: listSelector getSelected: getSelector setSelected: setSelector getEnabled: enabledSel help: helpText	"Answer a morph list for the given model."	^self theme		newMorphListIn: self		for: aModel		list: listSelector		getSelected: getSelector		setSelected: setSelector		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newNoButton	"Answer a new No button."	^self newNoButtonFor: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newYesButtonFor: aModel	"Answer a new yes button."	^self theme		newYesButtonIn: self		for: aModel! !!DrGWizardPage methodsFor: 'services' stamp: ''!proceed: aStringOrText	"Open a proceed dialog."	^self proceed: aStringOrText title: 'Proceed' translated! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileSave: title extensions: exts path: path	"Answer the result of a file save dialog with the given title, extensions to show and path."	^self theme		fileSaveIn: self		title: title		extensions: exts		path: path! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAutoAcceptTextEntryFor: aModel get: getSel set: setSel class: aClass getEnabled: enabledSel help: helpText entryCompletion: anEntryCompletion	"Answer a text entry for the given model."	^self theme		newAutoAcceptTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: aClass		getEnabled: enabledSel		help: helpText		entryCompletion: anEntryCompletion! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newPanel	"Answer a new panel."	^self theme		newPanelIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTextEditorFor: aModel getText: getSel setText: setSel getEnabled: enabledSel menu: menuSelector	"Answer a text editor for the given model."	^self theme		newTextEditorIn: self		for: aModel		getText: getSel		setText: setSel		getEnabled: enabledSel		menu: menuSelector! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newLabel: aString	"Answer a new text label."	^self		newLabelFor: nil		label: aString		getEnabled: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newSliderFor: aModel getValue: getSel setValue: setSel getEnabled: enabledSel help: helpText	"Answer a slider with the given selectors."	^self theme		newSliderIn: self		for: aModel		getValue: getSel		setValue: setSel		min: 0		max: 1		quantum: nil		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!alert: aStringOrText	"Open an alert dialog."	^self alert: aStringOrText title: 'Alert' translated! !!DrGWizardPage methodsFor: 'services' stamp: ''!proceed: aStringOrText title: aString	"Open a proceed dialog and answer true if not cancelled, false otherwise."	^self theme		proceedIn: self		text: aStringOrText		title: aString! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newGroupbox: aString for: control	"Answer a groupbox with the given label and control."	^self theme		newGroupboxIn: self		label: aString		for: control! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newHSVASelector: aColor help: helpText	"Answer a hue-saturation-volume selector with the given color."	^self theme		newHSVASelectorIn: self		color: aColor		help: helpText! !!DrGWizardPage methodsFor: 'button' stamp: ''!previousBtn	previous := self newButtonFor: self		action: #previous 		label:  'previous' translated		help: nil.	^ previous! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileSave: title	"Answer the result of a file save dialog with the given title."	^self		fileSave: title		extensions: nil		path: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMorphListFor: aModel list: listSelector getSelected: getSelector setSelected: setSelector help: helpText	"Answer a morph list for the given model."	^self		newMorphListFor: aModel		list: listSelector		getSelected: getSelector		setSelected: setSelector		getEnabled: nil		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newBracketSliderFor: aModel getValue: getSel setValue: setSel min: minValue max: maxValue quantum: quantum help: helpText	"Answer a bracket slider with the given selectors."	^self		newBracketSliderFor: aModel		getValue: getSel		setValue: setSel		min: minValue		max: maxValue		quantum: quantum 		getEnabled: nil		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newSVSelector: aColor help: helpText	"Answer a saturation-volume selector with the given color."	^self theme		newSVSelectorIn: self		color: aColor		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileSave: title extensions: exts	"Answer the result of a file save dialog with the given title."	^self		fileSave: title		extensions: exts		path: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newBalloonHelp: aTextStringOrMorph for: aMorph	"Answer a new balloon help with the given contents for aMorph	at a given corner."	^self theme		newBalloonHelpIn: self		contents: aTextStringOrMorph		for: aMorph		corner: #bottomLeft! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newRadioButtonFor: aModel getSelected: getSel setSelected: setSel getEnabled: enabledSel label: stringOrText help: helpText	"Answer a checkbox (radio button appearance) with the given label."	^self theme		newRadioButtonIn: self		for: aModel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		label: stringOrText		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCheckboxFor: aModel getSelected: getSel setSelected: setSel getEnabled: enabledSel label: stringOrText help: helpText	"Answer a checkbox with the given label."	^self theme		newCheckboxIn: self		for: aModel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		label: stringOrText		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newLabelFor: aModel getLabel: labelSel getEnabled: enabledSel	"Answer a new text label."	^self theme		newLabelIn: self		for: aModel		getLabel: labelSel		getEnabled: enabledSel! !!DrGWizardPage methodsFor: 'callback' stamp: ''!previous	model previous! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newExpander: aString	"Answer an expander with the given label."	^self theme		newExpanderIn: self		label: aString		forAll: #()! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTextEntryFor: aModel getText: getSel setText: setSel getEnabled: enabledSel help: helpText	"Answer a text entry for the given model."	^self theme		newTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: String		getEnabled: enabledSel 		help: helpText! !!DrGWizardPage methodsFor: 'accessing' stamp: ''!title: aTitle	title := aTitle! !!DrGWizardPage methodsFor: 'services' stamp: ''!textEntry: aStringOrText	"Open a text entry dialog."	^self textEntry: aStringOrText title: 'Entry' translated! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAlphaImage: aForm help: helpText	"Answer an alpha image morph."	^self theme		newAlphaImageIn: self		image: aForm		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newAutoAcceptTextEntryFor: aModel get: getSel set: setSel class: aClass getEnabled: enabledSel help: helpText	"Answer a text entry for the given model."	^self theme		newAutoAcceptTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: aClass		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newFuzzyLabelFor: aModel label: aString getEnabled: enabledSel	"Answer a new fuzzy label."	^self theme		newFuzzyLabelIn: self		for: aModel		label: aString		offset: 1		alpha: 0.5		getEnabled: enabledSel! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMultistateButton	"Answer a new multistate button morph.	To be usable it needs to have fill styles assigned to various states along	with mouse-up/down actions."		^self theme		newMultistateButtonIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMorphDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a morph drop list for the given model."	^self theme		newMorphDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newOverflowRowForAll: aCollectionOfMorphs	"Answer a new overflow row morph that provides a drop down for	the given contents that are unable to fit the bounds."		^self theme		newOverflowRowIn: self		forAll: aCollectionOfMorphs! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newSliderFor: aModel getValue: getSel setValue: setSel min: min max: max quantum: quantum getEnabled: enabledSel help: helpText	"Answer a slider with the given selectors."	^self theme		newSliderIn: self		for: aModel		getValue: getSel		setValue: setSel		min: min		max: max		quantum: quantum		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newColorChooserFor: aModel getColor: getSel setColor: setSel help: helpText	"Answer a color chooser with the given selectors."	^self theme		newColorChooserIn: self		for: aModel		getColor: getSel		setColor: setSel		getEnabled: nil		help: helpText! !!DrGWizardPage methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a toolbar drop list for the given model."	^self theme		newToolbarDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCheckboxFor: aModel getSelected: getSel setSelected: setSel getEnabled: enabledSel getLabel: labelSel help: helpText	"Answer a checkbox with the given label."	^self theme		newCheckboxIn: self		for: aModel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		getLabel: labelSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newMorphDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a morph drop list for the given model."	^self 		newMorphDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTextEditorFor: aModel getText: getSel setText: setSel getEnabled: enabledSel 	"Answer a text editor for the given model."	^self 		newTextEditorFor: aModel		getText: getSel		setText: setSel		getEnabled: enabledSel		menu: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newEditableDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel addToList: addSel ghostText: ghostText getEnabled: enabledSel help: helpText	"Answer an editable drop list for the given model."	^self theme		newEditableDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		addToList: addSel		class: String		default: ''		ghostText: ghostText		getEnabled: enabledSel		useIndex: false		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newVerticalSeparator	"Answer a vertical separator."	^self theme		newVerticalSeparatorIn: self! !!DrGWizardPage methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!alert: aStringOrText title: aString	"Open an alert dialog."	^self		alert: aStringOrText		title: aString		configure: [:d | ]! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newButtonLabelFor: aModel label: aString getEnabled: enabledSel	"Answer a new button text label."	^self theme		newButtonLabelIn: self		for: aModel		label: aString		getEnabled: enabledSel! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseDropList: aStringOrText list: aList	"Open a drop list chooser dialog."	^self		chooseDropList: aStringOrText		title: 'Choose' translated		list: aList! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newHSVSelector: aColor help: helpText	"Answer a hue-saturation-volume selector with the given color."	^self theme		newHSVSelectorIn: self		color: aColor		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTextEntryFor: aModel getText: getSel setText: setSel help: helpText	"Answer a text entry for the given model."	^self		newTextEntryFor: aModel		get: getSel		set: setSel		class: String		getEnabled: nil 		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newButtonFor: aModel action: actionSel label: stringOrText help: helpText	"Answer a new button."	^self		newButtonFor: aModel		getState: nil		action: actionSel		arguments: nil		getEnabled: nil 		label: stringOrText		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseDropList: aStringOrText title: aString list: aList	"Open a drop list chooser dialog."	^self theme		chooseDropListIn: self		text: aStringOrText		title: aString		list: aList! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newIncrementalSliderFor: aModel getValue: getSel setValue: setSel min: min max: max quantum: quantum getEnabled: enabledSel help: helpText	"Answer an inremental slider with the given selectors."	^self theme		newIncrementalSliderIn: self		for: aModel		getValue: getSel		setValue: setSel		min: min		max: max		quantum: quantum		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newText: aStringOrText	"Answer a new text."	^self theme		newTextIn: self		text: aStringOrText! !!DrGWizardPage methodsFor: 'accessing' stamp: ''!title	^ title! !!DrGWizardPage methodsFor: 'services' stamp: ''!abort: aStringOrText title: aString	"Open an error dialog."	^self theme		abortIn: self		text: aStringOrText		title: aString! !!DrGWizardPage methodsFor: 'accessing' stamp: ''!content: aMorph	aMorph 		vResizing: #spaceFill;		hResizing: #spaceFill.	content 		ifNotNil: [self replaceSubmorph: content by: aMorph]		ifNil: [self addMorph: aMorph].	content := aMorph.	content isTextMorph ifTrue: 		[content wrapFlag: true.]! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newGroupbox	"Answer a plain groupbox."	^self theme		newGroupboxIn: self! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newColorChooserFor: aModel getColor: getSel setColor: setSel getEnabled: enabledSel help: helpText	"Answer a color chooser with the given selectors."	^self theme		newColorChooserIn: self		for: aModel		getColor: getSel		setColor: setSel		getEnabled: enabledSel		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!message: aStringOrText title: aString	"Open a message dialog."	^self theme		messageIn: self		text: aStringOrText		title: aString! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newToolSpacer	"Answer a tool spacer."	^self theme		newToolSpacerIn: self! !!DrGWizardPage methodsFor: 'services' stamp: ''!fileOpen: title	"Answer the result of a file open dialog with the given title."	^self		fileOpen: title		extensions: nil! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newLabelGroup: labelsAndControls font: aFont labelColor: aColor	"Answer a morph laid out with a column of labels and a column of associated controls.	Controls having a vResizing value of #spaceFill will	cause their row to use #spaceFill also, otherwise #shrinkWrap."	^self theme		newLabelGroupIn: self		for: labelsAndControls		font: aFont		labelColor: aColor! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newCancelButtonFor: aModel	"Answer a new cancel button."	^self theme		newCancelButtonIn: self		for: aModel! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newString: aStringOrText style: aStyle	"Answer a new embossed string."	^self theme		newStringIn: self		label: aStringOrText		font: self theme labelFont		style: aStyle! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTextEntryFor: aModel get: getSel set: setSel class: aClass getEnabled: enabledSel help: helpText	"Answer a text entry for the given model."	^self theme		newTextEntryIn: self		for: aModel		get: getSel		set: setSel		class: aClass		getEnabled: enabledSel 		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!message: aStringOrText	"Open a message dialog."	^self message: aStringOrText title: 'Information' translated! !!DrGWizardPage methodsFor: 'services' stamp: ''!textEntry: aStringOrText title: aString entryText: defaultEntryText	"Open a text entry dialog."	^self theme		textEntryIn: self		text: aStringOrText		title: aString		entryText: defaultEntryText! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newImageFor: aModel get: getSel help: helpText	"Answer a text entry for the given model."	^self theme		newImageIn: self		for: aModel		get: getSel		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseFileName: title extensions: exts path: path preview: preview	"Answer the result of a file name chooser dialog with the given title, extensions	to show, path and preview type."	^self theme		chooseFileNameIn: self		title: title		extensions: exts		path: path		preview: preview! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newRadioButtonFor: aModel getSelected: getSel setSelected: setSel label: stringOrText help: helpText	"Answer a checkbox (radio button appearance) with the given label."	^self		newRadioButtonFor: aModel		getSelected: getSel		setSelected: setSel		getEnabled: nil		label: stringOrText		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!longMessage: aStringOrText title: aString	"Open a (long) message dialog."	^self theme		longMessageIn: self		text: aStringOrText		title: aString! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newButtonFor: aModel getState: stateSel action: actionSel arguments: args getEnabled: enabledSel label: stringOrText help: helpText	"Answer a new button."	^self theme		newButtonIn: self for: aModel		getState: stateSel		action: actionSel		arguments: args		getEnabled: enabledSel 		label: stringOrText		help: helpText! !!DrGWizardPage methodsFor: 'services' stamp: ''!chooseFont: aFont 	"Answer the result of a font selector dialog with the given initial font."	^self theme		chooseFontIn: self		title: 'Font Selector' translated		font: aFont! !!DrGWizardPage methodsFor: 'controls' stamp: ''!newTextEditorFor: aModel getText: getSel setText: setSel	"Answer a text editor for the given model."	^self		newTextEditorFor: aModel		getText: getSel		setText: setSel		getEnabled: nil! !!DrGWizardPage methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!localMethods	"returns the methods of classes excluding the ones of the traits that the class uses" 	 	^ self localMethodDict values! !!DrGWizardPage class methodsFor: 'as yet unclassified' stamp: ''!firstPage: title	"page with cancel button, gray and locked previous button, and next button"	^ self new firstPage: title! !!DrGWizardPage class methodsFor: 'accessing tags' stamp: ''!tagsForMethods	"Any method could be tagged with multiple symbols for user purpose. 	And class contains all method tags which used or not used yet by methods.	For now we could only implemented it on top of Protocol. 	It supposed to not include any method tags inherited from Traits 	which is opposite to current Protocol implementation.	And extension protocol is not treated as tag"	| allProtocols tags |	allProtocols := self organization protocols 		reject: [ :each | each name = Protocol unclassified | each isExtensionProtocol ].			tags := OrderedCollection new.	allProtocols do: [ :each | 		(self isLocalMethodsProtocol: each) ifTrue: [ tags add: each name ]].	^tags! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!traits	^ self traitComposition traits.! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!includesLocalSelector: aSymbol	^ self isLocalSelector: aSymbol! !!DrGWizardPage class methodsFor: 'categories' stamp: ''!recategorizeSelector: selector from: oldCategory to: newCategory	| original |		"When a method is recategorized I have to classify the method, but also recategorize the aliases pointing to it"		original := self organization categoryOfElement: selector ifAbsent: [ ^ self ].	"If it is nil is because it is a removal. It will removed when the method is removed."	newCategory ifNil: [ ^ self ].	original = oldCategory		ifTrue: [ self organization classify: selector under: newCategory suppressIfDefault: true ].	(self traitComposition reverseAlias: selector) do: [ :e | 		self recategorizeSelector: e from: oldCategory to: newCategory. 		self notifyOfRecategorizedSelector: e from: oldCategory to: newCategory ].		self organization removeEmptyCategories! !!DrGWizardPage class methodsFor: '*CodeExport-Traits' stamp: ''!fileOutLocalMethodsInCategory: aSymbol on: aFileStream	| selectors |		aFileStream cr.	selectors := self selectorsToFileOutCategory: aSymbol.			selectors do: [:sel | 		((self isLocalSelector: sel) or: [ (self traitComposition selectors includes: sel) not]) ifTrue: [ 		self printMethodChunk: sel on: aFileStream ]].		^ self! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!localMethodDict	"The local methodDict is in the metaclass. In this way I do not have to recompile the methods during the bootstrap when we don't have a compiler."	^ self class baseLocalMethods! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!isLocalAliasSelector: aSymbol	"Return true if the selector aSymbol is an alias defined	in my trait composition."	^ self traitComposition isLocalAliasSelector: aSymbol! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!findOriginClassOf: aMethod	"I return the myself or the trait that has the original implementation of a method.	If the method is an alias, the returned class includes the original aliased method"	(aMethod hasProperty: #traitSource) 		ifTrue: [ ^ aMethod traitSource innerClass ]. 	(self includesLocalSelector: aMethod selector)		ifTrue: [ ^ self ].	^ (self traitComposition traitDefining: aMethod selector ifNone: [ ^ self ]) innerClass! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!traitUsers	"I am a traited class, I have no users, this is for compatibility with traits"	^ #()! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!traitComposition: anObject		self class baseComposition: anObject! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!isAliasSelector: aSymbol	"Return true if the selector aSymbol is an alias defined	in my or in another composition somewhere deeper in 	the tree of traits compositions."	^ self traitComposition isAliasSelector: aSymbol! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!localMethodDict: aMethodDictionary	^ self class baseLocalMethods: aMethodDictionary ! !!DrGWizardPage class methodsFor: 'accessing method dictionary' stamp: ''!addSelector: selector withMethod: compiledMethod	"When a new selector is installed in a class I insert the selector in the local methodDict and propagate the changes to my users"		self localMethodDict at: selector put: compiledMethod.	super addSelector: selector withMethod: compiledMethod.	TraitChange addSelector: selector on: self! !!DrGWizardPage class methodsFor: 'initialization' stamp: ''!slots	"I remove the slots comming from a traitComposition"	^ super slots reject:[ :e  | self traitComposition slots includes:e ]! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!isLocalSelector: aSelector		^ self localMethodDict includesKey: aSelector! !!DrGWizardPage class methodsFor: 'as yet unclassified' stamp: ''!lastPage: title	"page with cancel button, previous button, and gray and locked next button"	^self new lastPage: title! !!DrGWizardPage class methodsFor: 'accessing method dictionary' stamp: ''!addSelector: selector withMethod: compiledMethod notifying: requestor	self		deprecated: 'Please use #addSelector:withMethod: instead'		transformWith:			'`@receiver addSelector: `@statements1 withMethod: `@statements2 notifying: `@statements3'		   -> '`@receiver addSelector: `@statements1 withMethod: `@statements2'.	^self addSelector: selector withMethod: compiledMethod! !!DrGWizardPage class methodsFor: 'accessing method dictionary' stamp: ''!addAndClassifySelector: selector withMethod: compiledMethod inProtocol: aCategory		"When a new methods is added, I add it to the localMethodDict and also propagate the changes to my users"	self localMethodDict at: selector put: compiledMethod.		super		addAndClassifySelector: selector		withMethod: compiledMethod		inProtocol: aCategory.	TraitChange addSelector: selector on: self.	! !!DrGWizardPage class methodsFor: 'removing' stamp: ''!removeSelector: aSelector	"When a selector is removed it should be notified to my users.	Check the class TraitChange for more details"	super removeSelector: aSelector.	self localMethodDict removeKey: aSelector ifAbsent: [  ].	TraitChange removeSelector: aSelector on: self.! !!DrGWizardPage class methodsFor: 'trait-composition' stamp: ''!removeFromComposition: aTrait	self setTraitComposition: (self traitComposition copyWithoutTrait: aTrait asTraitComposition)! !!DrGWizardPage class methodsFor: 'as yet unclassified' stamp: ''!applyPage: title	"page with cancel button, previous button, and apply button"		^ self new applyPage: title! !!DrGWizardPage class methodsFor: 'instance creation' stamp: ''!standardPage: title	"page with cancel, previous, next buttons"	^ self new standardPage: title.! !!DrGWizardPage class methodsFor: 'as yet unclassified' stamp: ''!applyPage	"page with cancel button, previous button, and apply button"! !!DrGWizardPage class methodsFor: 'initialization' stamp: ''!doRebuildMethodDictionary	| selectors removedSelectors removeFromOrganization modified|	"During the creation of the class or after a change in the traitComposition, the whole method dictionary is calculated.	If I return true, my users should be updated"	"1. I recreate the local methodDict"	modified := false.	self methodDict valuesDo: [ :m | m traitSource ifNil: [ self localMethodDict at: m selector put: m ]].	"2. I filter the selectors from the trait composition, rejecting the ones that are locally defined.	And then I install the methods in myself. The trait composition only install the method if it is needed."	selectors := self traitComposition selectors reject: [ :e | (self localMethodDict includesKey: e) ].	selectors do: [ :e | modified := modified | (self traitComposition installSelector: e into: self replacing: false)].	"3. I handle the methods that I have and they are no more in the traitComposition."	removedSelectors := self methodDict keys reject: [ :aSelector | (selectors includes: aSelector) or: [ self localMethodDict includesKey: aSelector] ].	modified := modified | (removedSelectors isNotEmpty).	removedSelectors do: [ :aSelector | self methodDict removeKey: aSelector ].	"4. Finally, I remove these methods from my class organization"	removeFromOrganization := self organization allMethodSelectors reject: [:e | self methodDict includesKey: e ].	removeFromOrganization do: [ :aSelector | self organization removeElement: aSelector ].	^ modified! !!DrGWizardPage class methodsFor: 'initialization' stamp: ''!rebuildMethodDictionary	"Useful to be rewritten in Traits"	^ self doRebuildMethodDictionary.! !!DrGWizardPage class methodsFor: '*Deprecated70' stamp: ''!addAndClassifySelector: selector withMethod: compiledMethod inProtocol: aCategory notifying: requestor	self		deprecated: 'Please use #addAndClassifySelector:withMethod:inProtocol: instead'		transformWith:			'`@receiver addAndClassifySelector: `@statements1 withMethod: `@statements2 inProtocol: `@statements3 notifying: `@statements4'		   -> '`@receiver addAndClassifySelector: `@statements1 withMethod: `@statements2 inProtocol: `@statements3'.	self addAndClassifySelector: selector withMethod: compiledMethod inProtocol: aCategory! !!DrGWizardPage class methodsFor: 'accessing method dictionary' stamp: ''!localSelectors		^ self localMethodDict keys! !!DrGWizardPage class methodsFor: 'removing' stamp: ''!removeFromSystem: logged		"When a traited class is removed the traits it is using should be updated"	| mySubclasses |	self traitComposition removeUser: self.	self class traitComposition removeUser: self class.	TraitedClass removeUser: self class.		mySubclasses := self subclasses.		super removeFromSystem: logged.		"As I am a traited class my subclasses does not have the basic traited class 	methods, so I add them."	mySubclasses do: [ :each | each class initializeBasicMethods ].! !!DrGWizardPage class methodsFor: 'querying' stamp: ''!allTraits	^ self traitComposition allTraits! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!isLocalMethodsProtocol: aProtocol	"Checks if the protocol has local selectors"	aProtocol methods ifEmpty: [ ^true ].	^aProtocol methods anySatisfy: [ :each | self isLocalSelector: each]! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!traitComposition	"My trait composition is in my class. So I do not need to recompile the methods when installing them during bootstrap"	^ self class baseComposition! !!DrGWizardPage class methodsFor: 'accessing' stamp: ''!traitCompositionString	^ self traitComposition asString! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!findOriginMethodOf: aMethod	"I return the original method for a aMethod.	If this is a local method, the original method is itself.	If it cames from a trait composition I look for the method in the trait composition.	First I try with the trait stored in the traitSource. 	If it is an aliased or conflicting method, the method is look up in the whole trait composition"	(self includesLocalSelector: aMethod selector)		ifTrue: [ ^ aMethod ].	(aMethod hasProperty: #traitSource)		ifTrue: [ |newSelector|			newSelector := self traitComposition originSelectorOf: aMethod selector.			^ aMethod traitSource compiledMethodAt: newSelector ifAbsent: [aMethod] ].	^ (self traitComposition traitDefining: aMethod selector ifNone: [ self ])		compiledMethodAt: aMethod selector ifAbsent: [ ^ aMethod ]		! !!DrGWizardPage class methodsFor: 'testing' stamp: ''!hasTraitComposition		^ self traitComposition isEmpty not! !!DrGWizardScript methodsFor: 'accessing' stamp: ''!selectedScript: anIndex 	builder scriptClass: 		(self scripts	at: anIndex ifAbsent: []).	self changed: #selectedScript.	self changed: #argumentsName.	builder changed: #description! !!DrGWizardScript methodsFor: 'accessing' stamp: ''!goPage: integer	super goPage: integer.	self changed: #scriptsName! !!DrGWizardScript methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self 		addPage: self firstPage;		addPage: self secondPage.! !!DrGWizardScript methodsFor: 'accessing' stamp: ''!scriptsName	^ self scripts collect: [:class | class scriptName]! !!DrGWizardScript methodsFor: 'testing' stamp: ''!isSelectPage	^ currentPage = 2! !!DrGWizardScript methodsFor: 'meta-actions' stamp: ''!delete	super delete.	builder := nil! !!DrGWizardScript methodsFor: 'initialization' stamp: ''!secondPage	| list argumentList page textMorph |	list := self newListFor: self		list: #scriptsName 		selected: #selectedScript		changeSelected: #selectedScript:		help: nil.		argumentList := self newListFor: self		list: #argumentsName		selected: nil 		changeSelected: nil		help: 'The arguments accepted by this script.'.	textMorph := (self newTextEditorFor: builder		getText: #description		setText: #description:) acceptTextInModel; yourself.	page := self newLabelGroup: { 		'Script name' translated -> list.		'Description' translated -> textMorph.		'Arguments' translated -> argumentList}.		^ (DrGWizardPage lastPage: 'Select a script then items in the sketch' translated) model: self;		 content: page! !!DrGWizardScript methodsFor: 'accessing' stamp: ''!scripts	^ scripts	ifNil: [			scripts := DrGeoUserScript subclasses 				sorted: [:script1 :script2 | script1 scriptName asLowercase < script2 scriptName asLowercase]]! !!DrGWizardScript methodsFor: 'initialization' stamp: ''!firstPage	^ (DrGWizardPage firstPage: 'Use a script in the sketch' translated) 				model: self;				content: 'To use a script, 1. First select a script from the list, 2. Select items in the sketch, 3. Click somewhere in the background.  Once enough items are selected, the script is inserted in the sketch, at the user selected position. To start press the ''next'' button.' translated asTextMorph lock! !!DrGWizardScript methodsFor: 'accessing' stamp: ''!selectedScript	^ builder scriptClass		ifNil: [0]		ifNotNil: [self scripts indexOf: builder scriptClass]! !!DrGWizardScript methodsFor: 'accessing' stamp: ''!argumentsName	| labels |	builder scriptClass ifNil: [^ #()].	labels := DrGScriptDesignerDialog typeToLabel.	^ builder scriptClass argumentsType collect: [ :type | labels at: type ]! !!DrGWorkstation commentStamp: ''!Preferences for workstation (Linux, Mac, Windows)!!DrGWorkstation methodsFor: 'user interface' stamp: ''!smallFontSize	^ 9! !!DrGWorkstation methodsFor: 'testing' stamp: ''!isWorkstation	^ true! !!DrGWorkstation methodsFor: 'path' stamp: ''!myExportsPath	^ self rootPath / 'MyExports'! !!DrGWorkstation methodsFor: 'initialize-release' stamp: ''!startUp	super startUp.	self splash."	(World submorphs anySatisfy: [:morph | morph class == DrGeoWindow]) ifFalse:		[DrGeo newFullScreen]"! !!DrGWorkstation methodsFor: 'initialize-release' stamp: ''!initialize	canWeDisplayLoader := true.	WorldState desktopMenuTitle: 'System menu' translated.	WorldState desktopMenuPragmaKeyword:  'drgeoMenu'.	Display newDepth: 32.	PolymorphSystemSettings uiThemeClass: PharoDarkTheme.	TaskbarMorph showTaskbar: true.	MenubarMorph showMenubar: false.	SystemWindow fullscreenMargin: 0.! !!DrGWorkstation methodsFor: 'user interface' stamp: ''!setFontPreferences	StandardFonts codeFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 11).	StandardFonts listFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 11).	StandardFonts menuFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 11).	StandardFonts windowTitleFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 11).	StandardFonts balloonFont: (LogicalFont familyName: DrGeoSystem fontName pointSize: 11).	StandardFonts haloFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 11).	StandardFonts buttonFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 11).	StandardFonts defaultFont: (LogicalFont familyName: DrGeoSystem fontName  pointSize: 11).! !!DrGWorkstation methodsFor: 'initialize-release' stamp: ''!checkForPaths	super checkForPaths.	self myExportsPath ensureCreateDirectory! !!DrGWorkstation methodsFor: 'user interface' stamp: ''!fontSize	^ 11! !!DrGWrappedCurve methodsFor: 'updating' stamp: ''!small	costume style thickness: #small! !!DrGWrappedCurve methodsFor: '*DrGeo-French' stamp: ''!tiret	^ self dashed ! !!DrGWrappedCurve methodsFor: 'updating' stamp: ''!plain	costume style lineStyle: #plain! !!DrGWrappedCurve methodsFor: '*DrGeo-French' stamp: ''!pointille	^ self dotted! !!DrGWrappedCurve methodsFor: '*DrGeo-French' stamp: ''!epais	^ self large! !!DrGWrappedCurve methodsFor: '*DrGeo-French' stamp: ''!plein	^ self plain! !!DrGWrappedCurve methodsFor: 'updating' stamp: ''!large	costume style thickness: #large! !!DrGWrappedCurve methodsFor: '*DrGeo-French' stamp: ''!fin	^ self small! !!DrGWrappedCurve methodsFor: 'updating' stamp: ''!dashed	costume style lineStyle: #dash! !!DrGWrappedCurve methodsFor: 'updating' stamp: ''!normal	costume style thickness: #medium! !!DrGWrappedCurve methodsFor: 'updating' stamp: ''!dotted	costume style lineStyle: #dot! !!DrGWrappedFilledCurve methodsFor: '*DrGeo-French' stamp: ''!transparent	^ self translucent! !!DrGWrappedFilledCurve methodsFor: 'updating' stamp: ''!translucent	costume style translucent: true! !!DrGWrappedFilledCurve methodsFor: 'updating' stamp: ''!filled	costume style fill: true! !!DrGWrappedFilledCurve methodsFor: '*DrGeo-French' stamp: ''!vider	^ self unfilled! !!DrGWrappedFilledCurve methodsFor: 'updating' stamp: ''!opaque	costume style translucent: false! !!DrGWrappedFilledCurve methodsFor: 'updating' stamp: ''!unfilled	costume style fill: false! !!DrGWrappedFilledCurve methodsFor: '*DrGeo-French' stamp: ''!remplir	^ self filled! !!DrGWrappedFinitCurve methodsFor: 'updating' stamp: ''!bothArrows	costume style arrow: #makeBothArrows! !!DrGWrappedFinitCurve methodsFor: '*DrGeo-French' stamp: ''!flecheFin	^ self forwardArrow! !!DrGWrappedFinitCurve methodsFor: 'updating' stamp: ''!backArrow	costume style arrow: #makeBackArrow! !!DrGWrappedFinitCurve methodsFor: 'updating' stamp: ''!forwardArrow	costume style arrow: #makeForwardArrow! !!DrGWrappedFinitCurve methodsFor: '*DrGeo-French' stamp: ''!flecheDebut	^ self backArrow! !!DrGWrappedFinitCurve methodsFor: '*DrGeo-French' stamp: ''!fleches	costume style arrow: #makeBothArrows! !!DrGWrappedItem commentStamp: ''!A class to encapsulate costume for user friendly use when doing Smalltalk figure!!DrGWrappedItem methodsFor: 'updating' stamp: ''!hide	costume style hidden: true.	costume forceVisible: false.! !!DrGWrappedItem methodsFor: 'accessing' stamp: ''!costume: aCostume	costume := aCostume ! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!rename: anObject	costume textMorph contents:  anObject asString ! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!lock	costume locked: true! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!color: aColor	costume style color: aColor! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!name: aString	costume  textMorph: aString asString! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!show	costume forceVisible: true.	costume style hidden: false! !!DrGWrappedItem methodsFor: 'accessing' stamp: ''!style	^ costume style! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!unhide	costume style hidden: false.	costume forceVisible: false.! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!moveTo: aPoint! !!DrGWrappedItem methodsFor: 'updating' stamp: ''!unlock	costume locked: false! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!couleur: aColor	^ self color: aColor! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!debloquer	^ self unlock! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!renommer: aString	^ self rename: aString! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!montrer	^ self show! !!DrGWrappedItem methodsFor: 'accessing' stamp: ''!mathItem	^ costume mathItem ! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!deplacerA: aPoint	^ self moveTo: aPoint! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!cacher	^ self hide! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!decacher	^ self unhide! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!nommer: aString	^ self name: aString! !!DrGWrappedItem methodsFor: '*DrGeo-French' stamp: ''!bloquer	^ self lock! !!DrGWrappedItem class methodsFor: 'as yet unclassified' stamp: ''!wrap: aCostume 	^ self new costume: aCostume! !!DrGWrappedPoint methodsFor: 'updating' stamp: ''!medium	costume style pointSize: #medium! !!DrGWrappedPoint methodsFor: 'updating' stamp: ''!small	costume style pointSize: #small! !!DrGWrappedPoint methodsFor: 'updating' stamp: ''!square	costume style shape: #square! !!DrGWrappedPoint methodsFor: 'updating' stamp: ''!cross	costume style shape: #cross! !!DrGWrappedPoint methodsFor: '*DrGeo-French' stamp: ''!carre	^ self square! !!DrGWrappedPoint methodsFor: 'updating' stamp: ''!round	costume style shape: #round! !!DrGWrappedPoint methodsFor: '*DrGeo-French' stamp: ''!croix	^ self cross! !!DrGWrappedPoint methodsFor: 'accessing' stamp: ''!coordinates	^ self mathItem point! !!DrGWrappedPoint methodsFor: 'updating' stamp: ''!moveTo: aPoint	self mathItem moveTo: aPoint    ! !!DrGWrappedPoint methodsFor: '*DrGeo-French' stamp: ''!petit	^ self small! !!DrGWrappedPoint methodsFor: '*DrGeo-French' stamp: ''!coordonnees	^ self coordinates! !!DrGWrappedPoint methodsFor: 'updating' stamp: ''!large	costume style pointSize: #large! !!DrGWrappedPoint methodsFor: '*DrGeo-French' stamp: ''!deplacerA: aPoint	^ self moveTo: aPoint! !!DrGWrappedPoint methodsFor: '*DrGeo-French' stamp: ''!moyen	^ self medium! !!DrGWrappedPoint methodsFor: '*DrGeo-French' stamp: ''!rond	^ self round! !!DrGWrappedSegment methodsFor: 'updating' stamp: ''!discMark	costume style mark: #disc! !!DrGWrappedSegment methodsFor: 'updating' stamp: ''!noMark	costume style mark: #none! !!DrGWrappedSegment methodsFor: '*DrGeo-French' stamp: ''!marquerAvecDisque	^ self discMark ! !!DrGWrappedSegment methodsFor: '*DrGeo-French' stamp: ''!marquerAvecSimpleTrait	^ self simpleMark ! !!DrGWrappedSegment methodsFor: 'updating' stamp: ''!simpleMark	costume style mark: #mark1! !!DrGWrappedSegment methodsFor: '*DrGeo-French' stamp: ''!marquerAvecTripleTrait	^ self tripleMark ! !!DrGWrappedSegment methodsFor: 'updating' stamp: ''!circleMark	costume style mark: #circle! !!DrGWrappedSegment methodsFor: '*DrGeo-French' stamp: ''!marquerAvecCercle	^ self circleMark ! !!DrGWrappedSegment methodsFor: 'updating' stamp: ''!doubleMark	costume style mark: #mark2! !!DrGWrappedSegment methodsFor: '*DrGeo-French' stamp: ''!marquerAucun	^ self noMark ! !!DrGWrappedSegment methodsFor: '*DrGeo-French' stamp: ''!marquerAvecDoubleTrait	^ self doubleMark ! !!DrGWrappedSegment methodsFor: 'updating' stamp: ''!tripleMark	costume style mark: #mark3! !!DrGWrappedText methodsFor: '*DrGeo-French' stamp: ''!texte: aString	^ self text: aString! !!DrGWrappedText methodsFor: 'updating' stamp: ''!text: aText	self mathItem text: aText asText.	costume updateMyText.	"Ugly from Athens support for text, to check more carefully XXX "	costume morph color: Color cyan.	costume color: costume style color.! !!DrGWrappedText methodsFor: 'updating' stamp: ''!moveTo: aPoint	self mathItem position: aPoint    ! !!DrGWrappedText methodsFor: '*DrGeo-French' stamp: ''!deplacerA: aPoint	^ self moveTo: aPoint! !!DrGWrappedText methodsFor: '*DrGeo-French' stamp: ''!couleurFond: aColor	^ self backgroundColor: aColor! !!DrGWrappedText methodsFor: 'accessing' stamp: ''!backgroundColor: aColor	costume style backgroundColor: aColor! !!DrGWrappedValue methodsFor: 'updating' stamp: ''!name: aString 	costume mathItem name: aString.	costume redraw! !!DrGWrappedValue methodsFor: 'updating' stamp: ''!moveTo: aPoint	self mathItem position: aPoint     ! !!DrGWrappedValue methodsFor: 'updating' stamp: ''!value: aNumber	(self mathItem respondsTo: #valueItem:) 		ifTrue: [self mathItem valueItem: aNumber]! !!DrGWrappedValue methodsFor: '*DrGeo-French' stamp: ''!deplacerA: aPoint	^ self moveTo: aPoint! !!DrGWrappedValue methodsFor: '*DrGeo-French' stamp: ''!nommer: aString	^ self name: aString! !!DrGWrappedValue methodsFor: '*DrGeo-French' stamp: ''!valeur: aNumber	^ self value: aNumber ! !!DrGeo commentStamp: ''!The application model. It is encapsulating our sub model: geometry model, tree model and script model.Two viewers are proposed: - a service is basicaly a canvas with wheel morphs, it can be embedded in bookmorph ,... - a polymorph window with a friendly graphic user interface - isNotInteractive: do we let pop up show up!!DrGeo methodsFor: 'costume' stamp: ''!updateDirtyCostumes	self presenter tool costumes do: [ :each | each update ].	self area changed! !!DrGeo methodsFor: 'accessing' stamp: ''!notInteractive: boolean	notInteractive := boolean! !!DrGeo methodsFor: 'initialize-release' stamp: ''!removeEvents	domain removeActionsWithReceiver: self.! !!DrGeo methodsFor: 'costume' stamp: ''!costume: aMathItem 	"new math item event : A new math item has been created, create its costume"	lastCostume := self add: (DrGMathItemCostume for: aMathItem in: self area)! !!DrGeo methodsFor: 'costume' stamp: ''!groupCostumes: aCompositeItem |compositeCostume subCostumes|	subCostumes := OrderedCollection new.	aCompositeItem subItems do: [:item |		self remove: (subCostumes add: (self costumeOf: item))].	compositeCostume := DrGCompositeCostume 		for: aCompositeItem 		in: self area 		with: subCostumes .	self add: compositeCostume.! !!DrGeo methodsFor: 'canvas' stamp: ''!previewSize	^ DrGeo previewSize! !!DrGeo methodsFor: 'costume' stamp: ''!lastCostume"Find the costume of the factory last mathItem"|lastMathItem costume|	costume := costumes last.	costume mathItem = domain factory last ifTrue: [^costume].	lastMathItem := domain factory last.	costumes do: [:aCostume|		aCostume mathItem = lastMathItem ifTrue: [^aCostume]].	^nil! !!DrGeo methodsFor: 'accessing' stamp: ''!toolbarless: boolean	toolbarless := boolean ! !!DrGeo methodsFor: 'canvas' stamp: ''!preview"compute an PNG preiview and put it in a stream"	|form scale stream|	form := (Form extent: self area extent depth: 32) fillWhite.	self area owner athensSurface displayOnMorphicCanvas: form getCanvas at: 0 @ 0.		scale := self previewSize x / form width min: self previewSize y / form height.	form := form magnify: form boundingBox by: scale smoothing: 3.	stream := ByteArray new writeStream.	PNGReadWriter putForm: form onStream: stream.	^ stream! !!DrGeo methodsFor: 'costume' stamp: ''!redrawCostumes	"View resized, update the area"	costumes do: [ :costume | costume redraw ].	self presenter tool ifNotNil: [ :aTool | aTool redrawFlyingCostume ].	self updateGrid! !!DrGeo methodsFor: 'initialize-release' stamp: ''!registerEvents	domain		when: #redoMathItem		send: #recoverCostume:		to: self.	domain		when: #newMathItem		send: #costume:		to: self.	domain		when: #updatedItems		send: #updateCostumes		to: self.	domain		when: #updatedDirtyItems		send: #updateDirtyCostumes		to: self.	domain		when: #groupCostumes		send: #groupCostumes:		to: self.	domain		when: #ungroupCostumes		send: #ungroupCostumes:		to: self! !!DrGeo methodsFor: 'accessing' stamp: ''!fullScreen 	view fullscreen ! !!DrGeo methodsFor: 'accessing' stamp: ''!presenter	^presenter ! !!DrGeo methodsFor: 'initialize-release' stamp: ''!initializeApplication: controlsManager	self initialize.	self buildViewAndOpen: controlsManager.	view openInWorld.! !!DrGeo methodsFor: 'initialize-release' stamp: ''!release	super release.	self area release.	self removeEvents.	presenter release.	view release.	view:= nil.	presenter := nil! !!DrGeo methodsFor: 'canvas' stamp: ''!scale	self error: 'Implemented in the drawable'! !!DrGeo methodsFor: 'costume' stamp: ''!undoneCostumeOf: aMathItem"Find the costume of the given mathItem if any"	^ undoneCostumes 		detect: [:costume | costume mathItem == aMathItem]		ifFound: [:costume | costume ]		ifNone: [ nil ]! !!DrGeo methodsFor: 'costume' stamp: ''!ungroupCostumes: aCompositeItem |compositeCostume |	compositeCostume := self costumeOf: aCompositeItem.	compositeCostume subCostumes do: [:aCostume |		self add: aCostume].	self remove: compositeCostume.! !!DrGeo methodsFor: 'accessing' stamp: ''!title	^ view 		ifNotNil: [ | title | 			title := view title.			self isSaved 				ifFalse: [title allButFirst: 2] 				ifTrue: [ title ]]		ifNil: ['no name']! !!DrGeo methodsFor: 'initialize-release' stamp: ''!initializeService	self initialize.	presenter := DrGeoPresenter for: self.	view := DrGService for: self.! !!DrGeo methodsFor: 'costume' stamp: ''!costumesOf: aMathItemCollection"Find the costumes of the given mathItem collection"	^ aMathItemCollection collect: [:aMathItem | self costumeOf: aMathItem]! !!DrGeo methodsFor: 'accessing' stamp: ''!saved: bool	| title |	title := view title.	(bool and: [ saved not ]) ifTrue: [view title: (title allButFirst: 2)].	(bool not and: [saved]) ifTrue: [view title: '* ', title].	saved := bool.! !!DrGeo methodsFor: 'canvas' stamp: ''!updateGrid	self area ifNotNil: [		self area updateGrid.		self area changed]! !!DrGeo methodsFor: 'costume' stamp: ''!deleteCostume: aCostume	aCostume release.	undoneCostumes add: aCostume.	costumes := costumes copyWithout: aCostume.	! !!DrGeo methodsFor: 'costume' stamp: ''!fastLastCostume"Find the costume of the factory last mathItem"	^ lastCostume ! !!DrGeo methodsFor: 'costume' stamp: ''!pointCostumes	^ costumes select: [:aCostume | 		aCostume isPointCostume]! !!DrGeo methodsFor: 'costume' stamp: ''!costumeOf: aMathItem"Find the costume of the given mathItem"	^ costumes 		detect: [:costume | costume mathItem == aMathItem]		ifFound: [ :costume | costume ]		ifNone: [ nil]! !!DrGeo methodsFor: 'costume' stamp: ''!pointCostumeClosestTo: aPoint atRange: anInteger|closestCostume smallestDistance|	smallestDistance := anInteger. 	costumes do: [:aCostume | | dist |		(aCostume isPointCostume and: [(dist := aCostume distanceTo: aPoint)< smallestDistance])			ifTrue:				[closestCostume := aCostume.				smallestDistance := dist]].	^closestCostume ! !!DrGeo methodsFor: 'costume' stamp: ''!remove: aCostume	aCostume ifNotNil:	 [costumes remove: aCostume].! !!DrGeo methodsFor: 'costume' stamp: ''!costumes	^costumes! !!DrGeo methodsFor: 'testing' stamp: ''!isToolbarless	^ toolbarless ifNil: [toolbarless := false]! !!DrGeo methodsFor: 'costume' stamp: ''!updateCostumes	costumes do: [ :each | each update ]! !!DrGeo methodsFor: 'costume' stamp: ''!recoverCostume: aMathItem 	"a redo math item event : a math item has been recalled, find its	costume "	| costume |	costume := self undoneCostumeOf: aMathItem.	costume		ifNil: [self costume: aMathItem]		ifNotNil: [costume mathItem: aMathItem.			costume reInitialize.			undoneCostumes := undoneCostumes copyWithout: costume.			self add: costume]! !!DrGeo methodsFor: 'testing' stamp: ''!isNotInteractive	^ notInteractive! !!DrGeo methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	costumes := OrderedCollection new.	undoneCostumes := OrderedCollection new.	notInteractive := false.	saved := true. "because empty at initialize, no save is needed, so we marked as saved"	self registerEvents! !!DrGeo methodsFor: 'initialize-release' stamp: ''!initializeApplicationToolbarless	self initialize.	self toolbarless: true.	self buildViewAndOpen: nil! !!DrGeo methodsFor: 'accessing' stamp: ''!view	^ view! !!DrGeo methodsFor: 'costume' stamp: ''!add: aCostume	^ costumes add: aCostume.! !!DrGeo methodsFor: 'testing' stamp: ''!isSaved	^ saved! !!DrGeo methodsFor: 'accessing' stamp: ''!area	^ view area! !!DrGeo methodsFor: 'initialize-release' stamp: ''!initializeApplication	self initializeApplication: nil! !!DrGeo methodsFor: 'accessing' stamp: ''!domain: aDomain	domain := aDomain ! !!DrGeo methodsFor: 'accessing' stamp: ''!domain	^domain ! !!DrGeo methodsFor: 'initialize-release' stamp: ''!buildViewAndOpen: controlsManager	presenter := DrGeoPresenter for: self.	controlsManager ifNotNil: [presenter controlsManager: controlsManager]. "use another one"	view := DrGeoWindow for: self.	presenter controlsManager installTools.	view themeChanged.	presenter move.	DrGeoSystem ifTablet: [view removeGrips].	DrGeoSystem ifRelease: [view beSticky]! !!DrGeo methodsFor: 'costume' stamp: ''!forceVisible: aBoolean"Force or not the visibility of hidden costume"	aBoolean ifTrue: [self redrawCostumes. self area changed ].	costumes do: [:costume |		costume forceVisible: aBoolean].! !!DrGeo class methodsFor: 'canvas' stamp: ''!figuresArray	|items activeFigures|	activeFigures := OrderedCollection new.	DrGeoWindow allInstances do: [:each | 		each owner isNil ifFalse: [activeFigures add: each app]].	items := OrderedCollection new.	activeFigures do: [:figure |		items add: (Array 			with:  figure 			with:  'Fig. - ' translated, figure title 			with: (ValueHolder new contents: figure isSaved not))].	^ items! !!DrGeo class methodsFor: 'objects from disk' stamp: ''!newXmlOn: stream 	^ DrGeoXml new loadFrom: stream for: #new:! !!DrGeo class methodsFor: 'canvas' stamp: ''!unsavedData"Answer a collection of unsaved data"	| unsavedData |	unsavedData := OrderedCollection new.	unsavedData 		addAll: (self figuresArray select: [:each | each third contents]);		addAll: (self macrosArray select: [:each | each third contents]).	^ unsavedData! !!DrGeo class methodsFor: 'user interface' stamp: ''!aboutDrgeo	|dialog width text |	text := self drgeoInformationString.	width := 0.	text linesDo: [:l | 		width := width max: (UITheme current textFont widthOfStringOrText: l)].	dialog := LongMessageDialogWindow new entryText: text.	dialog iconMorph image: DrGIcons drgeo.	dialog title: 'About Dr. Geo' translated.	dialog open.	dialog textMorph minWidth: 20;		 minHeight: 20.	dialog		width: (width + 120 min: Display width - 50).	dialog position: 25 @ 25! !!DrGeo class methodsFor: 'canvas' stamp: ''!previewSize	^ 320@240! !!DrGeo class methodsFor: 'objects from disk' stamp: ''!serviceXml: filename 	^ DrGeoXml new load: filename for: #service! !!DrGeo class methodsFor: 'canvas' stamp: ''!preview	"class side: return an empty PNG  preview in a stream"	^ self emptyPreview! !!DrGeo class methodsFor: 'objects from disk' stamp: ''!fullscreenOn: stream	|answer |	DrGLoader start.	answer := DrGeoXml new loadFrom: stream for: #newFullScreen:.	DrGLoader stop.	^ answer ! !!DrGeo class methodsFor: 'instance creation' stamp: ''!new	^ self new: nil! !!DrGeo class methodsFor: 'instance creation' stamp: ''!newFullScreen: controlsManager	|app|	app := DrGeo new: controlsManager.	app view 		fullscreen;		position: 0@0.	^ app! !!DrGeo class methodsFor: 'canvas' stamp: ''!macrosArray	|items|	items := OrderedCollection new.	DrGMacroFactory new pool do: [:macro |		items add: (Array 			with: macro 			with: 'Macro - ' translated, macro title 			with: (ValueHolder new contents: macro isSaved not) )].	^ items! !!DrGeo class methodsFor: 'objects from disk' stamp: ''!serviceViewXml: filename 	(self serviceXml: filename) do: [:each | 		each view			center: Display center;			openInWorld]! !!DrGeo class methodsFor: 'instance creation' stamp: ''!applicationToolbarless	"instanciate a DrGeo service, to embbed in third party application or for the widgetless Etoys. It is just the canvas with suround menu and icon"	^ self applicationToolbarlessIn: DrGeoDomain new! !!DrGeo class methodsFor: 'instance creation' stamp: ''!new: controlsManager	"instanciate a standard DrGeo application"	|answer|	DrGLoader start.	answer := DrGeoSystem isEtoys 		ifFalse: [self in: DrGeoDomain new controlsManager: controlsManager]		ifTrue: [DrGeo sample openInWorld].	DrGLoader stop.	^ answer! !!DrGeo class methodsFor: 'user interface' stamp: ''!drgeoCopyright	^ 'Copyright 1996-2018 Hilaire Fernandes'! !!DrGeo class methodsFor: 'instance creation' stamp: ''!newFullScreen	^ self newFullScreen: nil! !!DrGeo class methodsFor: 'user interface' stamp: ''!quit	self unsavedData isNotEmpty ifTrue: [ 		(self confirm: 'There is unsaved data!! Are you sure to quit Dr. Geo environment?' translated) ifFalse: [ ^ self]].	Smalltalk quitPrimitive! !!DrGeo class methodsFor: 'objects from disk' stamp: ''!file: filename 	|answer|	DrGLoader start.	answer := DrGeoXml new load: filename for: #new:.	DrGLoader stop.	^ answer! !!DrGeo class methodsFor: 'objects from disk' stamp: ''!fileFullscreen: filename 	|answer|	DrGLoader start.	answer := DrGeoXml new load: filename for: #newFullScreen:.	DrGLoader stop.	^ answer! !!DrGeo class methodsFor: 'user interface' stamp: ''!worldMenu: aBuilder	<drgeoMenu>	(aBuilder item: 'New' translated)		action: [ DrGeo newFullScreen ];		icon: (self iconNamed: #smallNewIcon);		order: 0.	(aBuilder item: 'Open a sketch' translated)		action: [ DrGeo openFigureThumbnail: nil ];		icon: (self iconNamed: #smallOpenIcon);		order: 1.	(aBuilder item: 'Toggle full screen mode' translated)		action: [ Display toggleFullscreen ];		icon: (self iconNamed: #smallFullscreen);		order: 2;		help: 'Turn full screen mode on when it is off, off when it is on.'	translated.	(aBuilder item: 'Settings' translated)		action: [ (SettingBrowser forKeywords: #('drgeosettings')) open ];		icon:	(self iconNamed: #smallConfigurationIcon);		order: 3.	(aBuilder item: #Tools translated)		icon:	(self iconNamed: #tools);		order: 5.	(aBuilder item: #Community translated)		icon: (self iconNamed: #home);		order: 6.	(aBuilder item: 'About' translated)		icon: (self iconNamed: #smallLanguageIcon);		action: [ DrGeo aboutDrgeo ];		order: 7.	(aBuilder item: 'Quit' translated)		action: [ DrGeo quit ];		order: 999! !!DrGeo class methodsFor: 'user interface' stamp: ''!drgeoVersion	^ 'Installed version: ' translated, BaselineOfDrGeo drgeoRelease! !!DrGeo class methodsFor: 'instance creation' stamp: ''!openFigureThumbnail: parentView	" DrGeo openFigureThumbnail "	| dialog |	dialog := DrGFileThumbnailDialog new.	parentView 		ifNil: [dialog openInWorld;				center: World center;				delete.			self currentWorld openModal: dialog]		ifNotNil: [dialog openInWorld.			dialog center: World center.			parentView openModal: dialog].	(dialog cancelled or: [dialog finalSelectedFile isNil]) ifTrue: [^ dialog closeResource].	((DrGeo fullscreenOn: (dialog selectedFileStream)) notEmpty & parentView notNil)  ifTrue: [		parentView deleteWithoutConfirmation].	dialog closeResource.	DrGeoSystem showVirtualKeyboard: false.! !!DrGeo class methodsFor: 'instance creation' stamp: ''!service	"instanciate a DrGeo service, to embbed in third party application or for the widgetless Etoys. It is just the canvas with suround menu and icon"	^ self serviceIn: DrGeoDomain new! !!DrGeo class methodsFor: 'instance creation' stamp: ''!openFigure	" DrGeo openFigure "	| stream |	stream := DrGeoWindow basicNew		fileOpen: 'Pick a Dr. Geo file name' translated 		extensions: #('fgeo')		path:  DrGeoSystem examplesPath 		preview: #drgeo.	stream ifNotNil: [DrGeo newXmlOn: stream]! !!DrGeo class methodsFor: 'user interface' stamp: ''!drgeoInformationString	|text |	text := 'Dr. Geo is about interactive geometry and programming.{1}It allows one to create geometric figure plus the interactive manipulation of such figure in respect with their geometric constraints. It is usable in teaching situation with students from primary or secondary level. It is simple and effective with some unique features as Smalltalk scripts and programmed interactive sketches. {2}LICENSE: GPL' translated format: {self drgeoVersion. self drgeoCopyright}.	^ text! !!DrGeo class methodsFor: 'canvas' stamp: ''!emptyPreview"compute an empty PNG preiview and put it in a stream"	|form stream textForm|	form := Form extent: self previewSize depth: 8.	form fill: form boundingBox rule: Form over fillColor: Color white.	textForm := (StringMorph contents: 'No preview' translated font: DrGeoSystem font) imageForm.	form copy: form boundingBox from: textForm to: (form center - (textForm extent / 2)) rule: Form over.	stream := ByteArray new writeStream.	PNGReadWriter putForm: form onStream: stream.	^ stream! !!DrGeo class methodsFor: 'user interface' stamp: ''!toolsMenuOn: aBuilder	<drgeoMenu>	(aBuilder item: #'System Browser' translated)		parent: #Tools translated;		action: [ Smalltalk tools browser openOnClass: DrGeoCanvas ];		icon:	(self iconNamed: #smallObjects);		help:'A source code browser to view, edit and save Dr. Geo code. I open the browser on the DrGeoCanvas class you can study to design your own Smalltalk sketch.'	translated.	(aBuilder item: #'Workspace' translated)		parent: #Tools translated;		action: [Smalltalk tools openWorkspace];		icon:	(self iconNamed: #workspace);		help: 'A window used as a scratchpad area where fragments of Pharo code can be entered, stored, edited, and evaluated.'	translated.	(aBuilder item: #'Work on script' translated)		parent: #Tools translated;		action: [ DrGeoSystem myScriptsPath inspect ];		icon: (self iconNamed: #scriptManager);		help:	'Open the inspector on the Smalltalk sketch directory: execute, edit or create new Dr. Geo programmed sketch from there.' translated.	(aBuilder item: #'Method finder' translated)		parent: #Tools translated;		action: [ Finder open ];		icon: (self iconNamed: #smallInfoIcon);		help: 'A tool to discover method.' translated.	(aBuilder item: #'Open a file' translated)		parent: #Tools translated;		action: [ FileList openOn: DrGeoSystem mySketchesPath ];		icon: (self iconNamed: #smallOpenIcon);		help: 'Open the filer on your personal sketches collection.' translated.	(aBuilder item: #'Save session' translated)		parent: #Tools translated;		action: [ Smalltalk saveSession ];		icon:	(self iconNamed: #smallSaveIcon);		help: 'Save this Dr. Geo session.' translated! !!DrGeo class methodsFor: 'instance creation' stamp: ''!in: aDomain 	^ self in: aDomain controlsManager: nil! !!DrGeo class methodsFor: 'user interface' stamp: ''!communityMenuOn: aBuilder	<drgeoMenu>	(aBuilder item: #'Dr. Geo web' translated) 		parent: #'Community' translated;		action: [WebBrowser openOn: 'http://www.drgeo.eu'].	(aBuilder item: #'Documentation' translated) 		parent: #'Community' translated;		action: [WebBrowser openOn: 'http://www.drgeo.eu/help'].	(aBuilder item: #'Translate' translated) 		parent: #'Community' translated;		action: [WebBrowser openOn: 'http://translate.drgeo.eu'].	(aBuilder item: #'Discussion forum' translated) 		parent: #'Community' translated;		action: [WebBrowser openOn: 'http://forum.drgeo.eu'].	(aBuilder item: #'Report a bug' translated) 		parent: #'Community' translated;		action: [WebBrowser openOn: 'http://bug.drgeo.eu'].! !!DrGeo class methodsFor: 'instance creation' stamp: ''!serviceIn: aDomain 	"A new model with an existing domain. For multiple MVP on a same	Domain"	^ super basicNew domain: aDomain;		 initializeService! !!DrGeo class methodsFor: 'instance creation' stamp: ''!applicationToolbarlessIn: aDomain 	"A new model with an existing domain. For multiple MVP on a same	Domain"	^ super basicNew domain: aDomain;		 initializeApplicationToolbarless! !!DrGeo class methodsFor: 'instance creation' stamp: ''!sample	"DrGeo sample openInWorld"	^ self service view! !!DrGeo class methodsFor: 'instance creation' stamp: ''!in: aDomain controlsManager: controlsManager	"A new model with an existing domain. For multiple MVP on a same	Domain"	^ super basicNew domain: aDomain;		 initializeApplication: controlsManager! !!DrGeoCanvas commentStamp: ''!A canvas to construct programmatically interactive figure!!DrGeoCanvas methodsFor: 'value' stamp: ''!freeValue: aNumber 	^ self freeValue: aNumber at: self aPosition! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!droitePassantPar: wrpPt1 et: wrpPt2	^ self line: wrpPt1 to: wrpPt2 ! !!DrGeoCanvas methodsFor: 'transformations' stamp: ''!reflect: wrpItem axis: wrpLine 	self canTransform: wrpItem.	self preProcessing.	^ self finalizeTransformation: 'Reflexion' with: {wrpItem mathItem. wrpLine mathItem}! !!DrGeoCanvas methodsFor: 'user interface' stamp: ''!centerTo: aPoint	"set the center of the visible canvas to this coordinate"	drgeo area 		ox: aPoint x;		oy: aPoint y.	drgeo redrawCostumes ! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!angleBisector: wrpAngle	self preProcessing.	^ self finalizeCurve: 		(DrGLineAngleBisectorItem newWith: {wrpAngle mathItem})! !!DrGeoCanvas methodsFor: 'point' stamp: ''!point: block parents: wrpValueArray	|collection|	self preProcessing.	collection := OrderedCollection with: block.	collection addAll: (wrpValueArray collect: [:wrp | wrp mathItem]).	^ self finalizePoint: (DrGPointBlockItem newWith: collection)! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!float: aValue at: aPoint from: startValue to: endValue name: name"A valueslider ranging between startValue and endValue"	^ self float: aValue at: aPoint from: startValue to: endValue name: name showValue: false! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!entier: value a: aPoint min: startValue max: endValue nom: name afficherValeur: isValueDisplay	^ self integer: value at: aPoint from: startValue to: endValue name: name showValue: isValueDisplay! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!plot: f from: x0 to: x1| mobile s pen|	s := self segment: x0@0 to: x1@0.	mobile := self pointOnCurve: s at: 0.	pen := self		point: [:item | item point x @ (f value: item point x)] 		parent: mobile.	^ (self locusOf: pen when: mobile) color: Color blue! !!DrGeoCanvas methodsFor: 'user interface' stamp: ''!fullscreen	drgeo view fullscreen! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!parallel: wrpDirection at: wrpPtOrPoint	self preProcessing.	^ self		finalizeCurve: (DrGLineParallelItem newWith: {			wrpDirection mathItem. 			(self wrappedPoint: wrpPtOrPoint) mathItem})! !!DrGeoCanvas methodsFor: 'curve filled' stamp: ''!polygon: arguments	self preProcessing.	^ self		finalizeFilledCurve: (DrGPolygonNptsItem  newWith: (arguments collect: [:wrp | 				(self wrappedPoint: wrp) mathItem]))! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!bissectrice: wrpAngle	^ self angleBisector: wrpAngle! !!DrGeoCanvas methodsFor: '*DrGeo-French-transformations' stamp: ''!echelleDe: wrpItem selonCentre: wrpCenter etFacteur: wrpValue	^ self scale: wrpItem center: wrpCenter factor: wrpValue! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve finit' stamp: ''!vecteurOrigine: wrpPt1 extremite: wrpPt2	^ self vector: wrpPt1 to: wrpPt2 ! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!faire: aBlock	^ self do: aBlock! !!DrGeoCanvas methodsFor: '*DrGeo-French-transformations' stamp: ''!translationDe: wrpItem parVecteur: wrpVecteur	^ self translate: wrpItem vector: wrpVecteur! !!DrGeoCanvas methodsFor: 'transformations' stamp: ''!symmetry: wrpItem center: wrpCenter 	self canTransform: wrpItem.	self preProcessing.	^ self finalizeTransformation: 'Symmetry' with: {		wrpItem mathItem. 		(self wrappedPoint: wrpCenter) mathItem}! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve finit' stamp: ''!arcDe: wrpPt1 a: wrpPt3 passantPar: wrpPt2	^ self arc: wrpPt1 to: wrpPt2 to: wrpPt3! !!DrGeoCanvas methodsFor: 'curve filled' stamp: ''!circleCenter: wrpCenter to: wrpPt	self preProcessing.	^ self		finalizeFilledCurve: (DrGCircle2ptsItem newWith: {			(self wrappedPoint: wrpCenter) mathItem. 			(self wrappedPoint: wrpPt) mathItem})! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!arcCenter: wrpPt1 from: wrpPt2 to: wrpPt3	self preProcessing.	^ self		finalizeFinitCurve: (DrGArcCenterAngleItem newWith: 			{(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem. 			(self wrappedPoint: wrpPt3) mathItem})! !!DrGeoCanvas methodsFor: 'point' stamp: ''!point: aPointOrBlock	self preProcessing.	^ aPointOrBlock isPoint 		ifTrue:  [self finalizePoint: (DrGPointFreeItem newWith: {aPointOrBlock})]		ifFalse: [self finalizePoint: (DrGPointBlockItem newWith: (OrderedCollection with: aPointOrBlock)	)]! !!DrGeoCanvas methodsFor: '*DrGeo-French-point' stamp: ''!pointSurCourbe: wrpCurve a: abscissa	^ self pointOnCurve: wrpCurve at: abscissa! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!demiDroiteOrigine: wrpPt1 passantPar: wrpPt2	^ self ray: wrpPt1 to: wrpPt2 ! !!DrGeoCanvas methodsFor: '*DrGeo-French-user interface' stamp: ''!echelle: anInteger	^ self scale: anInteger ! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!segment: wrpPt1 to: wrpPt2	self preProcessing.	^ self		finalizeSegment: (DrGSegment2ptsItem newWith: {			(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem})! !!DrGeoCanvas methodsFor: 'initialize-release' stamp: ''!initializeViewLess	super initialize.	drgeo := DrGeo service.! !!DrGeoCanvas methodsFor: 'processing' stamp: ''!preProcessing! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!penteDe: wrpLine	^ self slopeOf: wrpLine! !!DrGeoCanvas methodsFor: 'value' stamp: ''!distance: item1 to: item2 	"Distance from a point to a line or another point"	| arg class wrpItem1 wrpItem2 |	"Try to wrap to point in case the user provided point coordinates"	wrpItem1 := self wrappedPoint: item1.	wrpItem2 := self wrappedPoint: item2.	arg := OrderedCollection newFrom: {wrpItem1 mathItem. wrpItem2 mathItem}.	(arg first isLineItem or: [arg second isLineItem])		ifTrue: [class := DrGValueDistanceptlineItem.			arg first isLineItem ifTrue: [arg := arg reverse]]		ifFalse: [class := DrGValueDistance2ptsItem].	arg addLast: self aPosition.	self preProcessing.	^ self		finalizeValue: (class newWith: arg)! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve filled' stamp: ''!cercleCentre: wrpCenter rayon: wrpValue	^ self circleCenter: wrpCenter radius: wrpValue! !!DrGeoCanvas methodsFor: 'curve filled' stamp: ''!circleCenter: wrpCenter segment: wrpSegment	self preProcessing.	^ self		finalizeFilledCurve: (DrGCircleSegmentItem  newWith: {			(self wrappedPoint: wrpCenter) mathItem. 			wrpSegment mathItem})! !!DrGeoCanvas methodsFor: 'curve filled' stamp: ''!regularPolygonCenter: wrpCenter vertex: wrpVertex sides: wrpValue	self preProcessing.	^ self		finalizeFilledCurve: (DrGPolygonRegularItem newWith: {			(self wrappedPoint: wrpCenter) mathItem. 			(self wrappedPoint: wrpVertex) mathItem.			(self wrappedValue: wrpValue) mathItem})! !!DrGeoCanvas methodsFor: 'user interface' stamp: ''!scale: anInteger	"set scale of the canvas"	drgeo area setScaleTo: anInteger.	drgeo redrawCostumes.! !!DrGeoCanvas methodsFor: 'transformations' stamp: ''!translate: wrpItem vector: wrpVector 	self canTransform: wrpItem.	self preProcessing.	^ self finalizeTransformation: 'Translation' with: 		{wrpItem mathItem. 		(self wrappedVector: wrpVector) mathItem}! !!DrGeoCanvas methodsFor: 'transformations' stamp: ''!rotate: wrpItem center: wrpCenter angle: wrpValue 	self canTransform: wrpItem.	self preProcessing.	^ self finalizeTransformation: 'Rotation' with:  {		wrpItem mathItem. 		(self wrappedPoint: wrpCenter) mathItem. 		(self wrappedValue: wrpValue) mathItem}.	! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve filled' stamp: ''!polygoneRegulierCentre: wrpCenter sommet: wrpVertex cotes: wrpValue	^ self regularPolygonCenter: wrpCenter vertex: wrpVertex sides: wrpValue! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!float: aValue at: aPoint from: startValue to: endValue name: name showValue: isValueDisplay"A valueslider ranging between startValue and endValue"	| segment mobile|	segment := self segment: aPoint to: aPoint + (170 / drgeo area scale @0).	mobile := self pointOnCurve:  segment at: (aValue - startValue) / (endValue - startValue).	segment color: Color black; large.	mobile name: name;		color: Color black;		round;		large.		^ isValueDisplay 		ifTrue:  [[|value |			value := mobile mathItem abscissa * ( endValue - startValue) + startValue.			mobile rename: name,  ' = ', (value printShowingDecimalPlaces: 2).			value]]		ifFalse: [[mobile mathItem abscissa * ( endValue - startValue) + startValue]]  		! !!DrGeoCanvas methodsFor: 'value' stamp: ''!abscissaOf: wrpPointOrWrpVectorOrPoint	| class wrapped|	self preProcessing.	wrapped := self wrappedPoint: wrpPointOrWrpVectorOrPoint.	wrapped mathItem isPointItem		ifTrue: [class := DrGValuePtabscissaItem].	wrapped mathItem isVectorItem		ifTrue: [class := DrGValueVectorabscissaItem].	^ self		finalizeValue: (class newWith: {wrapped mathItem. self aPosition})! !!DrGeoCanvas methodsFor: 'point' stamp: ''!pointOnCurve: wrpCurve at: abscissa 	| item |	self preProcessing.	item := DrGPointOncurveItem newWith: {wrpCurve mathItem. 0 @ 0}.	item setCurveAbscissa: abscissa.	item := self domain createFromMathItemNoStack: item.	^ self finalizePoint: item! !!DrGeoCanvas methodsFor: '*DrGeo-French-user interface' stamp: ''!afficherAxes	^ self axesOn! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!entier: value a: aPoint min: startValue max: endValue	^ self integer: value at: aPoint from: startValue to: endValue ! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!longueurDe: wrpItem	^ self lengthOf: wrpItem ! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!wrappedVector: aVectorOrWrappedVectorItem"ensure a wrapped vector"	^ aVectorOrWrappedVectorItem isPoint 		ifTrue: [(self vector: aVectorOrWrappedVectorItem) hide] 		ifFalse:   [aVectorOrWrappedVectorItem]! !!DrGeoCanvas methodsFor: 'user interface' stamp: ''!gridOn	 drgeo presenter gridOnOff ! !!DrGeoCanvas methodsFor: '*DrGeo-French-user interface' stamp: ''!afficherGrille	^ self gridOn! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!finalizeSegment: item	^ self postProcessing: (DrGWrappedSegment wrap: (self costumeOf: (self domain createFromMathItemNoStack: item)))! !!DrGeoCanvas methodsFor: '*DrGeo-French-text' stamp: ''!texte: aText	^ self text: aText! !!DrGeoCanvas methodsFor: 'point' stamp: ''!altIntersectionOf: wrpCurve1 and: wrpCurve2 "use this one when you want the intersection point when non straight line are involved"	| item |	self preProcessing.	item := DrGPointIntersectionItem newWith: {wrpCurve1 mathItem. wrpCurve2 mathItem. 0 @ 0}.	item k: 1.	^ self finalizePoint: item! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve filled' stamp: ''!polygone: collection	^ self polygon: collection! !!DrGeoCanvas methodsFor: 'value' stamp: ''!angle: wrpPt1 to: wrpPt2 to: wrpPt3 	self preProcessing.	^ self		finalizeValue: (DrGAngle3ptsItem newWith: {			(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem. 			(self wrappedPoint: wrpPt3) mathItem.			self aPosition})		hide: false! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!mediatrice: wrpPt1 a: wrpPt2	^ self perpendicularBisector: wrpPt1 to: wrpPt2! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!perpendicular: wrpDirection at: wrpPtOrPoint 	self preProcessing.	^ self		finalizeCurve: (DrGLinePerpendicularItem newWith: {			wrpDirection mathItem. 			(self wrappedPoint: wrpPtOrPoint) mathItem})! !!DrGeoCanvas methodsFor: 'user interface' stamp: ''!axesOn	 drgeo presenter axesOnOff ! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!decimal: value a: aPoint min: startValue max: endValue nom: name	^ self float: value at: aPoint from: startValue to: endValue name: name! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!lieuDe: wrpPt1 lorsqueBouge: wrpPt2	^ self locusOf: wrpPt1 when: wrpPt2 ! !!DrGeoCanvas methodsFor: 'point' stamp: ''!intersectionOf: wrpCurve1 and: wrpCurve2 |item|	self preProcessing.	item := DrGPointIntersectionItem newWith: {wrpCurve1 mathItem. wrpCurve2 mathItem. 0 @ 0}.	item k: -1.	^ self		finalizePoint: (item)! !!DrGeoCanvas methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	drgeo := DrGeo applicationToolbarless.	"We do want it to be on the front"	self view setProperty: #morphicLayerNumber toValue: 100.	self view openInWorld.	self view extent: 400@300.! !!DrGeoCanvas methodsFor: 'point' stamp: ''!pointX: wrpValue1 Y: wrpValue2	self preProcessing.	^ self		finalizePoint: (DrGPointCoordinateItem  newWith: {wrpValue1 mathItem . wrpValue2 mathItem })! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!decimal: value a: aPoint min: startValue max: endValue nom: name afficherValeur: isValueDisplay	^ self float: value at: aPoint from: startValue to: endValue name: name showValue: isValueDisplay! !!DrGeoCanvas methodsFor: 'accessing' stamp: ''!view	^ drgeo view! !!DrGeoCanvas methodsFor: '*DrGeo-French-equation' stamp: ''!equationDe: wrpLineOrCircle	^ self equationOf: wrpLineOrCircle! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!do: aBlock	"Execute the given construction in a forked process so the user can see the on going construction or animation"	[aBlock value] forkAt: Processor userBackgroundPriority  ! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!finalizeCurve: item	^ self postProcessing: (DrGWrappedCurve wrap: (self costumeOf: (self domain createFromMathItemNoStack: item)))! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve finit' stamp: ''!vecteur: wrpPt	^ self vector: wrpPt! !!DrGeoCanvas methodsFor: '*DrGeo-French-point' stamp: ''!milieuDe: wrpPoint1 et: wrpPoint2	^ self middleOf: wrpPoint1 and: wrpPoint2 ! !!DrGeoCanvas methodsFor: '*DrGeo-French-transformations' stamp: ''!symetriqueDe: wrpItem selonCentre: wrpCenter	^ self symmetry: wrpItem center: wrpCenter ! !!DrGeoCanvas methodsFor: '*DrGeo-French-point' stamp: ''!milieuDe: wrpSegment	^ self middleOf: wrpSegment ! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve filled' stamp: ''!cercleCentre: wrpCenter segment: wrpSegment	^ self circleCenter: wrpCenter segment: wrpSegment! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!line: wrpPt1 to: wrpPt2	self preProcessing.	^ self		finalizeCurve: (DrGLine2ptsItem newWith: {			(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem })! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!finalizeFinitCurve: item	^ self postProcessing: (DrGWrappedFinitCurve wrap: (self costumeOf: (self domain createFromMathItemNoStack: item)))! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!ray: wrpPt1 to: wrpPt2	self preProcessing.	^ self		finalizeCurve: (DrGRay2ptsItem newWith: {			(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem })! !!DrGeoCanvas methodsFor: 'point' stamp: ''!wrappedPoint: aPointOrWrappedPointItem"ensure a wrapped point"	^ aPointOrWrappedPointItem isPoint 		ifTrue: [(self point: aPointOrWrappedPointItem) hide] 		ifFalse:   [aPointOrWrappedPointItem]! !!DrGeoCanvas methodsFor: 'text' stamp: ''!text: aText	^ self text:aText at: self aPosition! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!mediatrice: wrpSegment	^ self perpendicularBisector: wrpSegment! !!DrGeoCanvas methodsFor: 'text' stamp: ''!finalizeText: item	^ self postProcessing: (DrGWrappedText wrap: (self costumeOf: (self domain createFromMathItemNoStack: item)))! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!paralleleA: wrpDirection passantPar: wrpPtOrPoint	^ self parallel: wrpDirection at: wrpPtOrPoint! !!DrGeoCanvas methodsFor: 'initialize-release' stamp: ''!release	drgeo release.! !!DrGeoCanvas methodsFor: 'value' stamp: ''!ordinateOf: wrpPointOrWrpVectorOrPoint 	| class wrapped |	self preProcessing.	wrapped := self wrappedPoint: wrpPointOrWrpVectorOrPoint.	wrapped mathItem isPointItem		ifTrue: [class := DrGValuePtordinateItem].	wrapped mathItem isVectorItem		ifTrue: [class := DrGValueVectorordinateItem].	^ self		finalizeValue: (class newWith: {wrapped mathItem. self aPosition})! !!DrGeoCanvas methodsFor: 'curve filled' stamp: ''!circleCenter: wrpCenter radius: wrpValue	self preProcessing.	^ self		finalizeFilledCurve: (DrGCircleRadiusItem  newWith: {			(self wrappedPoint: wrpCenter) mathItem. 			(self wrappedValue: wrpValue) mathItem})! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!angleCentre: wrpPt1 de: wrpPt2 a: wrpPt3	^ self angle: wrpPt2  to: wrpPt1  to: wrpPt3 ! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!valeurLibre: aNumber	^ self freeValue: aNumber ! !!DrGeoCanvas methodsFor: 'value' stamp: ''!lengthOf: wrpSegmentOrCircleOrArcOrVectorOrPolygon	| class |	self preProcessing.	wrpSegmentOrCircleOrArcOrVectorOrPolygon mathItem isSegmentItem		ifTrue: [class := DrGValueSegmentlengthItem].	wrpSegmentOrCircleOrArcOrVectorOrPolygon mathItem isCircleItem		ifTrue: [class := DrGValueCircleperimeterItem].	wrpSegmentOrCircleOrArcOrVectorOrPolygon mathItem isArcItem		ifTrue: [class := DrGValueArclengthItem].	wrpSegmentOrCircleOrArcOrVectorOrPolygon mathItem isVectorItem		ifTrue: [class := DrGValueVectornormItem].	wrpSegmentOrCircleOrArcOrVectorOrPolygon mathItem isPolygonItem		ifTrue: [class := DrGValuePolygonperimeterItem].	^ self		finalizeValue: (class newWith: {wrpSegmentOrCircleOrArcOrVectorOrPolygon mathItem. self aPosition})! !!DrGeoCanvas methodsFor: 'value' stamp: ''!finalizeValue: item"By default we hide the value"	^ self finalizeValue: item hide: true! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!perpendiculaireA: wrpDirection passantPar: wrpPtOrPoint	^ self perpendicular: wrpDirection at: wrpPtOrPoint! !!DrGeoCanvas methodsFor: '*DrGeo-French-user interface' stamp: ''!pleinEcran	^ self fullscreen ! !!DrGeoCanvas methodsFor: 'transformations' stamp: ''!canTransform: wrptItem	wrptItem mathItem isGeometricItem		ifFalse: [self error: 'Only geometric object can be transformed.' translated].! !!DrGeoCanvas methodsFor: '*DrGeo-French-user interface' stamp: ''!centrerVueEn: aPoint	^ self centerTo: aPoint! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve finit' stamp: ''!arcCentre: wrpPt1 de: wrpPt2 a: wrpPt3	^ self arcCenter: wrpPt1 from: wrpPt2 to: wrpPt3! !!DrGeoCanvas methodsFor: 'processing' stamp: ''!postProcessing: aWrappedItem 	"Called after each item creation command, return a wrapped costume "	^ aWrappedItem ! !!DrGeoCanvas methodsFor: 'as yet unclassified' stamp: ''!gtInspectorCanvasIn: composite	<gtInspectorPresentationOrder: 90>	| morphPresentation |	morphPresentation := composite morph.	morphPresentation		title: 'Morph';		display: [self view]! !!DrGeoCanvas methodsFor: 'curve filled' stamp: ''!finalizeFilledCurve: item	^ self postProcessing: (DrGWrappedFilledCurve wrap: (self costumeOf: (self domain createFromMathItemNoStack: item)))! !!DrGeoCanvas methodsFor: 'transformations' stamp: ''!scale: wrpItem center: wrpCenter factor: wrpValue 	self canTransform: wrpItem.	self preProcessing.	^ self finalizeTransformation: 'Homothety' with: {		wrpItem mathItem. 		(self wrappedPoint: wrpCenter) mathItem.		(self wrappedValue: wrpValue) mathItem} ! !!DrGeoCanvas methodsFor: '*DrGeo-French-point' stamp: ''!autreIntersectionDe: wrpCurve1 et: wrpCurve2	^ self altIntersectionOf: wrpCurve1 and: wrpCurve2 ! !!DrGeoCanvas methodsFor: 'transformations' stamp: ''!finalizeTransformation: string with: arguments 	| class item |	class := self class environment classNamed: 'DrG', arguments first basicType capitalized, string, 'Item'.	item := class newWith: arguments.	item isPointItem		ifTrue: [^ self finalizePoint: item].	^ self finalizeCurve: item! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve filled' stamp: ''!cercleCentre: wrpCenter passantPar: wrpPt	^ self circleCenter: wrpCenter to: wrpPt! !!DrGeoCanvas methodsFor: 'point' stamp: ''!middleOf: wrpSegment	self preProcessing.	^ self		finalizePoint: (DrGPointMiddlesegmentItem newWith: {wrpSegment mathItem})! !!DrGeoCanvas methodsFor: 'equation' stamp: ''!equationOf: wrpLineOrCircle	| class |	self preProcessing.	wrpLineOrCircle mathItem isLineItem 		ifTrue: [class := DrGEquationLineItem ].	wrpLineOrCircle mathItem isCircleItem		ifTrue: [class := DrGEquationCircleItem].	^ self		finalizeValue: (class newWith: {wrpLineOrCircle mathItem. self aPosition})! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!perpendicularBisector: wrpSegment	self preProcessing.	^ self finalizeCurve: 		(DrGPerpendicularBisectorItem newWith: {wrpSegment mathItem})! !!DrGeoCanvas methodsFor: 'processing' stamp: ''!update	self domain updateAllMathItems! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!abscisseDe:  wrpPointOrWrpVectorOrPoint	^ self abscissaOf: wrpPointOrWrpVectorOrPoint ! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!courbeDe: f de: x0 a: x1	^ self plot: f from: x0 to: x1! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve' stamp: ''!bissectriceSommet: wrpSummit cote1: wrpPt1 cote2: wrpPt2	^ self angleBisectorSummit: wrpSummit side1: wrpPt1 side2: wrpPt2 ! !!DrGeoCanvas methodsFor: 'point' stamp: ''!middleOf: wrappedPoint1 and: wrappedPoint2 	self preProcessing .	^ self finalizePoint: (DrGPointMiddle2ptsItem newWith: 		{(self wrappedPoint: wrappedPoint1) mathItem . (self wrappedPoint: wrappedPoint2) mathItem})! !!DrGeoCanvas methodsFor: 'value' stamp: ''!aPosition	^ 10 atRandom - 5 @ (10 atRandom - 5)! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!valeurLibre: aNumber a: aPosition	^ self freeValue: aNumber at: aPosition! !!DrGeoCanvas methodsFor: 'value' stamp: ''!angle: wrpVect1 to: wrpVect2	self preProcessing.	^ self		finalizeValue: (DrGAngleVectorsItem newWith: {			(self wrappedVector: wrpVect1) mathItem. 			(self wrappedVector: wrpVect2) mathItem.			self aPosition})		hide: false! !!DrGeoCanvas methodsFor: 'value' stamp: ''!slopeOf: wrpLine	self preProcessing.	^ self		finalizeValue: (DrGValueSlopeItem newWith: {wrpLine mathItem. self aPosition})! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!vector: wrpPt	self preProcessing.	^ self		finalizeCurve: (DrGVector2ptsItem newWith: {			(self wrappedPoint: 0@0) mathItem. 			(self wrappedPoint: wrpPt) mathItem})! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!ordonneeDe: wrpItem	^ self ordinateOf: wrpItem ! !!DrGeoCanvas methodsFor: 'value' stamp: ''!freeValue: aNumber at: aPosition	| answer |	self preProcessing.	drgeo notInteractive: true.	answer := self finalizeValue: ((DrGValueValueItem newWith: {aPosition}) valueItem: aNumber).	drgeo notInteractive: false.	^ answer! !!DrGeoCanvas methodsFor: '*DrGeo-French-transformations' stamp: ''!rotationDe: wrpItem parCentre: wrpCenter etAngle: wrpValue	^ self rotate: wrpItem center: wrpCenter angle: wrpValue! !!DrGeoCanvas methodsFor: 'point' stamp: ''!finalizePoint: item	| wrappedPoint |	wrappedPoint := self postProcessing: (DrGWrappedPoint wrap: (self costumeOf: (self domain createFromMathItemNoStack: item))).	wrappedPoint square.	^ wrappedPoint! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!float: value at: aPoint from: startValue to: endValue 	^ self float: value at: aPoint from: startValue to: endValue name: ''! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!vector: wrpPt1 to: wrpPt2 	self preProcessing.	^ self		finalizeCurve: (DrGVector2ptsItem newWith: {			(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem})! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!distanceDe: item1 a: item2	^ self distance: item1 to: item2! !!DrGeoCanvas methodsFor: '*DrGeo-French-transformations' stamp: ''!symetriqueDe: wrpItem selonAxe: wrpLine	^ self reflect: wrpItem axis: wrpLine! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!decimal: value a: aPoint min: startValue max: endValue	^ self float: value at: aPoint from: startValue to: endValue ! !!DrGeoCanvas methodsFor: '*DrGeo-French-helpers' stamp: ''!entier: value a: aPoint min: startValue max: endValue nom: name	^ self integer: value at: aPoint from: startValue to: endValue name: name! !!DrGeoCanvas methodsFor: 'text' stamp: ''!text: aText at: aPosition	| answer |	self preProcessing.	drgeo notInteractive: true.	answer := self finalizeText: ((DrGTextItem newWith: {aPosition}) text: aText asText).	drgeo notInteractive: false.	^ answer! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!integer: aValue at: aPoint from: startValue to: endValue name: name showValue: isValueDisplay"A valueslider ranging between startValue and endValue"	| segment mobile|	segment := self segment: aPoint to: aPoint + (170 / drgeo area scale @0).	mobile := self pointOnCurve:  segment at: (aValue - startValue) / (endValue - startValue).	segment color: Color black; large.	mobile name: name;		color: Color black;		round;		large.		^ isValueDisplay 		ifTrue:  [[|value |			value := (mobile mathItem abscissa * ( endValue - startValue) + startValue) floor.			mobile rename: name,  ' = ', value printString.			value]]		ifFalse: [[(mobile mathItem abscissa * ( endValue - startValue) + startValue) floor]]  		! !!DrGeoCanvas methodsFor: 'curve finit' stamp: ''!arc: wrpPt1 to: wrpPt2 to: wrpPt3	self preProcessing.	^ self		finalizeFinitCurve: (DrGArc3ptsItem newWith: 			{(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem. 			(self wrappedPoint: wrpPt3) mathItem})! !!DrGeoCanvas methodsFor: 'point' stamp: ''!point: block parent: wrpValue	|collection|	self preProcessing.	collection := OrderedCollection with: block.	collection add: wrpValue mathItem.	^ self finalizePoint: (DrGPointBlockItem newWith: collection)! !!DrGeoCanvas methodsFor: 'accessing' stamp: ''!costumeOf: anItem 	^ drgeo costumeOf: anItem! !!DrGeoCanvas methodsFor: '*DrGeo-French-processing' stamp: ''!actualiser	^ self update! !!DrGeoCanvas methodsFor: '*DrGeo-French-point' stamp: ''!intersectionDe: wrpCurve1 et: wrpCurve2	^ self intersectionOf: wrpCurve1 and: wrpCurve2 ! !!DrGeoCanvas methodsFor: 'value' stamp: ''!wrappedValue: aNumberOrWrappedValueItem"ensure a wrapped value"	^ aNumberOrWrappedValueItem  isNumber 		ifTrue: [(self freeValue: aNumberOrWrappedValueItem ) hide] 		ifFalse:   [aNumberOrWrappedValueItem]! !!DrGeoCanvas methodsFor: '*DrGeo-French-value' stamp: ''!angleVecteurs: wrpVecteur1 et: wrpVecteur2	^ self angle: wrpVecteur1 to: wrpVecteur2 ! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!locusOf: wrpPt1 when: wrpPt2 	self preProcessing.	wrpPt2 mathItem isPointItemOnCurve 		ifFalse: [self error: 'The second point provided in the call must be on a curve.'].	^ self		finalizeCurve: (DrGLocus2ptsItem newWith: {wrpPt2 mathItem. wrpPt1 mathItem})! !!DrGeoCanvas methodsFor: 'value' stamp: ''!finalizeValue: item hide: hide"By default we hide the value"	| wrappedItem |	wrappedItem := DrGWrappedValue wrap: (self costumeOf: (self domain createFromMathItemNoStack: item)).	self postProcessing: wrappedItem.	 hide ifTrue: [ wrappedItem hide ].	^ wrappedItem! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!integer: aValue at: aPoint from: startValue to: endValue name: name"A valueslider ranging between startValue and endValue"	^ self integer: aValue at: aPoint from: startValue to: endValue name: name showValue: false! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!angleBisectorSummit: wrpSummit side1: wrpPt1 side2: wrpPt2	self preProcessing.	^ self finalizeCurve: 		(DrGAngleBisector3ptsItem newWith: 			{(self wrappedPoint: wrpPt1) mathItem.			(self wrappedPoint: wrpSummit) mathItem.			(self wrappedPoint: wrpPt2) mathItem})! !!DrGeoCanvas methodsFor: '*DrGeo-French-text' stamp: ''!texte: aText a: aPosition	^ self text: aText at: aPosition! !!DrGeoCanvas methodsFor: '*DrGeo-French-curve finit' stamp: ''!segmentDe: wrpPt1 a: wrpPt2	^ self segment: wrpPt1 to: wrpPt2 ! !!DrGeoCanvas methodsFor: 'accessing' stamp: ''!domain	^ drgeo domain! !!DrGeoCanvas methodsFor: 'helpers' stamp: ''!integer: value at: aPoint from: startValue to: endValue 	^ self integer: value at: aPoint from: startValue to: endValue name: ''! !!DrGeoCanvas methodsFor: 'curve' stamp: ''!perpendicularBisector: wrpPt1 to: wrpPt2	self preProcessing.	^ self		finalizeCurve: (DrGLinePerpendicularBisector2ptsItem newWith: {			(self wrappedPoint: wrpPt1) mathItem. 			(self wrappedPoint: wrpPt2) mathItem})! !!DrGeoCanvas class methodsFor: '*DrGeo-French-instance cretion' stamp: ''!nouveau	^ self new! !!DrGeoCanvas class methodsFor: 'as yet unclassified' stamp: ''!viewLess	^ self basicNew initializeViewLess! !!DrGeoCommandLineHandler commentStamp: ''!Command line handler for Dr. Geo operations.Usage: drgeo [ --sketch=<drgeo-file> ] [ --script=<drgeo-script> ]	--sketch    Open a Dr. Geo sketch	--script    Install a Dr. Geo Smalltalk script in a workspace and execute itExample:pharo drgeo.image drgeo --sketch=sketch.fgeo!!DrGeoCommandLineHandler methodsFor: 'as yet unclassified' stamp: ''!checkForFile: aString	aString asFileReference exists		ifFalse: [ ^ self exitFailure: aString, ' does not exist!!' ]! !!DrGeoCommandLineHandler methodsFor: 'as yet unclassified' stamp: ''!loadSketch: aString	| utfString |	utfString := aString convertFromWithConverter: UTF8TextConverter new.	self checkForFile: utfString.	DrGeo fileFullscreen: utfString! !!DrGeoCommandLineHandler methodsFor: 'as yet unclassified' stamp: ''!activate	self activateHelp ifTrue: [ ^ self].	(self hasOption: 'sketch') ifTrue: [ ^ self loadSketch: (self optionAt: 'sketch')].	(self hasOption: 'script') ifTrue: [ ^ self loadScript: (self optionAt: 'script')].	self printHelp.	self exitFailure: 'Wrong arguments'.! !!DrGeoCommandLineHandler methodsFor: 'as yet unclassified' stamp: ''!loadScript: aString	| workspace utfString |	utfString := aString convertFromWithConverter: UTF8TextConverter new.	self checkForFile: utfString.	workspace := Workspace openFile: utfString.	workspace containingWindow fullscreen.	Compiler evaluate: workspace contents! !!DrGeoCommandLineHandler class methodsFor: 'accessing' stamp: ''!priority	^ STCommandLineHandler priority + 1! !!DrGeoCommandLineHandler class methodsFor: 'accessing' stamp: ''!description	^ 'Command line for Dr. Geo'! !!DrGeoCommandLineHandler class methodsFor: 'accessing' stamp: ''!commandName	^ 'drgeo'! !!DrGeoDomain commentStamp: ''!This is the domain object for DrGeo, aka the top level Model instance for one DrGeo instance!!DrGeoDomain methodsFor: 'accessing' stamp: ''!redo	cmdManager redo! !!DrGeoDomain methodsFor: 'building' stamp: ''!createCompositeItem: aMathItemSelection	cmdManager compositeCommandFor: aMathItemSelection.! !!DrGeoDomain methodsFor: 'building' stamp: ''!createFromMathItemNoStackNoFactoryCheck: aMathItem	"return the mathItem. we do not check in the facory pool, without stacking in the undo/redo stack"	factory add: aMathItem.	self triggerEvent: #newMathItem with: aMathItem.	^aMathItem! !!DrGeoDomain methodsFor: 'user interface' stamp: ''!addModelItemsToWindowMenu: aMenu 	aMenu addLine.	aMenu		add: 'About Dr. Geo...'		target: self		selector: #inform:		argument: DrGeo drgeoCopyright! !!DrGeoDomain methodsFor: 'updating' stamp: ''!updateDirty: mathItems	mathItems do: [:item | item update].	self triggerEvent: #updatedDirtyItems! !!DrGeoDomain methodsFor: 'building' stamp: ''!createMacro: aBuilder 	(DrGMacroFactory new pushAsLastWhenInPool: (aBuilder getItem: self)) ifFalse: 		[ "Create macro and register it in the factory"		DrGMacroFactory new add: (aBuilder getItem: self) ]! !!DrGeoDomain methodsFor: 'updating' stamp: ''!mutate: aPointItem asIntersectionWith: curveA and: curveB at: aPosition	|item|	item :=  DrGPointIntersectionItem newWith: {curveA. curveB.  aPosition}.	item name: aPointItem name.	item actionMap: aPointItem actionMap.	aPointItem become: item.	self updateAllMathItems.! !!DrGeoDomain methodsFor: 'event' stamp: ''!releaseActionMap	actionMap := nil! !!DrGeoDomain methodsFor: 'initialize-release' stamp: ''!release	super release.	factory release.	cmdManager release.! !!DrGeoDomain methodsFor: 'updating' stamp: ''!mutate: aPointItem asFreeOn: aCurveItem at: aPosition	|item|	item := DrGPointOncurveItem newWith: {aCurveItem .  aPosition}.	item name: aPointItem name.	item actionMap: aPointItem actionMap.	aPointItem become: item.	self updateAllMathItems ! !!DrGeoDomain methodsFor: 'accessing' stamp: ''!labelString	^ 'Dr. Geo -- ', Date today asString! !!DrGeoDomain methodsFor: 'updating' stamp: ''!moveEvent: aMathItem at: aPoint	aMathItem moveAt: aPoint.	self updateAllMathItems! !!DrGeoDomain methodsFor: 'building' stamp: ''!playMacro: aBuilder in: app 	| answer macroTree |	macroTree := aBuilder getItem.	macroTree 		with: aBuilder constructedNodes		do: 			[ :item :node | 			answer := self createFromMathItem: item.			answer last 				ifTrue: 					[ node isHiddenNode ifTrue: 						[ (app costumeOf: item) ifNotNil: 							[ :aCostume | 							aCostume style hidden: true.							aCostume forceVisible: false ] ] ]				ifFalse: 					[ "item twin in the factory, use it in the macro tree"					self 						in: macroTree						replaceParent: item						with: answer first ] ]! !!DrGeoDomain methodsFor: 'building' stamp: ''!merge: aMathItem with: aTarget	"create a merge command"	cmdManager mergeCommandFor: aMathItem with: aTarget! !!DrGeoDomain methodsFor: 'accessing' stamp: ''!factory	^factory! !!DrGeoDomain methodsFor: 'building' stamp: ''!deleteMathItem: aMathItem 	"create a delete command and execute it"	cmdManager deleteCommandFor: aMathItem! !!DrGeoDomain methodsFor: 'building' stamp: ''!in: macroTree replaceParent: item with: newItem 	| index |	macroTree do: [ :anItem | 		(anItem parents notNil and: [ (index := anItem parents indexOf: item) ~= 0 ])			ifTrue: [anItem parents at: index put: newItem ] ]! !!DrGeoDomain methodsFor: 'event' stamp: ''!updateableActionMap	actionMap ifNil:		[actionMap := self createActionMap].	^actionMap! !!DrGeoDomain methodsFor: 'building' stamp: ''!createMathItem: aBuilder 	"return the mathItem (newly created or the one in the pool, in case the caller want to do something with it"	(factory pushAsLastWhenInPool: aBuilder getItem first) ifTrue: 		[ ^ {  (factory last). false  } ].	"create a new command and execute it"	^ {  (cmdManager buildCommandWith: aBuilder). true  }! !!DrGeoDomain methodsFor: 'building' stamp: ''!moveMathItem: aMathItem with: aPoint	"create a move command"	cmdManager moveCommandFor: aMathItem with: aPoint! !!DrGeoDomain methodsFor: 'updating' stamp: ''!moveEvent: aMathItem at: aPoint withDirty: mathItems	aMathItem moveAt: aPoint.	self updateDirty: mathItems! !!DrGeoDomain methodsFor: 'event' stamp: ''!actionMap	actionMap ifNil: [^self createActionMap].	^ actionMap ! !!DrGeoDomain methodsFor: 'building' stamp: ''!createFromMathItemNoStack: aMathItem	"return the mathItem (newly created or the one in the pool, in case the caller want to do something with it, without stacking in the undo/redo stack"	(factory pushAsLastWhenInPool: aMathItem) ifTrue: [^factory last].	factory add: aMathItem.	self triggerEvent: #newMathItem with: aMathItem.	^aMathItem! !!DrGeoDomain methodsFor: 'updating' stamp: ''!mutateAsFreePoint: aPointItem	|freePointItem|	(aPointItem isFreePointItem and: [aPointItem isPointItemOnCurve not]) ifTrue: [^aPointItem].	freePointItem := DrGPointFreeItem new point: aPointItem point.	freePointItem name: aPointItem name.	freePointItem actionMap: aPointItem actionMap.	aPointItem become: freePointItem.	^ freePointItem! !!DrGeoDomain methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	factory := DrGMathItemFactory new.	cmdManager := DrGCommandManager new domain: self! !!DrGeoDomain methodsFor: 'accessing' stamp: ''!undo	cmdManager undo! !!DrGeoDomain methodsFor: 'building' stamp: ''!createFromMathItem: aMathItem	"return the mathItem (newly created or the one in the pool, in case the caller want to do something with it"	(factory pushAsLastWhenInPool: aMathItem) ifTrue:		[^{factory last. false}].	"create a new command and execute it"	cmdManager buildCommandFor: aMathItem.	^{ aMathItem. true }! !!DrGeoDomain methodsFor: 'updating' stamp: ''!update: object 	(object class == MethodModified and: [object methodClass superclass = DrGeoUserScript]) 		ifTrue: [self updateAllMathItems]! !!DrGeoDomain methodsFor: 'updating' stamp: ''!updateAllMathItems	factory updateAllMathItems.	self triggerEvent: #updatedItems! !!DrGeoDomain methodsFor: 'updating' stamp: ''!moveEvent: aMathItem inDirection: aPoint 	aMathItem moveEvent: aPoint.	self updateAllMathItems ! !!DrGeoDomain methodsFor: 'building' stamp: ''!propertyCommandFor: aMathItem with: aProperty 	"create a move command"	cmdManager propertyCommandFor: aMathItem with: aProperty ! !!DrGeoDomain methodsFor: 'updating' stamp: ''!updateAllMathItemsButLocus	factory updateAllMathItemsButLocus.	"We don't need to update the costumem we just want updated mathiteem'"	"self triggerEvent: #updatedItems"! !!DrGeoDomain methodsFor: 'updating' stamp: ''!moveEvent: aMathItem inDirection: aPoint withDirty: mathItems	aMathItem moveEvent: aPoint.	self updateDirty: mathItems! !!DrGeoLanClient commentStamp: ''!I am a DrGeo client connection to a DrGeoLanServer to fetch its shared files.!!DrGeoLanClient methodsFor: 'initialization' stamp: ''!reset	serverIP := nil.	client ifNotNil: [client close].! !!DrGeoLanClient methodsFor: 'scanning' stamp: ''!scanForLanShareHost	"Listen for a DrGeo Share for a given time"	| socket data searchedIP |	searchedIP := nil.	DrGLoader start.	socket := Socket newUDP setPort: DrGeoLanServer current broadcastPort. 	data := ByteArray new: 100.	[[[searchedIP isNil] whileTrue: [searchedIP := self scanForBroadcastedIPAt: socket into: data]] 		valueWithin: 5 seconds onTimeout: [ ] ]	ensure: [socket closeAndDestroy. DrGLoader stop].	^ searchedIP ifNotNil: [NetNameResolver stringFromAddress: searchedIP]! !!DrGeoLanClient methodsFor: 'testing' stamp: ''!isServerFound	^ self serverIP isNotNil! !!DrGeoLanClient methodsFor: 'accessing' stamp: ''!serverIP	^ serverIP ifNil: [serverIP := self scanForLanShareHost]! !!DrGeoLanClient methodsFor: 'scanning' stamp: ''!scanForBroadcastedIPAt: socket into: data	"Listen for incomming UPD broadcast message"	| result sendingHostIP |	[socket waitForDataFor: 2.	result := socket receiveUDPDataInto: data.	(data first: result first) asString = 'DrGeoShare' 		ifTrue: [sendingHostIP := result at: 2]] 	on: ConnectionTimedOut do: [sendingHostIP := nil].	^ sendingHostIP ! !!DrGeoLanClient methodsFor: 'accessing' stamp: ''!client	^ client ifNil: [		client := ZnClient new 			host: self serverIP; 			port: DrGeoLanServer port;			yourself]! !!DrGeoLanClient class methodsFor: 'initialization' stamp: ''!current	^ Current ifNil: [ Current := self basicNew initialize]! !!DrGeoLanClient class methodsFor: 'initialization' stamp: ''!reset	Current ifNotNil: [ 		Current reset.		Current := nil]! !!DrGeoLanClient class methodsFor: 'initialization' stamp: ''!new	self error: 'Use #current message to access to the DrGeoLanClient instance.'! !!DrGeoLanServer commentStamp: ''!I am the Dr. Geo lan server. - I broadcast an UDP message to let the other Dr. Geo instances I am willing to share my sketches in myShares folder (listen with nc -ulk 51284)- I share my files with an http server!!DrGeoLanServer methodsFor: 'initialization' stamp: ''!reset	self stopBroadcast.	self stopServing.	server := nil! !!DrGeoLanServer methodsFor: 'accessing' stamp: ''!broadcasting: boolean	broadcasting := boolean ! !!DrGeoLanServer methodsFor: 'serving files' stamp: ''!stopServing	(server isNil or: [ server isRunning not]) ifTrue: [ ^ self ].	server stop	! !!DrGeoLanServer methodsFor: 'initialization' stamp: ''!stop	self stopBroadcast.	self stopServing! !!DrGeoLanServer methodsFor: 'serving files' stamp: ''!startServing	(server isNil or: [ server isRunning ]) ifFalse: [ ^ self ].	server ifNil: [		server := ZnServer startDefaultOn: self serverPort.		server delegate: DrGeoMySharesDelegate new].	server start.	! !!DrGeoLanServer methodsFor: 'serving files' stamp: ''!serverPort	^ self class port! !!DrGeoLanServer methodsFor: 'initialization' stamp: ''!start	self startServing.	self startBroadcast! !!DrGeoLanServer methodsFor: 'initialization' stamp: ''!initialize	broadcasting := false.! !!DrGeoLanServer methodsFor: 'testing' stamp: ''!isBroadcasting	^ broadcasting ! !!DrGeoLanServer methodsFor: 'broadcast' stamp: ''!broadcast	| pause |	pause := 1 second.	[[self isBroadcasting] whileTrue: [		broadcastSocket sendUDPData: 'DrGeoShare' toHost: #[255 255 255 255] port: self broadcastPort.		pause wait]]	ensure: [broadcastSocket closeAndDestroy ] ! !!DrGeoLanServer methodsFor: 'broadcast' stamp: ''!startBroadcast	self isBroadcasting ifTrue: [ ^ self ].	self broadcasting: true.	broadcastSocket := Socket newUDP.	broadcastSocket setOption: 'SO_BROADCAST' value: true.	[self broadcast] forkAt: Processor userInterruptPriority named: 'Dr. Geo broadcasting'! !!DrGeoLanServer methodsFor: 'broadcast' stamp: ''!stopBroadcast	self broadcasting: false.! !!DrGeoLanServer methodsFor: 'broadcast' stamp: ''!broadcastPort	^51284! !!DrGeoLanServer class methodsFor: 'accessing' stamp: ''!current	^ Current ifNil: [ Current := self basicNew initialize]! !!DrGeoLanServer class methodsFor: 'initialization' stamp: ''!reset	Current ifNotNil: [ 		Current reset.		Current := nil]! !!DrGeoLanServer class methodsFor: 'accessing' stamp: ''!port	^ 9595! !!DrGeoLanServer class methodsFor: 'accessing' stamp: ''!new	self error: 'Use #current message to access to the DrGeoLanServer instance.'! !!DrGeoMySharesDelegate commentStamp: ''!I export the Dr. Geo sketch in the myShares folder!!DrGeoMySharesDelegate methodsFor: 'as yet unclassified' stamp: ''!allFiles	^ self filesWith: #('fgeo' 'png')! !!DrGeoMySharesDelegate methodsFor: 'as yet unclassified' stamp: ''!responseSharedSketches	^ ZnResponse ok: (ZnEntity text: 		(String streamContents: [:str |			self sketchFiles do: [:file | str << file  << Character lf]] ))! !!DrGeoMySharesDelegate methodsFor: 'as yet unclassified' stamp: ''!sketchFiles	^ self filesWith: #('fgeo')! !!DrGeoMySharesDelegate methodsFor: 'public' stamp: ''!handleRequest: request	request uri isSlash ifTrue: [^ self responseSharedSketches ].	request uri path = 'all'  ifTrue: [^ self responseAllFiles].	request uri firstPathSegment = 'sketch' ifTrue: [^ self responseSketch: request uri lastPathSegment].	request uri firstPathSegment = 'preview' ifTrue: [^ self responsePng: request uri lastPathSegment].	^ ZnResponse notFound: request uri! !!DrGeoMySharesDelegate methodsFor: 'as yet unclassified' stamp: ''!responseAllFiles	^ ZnResponse ok: (ZnEntity text: 		(String streamContents: [:str |			self allFiles do: [:file | str << file  << Character lf]] ))! !!DrGeoMySharesDelegate methodsFor: 'as yet unclassified' stamp: ''!filesWith: theExtensions	^ (DrGeoSystem mySharesPath entries 		select: [ :each | theExtensions includes: each extension ] 		thenCollect: [ :each | each basename ]) sort: [ :a :b | a asLowercase <= b asLowercase]! !!DrGeoMySharesDelegate methodsFor: 'as yet unclassified' stamp: ''!responsePng: aSketch	| file |	file := DrGeoSystem mySharesPath / aSketch.	^ ZnResponse ok: (ZnEntity 		with: file binaryReadStream contents		type: file mimeTypes first)! !!DrGeoMySharesDelegate methodsFor: 'as yet unclassified' stamp: ''!responseSketch: aSketch	^ ZnResponse ok: (ZnEntity text: (DrGeoSystem mySharesPath / aSketch) contents )! !!DrGeoNode methodsFor: 'accessing' stamp: ''!childrenItems	| children |	children := OrderedCollection with: self item nodeType.	self item parents isEmptyOrNil ifFalse: [children addAll: self item parents].	^ children ! !!DrGeoNode methodsFor: 'accessing' stamp: ''!childNodeClassFromItem: anItem	^ DrGeoAttributeNode! !!DrGeoPresenter commentStamp: ''!A DrGPresenter is a presenter for the DrGeo app.It is the interface to callback and button definition.Instance Variables	resource: 			a locale or remote resource repository where was recently saved a sketch	selectedTool:		a symbol representing the selected UI tool!!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createAngleBisector	self selectTool: DrGFlyBuildTool with: DrGAngleBisectorBuilder.	selectedTool := #angleBisector.	self changed! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!gridOnOff	self area gridVisibleOnOff.	self area updateGrid.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!executeMacro	self selectTool: DrGMacroPlayTool with: DrGMacroPlayer.	selectedTool := #macroExecute.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createPointByCoordinates	self selectTool: DrGBuildTool with: DrGPointByCoordinatesBuilder.	selectedTool := #pointDefinedByCoordinates.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createTranslation	self selectTool: DrGBuildTool with: DrGTranslationBuilder.	selectedTool := #translation.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createDistance	self selectTool: DrGBuildTool with: DrGValueBuilder.	selectedTool := #distance.	self changed! !!DrGeoPresenter methodsFor: 'testing' stamp: ''!isAxesVisible	^ self area 		ifNotNil: [self area axesVisible]		ifNil: [false]! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!saveFigureAt	self askForFileToSave ifNotNil: [:rsrc | self save: rsrc]! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!newFigure	DrGeoSystem ifTablet: [		(UIManager default 			confirm: 'Close the existing sketch and create an empty one?' translated 			trueChoice: 'New sketch' translated			falseChoice: 'No, keep this sketch' translated) ifTrue: [				self newFigureAndForgetPrevious].		^self].	DrGeo new! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!openCustomizerDialog	controlsManager customizerDialog ! !!DrGeoPresenter methodsFor: 'updating' stamp: ''!readyToPlayMacro	"readyToBuild event, the builder is ready to play a macro (enought input items), request to the domain the construction of the math items under the builder"	self domain playMacro: self tool builder in: app.	self move! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!saveMultiple"Make a selection of figures and macro-constructions to save"	|items dialog stream|	items := OrderedCollection new.	items addAll: DrGeo figuresArray;	addAll: DrGeo macrosArray.	dialog := (SelectItemDialog items: items)		textFont: StandardFonts defaultFont;		title:  'Save Multiple' translated;		text: 'Select the sketches and macros you want to save:' translated.	(self view openModal: dialog) cancelled ifTrue: [ ^self].	[self askForSketchToKeep ifNotNil: [:rsrc |		items := items select: [:item | item third contents = true] thenCollect: [:item | item first].		self saveWithinLimitedTime: [			stream := WriteStream on: (String new: 4000).			DrGeoXml new saveMultiple: items on: stream.			rsrc put: stream.			rsrc 				put:  (items detect: [:item | item class = DrGeo] ifNone: [DrGeo]) preview 				into: (rsrc previewFilenameFor: rsrc sketchFilename )].		stream close.		self app saved: true]] ensure: [DrGLoader stop]! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!createMultipleString	^ (self isCreateMultipleMode		ifTrue: ['<on>']		ifFalse: ['<off>'])		, 'create multiple' translated! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createCoordinatePoint	self selectTool: DrGBuildTool with: DrGPointByCoordinatesBuilder.	selectedTool := #pointDefinedByCoordindates.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createFreePoint	self selectTool: DrGFlyPointBuildTool with: DrGFlyPointBuilder.	selectedTool := #freePoint.	self changed! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!model: aModel	model := aModel! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createPolygonRegular	self selectTool: DrGFlyBuildTool with: DrGPolygonRegularBuilder.	selectedTool := #polygonRegular.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createReflection	self selectTool: DrGBuildTool with: DrGReflectionBuilder.	selectedTool := #axialSymmetry.	self changed! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!askForSketchToKeep| dialog newResource answer|	DrGeoSystem showVirtualKeyboard: true.	dialog := DrGFilenameDialog new		textFont: UITheme current textFont;		title: 'Filename' translated;		text: 'Name the sketch to keep.' translated.	dialog openInWorld.	self view openModal: dialog.	DrGeoSystem showVirtualKeyboard: false.	(dialog cancelled or: [dialog entryText isNil]) ifTrue: [^ nil].	dialog network 		ifTrue: [newResource := DrGeoSystem networkResourcesCreateShare] 		ifFalse: [newResource := DrGeoSystem mySketchResources].	newResource ifNotNil: [newResource sketchFilename: dialog entryText, '.fgeo'].	^ newResource! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!style	selectedTool := #style.	self selectTool: DrGStyleTool.	self changed: #selectedTool.	app redrawCostumes.! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!selection: aSelection	aSelection 		ifNil: [selection := nil]		ifNotNil:			[selection := aSelection select: [:aMorph |				aMorph isMorphCostume]]! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createArc	self selectTool: DrGFlyBuildTool with: DrGArcBuilder.	selectedTool := #arc.	self changed! !!DrGeoPresenter methodsFor: 'helpers' stamp: ''!createScriptFrom: dialog"Build a new script from the dialog, return the newly created script object"	|scriptClass stream|	scriptClass := DrGeoUserScript 		subclass: ('DrGeoScript', dialog scriptName hash printString) asSymbol		instanceVariableNames: '' 		classVariableNames: '' 		category:  'DrGeoII-User'.	"name"	stream := WriteStream on: String new.	stream << 'scriptName' << Character cr		<< Character tab << $^ 		<< dialog scriptName storeString.	scriptClass class compile: stream contents classified: 'public'.	"description"	stream := WriteStream on: String new.	stream << 'description' << Character cr		<< Character tab << $^  		<< dialog description string storeString.	scriptClass class compile: stream contents classified: 'public'.	"argumentsType"	stream := WriteStream on: String new.	stream << 'newArgumentsType' << Character cr		<< Character tab	<< $^ <<${.	dialog argumentsType 		do: [:type| stream << type printString] 		separatedBy: [stream << $.].	stream << $}.	scriptClass class compile: stream contents classified: 'private'.	"compute"	stream := WriteStream on: String new.	stream << 'compute' << Character cr		<< '"Edit me"' << Character cr		<< Character tab	<< $^ << '1+1'.	scriptClass compile: stream contents classified: 'public'.		^ scriptClass! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!openFigureAt"Open a sketch at an arbitrary location"	DrGeo openFigure ! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!askForFileToSave"Save a sketch at an arbitrary location"| file rsce|	file := self view		fileSave: 'Pick a Dr. Geo file name' translated 		extensions: #('fgeo')		path: (filename ifNil: [DrGeoSystem mySketchesPath]).	file  ifNotNil: [		rsce := DrGDirectoryLocal new 		sketchFilename: file basename;		location: file parent pathString]. 	^ rsce ! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!tool	^tool! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!area	^ self view ifNotNil: [self view area]! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!save: rsrc"Save this resource and make it our default one"| stream |	[self saveWithinLimitedTime: [		DrGLoader start.		resource := rsrc.		"not yet saved"		self view title: '* ', resource sketchFilename asFileReference basenameWithoutExtension capitalized.		stream := WriteStream on: (String new: 4000).		DrGeoXml new 			app: self app; 			saveOn: stream.		resource put: stream. 		resource put: self app preview into: (resource previewFilenameFor: resource sketchFilename )].	self app saved: true.	stream close.	rsrc close]		on: Error 		do: [:ex | DrGLoader stop. 			resource ifNotNil: [resource close].			resource := nil.			stream close. "self halt."			UIManager default abort: 'I can''t save the sketch.Check the local resource or the server.' translated].	DrGLoader stop! !!DrGeoPresenter methodsFor: 'tool' stamp: ''!selectTool: aToolClassName	self tool: nil.	self tool: (aToolClassName new presenter: self).	self triggerEvent: #selectedToolFromTab! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!useScript	self selectTool: DrGScriptPlayTool with: DrGScriptPlayer.	selectedTool := #useScript.	self changed! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!model	^model! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!move	self selectTool: DrGSelectTool.	selectedTool := #move.	self changed! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!animate1	self animate.	self tool animateStep: 0.01.! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createCircle	DrGeoSystem ifPremium: [		self selectTool: DrGFlyBuildTouchTool with: DrGCircleBuilder.		selectedTool := #circle.		self changed]! !!DrGeoPresenter methodsFor: 'updating' stamp: ''!readyToBuildClone	|answer|	"readyToBuild event sent from the SelectTool. The builder is ready to clone an items and its parents,	 request to the domain the construction of the math item under the builder"	answer := self domain createMathItem: self tool builder.	self tool grabClone: answer first last.! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!scale: increment	self area scale: increment.! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createSymmetry	self selectTool: DrGBuildTool with: DrGSymmetryBuilder.	selectedTool := #centralSymmetry.	self changed! !!DrGeoPresenter methodsFor: 'tool' stamp: ''!selectionCleanUp|createdItem|	"a mathItem is just been created, do some clean up"	self tool reset.	createdItem := self domain factory last.	"eventually if not in createMultipleMode we escape from this tool"	(createdItem isFreePointItem 		or: [createdItem isIntersectionPointItem 		or: [createdItem isPointItemOnCurve]])			ifFalse: [self selectToolAfterBuilding].	((tool class = DrGFlyPointBuildTool) or: [selectedTool = #intersection]) ifTrue: [		self selectToolAfterBuilding].! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!editScript	"We force to select mode, then open a browser on the script classes"	self move.	DrGScriptBrowser open: 'Edit or create scripts' translated.	SystemAnnouncer uniqueInstance weak when: MethodModified send: #update: to: self domain.	self triggerEvent: #selectedToolFromTab.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!executeMacro: aMacro	self selectTool: DrGMacroPlayTool with: DrGMacroPlayerHeadless.	selectedTool := #macroExecute. 	self tool builder selectedMacro: aMacro.	self tool switchState: DrGMacroPlayToolStateSelect.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createCoordinates	self selectTool: DrGBuildTool with: DrGCoordinatesBuilder.	selectedTool := #coordinates.	self changed! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!saveFigure	DrGeoSystem ifPremium: [		resource 			ifNil: [self saveFigureAs]			ifNotNil: [				resource ensureConnection.				self save: resource]]! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!quit	DrGeo quit.! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createVector	self selectTool: DrGFlyBuildTouchTool with: DrGVectorBuilder.	selectedTool := #vector.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createLocus	self selectTool: DrGBuildTool with: DrGLocusBuilder.	selectedTool := #locus.	self changed! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!controlsManager: anObject	controlsManager := anObject.	controlsManager presenter: self.! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!exportToBitmap	| stream |	stream := self askForBitmapToExport.	stream ifNotNil: [ | form originalBackgroundColor labels originalLabelColor |		"Before exporting to bitmap:		paint the background as white and ensure all labels are black"		originalBackgroundColor := self area color.		self area color: Color white.		form := (Form extent: self area extent depth: 32) fillWithColor: Color white.		labels := self area labels.		labels ifNotEmpty: [originalLabelColor := labels first color].		labels do: [:each | each color: Color black].		World doOneCycle.		self area owner athensSurface displayOnMorphicCanvas: form getCanvas at: 0 @ 0.		self area color: originalBackgroundColor.		labels do: [:each | each color: originalLabelColor].			World doOneCycle.		PNGReadWriter putForm: form copy onStream: stream	]! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!askForBitmapToExport	| answer|	answer := UIManager default 		request: 'Name the bitmap to export:' translated		initialAnswer: app title.	^ answer 		ifNotNil: [(DrGeoSystem myExportsPath / (answer, '.png')) ensureDelete binaryWriteStream]! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createRay	self selectTool: DrGFlyBuildTouchTool with: DrGRayBuilder.	selectedTool := #ray.	self changed! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!animate	selectedTool == #animate 		ifTrue: ["just close the tabl"			self triggerEvent: #selectedToolFromTab] 		ifFalse: [			self selectTool: DrGAnimateTool.			selectedTool := #animate].	self changed! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!help	DrGeoSystem openURI: 'http://www.drgeo.eu/tablet'! !!DrGeoPresenter methodsFor: 'initialize-release' stamp: ''!initialize	super initialize.	controlsManager := DrGUIControlsManager for: self.	self move.	isCreateMultipleMode := false.	gridStuck := false.! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!view	^ app ifNotNil: [app view]! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createArcCenter	self selectTool: DrGFlyBuildTool with: DrGArcCenterBuilder.	selectedTool := #arcCenter.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!useScript: aScript	self selectTool: DrGScriptPlayTool with: DrGScriptPlayerHeadless.	selectedTool := #useScript.	self tool builder scriptClass: aScript.	self tool switchState: DrGMacroPlayToolStateSelect.	self changed! !!DrGeoPresenter methodsFor: 'updating' stamp: ''!readyToBuildMacro	"readyToBuild event, the builder is ready to build a macro, request to the domain the construction of the math item under the builder"	self domain createMacro: self tool builder.	self move! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!moveOx: increment	self area moveOx: increment.! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!editSelection	self selectTool: DrGEditGroupTool! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!eraser	selectedTool := #eraser.	self selectTool: DrGDeleteTool.	self changed: #selectedTool.	app redrawCostumes.! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!deleteMacro	self selectTool: DrGSelectTool.	selectedTool := #deleteMacro.	self changed! !!DrGeoPresenter methodsFor: 'tool' stamp: ''!selectTool: aToolClassName with: aBuilderClassName 	self		tool: ((aToolClassName with: aBuilderClassName)				presenter: self).	self domain changed: #selectedTool.	self triggerEvent: #selectedToolFromTab! !!DrGeoPresenter methodsFor: 'updating' stamp: ''!updateSelection	(self isTool: #move) ifTrue: [|node| 		node := self view tree selection lastSelectedNode.		node isNil 			ifTrue: [self tool costume: nil]			ifFalse: [node item isMathItem ifTrue: [				self tool costume: (app costumeOf: node item)]]]! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!axesOnOff	self area axesVisibleOnOff.	self area updateGrid.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createPerpendicularBisector	self selectTool: DrGFlyBuildTouchTool with: DrGPerpendicularBisectorBuilder.	selectedTool := #perpendicularBisector.	self changed! !!DrGeoPresenter methodsFor: 'initialize-release' stamp: ''!release	tool release.	model release.	self domain release.	controlsManager myRelease.	app := nil.	controlsManager := nil.	model := nil.	filename := nil.	resource := nil.! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!createMultipleOnOff	isCreateMultipleMode := isCreateMultipleMode not.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createLine	self selectTool: DrGFlyBuildTouchTool with: DrGLineBuilder.	selectedTool := #line.	self changed! !!DrGeoPresenter methodsFor: 'updating' stamp: ''!readyToBuild	|answer|	"readyToBuild event, the builder is ready to build, request to the domain the construction of the math item under the builder"	answer := self domain createMathItem: self tool builder.	answer last ifFalse: [(app costumeOf: answer first) unhide].	self selectionCleanUp.	self domain updateAllMathItems.	app saved: false.! !!DrGeoPresenter methodsFor: 'testing' stamp: ''!isCreateMultipleMode	^isCreateMultipleMode! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createAngle	self selectTool: DrGBuildTool with: DrGAngleBuilder.	selectedTool := #angle.	self changed! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!griddedString	^ (self isGridded		ifTrue: ['<on>']		ifFalse: ['<off>'])		, 'snap to grid' translated! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!moveOy: increment	self area moveOy: increment.! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createText	self selectTool: DrGBuildTool with: DrGTextBuilder.	selectedTool := #text.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createRotation	self selectTool: DrGBuildTool with: DrGRotationBuilder.	selectedTool := #rotation.	self changed! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!app	^ app! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!animate2	self animate.	self tool animateStep: 0.043.! !!DrGeoPresenter methodsFor: 'tool' stamp: ''!selectToolAfterBuilding	self isCreateMultipleMode		ifFalse:			[self move]! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createSegment	self selectTool: DrGFlyBuildTouchTool with: DrGSegmentBuilder.	selectedTool := #segment.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!openItemViewer	self selectTool: DrGViewerTool.	self changed! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!saveWithinLimitedTime: aBlock	[aBlock value]		valueWithin: 10 seconds		onTimeout: 				[DrGLoader stop.			UIManager default abort: 'I can''t save the sketch.Check the local resource or the server.' translated].! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!saveFigureAs	self askForSketchToKeep ifNotNil: [ :rsrc | self save: rsrc ]! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!gridStuckOnOff	gridStuck := gridStuck not.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createMacro	self selectTool: DrGMacroBuildTool with: DrGMacroBuilder.	selectedTool := #macroBuild.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createScript	|browser dialog scriptClass|	"We force to select mode as we do not interact with the sketch"		self move.	self triggerEvent: #selectedToolFromTab.	self changed.	dialog := DrGScriptDesignerDialog new.	DrGeoSystem ifTablet: [dialog topCentered].	dialog openModal.	dialog cancelled ifTrue: [^self].	"Create the script class, then open a browser on"	scriptClass := self createScriptFrom: dialog.	DrGScriptEditor openOnScript: scriptClass."	browser := Nautilus openOnClass: scriptClass selector: #compute."	SystemAnnouncer uniqueInstance weak when: MethodModified send: #update: to: self domain.! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createMiddlePoint	self selectTool: DrGBuildTool with: DrGMiddleBuilder.	selectedTool := #middle.	self changed! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!redo	self domain redo.	self domain updateAllMathItems.	app saved: false! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!captureSelection|mathItems|	self selection: self area selection.	self selection ifNotNil:		[mathItems := self selection collect: [:aMorph |				aMorph costume mathItem].		self domain createCompositeItem: mathItems].	self area selection: nil! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!app: aDrgeo	app := aDrgeo! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!openFigureThumbnail	DrGeoSystem isTablet		ifTrue: [ |answer|			answer := UIManager default 				confirm: 'Close the existing sketch and open a new one?' translated 				trueChoice: 'Open sketch' translated				falseChoice: 'No, keep this sketch' translated.			answer  ifTrue: [	DrGeo openFigureThumbnail: self view]]		ifFalse: ["we don't close the existing view when not in tablet"			DrGeo openFigureThumbnail: nil]! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!selection	^selection! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!tool: aTool 	tool		ifNotNil: [tool release].	tool := aTool.	tool ifNotNil: [tool registerDependant: self].	(tool notNil and: [self view notNil])  ifTrue: [self view statusMessage:  tool description]! !!DrGeoPresenter methodsFor: 'testing' stamp: ''!isTool: symbolTool"Do we have this symbolTool selected"	^ selectedTool == symbolTool ! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!animate4	self animate.	self tool animateStep: 0.1! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createHomothety	self selectTool: DrGBuildTool with: DrGHomothetyBuilder.	selectedTool := #scale.	self changed! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!animate3	self animate.	self tool animateStep: 0.076.! !!DrGeoPresenter methodsFor: 'testing' stamp: ''!isGridded	^ gridStuck! !!DrGeoPresenter methodsFor: 'testing' stamp: ''!isForceVisible	"We force unvisible costume to be visible when in style mode only"	^ (self isTool: #style) or: [self isTool: #eraser]! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createParallel	DrGeoSystem ifPremium: [		self selectTool: DrGFlyBuildTouchTool with: DrGParallelBuilder.		selectedTool := #parallel.		self changed]! !!DrGeoPresenter methodsFor: 'updating' stamp: ''!deleteMathItem: aCostume	self domain deleteMathItem: aCostume mathItem.	self domain updateAllMathItems! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createPolygon	self selectTool: DrGFlyBuildTool with: DrGPolygonBuilder.	selectedTool := #polygon.	self changed! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createPerpendicular	DrGeoSystem ifPremium: [		self selectTool: DrGFlyBuildTouchTool with: DrGPerpendicularBuilder.		selectedTool := #perpendicular.		self changed]! !!DrGeoPresenter methodsFor: 'testing' stamp: ''!isGridVisible	^ self area 		ifNotNil: [self area gridVisible]		ifNil: [false]! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!openNewFigureThumbnail	DrGeo openFigureThumbnail: nil! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!createPointIntersection	self selectTool: DrGBuildTool with: DrGPointIntersectionBuilder.	selectedTool := #intersection.	self changed! !!DrGeoPresenter methodsFor: 'callback canvas' stamp: ''!undo	self tool resetForFreshStart.	self domain undo.	self domain updateAllMathItems.	app saved: false! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!controlsManager	^ controlsManager! !!DrGeoPresenter methodsFor: 'tool' stamp: ''!openViewerForCostume: aCostume	aCostume openViewer.	self selectTool: DrGSelectTool! !!DrGeoPresenter methodsFor: 'callback create' stamp: ''!property 	self selectTool: DrGPropertyTool.	selectedTool := #property.	self changed! !!DrGeoPresenter methodsFor: 'callback UI' stamp: ''!newFigureAndForgetPrevious	DrGeo newFullScreen.	self view deleteWithoutConfirmation! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!domain	^app domain ! !!DrGeoPresenter methodsFor: 'accessing' stamp: ''!gridString	^ (self isGridVisible		ifTrue: ['<on>']		ifFalse: ['<off>'])		, 'grid' translated! !!DrGeoPresenter class methodsFor: 'instance creation' stamp: ''!with: aDrgeo 	| presenter |	presenter := self basicNew app: aDrgeo."	presenter		model: ((DrGGeometryModel in: aDrgeoModel domain)				presenter: presenter)."	presenter initialize.	^ presenter! !!DrGeoPresenter class methodsFor: 'instance creation' stamp: ''!for: aDrgeo 	| presenter |	presenter := self basicNew app: aDrgeo."	presenter		model: ((DrGGeometryModel in: aDrgeoModel domain)				presenter: presenter)."	presenter initialize.	^ presenter! !!DrGeoScript64504876 methodsFor: 'as yet unclassified' stamp: ''!toggleDirection	self direction = 1 		ifTrue: [ direction := -1 ]		ifFalse: [ direction := 1 ]! !!DrGeoScript64504876 methodsFor: 'public' stamp: ''!compute"Edit me"	self costume1 style mark: (#(#mark1 #mark1 #mark2 #mark2 #mark3 #mark3) at: self counter).	self incCounter.	^ self class scriptName,  'hello !! mais ce n''est pas un script !!!!!!'! !!DrGeoScript64504876 methodsFor: 'as yet unclassified' stamp: ''!direction	^ direction ifNil: [ direction := 1 ]! !!DrGeoScript64504876 methodsFor: 'as yet unclassified' stamp: ''!counter	counter ifNil: [ counter := 1 ].	counter < 1 ifTrue: [ counter :=1 ].	counter > 6 ifTrue: [ counter := 6 ].	^ counter! !!DrGeoScript64504876 methodsFor: 'as yet unclassified' stamp: ''!incCounter	counter := counter + self direction.	(counter > 6 or: [counter < 1]) ifTrue: [ 		self toggleDirection.		counter := counter + self direction ]! !!DrGeoScript64504876 class methodsFor: 'public' stamp: ''!scriptName	^'Marque sur segment'! !!DrGeoScript64504876 class methodsFor: 'public' stamp: ''!description	^'Apply a random mark over a segment.'! !!DrGeoScript64504876 class methodsFor: 'private' stamp: ''!newArgumentsType	^{DrGSegmentItem}! !!DrGeoScriptParallelogram methodsFor: 'public' stamp: ''!isParallelogram	|   points mid1 mid2|	points := self arg1 points.	mid1 := points first + points third / 2.	mid2 := points second + points fourth / 2.	^ self isQuad and: [mid1 = mid2]! !!DrGeoScriptParallelogram methodsFor: 'public' stamp: ''!compute	self paintRed.	^ self isParallelogram		ifTrue: [ 			self paintBlue.			'Bravo !! Je suis un parallélogramme.' ]		ifFalse: [  | message |			message := ReadWriteStream on: String new.			message << 'Voyons, je ne suis pas un parallélogramme car :'.			self isQuad 				ifFalse: [ message crtab << '- je n''ai pas 4 sommets']				ifTrue: [ 					self isOppositeSideIsometric ifFalse: [message crtab << '- mes côtés opposés ne sont pas isométriques'].					self isOppositeSideParallel ifFalse: [ message crtab << '- mes côtés opposés ne sont pas parallèles' ]].				message contents]! !!DrGeoScriptParallelogram methodsFor: 'public' stamp: ''!isQuad	^ self arg1 points size = 4! !!DrGeoScriptParallelogram methodsFor: 'public' stamp: ''!paintBlue	self costume1 style color: Color blue! !!DrGeoScriptParallelogram methodsFor: 'public' stamp: ''!isOppositeSideIsometric	| side1 side2 side3 side4 points|	points := self arg1 points.	side1 := points first - points second.	side2 := points second - points third.	side3 := points third - points fourth.	side4 := points fourth - points first.	^ side1 r = side3 r and: [side2 r = side4 r]  ! !!DrGeoScriptParallelogram methodsFor: 'public' stamp: ''!isOppositeSideParallel	| side1 side2 side3 side4 points|	points := self arg1 points.	side1 := points first - points second.	side2 := points second - points third.	side3 := points third - points fourth.	side4 := points fourth - points first.	^ ((side1 crossProduct: side3) closeTo: 0)  and: [(side2 crossProduct: side4) closeTo: 0]  ! !!DrGeoScriptParallelogram methodsFor: 'public' stamp: ''!paintRed	self costume1 style color: Color red! !!DrGeoScriptParallelogram class methodsFor: 'public' stamp: ''!scriptName	^'Est un parallélogramme ?'! !!DrGeoScriptParallelogram class methodsFor: 'public' stamp: ''!description	^'Je vérifie si un quadrilatère est un parallélogramme.Pour m''utiliser :1. Clique sur un polygone ;2. Clique quelque part sur le fond de la figure.Je colorie en bleu le quadrilatère lorsque c''est un parallélogramme, sinon j''indique ce qui ne va pas.'! !!DrGeoScriptParallelogram class methodsFor: 'private' stamp: ''!newArgumentsType	^{DrGPolygonItem}! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!compute	self paintRed.	^ self isRectangle 		ifTrue: [ 			self paintBlue.			'Bravo !! Je suis un rectangle.' ]		ifFalse: [  | message |			message := ReadWriteStream on: String new.			message << 'Voyons, je ne suis pas un rectangle car :'.			self isQuad 				ifFalse: [ message crtab << '- je n''ai pas 4 sommets']				ifTrue: [ 					self isOppositeSideIsometric ifFalse: [message crtab << '- mes côtés opposés ne sont pas isométriques'].					self isOppositeSideParallel ifFalse: [ message crtab << '- mes côtés opposés ne sont pas parallèles' ].					self isRectangleAngle ifFalse: [message crtab << '- mes sommets ne sont pas droits']].				message contents]! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!isQuad	^ self arg1 points size = 4! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!paintBlue	self costume1 style color: Color blue! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!isOppositeSideIsometric	| side1 side2 side3 side4 points|	points := self arg1 points.	side1 := points first - points second.	side2 := points second - points third.	side3 := points third - points fourth.	side4 := points fourth - points first.	^ side1 r = side3 r and: [side2 r = side4 r]  ! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!isOppositeSideParallel	| side1 side2 side3 side4 points|	points := self arg1 points.	side1 := points first - points second.	side2 := points second - points third.	side3 := points third - points fourth.	side4 := points fourth - points first.	^ ((side1 crossProduct: side3) closeTo: 0)  and: [(side2 crossProduct: side4) closeTo: 0]  ! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!paintRed	self costume1 style color: Color red! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!isRectangleAngle	| summits sides |	summits := self arg1 points.	sides := summits withIndexCollect: [:p :i | p - (summits at: i + 1 ifAbsent: [summits first])].	sides withIndexDo: [ :s :i |		((s dotProduct: (sides at: i + 1 ifAbsent: [sides first])) closeTo: 0) 			ifFalse: [ ^ false]].	^ true! !!DrGeoScriptRectangle methodsFor: 'public' stamp: ''!isRectangle	| diag1 diag2 points mid1 mid2|		points := self arg1 points.	diag1 := points first - points third.	mid1 := points first + points third / 2.	diag2 := points second - points fourth.	mid2 := points second + points fourth / 2.	^ self isQuad and: [diag1 r = diag2 r and: [mid1 = mid2]]! !!DrGeoScriptRectangle class methodsFor: 'public' stamp: ''!scriptName	^'Est rectangle ?'! !!DrGeoScriptRectangle class methodsFor: 'public' stamp: ''!description	^'Je vérifie si un quadrilatère est un rectangle.Pour m''utiliser :1. Clique sur un polygone ;2. Clique quelque part sur le fond de la figure.Je colorie en bleu le quadrilatère lorsque c''est un rectangle, sinon j''indique ce qui ne va pas.'! !!DrGeoScriptRectangle class methodsFor: 'private' stamp: ''!newArgumentsType	^{DrGPolygonItem}! !!DrGeoScriptRhombus methodsFor: 'public' stamp: ''!isRhombus	|   points mid1 mid2 diag1 diag2 |	points := self arg1 points.	diag1 := points first - points third.	diag2 := points second - points fourth.	mid1 := points first + points third / 2.	mid2 := points second + points fourth / 2.	^ self isQuad and: [mid1 = mid2 and: [(diag1 dotProduct: diag2) closeTo: 0]]! !!DrGeoScriptRhombus methodsFor: 'public' stamp: ''!compute	self paintRed.	^ self isRhombus		ifTrue: [ 			self paintBlue.			'Bravo !! Je suis un losange.' ]		ifFalse: [  | message |			message := ReadWriteStream on: String new.			message << 'Voyons, je ne suis pas un losange car :'.			self isQuad 				ifFalse: [ message crtab << '- je n''ai pas 4 sommets']				ifTrue: [ 					self isIsometric ifFalse: [message crtab << '- mes côtés ne sont pas isométriques'].					self isOppositeSideParallel ifFalse: [ message crtab << '- mes côtés opposés ne sont pas parallèles' ]].				message contents]! !!DrGeoScriptRhombus methodsFor: 'public' stamp: ''!isIsometric	| side1 |	side1 := self arg1 sidesLength first.	^ self arg1 sidesLength		detect: [ :aSide| (aSide closeTo: side1) not ]		ifFound: [ false ]		ifNone: [ true ]! !!DrGeoScriptRhombus methodsFor: 'public' stamp: ''!isQuad	^ self arg1 points size = 4! !!DrGeoScriptRhombus methodsFor: 'public' stamp: ''!paintBlue	self costume1 style color: Color blue! !!DrGeoScriptRhombus methodsFor: 'public' stamp: ''!isOppositeSideParallel	| side1 side2 side3 side4 points|	points := self arg1 points.	side1 := points first - points second.	side2 := points second - points third.	side3 := points third - points fourth.	side4 := points fourth - points first.	^ ((side1 crossProduct: side3) closeTo: 0)  and: [(side2 crossProduct: side4) closeTo: 0]  ! !!DrGeoScriptRhombus methodsFor: 'public' stamp: ''!paintRed	self costume1 style color: Color red! !!DrGeoScriptRhombus class methodsFor: 'public' stamp: ''!scriptName	^'Est losange ?'! !!DrGeoScriptRhombus class methodsFor: 'public' stamp: ''!description	^'Je vérifie si un quadrilatère est un losange.Pour m''utiliser :1. Clique sur un polygone ;2. Clique quelque part sur le fond de la figure.Je colorie en bleu le quadrilatère lorsque c''est un losange, sinon j''indique ce qui ne va pas.'! !!DrGeoScriptRhombus class methodsFor: 'private' stamp: ''!newArgumentsType	^{DrGPolygonItem}! !!DrGeoScriptSquare methodsFor: 'public' stamp: ''!compute	self paintRed.	^ self isSquare 		ifTrue:  [ 			self paintBlue.			'Bravo !! Je suis un carré.' ]		ifFalse: [ | message |			message := ReadWriteStream on: String new.			message << 'Voyons, je ne suis pas un carré car :'.			self isQuad 				ifFalse: [ message crtab << '- je n''ai pas 4 sommets']				ifTrue: [					self isIsometric ifFalse: [message crtab << '- mes côtés ne sont pas isométriques'].					self isRectangleAngle ifFalse: [message crtab << '- mes sommets ne sont pas droits']].			message contents].	 ! !!DrGeoScriptSquare methodsFor: 'public' stamp: ''!isIsometric	| side1 |	side1 := self arg1 sidesLength first.	^ self arg1 sidesLength		detect: [ :aSide| (aSide closeTo: side1) not ]		ifFound: [ false ]		ifNone: [ true ]! !!DrGeoScriptSquare methodsFor: 'public' stamp: ''!isQuad	^ self arg1 points size = 4! !!DrGeoScriptSquare methodsFor: 'public' stamp: ''!paintBlue	self costume1 style color: Color blue! !!DrGeoScriptSquare methodsFor: 'public' stamp: ''!isSquare	| diag1 diag2 points mid1 mid2 |	points := self arg1 points.	diag1 := points first - points third.	mid1 := points first + points third / 2.	diag2 := points second - points fourth.	mid2 := points second + points fourth / 2.	^ self isQuad and: [(diag1 r closeTo: diag2 r)  and: [(mid1 closeTo: mid2) and: [(diag1 dotProduct: diag2) closeTo: 0]]]! !!DrGeoScriptSquare methodsFor: 'public' stamp: ''!paintRed	self costume1 style color: Color red! !!DrGeoScriptSquare methodsFor: 'public' stamp: ''!isRectangleAngle	| summits sides |	summits := self arg1 points.	sides := summits withIndexCollect: [:p :i | p - (summits at: i + 1 ifAbsent: [summits first])].	sides withIndexDo: [ :s :i |		((s dotProduct: (sides at: i + 1 ifAbsent: [sides first])) closeTo: 0) 			ifFalse: [ ^ false]].	^ true! !!DrGeoScriptSquare class methodsFor: 'public' stamp: ''!scriptName	^'Est carré ?'! !!DrGeoScriptSquare class methodsFor: 'public' stamp: ''!description	^'Je vérifie si un quadrilatère est un carré.Pour m''utiliser :1. Clique sur un polygone ;2. Clique quelque part sur le fond de la figure.Je colorie en bleu le quadrilatère lorsque c''est un carré, sinon j''indique ce qui ne va pas.'! !!DrGeoScriptSquare class methodsFor: 'private' stamp: ''!newArgumentsType	^{DrGPolygonItem}! !!DrGeoSystem commentStamp: ''!I map settings/preferences to the underneath hardware/os plateformPattern: strategy(SettingBrowser forKeywords: #('drgeosettings')) open.!!DrGeoSystem class methodsFor: 'user interface' stamp: ''!showVirtualKeyboard: boolean	platform ifNotNil: [		platform showVirtualKeyboard: boolean.		boolean ifFalse: [World primaryHand releaseAllFocus]]! !!DrGeoSystem class methodsFor: 'font' stamp: ''!smallFontSize	^ platform smallFontSize! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isAndroid	^ platform isAndroid! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!drgeoSettingsOn: aBuilder	<drgeosettings>	(aBuilder group: #drgeoNet)		label: 'Network';		description: 'Dr. Geo network settings' translated;		noOrdering;		with: [			(aBuilder setting: #useNetwork)				label: 'Use network resources' translated;				noOrdering;				description: 'If checked you can set a server name, user and password to load and to save sketches.' translated;				with: [					(aBuilder pickOne: #networkType)						label: 'Server type' translated;						description: 'The server type, FTP or WebDav';						default: #ftp;						domainValues: #(#ftp #http).					(aBuilder setting: #host)						label: 'Host' translated;						description: 'The server (i.e. ftp.drgeo.eu)' translated .					(aBuilder setting: #networkUser)						label: 'User name' translated;						description: 'The server user name' translated.					(aBuilder setting: #networkPassword)						type: #Password;						label: 'Password' translated;						description: 'The user password' translated.					(aBuilder setting: #networkShare)						label: 'Share' translated;						description: 'The server resources directory (i.e. private/drgeo)' translated ]]! !!DrGeoSystem class methodsFor: 'system startup' stamp: ''!startUp	(expirationDate notNil and: [expirationDate < Date today]) ifTrue: 		[Smalltalk addDeferredStartupAction: 			[self inform: 'This beta version expired!!'.			Smalltalk quitPrimitive]].	DrGeoSystem reset.	platform startUp.	! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!lanShareSetting: aBuilder	<drgeosettings>	(aBuilder setting: #lanShare)		label: 'Local Network Share' translated;		description: 'If checked I share on the local area network the sketch files in my DrGeo.app/MyShares folder.' translated;		parent: #drgeoNet;		target: self! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!ifTablet: aBlock	^ self isTablet ifTrue: [aBlock value]! !!DrGeoSystem class methodsFor: 'font' stamp: ''!canvasFont: size	^ LogicalFont familyName: self fontName pointSize: size! !!DrGeoSystem class methodsFor: 'font' stamp: ''!fontName	^ Locale current isoLanguage = 'ko'		ifTrue: ['UnDotum']		ifFalse: ['WenQuanYi Micro Hei'] ! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!beAndroid	"self beAndroid"	platform := DrGAndroid new.	self addStartUp! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!lanShare	^ LanShare ifNil: [ LanShare := false ]! !!DrGeoSystem class methodsFor: 'path' stamp: ''!mySketchesPath	^ platform mySketchesPath! !!DrGeoSystem class methodsFor: 'font' stamp: ''!canvasFontSize	^ platform canvasFontSize! !!DrGeoSystem class methodsFor: 'user interface' stamp: ''!replicateDisplayWidth"the replicated area width under mouse"	^ 80! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!host: string	Host := string! !!DrGeoSystem class methodsFor: 'resources' stamp: ''!networkResourcesCreateShare"Check the share exsists, if not create it"	|resource|	(resource := self connectToNetwork: UIManager default) ifNil: [DrGLoader stop. ^nil].	(resource shareExists: self networkShare) ifFalse: [		[resource makeDirectory: self networkShare]			on: TelnetProtocolError 			do: [UIManager default abort:  ('I can''t create the share {1}.' translated format: {self networkShare}).				^ nil]].	^self networkOpenShareOn: resource with: UIManager default! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!beOlpc	"self beOlpc"	platform := DrGSugar new.	self addStartUp! !!DrGeoSystem class methodsFor: 'user interface' stamp: ''!toolbarIconSize	^ platform toolbarIconSize ! !!DrGeoSystem class methodsFor: 'user interface' stamp: ''!wheelWidth	^ platform wheelWidth! !!DrGeoSystem class methodsFor: 'path' stamp: ''!mySharesPath	^ platform mySharesPath! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!lanShare: aBoolean	LanShare := aBoolean.	LanShare 		ifTrue: [ DrGeoLanServer current start ] 		ifFalse: [ DrGeoLanServer current stop; reset ]! !!DrGeoSystem class methodsFor: 'path' stamp: ''!myExportsPath	^ platform myExportsPath! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!ifPremium: block	^ self isPremium		ifTrue: [block value]		ifFalse: [UIManager default inform: 'You need to buy the full versionof Dr. Geo for this function.']! !!DrGeoSystem class methodsFor: 'path' stamp: ''!myScriptsPath	^ platform myScriptsPath ! !!DrGeoSystem class methodsFor: 'resources' stamp: ''!networkOpenShareOn: resource with: parentMorph	(resource location: self networkShare) ifTrue: [^ resource].	(self networkShare = 'SandBox') ifTrue:		[DrGLoader stop.		parentMorph abort: 'I can''t connect to network.' translated.		resource close.		^ nil].	DrGLoader stop.	parentMorph abort: ('I can''t open the share {1}.Switch back to ''SandBox'' share.' translated format: {self networkShare}).	self networkShare: 'SandBox'.	parentMorph changed: #networkShare.	resource close.	^ self networkResources: parentMorph.! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkShare	^ NetworkDirectory ifNil: [NetworkDirectory := '']! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkType: symbol	NetworkType := symbol! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isTablet	^ platform isAndroid or: [platform isiPad]! !!DrGeoSystem class methodsFor: 'user interface' stamp: ''!wheelHeight	^ platform wheelHeight ! !!DrGeoSystem class methodsFor: 'resources' stamp: ''!exampleResources	^ DrGDirectoryLocal new location: DrGeoSystem examplesPath pathString.! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!ifNotiPad: aBlock	^ platform isiPad ifFalse: [aBlock value]! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isPremium"Are we the premium version of DrGeo"	^ platform isPremium! !!DrGeoSystem class methodsFor: 'font' stamp: ''!smallFont	^ LogicalFont familyName: self fontName pointSize: self smallFontSize! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isRelease "Are we in the public release mode of DrGeo"	^ platform isRelease! !!DrGeoSystem class methodsFor: 'system startup' stamp: ''!addStartUp	Smalltalk addToStartUpList: self! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!reset	platform reset.	DrGIcons reset.  "flush icons cach"! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!beiPadDemo	"self beiPadDemo"	platform := DrGiPadDemo new.	self addStartUp! !!DrGeoSystem class methodsFor: 'font' stamp: ''!font	^ LogicalFont familyName: self fontName pointSize: self fontSize! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkType	^ NetworkType ifNil: [NetworkType = #ftp]! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isWorkstation"Are we workstation version of DrGeo"	^ platform isWorkstation! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!expiresIn: duration	duration 		ifNil: [expirationDate := nil]		ifNotNil: [expirationDate := Date today + duration] ! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isSugar	^ platform isSugar! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkPassword	^ NetworkPassword ifNil: [NetworkPassword := '']! !!DrGeoSystem class methodsFor: 'as yet unclassified' stamp: ''!viewXml: filename 	DrGeo serviceViewXml: (self examplesPath / filename) pathString! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isEtoys	^ platform isEtoys! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!beiPad	"self beiPad"	platform := DrGiPad new.	self addStartUp! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!useNetwork: aBoolean	UseNetwork := aBoolean! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!ifRelease: block	^ self isRelease		ifTrue: [block value]! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!canWeDisplayLoader	^ platform canWeDisplayLoader! !!DrGeoSystem class methodsFor: 'resources' stamp: ''!mySketchResources	^ DrGDirectoryLocal new location: DrGeoSystem mySketchesPath pathString.! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkUser	^ NetworkUser ifNil: [NetworkUser := '']! !!DrGeoSystem class methodsFor: 'system startup' stamp: ''!removeStartUp"self removeStartUp"	SessionManager default unregisterClassNamed: self name.! !!DrGeoSystem class methodsFor: 'as yet unclassified' stamp: ''!openURI: string	platform openURI: string! !!DrGeoSystem class methodsFor: 'font' stamp: ''!fontFile	^ Locale current isoLanguage = 'ko'		ifTrue: ['UnDotum.ttf']		ifFalse: ['wqy-microhei.ttc'] ! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!host	^ Host ifNil: [Host := '']! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isiPad	^ platform isiPad! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!release: boolean	platform release: boolean ! !!DrGeoSystem class methodsFor: 'font' stamp: ''!canvasFont	^ LogicalFont familyName: self fontName pointSize: self canvasFontSize! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkShare: string	NetworkDirectory := string ! !!DrGeoSystem class methodsFor: 'path' stamp: ''!examplesPath	^ platform examplesPath! !!DrGeoSystem class methodsFor: 'user interface' stamp: ''!wizardExtent	^ platform wizardExtent! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!premium: boolean	platform premium: boolean ! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!isSystem"Are we in the DrGeo development environment"	^ platform isSystem! !!DrGeoSystem class methodsFor: 'testing' stamp: ''!ifNotTablet: aBlock	^ self isTablet ifFalse: [aBlock value]! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!beDevelopment	"Be like the Pharo environment as the DrGeo development environment"	"self beDevelopment"	platform := DrGDevelopment new.	self removeStartUp.! !!DrGeoSystem class methodsFor: 'class initialization' stamp: ''!beWorkstation	"self beWorkstation"	platform := DrGWorkstation new.	self addStartUp! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!useNetwork	^ UseNetwork ifNil: [UseNetwork := false]! !!DrGeoSystem class methodsFor: 'font' stamp: ''!fontSize	^ platform fontSize! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkPassword: string	NetworkPassword := string ! !!DrGeoSystem class methodsFor: 'resources' stamp: ''!networkResources: parentMorph"Open a network resource on the selected share"|resource|	^ (resource := self connectToNetwork: parentMorph) 		ifNil: [nil]		ifNotNil: [self networkOpenShareOn: resource  with: parentMorph]	! !!DrGeoSystem class methodsFor: 'settings' stamp: ''!networkUser: string	NetworkUser := string ! !!DrGeoSystem class methodsFor: 'resources' stamp: ''!connectToNetwork: parentMorph|resource|	[resource := (DrGDirectoryFTP host: self host)		login: self networkUser password: self networkPassword]		on: Error		do: [parentMorph abort: 'I can''t connect to server.Check the server settings.' translated.			resource := nil].	^ resource ! !!DrGeoTheme commentStamp: ''!A Theme for tablet, without dialog and window decoration.!!DrGeoTheme methodsFor: 'label-styles' stamp: ''!createMenuBoxFor: aSystemWindow	^ MultistateButtonMorph new extent: 0@0! !!DrGeoTheme methodsFor: 'label-styles' stamp: ''!createCollapseBoxFor: aSystemWindow	^ MultistateButtonMorph new extent: 0@0! !!DrGeoTheme methodsFor: 'initialization' stamp: ''!initialize	"Initialize the receiver."	super initialize.	self windowActiveDropShadowStyle: #nodiffuse! !!DrGeoTheme methodsFor: 'border-styles' stamp: ''!configureWindowBorderFor: aWindow	aWindow borderWidth: 0! !!DrGeoTheme methodsFor: 'label-styles' stamp: ''!createCloseBoxFor: aSystemWindow	^ MultistateButtonMorph new extent: 0@0! !!DrGeoTheme methodsFor: 'label-styles' stamp: ''!createExpandBoxFor: aSystemWindow	^ MultistateButtonMorph new extent: 0@0! !!DrGeoTheme methodsFor: 'morph creation' stamp: ''!newToolSpacerIn: aThemedMorph	"Answer a new tool spacer."	^Morph new		borderWidth: 0;		color: Color transparent;		extent: 6@6! !!DrGeoTree commentStamp: ''!I am the construction tree of an interactive sketch. I list, in the order of construction, the items composing a sketch. From me, the user can also edit the items' attributs: property and style.!!DrGeoTree methodsFor: 'as yet unclassified' stamp: ''!open	^ self openDialogWindowIn: World title: app title! !!DrGeoTree methodsFor: 'accessing' stamp: ''!app: aDrgeoApp	app := aDrgeoApp.	factory := app domain factory ! !!DrGeoTree methodsFor: 'accessing' stamp: ''!treeMorphClass	^ DrGTreeMorph ! !!DrGeoTree methodsFor: 'as yet unclassified' stamp: ''!initialize	super initialize.	self wrapBlockOrSelector: [ :item |		item printString truncateWithElipsisTo: 30]! !!DrGeoTree methodsFor: 'dependents access' stamp: ''!release	super release.	app := factory := nil! !!DrGeoTree methodsFor: 'accessing' stamp: ''!rootNodeClassFromItem: anItem	^ DrGeoNode ! !!DrGeoTree methodsFor: 'accessing' stamp: ''!rootItems "Return only the visible items"	 ^ app costumes 		select: [ :aCostume | aCostume mathItem exist and: [aCostume style isNotHidden] ]		thenCollect: [ :aCostume | aCostume mathItem ]! !!DrGeoTree class methodsFor: 'instance creation' stamp: ''!on: aDrgeoApp	^ self new app: aDrgeoApp ! !!DrGeoUserScript commentStamp: ''!I am an abstract user script. My subclass 'DrGeoScriptXXXXXXX' are created from the Dr. Geo script wizard, menu: Script>Create a Script.From the wizard, the user set :- the script name (script class side method #scriptName)- the scritp description (script class side method #description)- the argumentType (script sclass side method #newArgumentType)Next, from the source code browser (class browser), the user write the scription computation in the script  method #computeA set of helpers are present to use in the #compute method:- #arg1 to #arg4: to access first to fourth mathItem arguments as selected by the user- #costume1 to #costume4: to access the first to fourth mathitem's costumeInstance Variables- arguments : Array of DrGCostum, arguments this script uses in its computation- cosutme : the costume representing this script on the canvas, access only from its #costume message.		!!DrGeoUserScript methodsFor: 'helpers' stamp: ''!app"Access to the app where this script instance is used"	^ self costume ifNotNil: [ costume app ]! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!arg2	^ arguments second mathItem! !!DrGeoUserScript methodsFor: 'public' stamp: ''!compute	"return a value, the returned value by the script"	self subclassResponsibility ! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!costume4	^ arguments fourth! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!arg1	^ arguments first mathItem! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!costume3	^ arguments third! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!costume"Search for the costume of my instance, then cache its"	^ costume ifNil: [ 		DrGeo allInstances 			detect: [ :aDrGeo | 				aDrGeo costumes 					detect: [:aCostume | aCostume mathItem isScriptItem and: [ aCostume mathItem script == self] ]					ifFound: [ :theCostume | costume := theCostume. true]					ifNone: [ false ] ]					ifFound: [costume ]			ifNone: [ nil ]		 ]! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!costume1	^ arguments first! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!costume2	^ arguments second! !!DrGeoUserScript methodsFor: 'private' stamp: ''!arguments: aCollectionOfCostume	arguments := aCollectionOfCostume ! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!arg4	^ arguments fourth mathItem! !!DrGeoUserScript methodsFor: 'helpers' stamp: ''!arg3	^ arguments third mathItem! !!DrGeoUserScript class methodsFor: 'private' stamp: ''!reset	argumentsType := nil.! !!DrGeoUserScript class methodsFor: 'private' stamp: ''!argumentsType"return a collection of Math item, one for each argument type for this script"	^ argumentsType ifNil: [ argumentsType := self newArgumentsType ]! !!DrGeoUserScript class methodsFor: 'public' stamp: ''!scriptName"I appear in the scripts menu"	^ 'A script' translated! !!DrGeoUserScript class methodsFor: 'public' stamp: ''!description	^ 'I am the description of this script. Please edit me.' translated! !!DrGeoUserScript class methodsFor: 'private' stamp: ''!newArgumentsType"The arguments type I need to work"	self subclassResponsability! !!DrGeoWindow commentStamp: ''!A DrGeoWindow is xxxxxxxxx.Instance Variables	app:		<Object>	area:		<Object>	curveToolbar:		<Object>	macroToolbar:		<Object>	miscToolbar:		<Object>	numericToolbar:		<Object>	pointToolbar:		<Object>	statusbar:		<Object>	toolbars:		<Object>	transformationToolbar:		<Object>	sideContainer:	a row alignement morphsideContainer 	- holds in a row the drawing area and the toolbox to edit object attributesapp	- xxxxxarea	- the drawing areacurveToolbar	- xxxxxmacroToolbar	- xxxxxmiscToolbar	- xxxxxnumericToolbar	- xxxxxpointToolbar	- xxxxxstatusbar	- xxxxxtoolbars	- xxxxxtransformationToolbar	- xxxxx!!DrGeoWindow methodsFor: 'accessing' stamp: ''!setStyler: morph"set a morph to edit the style of an object, it can replace an existing one or add one such morph"	sideContainer submorphsDo: [:aMorph|			aMorph class ~= AthensWrapMorph  ifTrue: [sideContainer removeMorph: aMorph]].	morph 		ifNotNil: [			morph hResizing: #shrinkWrap; vResizing: #spaceFill.			sideContainer submorphs size = 1 ifTrue: [sideContainer addMorph: self newVerticalSeparator].			sideContainer addMorph: morph.			self updatePaneColors]! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!app: aDrgeo	app := aDrgeo! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!scriptMenu	^ scriptMenu! !!DrGeoWindow methodsFor: 'toolbars' stamp: ''!newTable: controls"Answer a morph laid out with a table of controls, in row and wrapped in column."	|answer|	answer := PanelMorph new		changeTableLayout;		cellInset: 2;		listDirection: #leftToRight;		wrapDirection: #topToBottom;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		fillStyle: Color transparent; "non pane color tracking"		cellPositioning: #topLeft.	controls do: [:m | answer addMorphBack: m].	^answer			! !!DrGeoWindow methodsFor: 'stepping' stamp: ''!wantsSteps	^ DrGeoSystem isTablet! !!DrGeoWindow methodsFor: 'open/close' stamp: ''!deleteWithoutConfirmation	super delete.	app release ! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!macroMenu: aMenu	macroMenu := aMenu ! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!sideContainer: aMorph	sideContainer := aMorph! !!DrGeoWindow methodsFor: 'initialization' stamp: ''!release	super release.	self presenter ifNotNil: [self presenter removeActionsWithReceiver: self].	area release.	tree release.	tree := area := nil.	app := nil! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!presenter 	^ app presenter! !!DrGeoWindow methodsFor: 'label' stamp: ''!relabel	| newLabel |	newLabel := UIManager default 		request: 'New title for this window' translated		initialAnswer: app title.	newLabel isEmptyOrNil ifTrue: [^self].	app isSaved ifFalse: [ newLabel := '* ' , newLabel].	self setLabel: newLabel.! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!sideContainer	^ sideContainer! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!controls 	^ self presenter controlsManager! !!DrGeoWindow methodsFor: 'open/close' stamp: ''!delete	(app notNil and: [app isSaved not]) ifTrue: [		(self 			questionWithoutCancel: 'Are you sure to close this sketch?' translated 			title: 'Closing sketch' translated) ifFalse: [ ^ self ]].	super delete.	app ifNotNil: [app release]! !!DrGeoWindow methodsFor: 'toolbars' stamp: ''!statusMessage: aString	self statusbar submorphs first 		contentsWrapped: aString! !!DrGeoWindow methodsFor: 'toolbars' stamp: ''!statusbar	^ statusbar		ifNil: [| statuslabel |			statusbar := self newPanel				cellPositioning: #topRight;				layoutInset: 0;				cellInset: 0.			statuslabel := self newText: ''.			statuslabel autoFit: false;				wrapFlag: true;				vResizing: #spaceFill;				hResizing: #spaceFill."			statuslabel hasDropShadow: true;				 shadowColor: Color gray;				 shadowOffset: 1 @ 1."			statusbar addMorphBack: statuslabel;				vResizing: #shrinkWrap.			statusbar]! !!DrGeoWindow methodsFor: 'stepping' stamp: ''!step	DrGeoSystem ifTablet: [		"track device rotation"		self fullscreen].! !!DrGeoWindow methodsFor: 'services' stamp: ''!textEntry: aStringOrText title: aString xEntryText: xEntryText yEntryText: yEntryText	|dialog|	dialog := CoordinatesEditorDialog new textFont: self theme textFont;		title: aString; text: aStringOrText;		xEntryText: xEntryText;	yEntryText: yEntryText.	DrGeoSystem ifTablet: [dialog topCentered].	"Open a text entry dialog."	dialog := self openModal: dialog.	^ {dialog xEntryText . dialog yEntryText}! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!tree: aTree	tree := aTree! !!DrGeoWindow methodsFor: 'testing' stamp: ''!isApplication 	^true! !!DrGeoWindow methodsFor: 'stepping' stamp: ''!stepTime	^ 1000! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!app 	^ app ! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!macroMenu	^ macroMenu! !!DrGeoWindow methodsFor: 'testing' stamp: ''!isService	^false! !!DrGeoWindow methodsFor: 'open/close' stamp: ''!openModal: aSystemWindow	DrGeoSystem ifTablet: [		aSystemWindow 			extent: aSystemWindow initialExtent;			topCentered;			activate].	^ super openModal: aSystemWindow.! !!DrGeoWindow methodsFor: 'services' stamp: ''!fileOpen: title extensions: exts path: path preview: preview	"Answer the result of a file open dialog with the given title, extensions to show, path and preview type."	|fd|	fd := DrGFileDialog basicNew		previewType: preview;		initialize;		title: title;		answerOpenFile.	exts ifNotNil: [fd validExtensions: exts].	path ifNotNil: [fd selectPathName: path].	^ [(self openModal: fd) answer] 		on: Error		do: [fd answer]! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!wantsToBeTopmost	^ true! !!DrGeoWindow methodsFor: 'menus' stamp: ''!popupMenu "we don't want the popup menu when using the rich UI"! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!scriptMenu: aMenu	scriptMenu := aMenu ! !!DrGeoWindow methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self model: self domain.	self setLabel: 'Dr. Geo --  ' , Date today yyyymmdd.	area := DrGDrawable newOn: app.	self setProperty: #morphicLayerNumber toValue: 110.! !!DrGeoWindow methodsFor: 'toolbars' stamp: ''!newTabGroupTool: labelsAndPages"Answer tab grouped tools with a the given tab labels associated with pages of tools"	^(TabGroupToolMorph new		font: self theme labelFont;		cornerStyle: (self theme tabGroupCornerStyleIn: self);		hResizing: #spaceFill;		vResizing: #spaceFill;		labelsAndPages: labelsAndPages)		selectedPageIndex: (labelsAndPages isEmpty ifTrue: [0] ifFalse: [1])! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!tree	^ tree! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!area	^ area! !!DrGeoWindow methodsFor: 'accessing' stamp: ''!domain	^ app domain ! !!DrGeoWindow methodsFor: 'services' stamp: ''!textEditor: aStringOrText title: aString entryText: defaultEntryText|editor|	"Answer the result of a text editor (multiline) dialog ( a string or nil if cancelled)	with the given label and title."	editor := TextEditorDialogWindow new		textFont: self theme textFont;		title: aString;		text: aStringOrText;		entryText: defaultEntryText;		entryHeight: 150.	DrGeoSystem ifTablet: [editor topCentered].	^(self openModal: editor) entryText! !!DrGeoWindow class methodsFor: 'initialize-release' stamp: ''!for: aDrGeo 	"A new model with an existing domain. For multiple MVP on a same	Domain "	^ super basicNew app: aDrGeo;		 initialize! !!DrGeoXml commentStamp: ''!A DrGeoXml is an helper to load or save as an XML representation a DrGeo instance.!!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueVectorordinate: aNode	^ self parseCoordinates: aNode ! !!DrGeoXml methodsFor: 'xml read' stamp: ''!parseFigureFrom: drgeoNode"We parse from the view, because only the view knows both the domain and the view"	|  itemStatut |	self setScaleTo: (drgeoNode attributeAt: #scale ifAbsent: [self scale]).	self ox: (drgeoNode attributeAt: #'origin_x' ifAbsent: [self ox]).	self oy: (drgeoNode attributeAt: #'origin_y' ifAbsent: [self oy]).	app view title: (drgeoNode attributeAt: 'name' ifAbsent: ['no name' translated]). 	(drgeoNode attributeAt: #grid) = 'True'	ifTrue: [self presenter gridOnOff].	(drgeoNode attributeAt: #axes) = 'True'	ifTrue: [self presenter axesOnOff].	(drgeoNode attributeAt: #gridded) = 'True'	ifTrue: [self presenter gridStuckOnOff].			self parseScript: drgeoNode.	drgeoNode elementsDo: [:aNode | 		aNode name ~= #controls ifTrue: [ 			itemStatut := self instantiateItemFrom: aNode.			itemStatut second ifTrue: [self instantiateStyle: aNode for: itemStatut first]		]	].! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueSegmentlength: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointReflexion: aNode 	^ self parseReflexion:  aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineReflexion: aNode 	^ self parseItem: aNode with: DrGReflectionBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleReflexion: aNode	^ self parseReflexion: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleRotation: aNode	^ self parseRotation: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseTextFree: aNode	^ self parseItem: aNode with: DrGTextBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircle2pts: aNode	^ self parseItem: aNode with: DrGCircleBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseRotation: aNode 	^ self parseItem: aNode with: DrGRotationBuilder! !!DrGeoXml methodsFor: 'xml read macro' stamp: ''!parseOutput: node inMacro: macro	(node elementAt: #output) elementsDo: [:aNode | |macroNodeClass|		aNode tag = #hidden ifTrue: [macroNodeClass := DrGMacroHiddenNode].		aNode tag = #final ifTrue: [macroNodeClass := DrGMacroOutputNode].		aNode elementsDo: [:child | 			macro addNode: (				macroNodeClass new 					itemTemplate: (self instantiateItemFrom: child); 					parentNodes: (self parentMacroNodesIn: macro from: child);					yourself)]]! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleSegment: aNode	^ self parseItem: aNode with: DrGCircleBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocusSymmetry: aNode 	^ self parseItem: aNode with: DrGSymmetryBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericSegmentlength: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueSegmentlength: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcTranslation: aNode	^self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointRotation: aNode	^ self parseItem: aNode with: DrGRotationBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseBitmapFree: aNode"We do not have a builder yet for free bitmap"	^ self parseItem: aNode with: DrGBitmapBuilder 		! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseRaySymmetry: aNode 	^self parseSymmetry: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcCircleRotation: aNode"Dr.Geo 1.1 compatibility"	^ self parseArcRotation: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseVectorSymmetry: aNode 	^ self parseSymmetry: aNode! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfCurve: item with: aNode 	| costume attribute |	costume := app fastLastCostume.	self parseStyleOf: costume with: aNode.	costume anchorAbscissa: (aNode attributeAt: #anchor ifAbsent: ['0.5']) asNumber.		attribute := aNode attributeAt: #thickness.	(DrGStylePreference thicknessSymbols includes: attribute asSymbol)		ifTrue: [costume style thickness: attribute asSymbol]		ifFalse: ["DrGeo 1.1"			attribute = 'Dashed' ifTrue: [costume style lineStyle: #dash.].			attribute = 'Thick' ifTrue: [costume style thickness: #medium]].	attribute := aNode attributeAt: #style ifAbsent: [^ costume].	costume style lineStyle: attribute.	^ costume! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueScript: aNode	^ self parseItem: aNode with: DrGScriptPlayer.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocusNone: aNode"DrGeo 1.1 compatibility"	 ^ self parseLocus2pts: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointMiddlesegment: aNode	^self parseItem: aNode with: DrGMiddleBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueCircleperimeter: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueDistance2pts: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'xml read macro' stamp: ''!parseOneMacro: node" parse one macro and return it"	| macro|	macro := DrGMacro new.	macro title: (node attributeAt: #name).	macro description: (node contentStringAt: #description).	self parseInput: node inMacro: macro.	self parseOutput: node inMacro: macro.	macro saved: true. "We just load this macro, nothing to save"	^ macro! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleHomothety: aNode	^self parseHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSegmentRotation: aNode	^self parseRotation: aNode! !!DrGeoXml methodsFor: 'accessing' stamp: ''!ox: aNumber	self area ox: aNumber! !!DrGeoXml methodsFor: 'accessing' stamp: ''!area	^ app view area! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcHomothety: aNode 	^self parseHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseVector2pts: aNode	^self parseItem: aNode with: DrGVectorBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleSymmetry: aNode 	^ self parseSymmetry:  aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseRayHomothety: aNode 	^self parseHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSegmentScale: aNode"Dr.Geo 1.1 compatibility"	^self parseSegmentHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericArclength: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueArclength: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericDistance2pts: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueDistance2pts: aNode! !!DrGeoXml methodsFor: 'accessing' stamp: ''!ox	 ^ self area ox! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueValue: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericCircleperimeter: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueCircleperimeter: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseHomothety: aNode 	^ self parseItem: aNode with: DrGHomothetyBuilder! !!DrGeoXml methodsFor: 'xml read macro' stamp: ''!parseInput: node inMacro: macro	(node elementAt: #input) elementsDo: [:each | |item|		item := DrGMacroMathItem new			id: (each attributeAt: #id) asSymbol; 			basicType: each tag;			yourself.		macro addNode: (DrGMacroInputNode new itemTemplate: item; yourself)]! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLine2pts: aNode	^self parseItem: aNode with: DrGLineBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineParallel: aNode	^self parseItem: aNode with: DrGParallelBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineRotation: aNode	^self parseRotation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocusHomothety: aNode	^ self parseItem: aNode with: DrGHomothetyBuilder ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcCircleSymmetry: aNode "Dr.Geo 1.1 compatibility"	^ self parseArcSymmetry: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseEquationLine: aNode	^ self parseCoordinates: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLinePerpendicularBisector2pts: aNode	^ self parseItem: aNode with: DrGPerpendicularBisectorBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseRayTranslation:aNode	^ self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseScriptNitems: aNode	"Do nothing!!, compatibility for Dr. Geo 1.1	See method parseValueScript:"! !!DrGeoXml methodsFor: 'accessing' stamp: ''!scale	 ^ self area scale! !!DrGeoXml methodsFor: 'xml read macro' stamp: ''!parentMacroNodesIn: macro from: aNode 	"return a collection of parent macro nodes  given theirs id in the attribute	elements <parent id=xxx>"	|collection|	collection := OrderedCollection new.	aNode	elementsDo: [:each | 		(each tag = #parent) ifTrue: [			collection add: (macro detectId: (each attributeAt: 'ref') asSymbol)]].	^collection ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOf: costume with: aNode 	costume textMorph: (aNode attributeAt: #name).	costume textPositionDelta: (Point readFromString: (aNode attributeAt: #delta ifAbsent: ['7@7'])).	costume style hidden: (aNode attributeAt: #masked) = 'True'.	costume style feedback: (aNode attributeAt: #feedback ifAbsent: ['True']) = 'True'.	costume style color: (self parseColorAt: #color with: aNode).! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueVectornorm: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseVectorHomothety: aNode 	^self parseHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueVectorabscissa: aNode	^ self parseCoordinates: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseRayRotation: aNode	^self parseRotation: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocus2pts: aNode	^ self parseItem: aNode with: DrGLocusBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parentsById: aNode 	"return a collection of the item parent given theirs id in the attribute	elements <parent id=xxx>"	|collection|	collection := OrderedCollection new.	aNode	elementsDo: [:each | (each tag = #parent) ifTrue: [collection				add: (self factory findInPoolById: (each attributeAt: 'ref') asSymbol)]].	^collection ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseAngleVectors: aNode	^ self parseItem: aNode with: DrGAngleBuilder.! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfPolygon: item with: aNode 	| costume |	costume := self parseStyleOfCurve: item with: aNode.	self parseStyleOfFilledPolygon: costume with: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointFree: aNode	^ self parseItem: aNode with: DrGFreePointBuilder 		! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseVectorRotation: aNode	^self parseRotation: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcReflexion: aNode	^ self parseReflexion: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSegmentHomothety: aNode	^self parseHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericSlope: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueSlope: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueSlope: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueComputation: aNode	^ self parseItem: aNode with: DrGValueBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonScale: aNode "Dr.Geo 1.1 compatibility"	^self parsePolygonHomothety: aNode ! !!DrGeoXml methodsFor: 'accessing' stamp: ''!oy	 ^ self area oy! !!DrGeoXml methodsFor: 'xml read' stamp: ''!parseScript: drgeoNode"First do one pass to compile all the script Smalltalk source code"	drgeoNode elementsDo: [: node |		(node tag = #value and: [(node attributeAt: #type) = #script]) ifTrue:			[CodeImporter evaluateString: (node contentStringAt: #code)]]! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineSymmetry: aNode	^ self parseSymmetry: aNode ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfLocus: item with: aNode 	self parseStyleOfCurve: item with: aNode! !!DrGeoXml methodsFor: 'testing' stamp: ''!isCreatingMacro	^ app isNil! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineScale: aNode"Dr.Geo 1.1 compatibility"	^self parseLineHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointCoordinate: aNode	^ self parseItem: aNode with: DrGPointByCoordinatesBuilder.! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfBitmap: item with: aNode 	| costume |	costume := app fastLastCostume.	self parseStyleOf: costume with: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseVectorScale: aNode "Dr.Geo 1.1 compatibility"	^self parseVectorHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointOncurve: aNode	^ self parseItem: aNode with: DrGFreePointBuilder ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfHalfLine: item with: aNode "DrGeo 1.1 xml compatibility"	self parseStyleOfRay: item with: aNode! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfFilledPolygon: costume with: aNode 	costume style fill: (aNode attributeAt: #filled ifAbsent: ['True']) = 'True'.	costume style translucent: 	(aNode attributeAt: #translucent ifAbsent: ['True']) = 'True'.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLinePerpendicular: aNode 	^ self parseItem: aNode with: DrGPerpendicularBuilder.! !!DrGeoXml methodsFor: 'xml read item' stamp: ''!instantiateStyle: aNode for: item "instantiate the style for this item"	self 		perform: (#parseStyleOf , aNode tag capitalized , #':with:') asSymbol		with: item		with: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSegmentReflexion: aNode	^ self parseReflexion: aNode! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfArcCircle: item with: aNode 	self parseStyleOfArc: item with: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericDistanceptline: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueDistanceptline: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonReflexion: aNode	^ self parseReflexion: aNode ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseColorAt: colorAttribute with: aNode | attribute |	attribute := (aNode attributeAt: colorAttribute ifAbsent: ['Transparent']) asLowercase.	(attribute = 'darkgrey' or: [attribute = 'darkgray'])	ifTrue: [attribute := #darkGray].	(attribute = 'grey' or: [attribute = 'gray']) ifTrue: [attribute := #gray].	attribute = 'darkgreen' ifTrue: [attribute := #green].	attribute = 'darkblue' ifTrue: [attribute := #blue].	attribute = 'bordeaux' ifTrue: [attribute := #red].	^ Color perform: attribute asSymbol! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineTranslation: aNode	^self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointScript: aNode	^ self parseItem: aNode with: DrGPointByCoordinatesBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValuePtabscissa: aNode	^ self parseCoordinates: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointBlock: aNode	self notYetImplemented.	"^ self parseItem: aNode with: DrGPointBlockBuilder."! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSegment2pts: aNode 	^ self parseItem: aNode with: DrGSegmentBuilder! !!DrGeoXml methodsFor: 'xml write' stamp: ''!saveMultiple: sketchesAndMacros on: stream	| doc writer root |	doc := XMLDocument new version: '1.0'.	writer := XMLWriter on: stream.	root := XMLElement named: #drgenius.	(sketchesAndMacros select: [:each | each class = DrGeo]) do: [:figure |		self app: figure.		self writeFigureAsXmlTo: root].	(sketchesAndMacros select: [:each | each class = DrGMacro]) do: [:macro |		macro writeAsXmlTo: root].	doc addElement: root.	doc printXMLOn: writer.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSymmetry: aNode 	^ self parseItem: aNode with: DrGSymmetryBuilder! !!DrGeoXml methodsFor: 'accessing' stamp: ''!oy: aNumber	self area oy: aNumber! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcCircle3pts: aNode"Dr.Geo 1.1 compatibility"	^ self parseArc3pts: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseAngle3pts: aNode	^ self parseItem: aNode with: DrGAngleBuilder.! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfPoint: item with: aNode 	| costume attribute |	costume := app fastLastCostume.	self parseStyleOf: costume with: aNode.	attribute := aNode attributeAt: #thickness.	attribute = 'Dashed'		ifTrue: [attribute := #small].	attribute = 'Normal'		ifTrue: [attribute := #medium].	attribute = 'Thick'		ifTrue: [attribute := #large].	costume style pointSize: attribute.	attribute := aNode attributeAt: #style.	(#('Rectangular' 'RectangularEmpty' ) includes: attribute)		ifTrue: [attribute := #square].	attribute = 'RoundEmpty'		ifTrue: [attribute := #round].	costume style shape: attribute asLowercase asSymbol! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValuePtordinate: aNode	^ self parseCoordinates: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseRay2pts: aNode	^self parseItem: aNode with: DrGRayBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseHalfLineSymmetry: aNode "Dr.Geo 1.1 compatibility"	^self parseRaySymmetry: aNode! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfEquation: item with: aNode 	| costume |	costume := app fastLastCostume.	self parseStyleOf: costume with: aNode.! !!DrGeoXml methodsFor: 'accessing' stamp: ''!setScaleTo: aNumber	self area setScaleTo: aNumber! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointScale: aNode"Dr.Geo 1.1 compatibility"	^ self parsePointHomothety: aNode ! !!DrGeoXml methodsFor: 'xml read item' stamp: ''!methodToParse: aNode "find which method to use to parse this node"	|type|	type := ((aNode attributeAt: #type) copyWithoutAll: '_' ) capitalized asSymbol.	 ^(#parse , aNode tag capitalized , type , #':') asSymbol ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfFilledCircle: costume with: aNode 	costume style fill: (aNode attributeAt: #filled ifAbsent: ['False']) = 'True'.	costume style translucent: 	(aNode attributeAt: #translucent ifAbsent: ['True']) = 'True'.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueDistanceptline: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointHomothety: aNode	^ self parseItem: aNode with: DrGHomothetyBuilder ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseHalfLineScale: aNode "Dr.Geo 1.1 compatibility"	^self parseRayHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointMiddle2pts: aNode^ self parseItem: aNode with: DrGMiddleBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSegmentSymmetry: aNode	^self parseSymmetry: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseHalfLine2pts: aNode"Dr.Geo 1.1 compatibility"	^self parseRay2pts: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseEquationCircle: aNode	^ self parseCoordinates: aNode ! !!DrGeoXml methodsFor: 'xml read item' stamp: ''!instantiateItemFrom: aNode "instantiate an item from this node"	^ self 		perform: (self methodToParse: aNode) 		with: aNode.! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfArc: item with: aNode 	|costume|	costume := self parseStyleOfCurve: item with: aNode.	costume style arrow: (aNode attributeAt: #arrow ifAbsent: [#makeNoArrows]) asSymbol.	self parseStyleOfFilledCircle: costume with: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocusRotation: aNode	^ self parseItem: aNode with: DrGRotationBuilder! !!DrGeoXml methodsFor: 'xml write' stamp: ''!writeFigureAsXmlTo: aNode 	| controlNode drgeoNode attr |	attr := Dictionary new.	attr at: #custom_controls put: self presenter controlsManager isCustomized asString capitalized; 		at: #scale put: self scale asString;		at: #'origin_x' put: self ox asString;		at: #'origin_y' put: self oy asString;		at: #grid put: self presenter isGridVisible asString capitalized;		at: #gridded put: self presenter isGridded asString capitalized;		at: #axes put: self presenter isAxesVisible asString capitalized;		at: #name put: app title.	drgeoNode := XMLElement named: #drgeo attributes: attr.		"Add the custom controls element preferences"	controlNode := XMLElement named: #controls.	self presenter controlsManager writeAsXmlTo: controlNode.	drgeoNode addElement: controlNode.	"Write the items"	app domain factory pool do: [:anItem |		(app costumeOf: anItem) writeAsXmlTo: drgeoNode].	aNode addElement: drgeoNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleRadius: aNode	^ self parseItem: aNode with: DrGCircleBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericValue: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueValue: aNode ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfLine: item with: aNode 	self parseStyleOfCurve: item with: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseHalfLineRotation: aNode"Dr.Geo 1.1 compatibility"	^self parseRayRotation: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonRegular: aNode	^ self parseItem: aNode with: DrGPolygonRegularBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleScale: aNode"Dr.Geo 1.1 compatibility"	^self parseCircleHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArc3pts: aNode	^ self parseItem: aNode with: DrGArcBuilder.! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfRay: item with: aNode 	self parseStyleOfCurve: item with: aNode! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfSegment: item with: aNode 	| costume |	costume := self parseStyleOfCurve: item with: aNode.	costume style arrow: (aNode attributeAt: #arrow ifAbsent: [#makeNoArrows]) asSymbol.	costume style mark: (aNode attributeAt: #mark ifAbsent: [#none]) asSymbol! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcCenterAngle: aNode	^ self parseItem: aNode with: DrGArcCenterBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocusTranslation: aNode	^self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'accessing' stamp: ''!app: anObject	app := anObject! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcCircleTranslation: aNode"Dr.Geo 1.1 compatibility"	^self parseArcTranslation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocusReflexion: aNode 	^ self parseReflexion:  aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointTranslation: aNode	^self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCircleTranslation: aNode	^ self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineHomothety: aNode	^self parseHomothety: aNode ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfNumeric: item with: aNode  "DrGeo 1.1 xml compatibility"	self parseStyleOfValue: item with: aNode! !!DrGeoXml methodsFor: 'xml read' stamp: ''!loadFigureFrom: doc for: constructor"One XML document may contain several drgeo figure instances, parse it all,and return a DrGeo for each one"	|instances |	instances := OrderedCollection new.	(doc elementAt: #drgenius) ifNil: [^nil].	(doc elementAt: #drgenius)		tagsNamed: #drgeo		do: [:each | instances add: (self parseOneFigure: each for: constructor)].	^ instances! !!DrGeoXml methodsFor: 'xml read' stamp: ''!loadOnlyFigureFrom: stream for: constructor"One XML document may contain several drgeo figure instances, parse it all,and return a DrGeo for each one"	| doc |	doc := XMLDOMParser parseDocumentFrom: stream.	stream close.	^ self loadFigureFrom: doc	for: constructor! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcRotation: aNode	^ self parseRotation: aNode! !!DrGeoXml methodsFor: 'xml read' stamp: ''!parseOneFigure: node for: constructor" Instantiate this node in a DrGeo app and return it"	| controlsManager controlsNode|	constructor isKeyword 		ifTrue: ["We need to load the controls manager data first"			controlsManager := DrGUIControlsManager new.			controlsManager 				customized: 	((node attributeAt: #custom_controls ifAbsent: ['False']) = 'True').			controlsNode := node firstTagNamed: #controls.			controlsNode ifNotNil: [ controlsManager readXmlFrom: controlsNode ].			self app: (DrGeo perform: constructor with: controlsManager)]		ifFalse: [self app: (DrGeo perform: constructor)].	app notInteractive: true.	self parseFigureFrom: node.	app 		forceVisible: false;		notInteractive: false;		redrawCostumes;		saved: true.	^ app! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseSegmentTranslation: aNode	^self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfAngle: item with: aNode 	self parseStyleOfNumeric: item  with: aNode ! !!DrGeoXml methodsFor: 'accessing' stamp: ''!presenter	^ app presenter! !!DrGeoXml methodsFor: 'xml write' stamp: ''!saveOn: stream	| doc writer root |	doc := XMLDocument new version: '1.0'.	writer := XMLWriter on: stream.	root := XMLElement named: #drgenius.	self writeFigureAsXmlTo: root.	doc addElement: root.	doc printXMLOn: writer.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcSymmetry: aNode 	^ self parseSymmetry: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseItem: aNode with: builderClass 	^ self isCreatingMacro 		ifFalse: [builderClass itemFrom: aNode in: app "an itemStatut"]		ifTrue: [builderClass basicItemFrom: aNode "an item"].! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonNpts: aNode	^ self parseItem: aNode with: DrGPolygonBuilder! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfValue: item with: aNode 	| costume  |	(aNode attributeAt: #type) = 'script'		ifTrue: [self parseStyleOfText: item with: aNode] "parse as text style"		ifFalse: [			costume := app fastLastCostume.			self parseStyleOf: costume with: aNode].	! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonRotation: aNode	^ self parseRotation: aNode ! !!DrGeoXml methodsFor: 'accessing' stamp: ''!factory	^ self domain factory! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonHomothety: aNode 	^self parseHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseReflexion: aNode 	^ self parseItem: aNode with: DrGReflectionBuilder! !!DrGeoXml methodsFor: 'xml read' stamp: ''!loadMacroFrom: doc	(doc elementAt: #drgenius) ifNil: [^self].	(doc elementAt: #drgenius)		tagsNamed: #macro		do: [:each | DrGMacroFactory new addUnique: (self parseOneMacro: each)].! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonSymmetry: aNode 	^self parseSymmetry: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValueArclength: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfVector: item with: aNode 	self parseStyleOfCurve: item with: aNode.	item origin: (Point readFromString: (aNode attributeAt: #origin ifAbsent: [^self]))! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointSymmetry: aNode 	^ self parseItem: aNode with: DrGSymmetryBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineAngleBisector3pts: aNode	^ self parseItem: aNode with: DrGAngleBisectorBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePointIntersection: aNode	^ self parseItem: aNode with: DrGPointIntersectionBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseVectorReflexion: aNode	^self parseReflexion: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLocusScale: aNode	^ self parseLocusHomothety: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parsePolygonTranslation: aNode	^self parseTranslation: aNode ! !!DrGeoXml methodsFor: 'xml read' stamp: ''!loadFrom: stream for: constructor"One XML document may contain several drgeo figure instances, parse it all,and return a DrGeo for each one"	| doc instances |	doc := XMLDOMParser parseDocumentFrom: stream.	stream close.	self loadMacroFrom: doc.	^ self loadFigureFrom: doc for: constructor.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseCoordinates: aNode	^ self parseItem: aNode with: DrGCoordinatesBuilder.! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseTranslation: aNode 	^ self parseItem: aNode with: DrGTranslationBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcCircleReflexion: aNode"Dr.Geo 1.1 compatibility"	^ self parseArcReflexion: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseArcCircleScale: aNode "Dr.Geo 1.1 compatibility"	^self parseArcHomothety: aNode ! !!DrGeoXml methodsFor: 'xml read' stamp: ''!load: filename for: constructor	^ self 		loadFrom: (filename asFileReference binaryReadStream) 		for: constructor ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLineAngleBisector: aNode	^ self parseItem: aNode with: DrGAngleBisectorBuilder! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfCircle: item with: aNode 	|costume|	costume := self parseStyleOfCurve: item with: aNode.	self parseStyleOfFilledCircle: costume with: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseValuePolygonperimeter: aNode	^ self parseValueComputation: aNode ! !!DrGeoXml methodsFor: 'parse style' stamp: ''!parseStyleOfText: item with: aNode 	| costume |	costume := app fastLastCostume.	self parseStyleOf: costume with: aNode.	costume style		setTranslucent: (self parseColorAt: #background with: aNode).	costume style		borderColor: (self parseColorAt: #border with: aNode).	costume style		fontSize: (aNode attributeAt: #fontSize ifAbsent: DrGeoSystem canvasFontSize) asNumber.	costume morph crAction: nil "We don't want on place edit"! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseHalfLineTranslation:aNode"Dr.Geo 1.1 compatibility"	^ self parseRayTranslation: aNode ! !!DrGeoXml methodsFor: 'accessing' stamp: ''!domain	^ app domain! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseHalfLineReflexion: aNode"Dr.Geo 1.1 compatibility"	^self parseRayReflexion: aNode! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseLinePerpendicularBisector: aNode	^ self parseItem: aNode with: DrGPerpendicularBisectorBuilder! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseNumericVectornorm: aNode"Dr.Geo 1.1 compatibility"	^ self parseValueVectornorm: aNode ! !!DrGeoXml methodsFor: 'parse item' stamp: ''!parseRayReflexion: aNode	^self parseReflexion: aNode! !!DrGiPad commentStamp: ''!Preferences for iPad tablet!!DrGiPad methodsFor: 'user interface' stamp: ''!showVirtualKeyboard: boolean	(Smalltalk at: #IPhonePlatform) showKeyboard: boolean! !!DrGiPad methodsFor: 'path' stamp: ''!sandboxPath	| path |	path := self rootPath  parent / 'Documents'.	path ensureDirectory.	^path fullName! !!DrGiPad methodsFor: 'initialize-release' stamp: ''!startUp	GetTextTranslator userDefaultLocaleDirs add: self localePath.	NaturalLanguageTranslator privateStartUp.	super startUp.! !!DrGiPad methodsFor: 'path' stamp: ''!mySketchesPath	| path |	path := self sandboxPath asFileReference / 'MySketches'.	^path fullName! !!DrGiPad methodsFor: 'initialize-release' stamp: ''!initialize	canWeDisplayLoader := true.	WorldState desktopMenuTitle: 'Dr. Geo'.	WorldState desktopMenuPragmaKeyword:  'drgeoMenu'.	PolymorphSystemSettings uiThemeClass:  DrGeoTheme.	UITheme currentSettings fastDragging: true.	UITheme currentSettings fadedBackgroundWindows: false.	SystemWindow fullscreenMargin: 0.	UITheme currentSettings preferRoundCorner: false.	TaskbarMorph showTaskbar: false.	World color: Color white."	HostWindowProxy basicNew primitiveWindowSize: 1	x: 1024	y: 768. " "does not work when building from Linux""	World doOneCycleNow.	DrGeo new view extent: 1024@768; position: 0@0."! !!DrGiPad methodsFor: 'path' stamp: ''!rootPath	^ (FileDirectory on: (FileDirectory iPhoneCurrentDirectory allButFirst: 8)) containingDirectory fullName, 		FileDirectory slash, 		self class applicationName! !!DrGiPad methodsFor: 'as yet unclassified' stamp: ''!openURI: aString	| sharedApp nsUrl |	sharedApp := ((Smalltalk at: #ObjectiveCBridge) classObjectForName: #UIApplication) sharedApplication.	nsUrl := (Smalltalk at: #ObjectiveCBridge) classObjectForName: #NSURL.	sharedApp openURL: (nsUrl URLWithString: aString asNSStringUTF8).		"(ObjectiveCBridge  classObjectForName: #UIApplication) sharedApplication 		openURL: ((ObjectiveCBridge classObjectForName: #NSURL) URLWithString: 'http://www.drgeo.eu' asNSStringUTF8)"! !!DrGiPad methodsFor: 'user interface' stamp: ''!toolbarIconSize	^ 40! !!DrGiPad methodsFor: 'testing' stamp: ''!isiPad	^ true! !!DrGiPad methodsFor: 'path' stamp: ''!localePath	^ self rootPath / 'locale'! !!DrGiPad class methodsFor: 'accessing' stamp: ''!applicationName 	^ DrGeoSystem isPremium		ifTrue: [ 'DrGeometry.app'] 		ifFalse: ['DrGeometryFree.app']! !!DrGiPadDemo methodsFor: 'user interface' stamp: ''!showVirtualKeyboard: boolean	"We do no have a virtual keyboard for now"! !!DrGiPadDemo methodsFor: 'initialize-release' stamp: ''!startUp	Author fullName: 'DrGeoUser'.	self installFont.	self setFontPreferences.	self checkForPaths.	self splash.	(World submorphs anySatisfy: [:morph | morph class == DrGeoWindow]) ifFalse:		[DrGeo newFullScreen]! !!DrGiPadDemo methodsFor: 'path' stamp: ''!mySketchesPath	^self rootPath / 'MySketches'! !!DrGiPadDemo methodsFor: 'path' stamp: ''!rootPath	^   FileLocator imageDirectory asFileReference! !!Float methodsFor: '*DrGeo-French' stamp: ''!commeFraction	^self asFraction.! !!Float methodsFor: '*DrGeo-French' stamp: ''!commeVraieFraction	^self asTrueFraction.! !!Float methodsFor: '*DrGeo-French' stamp: ''!commeFractionApprocheeDordre: ordre	^self asApproximateFractionAtOrder: ordre.! !!Float methodsFor: '*DrGeoII-Core-fixing' stamp: ''!arcTan2: denominator	"Answer the angle in radians.	 Optional. See Object documentation whatIsAPrimitive."	| result |	(self = 0.0) 		ifTrue: [(denominator > 0.0) 			ifTrue: [ result := 0 ]			ifFalse: [ result := Pi ]]		ifFalse: [(denominator = 0.0)			ifTrue: [ (self > 0.0) 				ifTrue: [ result := Halfpi ]				ifFalse: [ result := Halfpi negated ]]			ifFalse: [ (denominator > 0) 				ifTrue: [ result := (self / denominator) arcTan ]				ifFalse: [ (self > 0) 					ifTrue: [result := ((self / denominator) arcTan) + Pi ]					ifFalse: [result := ((self / denominator) arcTan) - Pi]]							].						].		^ result.! !!Float methodsFor: '*DrGeo-French' stamp: ''!commeFractionApprochee	^self asApproximateFraction.! !!Float methodsFor: '*DrGeo-French' stamp: ''!commeFractionDecimale	^self asMinimalDecimalFraction.! !!Fraction methodsFor: '*DrGeo-French-printing' stamp: ''!aLancienne	"répond la fraction à l'ancienne, avec partie entière"	| a b |	a := self partieEntiere.	b := self partieDecimale.	^(a asString),'+',(b asString).! !!Fraction methodsFor: '*DrGeo-French' stamp: ''!estUnePuissanceDe2	^self isPowerOfTwo.! !!Fraction methodsFor: '*DrGeo-French' stamp: ''!reduite	^self reduced.! !!Fraction methodsFor: '*DrGeo-French-printing' stamp: ''!commeProba	"répond la fraction comme probabilité"	| c |	c := self numerateur asString.	(self numerateur < 2) siVrai: [		c := c,' chance sur '.		] siFaux:[		c := c,' chances sur '.		].	c := c,self denominateur asString.	^c! !!Fraction methodsFor: '*DrGeo-French' stamp: ''!numerateur	^self numerator.! !!Fraction methodsFor: '*DrGeo-French-printing' stamp: ''!commePari	"répond la fraction comme probabilité"	| c |	c := self numerateur asString.	(self numerateur < 2) siVrai: [		c := c,' chance contre '.		] siFaux:[		c := c,' chances contre '.		].	c := c,(self denominateur - self numerateur) asString.	^c! !!Fraction methodsFor: '*DrGeo-French' stamp: ''!de: unNombre	^self * unNombre.! !!Fraction methodsFor: '*DrGeo-French-printing' stamp: ''!avecDesMots	| t q |	q := #('unième' 'demi' 'tiers' 'quart').	t := self numerateur avecDesMots.	(self deepCopy denominateur > 1) siVrai: [		t := t,' '.		(self denominateur < 5) siVrai: [			t := t,(q a: self denominateur).			]		siFaux: [			t := t,(self denominateur avecDesMotsDen),'ième'.			].		(self numerateur > 1 et: (self denominateur =3) contraire) siVrai: [			t := t,'s'.			]		].	^t.! !!Fraction methodsFor: '*DrGeo-French' stamp: ''!denominateur	^self denominator.! !!Fraction methodsFor: '*DrGeo-French-printing' stamp: ''!aLegyptienne	"répond la fraction comme somme de fractions égyptiennes	soit de numérateurs 1;	algorithme de Fibonacci-Sylvester"	| liste b c chaine |	liste := #() commeCollectionOrdonnee.	liste ajouter: self partieEntiere.	b := self partieDecimale.	[b numerateur > 1] tantQueVrai: [		c := (b inverse partieEntiere + 1) inverse.		b := b-c.		liste ajouter: c.	].	liste ajouter: b.	chaine := (liste commeTableau a: 1) asString.	liste := liste retirerTousLorsque: [ :n | n isInteger].	liste := liste commeTableau.	liste faire: [ :elt | chaine := chaine,' + ',(elt asString)].		^chaine.! !!GeneralScrollPane methodsFor: '*DrGeoII-UI' stamp: ''!mouseMove: anEvent	anEvent redButtonPressed ifTrue: [		(anEvent endPoint - anEvent startPoint) y < 0 			ifTrue: [vScrollbar scrollDown: 2]			ifFalse: [vScrollbar scrollUp: 2]]	 		! !!GeneralScrollPane methodsFor: '*DrGeoII-UI' stamp: ''!handlesMouseDown: evt	^ true! !!GetTextExporter commentStamp: '<historical>'!Export translations to gettext format divided into categories."Export gettext template files"GetTextExporter new exportTemplate."Export translation files for current locale"GetTextExporter new exportTranslator: (InternalTranslator newLocaleID: LocaleID current)."Export all gettext template and po files."GetTextExporter exportAll."To register a class category as a new domain"TextDomainManager registerClassCategory: 'Morphic-Books' domain: 'Book'."Remove a class category"TextDomainManager unregisterClassCategory: 'Morphic-Books'.!!GetTextExporter methodsFor: 'private' stamp: 'KR 7/11/2007 13:08'!formatString: aString 	| result |	result := aString.	self formatReplacements		do: [:each | result := result copyReplaceAll: each key with: each value].	^ result! !!GetTextExporter methodsFor: 'exporting' stamp: 'JohanBrichau 2/2/2014 18:51'!dirNameDomain: domain translator: translator 	"Answer a file name for the domain. Make one if it is not exist yet.	Make template file name if translator is nil"	"self new dirNameDomain: 'etoys' translator:	NaturalLanguageTranslator current"	"self new dirNameDomain: 'etoys' translator: nil"	| fileName dirName pathName |	"safeCategory := category copyReplaceAll: ' ' with: ':='."	fileName := translator				ifNil: [domain , '.pot']				ifNotNil: [translator localeID posixName , '.po'].	dirName := 'po', FileSystem disk delimiter asString , domain.	pathName := dirName ,  FileSystem disk delimiter asString , fileName.	(dirName asFileReference ensureCreateDirectory).	^ pathName! !!GetTextExporter methodsFor: 'private' stamp: 'KR 9/28/2007 13:24'!appendVocabulary: aVocabulary domains: domains	| domainName literalsForDomain literals references |	literals := aVocabulary allUntranslatedWordings.	literals addAll: aVocabulary allUntranslatedDocumentations.	domainName := self getTextDomainForClassCategory: aVocabulary class category.	literalsForDomain := domains at: domainName ifAbsentPut: Dictionary new.	literals do: [ :literal |		references := literalsForDomain at: literal ifAbsentPut: [OrderedCollection new].		references add: (MethodReference new setStandardClass: aVocabulary class methodSymbol: #initialize)	].	! !!GetTextExporter methodsFor: 'private' stamp: 'HilaireFernandes 5/4/2010 22:28'!exportHeader: domainName	| headers |	self exportTag: 'msgid' msg: ''.	self exportTag: 'msgstr' msg: ''.	headers := self createHeaders.	headers add: 'X-Pharo-Domain' -> domainName.	headers do: [:each | self exportHeaderLineKey: each key value: each value].	stream cr; cr! !!GetTextExporter methodsFor: 'exporting' stamp: 'sebastiansastre 5/22/2013 11:46'!appendTranslations: domains 	self 		appendTranslations: domains 		for: self class defaultSelectors ! !!GetTextExporter methodsFor: 'private' stamp: 'tak 10/2/2007 21:25'!exportPhrase: phraseString translation: translationString 	| normalizedTrans tmp transStartsWithCR transEndsWithCR|	phraseString isEmpty		ifTrue: [^ self].	self exportTag: 'msgid' msg: phraseString.	translationString size = 0 ifTrue: [		normalizedTrans := ''	] ifFalse: [		transEndsWithCR := translationString last = (Character cr).		phraseString last = (Character cr) ifTrue: [			transEndsWithCR ifTrue: [				normalizedTrans := translationString			] ifFalse: [				normalizedTrans :=  translationString , String cr			]		] ifFalse: [			transEndsWithCR ifTrue: [				normalizedTrans := translationString allButLast			] ifFalse: [				normalizedTrans := translationString			]		].		transStartsWithCR := normalizedTrans first = (Character cr).		phraseString first = (Character cr) ifTrue: [			transStartsWithCR ifFalse: [				tmp := (Character cr asString) , normalizedTrans.				normalizedTrans := tmp.			]		] ifFalse: [			transStartsWithCR ifTrue: [				normalizedTrans := normalizedTrans allButFirst			]		]	].	self exportTag: 'msgstr' msg: normalizedTrans.	stream cr! !!GetTextExporter methodsFor: 'private' stamp: 'HilaireFernandes 8/4/2010 12:38'!formatReplacements	| replacements |	replacements := OrderedCollection new.	replacements add: '\' -> '\\'.	replacements add: String cr -> '\r'.	replacements add: String tab -> '\t'.	replacements add: '"' -> '\"'.	^ replacements! !!GetTextExporter methodsFor: 'exporting' stamp: 'sebastiansastre 5/22/2013 11:47'!exportTranslator: translator 	"Export translation files. the file extention is 'po', or 'pot' if translator is nil "	"GetTextExporter new exportTranslator: NaturalLanguageTranslator current "		self 		exportTranslator: translator 		for: self class defaultSelectors ! !!GetTextExporter methodsFor: 'private' stamp: 'KR 10/2/2007 10:25'!getTextDomainForClassCategory: aClassCategory	^TextDomainManager domainForClassCategory:  aClassCategory		! !!GetTextExporter methodsFor: 'exporting' stamp: 'JohanBrichau 2/2/2014 18:51'!dirNameCategory: category translator: translator 	"Answer a file name for the category. Make one if it is not exist yet.	Make template file name if translator is nil"	"self new dirNameCategory: 'Morphic-Scripting Support' translator:	NaturalLanguageTranslator current"	"self new dirNameCategory: 'Morphic-Scripting Support' translator: nil"	| safeCategory fileName dirName pathName |	safeCategory := category copyReplaceAll: ' ' with: ':='.	fileName := translator				ifNil: [safeCategory , '.pot']				ifNotNil: [translator localeID posixName , '.po'].	dirName := (safeCategory findTokens: '-')				inject: 'po'				into: [:aString :next | aString , FileSystem disk delimiter asString , next].	pathName := dirName , FileSystem disk delimiter asString , fileName.	(dirName asFileReference ensureCreateDirectory).	^ pathName! !!GetTextExporter methodsFor: 'private' stamp: 'KR 7/13/2007 13:19'!exportRecordHeader: context	stream 		nextPutAll: '#: ';		nextPutAll: context;		cr.! !!GetTextExporter methodsFor: 'private' stamp: 'JohanBrichau 3/1/2014 14:39'!appendStringReceivers: aSymbol into: domains	| literals references domainName methodReference keywords found |		found := TranslatedReceiverFinder new stringReceiversOf: aSymbol.	found do: [ :assoc |		methodReference := assoc key.		keywords := assoc value.		domainName := self getTextDomainForClassCategory:			(Smalltalk at: methodReference theNonMetaClassName) category.		literals := domains at: domainName ifAbsentPut: [Dictionary new].		keywords do: [ :literal |			references := literals at: literal ifAbsentPut: [OrderedCollection new].			references add: methodReference.		].	]. ! !!GetTextExporter methodsFor: 'private' stamp: 'HilaireFernandes 8/4/2010 12:46'!exportHeaderLineKey: keyString value: valueString 	stream nextPut: $";		 nextPutAll: keyString;		 nextPut: $:;		 space;		 nextPutAll: valueString;		 nextPutAll: '\n';		 nextPut: $";		 cr.! !!GetTextExporter methodsFor: 'exporting' stamp: 'pmm 5/8/2010 11:16'!exportTemplate	"GetTextExporter new exportTemplate"	self exportTranslator: nil! !!GetTextExporter methodsFor: 'accessing' stamp: 'tak 10/2/2007 15:53'!stream: aStream	stream := aStream! !!GetTextExporter methodsFor: 'private' stamp: 'HilaireFernandes 5/4/2010 22:29'!createHeaders	| headers |	headers := OrderedCollection new.	headers add: 'Project-Id-Version' -> 'Pharo'.	headers add: 'POT-Creation-Date' -> self currentDateAndTime.	headers add: 'PO-Revision-Date' -> self currentDateAndTime.	headers add: 'Last-Translator' -> ''.	headers add: 'Language-Team' -> ''.	headers add: 'MIME-Version' -> '1.0'.	headers add: 'Content-Type' -> ('text/plain; charset=', stream converter class encodingNames first).	headers add: 'Content-Transfer-Encoding' -> '8bit'.	headers add: 'X-Pharo-SystemVersion' -> (SystemVersion current asString).	^ headers! !!GetTextExporter methodsFor: 'private' stamp: 'KR 7/11/2007 13:07'!exportTag: tag singleLine: aString 	stream nextPutAll: tag.	stream space.	stream nextPut: $".	stream		nextPutAll: (self formatString: aString).	stream nextPut: $".	stream cr! !!GetTextExporter methodsFor: 'private' stamp: 'bf 10/8/2007 14:25'!translationFor: aKey in: translator	translator ifNil: [^''].	translator translations at: aKey ifPresent: [:s | ^s].	"If we have old camelCase translations, make space-separated words"	translator translations at: aKey toCamelCase ifPresent: [:s | 		(s includes: Character space) ifTrue: [^s].		^s fromCamelCase].	^''! !!GetTextExporter methodsFor: 'accessing' stamp: 'tak 10/2/2007 15:53'!stream	^ stream! !!GetTextExporter methodsFor: 'exporting' stamp: 'sebastiansastre 5/22/2013 11:44'!exportTranslator: translator for: someSelectors	"Export translation files. the file extention is 'po', or 'pot' if translator is nil "	"GetTextExporter new exportTranslator: NaturalLanguageTranslator current "	| domains |	domains := Dictionary new.	self appendTranslations: domains for: someSelectors.	domains		keysAndValuesDo: [:domainName :value |			self				export: value				translator: translator				domain: domainName]! !!GetTextExporter methodsFor: 'file out' stamp: 'JohanBrichau 6/2/2015 09:07'!exportBody: literals translator: translator 	"Export a gettext file body. literals is a dictionary of keyword ->	#(MethodReference...) in the textDomain."	"Build {sortKey. comment. msgid } to optimize sorting (getting category is	too slow).	If there are two or more methods for a mgsid, only first method	(alphabetical) is used for sorting."	| sorted msgid sortedMethods category sortKey comment triplets commentUnderLined |	triplets := literals associations				collect: [:assoc | 					msgid := assoc key.					sortedMethods := assoc value asArray sort.					category := (Smalltalk at: sortedMethods first theNonMetaClassName) category asString.					sortKey := category , ',' , sortedMethods first printString , ',' , msgid.					comment := (sortedMethods								collect: [:each | each actualClass asString , '>>' , each selector asString])								inject: category								into: [:result :methodName | result , ',' , methodName].					"Replace white spaces to := because gettext tool might					replace a space to a new line some times, and it makes					difficult to take a diff."					commentUnderLined := comment copyReplaceAll: ' ' with: ':='.					Array						with: sortKey						with: commentUnderLined						with: msgid].	"Sort and output the words"	sorted := triplets				sort: [:a :b | a first <= b first].	sorted		do: [:triplet | 			comment := triplet second.			msgid := triplet third.			self exportRecordHeader: comment.			self				exportPhrase: msgid				translation: (self translationFor: msgid in: translator)]! !!GetTextExporter methodsFor: 'private' stamp: 'KR 7/11/2007 13:03'!currentDateAndTime	^ String		streamContents: [:aStream | 			aStream nextPutAll: Date today yyyymmdd;				space.			Time now				print24: true				showSeconds: false				on: aStream.			aStream nextPutAll: '-0000']! !!GetTextExporter methodsFor: 'private' stamp: 'HilaireFernandes 4/5/2014 21:27'!export: literals translator: translator domain: domainName 	| fileName |	"Export a gettext file in a category. literals is a dictionary of keyword -> #(MethodReference...) in the textDomain."	fileName := self dirNameDomain: domainName translator: translator.	[stream := FileStream forceNewFileNamed: fileName.	stream lineEndConvention: #lf.	stream converter: UTF8TextConverter new.	self exportHeader: domainName.	self exportBody: literals translator: translator]		ensure: [stream close]! !!GetTextExporter methodsFor: 'private' stamp: 'KR 7/11/2007 13:07'!exportTag: tag msg: aString 	| pos end line |	(aString indexOf: Character cr)			= 0		ifTrue: [self exportTag: tag singleLine: aString]		ifFalse: [self exportTag: tag singleLine: ''.			pos := 1.			end := 0.			[end < aString size]				whileTrue: [end := aString indexOf: Character cr startingAt: pos.					end = 0						ifTrue: [end := aString size].					line := aString copyFrom: pos to: end.					stream nextPut: $";												nextPutAll: (self formatString: line);						 nextPut: $";						 cr.					pos := end + 1]]! !!GetTextExporter methodsFor: 'exporting' stamp: 'sebastiansastre 5/22/2013 11:46'!appendTranslations: domains for: someSelectors	"Append translations in the given domains.	Will be done by searching for strings receiving the given selectors"	someSelectors do:[ :selector |		self appendStringReceivers: selector into: domains]! !!GetTextExporter class methodsFor: 'accessing' stamp: 'sebastiansastre 5/22/2013 11:45'!defaultSelectors	"Answers the selectors that are sent to strings that should be translated"		^ #(		#translated 		#translatedNoop		)! !!GetTextExporter class methodsFor: 'utilities' stamp: 'pmm 5/8/2010 11:16'!exportTemplate	"GetTextExporter exportTemplate"	self new exportTemplate! !!GetTextExporter class methodsFor: 'utilities' stamp: 'sebastiansastre 5/22/2013 11:51'!exportTemplateFor: someSelectors	"Writes files to be used as the translation template.	It will include strings that are receivers of any of someSelectors"		self new exportTranslator: nil for: someSelectors ! !!GetTextExporter class methodsFor: 'utilities' stamp: 'sebastiansastre 5/22/2013 11:54'!exportTemplateIncluding: aSelector	"Writes files to be used as the translation template.	It will include strings that are receivers of aSelector"		self exportTemplateFor: self defaultSelectors, {aSelector} ! !!GetTextExporter class methodsFor: 'utilities' stamp: 'tak 7/25/2007 13:57'!listAllHelp	"self listAllHelp"	| spec specs oCatalog flap flapSelectors allKeys oCatalogHelp flapHelp |	oCatalog := Dictionary new.	Morph withAllSubclasses		do: [:aClass | (aClass class includesSelector: #descriptionForPartsBin)				ifTrue: [spec := aClass descriptionForPartsBin.					oCatalog at: spec formalName put: spec documentation]].	Morph withAllSubclasses		do: [:aClass | (aClass class includesSelector: #supplementaryPartsDescriptions)				ifTrue: [specs := aClass supplementaryPartsDescriptions.					specs						do: [:each | oCatalog at: each formalName put: each documentation]]].	flap := Dictionary new.	flapSelectors := #(#defaultsQuadsDefiningPlugInSuppliesFlap #defaultsQuadsDefiningStackToolsFlap #defaultsQuadsDefiningSuppliesFlap #defaultsQuadsDefiningToolsFlap #defaultsQuadsDefiningWidgetsFlap #defaultsQuadsDefiningScriptingFlap ).	flapSelectors		do: [:selector | 			specs := Flaps perform: selector.			specs				do: [:each | flap at: each third put: each fourth]].	allKeys := oCatalog keys intersection: flap keys.	allKeys asArray sort		do: [:each | 			oCatalogHelp := oCatalog						at: each						ifAbsent: [''].			flapHelp := flap						at: each						ifAbsent: [''].			oCatalogHelp = flapHelp				ifFalse: [Transcript cr; show: 'Name: ' , each.					Transcript cr; show: 'O: ' , oCatalogHelp.					Transcript cr; show: 'F: ' , flapHelp.					Transcript cr.]]! !!GetTextExporter class methodsFor: 'utilities' stamp: 'HilaireFernandes 5/6/2010 21:34'!keys	| categories |	categories := Dictionary new.	GetTextExporter new appendTranslations: categories.	^ categories values		inject: Set new		into: [:set :next | set addAll: next keys;				 yourself]! !!GetTextTranslator commentStamp: '<historical>'!emulation of gettext runtimeKnown limitation:       currently don't support prural form.!!GetTextTranslator methodsFor: 'accessing' stamp: 'KR 10/30/2007 18:38'!isDomainLoaded: aDomainName	| mo |	mo := moFiles at: aDomainName ifAbsent: [nil].	^mo isNil not.! !!GetTextTranslator methodsFor: 'accessing' stamp: 'KR 10/23/2007 19:16'!domainRegistered: aDomainName	"only current translator actually load the MO, to minimize loading time.	 other translator will load anyway when it goes current"	(self class current == self) 		ifTrue: [self moFileForDomain: aDomainName].	! !!GetTextTranslator methodsFor: 'private' stamp: 'sebastiansastre 5/23/2013 11:28'!loadMOFileForDomain: aDomainName	| moName |	moName := self class findMOForLocaleID: self localeID 								domain: aDomainName.	moName notNil			 ifTrue: [^MOFile new load: moName								localeID: self localeID]			ifFalse: [^nil]! !!GetTextTranslator methodsFor: 'accessing' stamp: 'sebastiansastre 5/22/2013 12:08'!refresh	"Purge the cached translations (and load on demand)"		moFiles := Dictionary new! !!GetTextTranslator methodsFor: 'private' stamp: 'sebastiansastre 5/22/2013 12:02'!moFileForDomain: domainName	"Returns the cached MOFile for the given domainName (or nil).	If none is cached, it will try to load one (every time) and cache it on demand."	| moFile |	^moFiles 		at: domainName 		ifAbsent: [			moFile := self loadMOFileForDomain: domainName.			moFile notNil ifTrue:[				moFiles at: domainName put: moFile].			moFile]! !!GetTextTranslator methodsFor: 'accessing' stamp: 'KR 10/23/2007 18:44'!domainUnregistered: aDomainName	moFiles removeKey: aDomainName ifAbsent: [^self]	! !!GetTextTranslator methodsFor: 'accessing' stamp: 'yo 8/28/2008 13:16'!atRandom	| v |	moFiles ifEmpty: [^ ''].	(v := moFiles atRandom value) ifNil: [^ ''].	^ v atRandom.! !!GetTextTranslator methodsFor: 'accessing' stamp: 'sebastiansastre 5/22/2013 12:06'!reloadMOFiles		self deprecated: 'Use the more intuitive refresh method'.		self refresh! !!GetTextTranslator methodsFor: 'initialize-release' stamp: 'KR 10/3/2007 19:43'!initialize	moFiles := Dictionary new.! !!GetTextTranslator methodsFor: 'translation' stamp: 'tak 10/19/2007 13:38'!translate: aString inDomain: aDomainName	| mo |	mo := self moFileForDomain: aDomainName.	^mo isNil 		ifTrue: [aString] 		ifFalse: [mo translationFor: aString]! !!GetTextTranslator methodsFor: 'accessing' stamp: 'KR 10/16/2007 20:58'!loadMOFiles	TextDomainManager allKnownDomains 		do: [:domainName |			self moFileForDomain: domainName		].! !!GetTextTranslator methodsFor: 'language switching' stamp: 'KR 10/17/2007 02:00'!setCurrent	"ensure actual contents of MOs is loaded on switching language"	self loadMOFiles! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'KR 10/16/2007 20:50'!setLocaleDir: path forDoamin: aDomainName	self LocaleDirsForDomain		at: aDomainName		put: path.! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'KR 10/16/2007 20:29'!localeDirForDomain: aDomainName	"returns registered localeDirectory for the textdomain. returns nil if not registered"	^LocaleDirsForDomain at: aDomainName ifAbsent: [nil]! !!GetTextTranslator class methodsFor: 'private' stamp: 'KR 10/16/2007 20:36'!localeDirsForDomain	^LocaleDirsForDomain ifNil: [LocaleDirsForDomain := Dictionary new]! !!GetTextTranslator class methodsFor: 'private' stamp: 'usmanbhatti 6/12/2013 21:54'!findMOForLocaleID: id domain: aDomainName	| sepa langSubDir path |	sepa := FileSystem disk delimiter asString.	langSubDir := self langDirNameForLocaleID: id.	(self localeDirsForDomain: aDomainName)		do: [:each |			path := each , sepa , langSubDir, sepa , (self moNameForDomain: aDomainName).			[(path asFileReference exists)				 ifTrue: [^path]] on: InvalidDirectoryError do: [:e | ^nil]].	^nil.! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'usmanbhatti 6/12/2013 22:57'!localeDirsForDomain: aDomainName	"returns collection of locale directories for text domain.  	This includes user defined one for the domain, user defaults and system defaults" 	| dirs dir |	dirs := OrderedCollection new.	dir := self localeDirForDomain: aDomainName.	dir ifNotNil: [dirs add: dir].	dirs addAll:  self defaultLocaleDirs. 		^dirs! !!GetTextTranslator class methodsFor: 'actions' stamp: 'sebastiansastre 5/23/2013 11:25'!reset	"Flush remembered stuff.	Load new translators (based on the files currently found)"		super reset.		self createAvailableTranslators 	 	! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'usmanbhatti 6/12/2013 22:56'!setupLocaleDirs	| dirs sepa localesDirName |	sepa := FileSystem disk delimiter asString.	SystemDefaultLocaleDirs := nil.	dirs := self systemDefaultLocaleDirs.	localesDirName := 'locale'.	dirs add:  (Smalltalk imageDirectory fullName) , sepa , localesDirName.	dirs add:  (Smalltalk vm path) , sepa , localesDirName.	^dirs! !!GetTextTranslator class methodsFor: 'actions' stamp: 'sebastiansastre 5/23/2013 11:20'!createAvailableTranslators	"Load new instances of translators corresponding 	to the currently available translation files"		self setupLocaleDirs.	self availableLanguageLocaleIDs do: [ :localeID |		NaturalLanguageTranslator translators 				at: localeID 				put: (self newForLocaleID: localeID).	]! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'KR 10/16/2007 20:38'!defaultLocaleDirs	| dirs |	dirs := OrderedCollection new.	UserDefaultLocaleDirs ifNotNil: [dirs addAll: UserDefaultLocaleDirs].	dirs addAll: self systemDefaultLocaleDirs.	^dirs! !!GetTextTranslator class methodsFor: 'private' stamp: 'KR 10/16/2007 19:40'!moNameForDomain: domainName	^domainName , '.mo'! !!GetTextTranslator class methodsFor: 'class initialization' stamp: 'KR 12/19/2007 12:29'!initialize	SystemDefaultLocaleDirs := OrderedCollection new.	UserDefaultLocaleDirs := OrderedCollection new.	LocaleDirsForDomain := Dictionary new.! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'KR 10/16/2007 20:40'!userDefaultLocaleDirs	^UserDefaultLocaleDirs ifNil: [UserDefaultLocaleDirs := OrderedCollection new]! !!GetTextTranslator class methodsFor: 'private' stamp: 'usmanbhatti 6/7/2013 18:27'!langDirNameForLocaleID: id	"returns relative path from locale directory to actual directory containing MOs"	^(id posixName) , (FileSystem disk delimiter asString)  , 'LC_MESSAGES'! !!GetTextTranslator class methodsFor: 'private' stamp: 'sebastiansastre 5/23/2013 11:21'!privateStartUp	self createAvailableTranslators! !!GetTextTranslator class methodsFor: 'instance creation' stamp: 'KR 10/16/2007 20:56'!newForLocaleID: id	^self new localeID: id! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'KR 12/19/2007 11:46'!addSystemDefaultLocaleDir: dir	"new dir will be put as first" 	self systemDefaultLocaleDirs addFirst: dir! !!GetTextTranslator class methodsFor: 'accessing' stamp: 'JohanBrichau 2/2/2014 18:51'!availableLanguageLocaleIDs	"GetTextTranslator availableLanguageLocaleIDs"	| ids dirs localeDirForLang directoryNames |	ids := Set new.	dirs := Set new.	dirs addAll: LocaleDirsForDomain values.	dirs addAll: self defaultLocaleDirs.	dirs do: [:dir |		| localesDir |		localesDir := dir asFileReference ensureCreateDirectory. 		directoryNames := [localesDir directoryNames] on: InvalidDirectoryError do: [:e | #()].		directoryNames				do: [:langDirName | 					| localeID  |					localeID := LocaleID posixName: langDirName.					localeDirForLang := (localesDir fullName, '/',  (self langDirNameForLocaleID: localeID)) asFileReference ensureCreateDirectory.					localeDirForLang ifNotNil: [						(localeDirForLang filesMatching: '*.mo') ifNotEmpty: [ids add: localeID]					]				].	].	^ids! !!GetTextTranslator class methodsFor: 'translation data layout' stamp: 'KR 12/19/2007 12:31'!systemDefaultLocaleDirs	^SystemDefaultLocaleDirs ifNil: [SystemDefaultLocaleDirs := OrderedCollection new]! !!GroupWindowMorph methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a toolbar drop list for the given model."	^self theme		newToolbarDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!GroupWindowMorph methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!GroupWindowMorph methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!Integer methodsFor: '*DrGeo-French' stamp: ''!precedent	"décrémente un entier"	^self - 1.! !!Integer methodsFor: '*DrGeo-French-testing' stamp: ''!estDivisiblePar: unEntier	^(self \\ unEntier) =0.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!decompositionFacteursPremiers	| facteurs str tabs n|	facteurs := self primeFactors.	tabs := (self numberOfDigits + 1) // 3 + 1.	str := WriteStream on: (String new: 20).	str cr.	n := self.	facteurs do: [ :facteur |		str << n ; tab: (tabs - (n numberOfDigits // 3)) ; << '| ' ; << facteur; cr.		n := n // facteur].	str << 1 ; tab: tabs ; << '|'; cr; cr.	str << self << ' = '.	facteurs do: [ :facteur | str << facteur] separatedBy: [str << ' × '].	^ str contents! !!Integer methodsFor: '*DrGeo-French' stamp: ''!suivant	"incrémente un entier"	^self + 1.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!auHasard	^self atRandom.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!facteursPremiers	^ self primeFactors ! !!Integer methodsFor: '*DrGeo-French' stamp: ''!denominateur		^self denominator.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!commeFraction	^self asFraction.! !!Integer methodsFor: '*DrGeo-French-testing' stamp: ''!estPremierAvec: unEntier	^(self pgdc: unEntier) = 1.! !!Integer methodsFor: '*DrGeo-French-printing' stamp: ''!avecDesMotsDen	"SmallInteger maxVal asWords"	| mils minus three num answer milCount |	self = 0 ifTrue: [^'zero'].	mils := #('' ' mille' ' millions' ' milliards' ' billions' ' billiards' ' trillions' ' trilliards' ' quadrillions' ' quadrilliards' ' quintillions' ' quintilliards' ' sextillions' ' sextilliards' ' septillions' ' septilliards' ' octillions' ' octilliards' ' nonillions' ' nonilliards' ' décillions' ' décilliards').	num := self.	minus := ''.	self < 0 ifTrue: [		minus := 'moins '.		num := num negated.	].	answer := String new.	milCount := 1.	[num > 0] whileTrue: [		three := (num \\ 1000) troisChiffresDenominateur.		num := num // 1000.		three isEmpty ifFalse: [			answer isEmpty ifFalse: [				answer := ' ',answer			].			answer := three,(mils at: milCount),answer.		].		milCount := milCount + 1.	].	^minus,answer! !!Integer methodsFor: '*DrGeo-French' stamp: ''!multiples: n"Answer my first n multiple"	^ Array streamContents: [:str |		1 to: n do: [ :i | str nextPut: i * self ]]! !!Integer methodsFor: '*DrGeo-French' stamp: ''!factorielle	^self factorial.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!diviseurs"diviseurs du nombre placés dans une collection" 	^ (Array streamContents: [:str |		1 to: self sqrtFloor do: [ :i | 			(self rem: i) = 0 ifTrue: [ str nextPut: i; nextPut: self // i ]]]) asSet sorted! !!Integer methodsFor: '*DrGeo-French' stamp: ''!pgdc: unEntier	^self gcd: unEntier.! !!Integer methodsFor: '*DrGeo-French-testing' stamp: ''!estUnCarre		^(self auCarre estEntier).! !!Integer methodsFor: '*DrGeo-French' stamp: ''!nombreDeChiffresEnBase: uneBase	^self numberOfDigitsInBase: uneBase.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!ppmc: unEntier	^self lcm: unEntier.! !!Integer methodsFor: '*DrGeo-French-printing' stamp: ''!enChiffresRomains	^self printStringRoman.! !!Integer methodsFor: '*DrGeo-French-testing' stamp: ''!estProbablementPremier	^self isProbablyPrime.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!numerateur		^self numerator.! !!Integer methodsFor: '*DrGeo-French-testing' stamp: ''!estPremier	^self isPrime.! !!Integer methodsFor: '*DrGeo-French' stamp: ''!foisRepete: unBloc	^self timesRepeat: unBloc.! !!Integer methodsFor: '*DrGeo-French-printing' stamp: ''!avecDesMots	"SmallInteger maxVal asWords"	| mils minus three num answer milCount pluriel |	self = 0 ifTrue: [^'zero'].	mils := #('' ' mille' ' million' ' milliard' ' billion' ' billiard' ' trillion' ' trilliard' ' quadrillion' ' quadrilliard' ' quintillion' ' quintilliard' ' sextillion' ' sextilliard' ' septillion' ' septilliard' ' octillion' ' octilliard' ' nonillion' ' nonilliard' ' décillion' ' décilliard').	num := self.	minus := ''.	self < 0 ifTrue: [		minus := 'moins '.		num := num negated.	].	answer := String new.	milCount := 1.	[num > 0] whileTrue: [		three := (num \\ 1000) troisChiffresEnNom. 		pluriel := ((num \\ 1000)>1).		num := num // 1000.		three isEmpty ifFalse: [			answer isEmpty ifFalse: [				answer := ' ',answer			].		(pluriel and: [milCount>2]) ifTrue: [			answer := three,(mils at: milCount),'s',answer.			] ifFalse: [			((pluriel not) and: [milCount=2]) ifTrue: [				answer := (mils at: milCount),answer.				] ifFalse: [				answer := three,(mils at: milCount),answer.				]			].		].		milCount := milCount + 1.	].	^minus,answer! !!Integer methodsFor: '*DrGeo-French' stamp: ''!nombreDeChiffres	^self numberOfDigits.! !!Locale methodsFor: '*DrGeoII-Core' stamp: ''!determineLocaleID	"Locale current determineLocaleID"	| langCode isoLang countryCode isoCountry |	langCode := self fetchISO2Language.	isoLang := langCode		ifNil: [^self localeID]		ifNotNil: [langCode].	countryCode := self primCountry copyFrom: 1 to: 2.	isoCountry := countryCode		ifNil: [^LocaleID isoLanguage: isoLang]		ifNotNil: [countryCode].	^LocaleID isoLanguage: isoLang isoCountry: isoCountry! !!LocaleID methodsFor: 'initialize' stamp: 'mir 7/15/2004 12:44'!isoLanguage: langString isoCountry: countryStringOrNil	isoLanguage := langString.	isoCountry := countryStringOrNil! !!LocaleID methodsFor: 'printing' stamp: 'mir 7/15/2004 12:45'!printOn: stream	"<language>-<country>"	stream nextPutAll: self isoLanguage.	self isoCountry		ifNotNil: [stream nextPut: $-; nextPutAll: self isoCountry]! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 12:43'!isoCountry	^isoCountry! !!LocaleID methodsFor: 'testing' stamp: 'mir 7/15/2004 14:34'!hasParent	^self isoCountry notNil! !!LocaleID methodsFor: 'accessing' stamp: 'tak 3/23/2006 12:26'!displayLanguage	| language |	language := (ISOLanguageDefinition iso2LanguageTable				at: self isoLanguage				ifAbsent: [^ self isoLanguage]) language.	^ self isoCountry		ifNil: [language]		ifNotNil: [language , ' (' , self displayCountry , ')']! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 12:43'!isoLanguage	^isoLanguage! !!LocaleID methodsFor: 'printing' stamp: 'tak 8/6/2007 12:16'!posixName	"(LocaleID isoString: 'es-MX') posixName"	"(LocaleID isoString: 'es') posixName"	"language[_territory]"	^ self isoCountry		ifNil: [self isoLanguage]		ifNotNil: [self isoLanguage , '_' , self isoCountry]! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/21/2004 19:17'!isoString	^self asString! !!LocaleID methodsFor: 'comparing' stamp: 'mir 7/15/2004 14:23'!hash	^self isoLanguage hash bitXor: self isoCountry hash! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:34'!parent	^self class isoLanguage: self isoLanguage! !!LocaleID methodsFor: 'printing' stamp: 'tak 11/15/2004 12:45'!storeOn: aStream 	aStream nextPut: $(.	aStream nextPutAll: self class name.	aStream nextPutAll: ' isoString: '.	aStream nextPutAll: '''' , self printString , ''''.	aStream nextPut: $).! !!LocaleID methodsFor: 'accessing' stamp: 'mir 9/1/2005 14:17'!displayCountry	^(ISOLanguageDefinition iso2Countries at: self isoCountry asUppercase ifAbsent: [ self isoCountry ]) ! !!LocaleID methodsFor: 'comparing' stamp: 'mir 7/15/2004 14:23'!= anotherObject	self class == anotherObject class		ifFalse: [^false].	^self isoLanguage = anotherObject isoLanguage		and: [self isoCountry = anotherObject isoCountry]! !!LocaleID methodsFor: 'accessing' stamp: 'HilaireFernandes 5/6/2010 21:30'!translator	^ NaturalLanguageTranslator localeID: self ! !!LocaleID class methodsFor: 'instance creation' stamp: 'mir 7/15/2004 12:46'!isoLanguage: langString isoCountry: countryStringOrNil	^self new isoLanguage: langString isoCountry: countryStringOrNil! !!LocaleID class methodsFor: 'accessing' stamp: 'mir 7/15/2004 15:09'!current	^Locale current localeID! !!LocaleID class methodsFor: 'instance creation' stamp: 'mir 7/15/2004 14:35'!isoLanguage: langString	^self isoLanguage: langString isoCountry: nil! !!LocaleID class methodsFor: 'accessing' stamp: 'bf 9/26/2007 16:24'!previous	^Locale previous localeID! !!LocaleID class methodsFor: 'instance creation' stamp: 'mir 7/21/2004 13:59'!isoString: isoString	"Parse the isoString (<language>-<country>) into its components and return the matching LocaleID"	"LocaleID isoString: 'en' "	"LocaleID isoString: 'en-us' "	| parts language country |	parts := isoString findTokens: #($- ).	language := parts first.	parts size > 1		ifTrue: [country := parts second].	^self isoLanguage: language isoCountry: country! !!LocaleID class methodsFor: 'instance creation' stamp: 'HilaireFernandes 4/30/2010 18:00'!posixName: aString 	^ self		isoString: (aString copyReplaceAll: '_' with: '-')! !!LocaleID class methodsFor: 'accessing-defaults' stamp: 'MaxLeske 6/3/2016 14:58'!default	^ self isoLanguage: 'en'! !!MOFile commentStamp: '<historical>'!Wrapper for MO file of gettext.Known limitation:  	currently don't support prural form.	translation strings have to be encoded in utf-8.Implementation notes:	Testing on XO showed emulation of hash search without plugin + on demand loading is slow.	The test also showed conversion of utf8 string to Squeak's String is really slow (especially for non-latin language).	so in this version, all of original/translated strings are loaded on initiaization,	but "translated strings" is left as ByteString on loading time, to reduce loading time.	After that the translated string is converted on demand. !!MOFile methodsFor: 'experimental' stamp: 'HenrikSperreJohansen 4/30/2010 20:43'!hashPjw: aString	"This is the hash function used by the (unused) hashTable. Kept in case someone wants to try and make it work"	"So called `hashpjw' function by P.J. Weinberger   	[see Aho/Sethi/Ullman, COMPILERS: Principles, Techniques and Tools,   	1986, 1987 Bell Telephone Laboratories, Inc.] "	| stringSize hash g |	stringSize := aString size.	hash := 0.	1 to: stringSize do: [:pos |		hash := hash bitShift: 4.		hash := hash + ((aString at: pos) asInteger).		g := hash bitAnd: 16rF0000000.		g = 0 ifFalse: [			hash := hash  bitXor: (g bitShift: -24).			hash := hash bitXor: g.		]	].	^hash.! !!MOFile methodsFor: 'public' stamp: 'KR 10/16/2007 19:03'!fileName: path	fileName := path! !!MOFile methodsFor: 'public' stamp: 'HenrikSperreJohansen 4/30/2010 20:58'!load: aFileName localeID: id	"all of strings are loaded. 	translation strings are converted to internal string format on load time.	original-string/index pairs are registerd to Dictionary on load time."	localeID := id.	FileStream readOnlyFileNamed: aFileName do: [:strm | |originalTable translatedTable|	fileName := aFileName.	self loadHeader: strm.		originalTable := self loadStringPointers: strm 									offset: originalTableOffset.										translatedTable := self loadStringPointers: strm 										offset: translatedTableOffset.	originalStrings := self loadStrings: strm 							pointers: originalTable.	translatedStrings := self loadStrings: strm 								pointers: translatedTable.	translations := Dictionary new: nStrings.  	1 to: nStrings do: [:index |		| key |		key := originalStrings at: index.		translations at: key put: index.].		originalStrings := nil] ! !!MOFile methodsFor: 'public' stamp: 'KR 10/4/2007 01:46'!fileName	^fileName! !!MOFile methodsFor: 'private' stamp: 'HenrikSperreJohansen 4/30/2010 20:56'!loadStrings: strm pointers: table	"We convert string encoding at load time.	Currently, we do not take care to set the leadingChar for a languageEnvironment"	^self loadStrings: strm pointers: table encoding: #utf8 languageEnvironment: nil! !!MOFile methodsFor: 'public' stamp: 'HenrikSperreJohansen 4/30/2010 20:52'!atRandom	^translatedStrings at: nStrings atRandom.! !!MOFile methodsFor: 'private' stamp: 'KR 10/16/2007 13:31'!loadStringPointers: strm offset: tableOffset	"returns tupple {arrayOfOffsetToString  arrayOfLengthOfString}"	| offsetTable lenTable len offset tupple |	offsetTable := IntegerArray new: nStrings.	lenTable := IntegerArray new: nStrings.	strm binary.	strm position: tableOffset.	1 to: nStrings do: [:index |		len := self nextInt32From: strm.		offset := self nextInt32From: strm.		offsetTable at: index put: offset.		lenTable at: index put: len.	].	tupple := Array new: 2.	tupple at: 1 put: offsetTable.	tupple at: 2 put:  lenTable.	^tupple! !!MOFile methodsFor: 'private' stamp: 'KR 10/4/2007 00:27'!nextInt32From: strm	^isLittleEndian 			ifTrue: [^strm nextLittleEndianNumber: 4]			ifFalse: [^strm nextInt32]! !!MOFile methodsFor: 'public' stamp: 'HenrikSperreJohansen 4/30/2010 20:43'!translationFor: aString 	aString size = 0 ifTrue: [^ '']. "Gettext header"	^ (self searchFor: aString) ifNil: [aString]! !!MOFile methodsFor: 'private' stamp: 'HenrikSperreJohansen 4/30/2010 22:10'!loadStrings: strm pointers: tupple encoding: encodingName languageEnvironment: env	| offsetTable lenTable strings |	strm ascii; 		converter: (TextConverter newForEncoding: encodingName).	offsetTable :=  tupple first.	lenTable := tupple second.	strings := Array new: nStrings.	1 to: nStrings do: [:index | |  rawStr start byteLength endPos|		start := offsetTable at: index.		byteLength := lenTable at: index.		endPos := start + byteLength.		rawStr :=  (String new: byteLength) writeStream.		strm position:  start.		[strm position < endPos] whileTrue: [rawStr nextPut: strm next].		strings at: index put: rawStr contents.			].	^strings.! !!MOFile methodsFor: 'public' stamp: 'HenrikSperreJohansen 4/30/2010 20:50'!searchFor: aString	| index |	index := translations at: aString ifAbsent: [^nil].	^translatedStrings at: index.	! !!MOFile methodsFor: 'private' stamp: 'KR 12/22/2007 09:18'!loadHeader: strm	strm binary.	magic :=  strm uint32.	magic = 16rDE120495 		ifTrue: [isLittleEndian := true]		ifFalse: [			magic = 16r950412DE 				ifTrue: [isLittleEndian := false]				ifFalse: [ self error: 'invalid MO']		].	revision := self nextInt32From: strm.	nStrings := self nextInt32From: strm.	originalTableOffset := self nextInt32From: strm.	translatedTableOffset := self nextInt32From: strm.	hashTableSize := self nextInt32From: strm.	hashTableOffset := self nextInt32From: strm.! !!MOFile class methodsFor: 'instance creation' stamp: 'KR 10/16/2007 19:05'!fileName: path localeID: id	^self new 			load:path localeID: id! !!MOFile class methodsFor: 'class initialization' stamp: 'KR 12/12/2007 13:13'!initialize	Cr := Character cr.	Lf := Character lf.! !!Morph methodsFor: '*DrGeoII-UI' stamp: ''!topCentered	self position: Display width - self width // 2 @ 0! !!Morph methodsFor: '*DrGeoII-UI' stamp: ''!isMorphCostume	^false! !!MorphicUIManager methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a toolbar drop list for the given model."	^self theme		newToolbarDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!MorphicUIManager methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!MorphicUIManager methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!MouseOverHandler methodsFor: '*DrGeoII-UI' stamp: ''!mouseOverMorphs	^mouseOverMorphs! !!NaturalLanguageTranslator commentStamp: '<historical>'!abstract class of natural language translator.Class side manages and holds loaded instances of concrete classes.!!NaturalLanguageTranslator methodsFor: 'printing' stamp: 'tak 10/19/2007 13:59'!printOn: aStream	aStream nextPutAll: self class name; nextPut: $(; print: self localeID; nextPut: $)! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'KR 10/30/2007 18:41'!isDomainLoaded: aDomainName	"ask if translation dictionary for the domain has been loaded and available now for use"	self subclassResponsibility.! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'KR 10/23/2007 18:40'!domainRegistered: aDomainName	"notify that new TextDomain is registered.  Concrete subclass can responds to this event if needed"! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'KR 10/15/2007 12:50'!localeID: anID	id := anID! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'KR 10/23/2007 18:40'!domainUnregistered: aDomainName	"notify that new TextDomain is unregistered.  Concrete subclass can responds to this event if needed"! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'yo 8/27/2008 13:10'!atRandom	self subclassResponsibility.! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'KR 10/15/2007 12:48'!localeID	^id! !!NaturalLanguageTranslator methodsFor: 'translation' stamp: 'HilaireFernandes 6/13/2010 14:44'!translate: aString inDomain: aDomainName	^ aString! !!NaturalLanguageTranslator methodsFor: 'language switching' stamp: 'KR 10/17/2007 01:57'!setCurrent	"notify locale of the translator become current"! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'KR 10/15/2007 12:58'!current	^ self availableForLocaleID: LocaleID current! !!NaturalLanguageTranslator class methodsFor: 'actions' stamp: 'sebastiansastre 5/23/2013 11:25'!reset	"Flush the translator instances"		Translators := nil! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'KR 10/23/2007 18:41'!domainRegistered: aDomainName	"notify that new TextDomain is registered"	self translators do: [:each | each domainRegistered: aDomainName]! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'TorstenBergmann 9/16/2014 14:52'!current: aTranslator	"Register a translator that should receiver the translation messages"		Current := aTranslator! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'usmanbhatti 6/11/2013 23:36'!availableForLocaleID: localeID 	"Answer available locale ID.	If translator is not found for correct locale ID, then isoLanguage is	attempted for the key."	^ self translators		at: localeID		ifAbsent: [localeID hasParent				ifTrue: [self translators						at: localeID parent						ifAbsent: [self default]]				ifFalse: [self default]] ! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'tak 10/19/2007 15:29'!startUp: resuming 	resuming		ifFalse: [^ self].	self privateStartUp.! !!NaturalLanguageTranslator class methodsFor: 'translation' stamp: 'HilaireFernandes 5/9/2010 17:12'!translate: aString toLocale: localeID	| here domain |	here := thisContext sender sender sender methodClass.	domain := TextDomainManager domainForClass: here.	^ self translate: aString toLocale: localeID inDomain: domain! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'KR 10/23/2007 18:41'!domainUnregistered: aDomainName	"notify that new TextDomain is unregistered"	self translators do: [:each | each domainUnregistered: aDomainName]! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'tak 10/19/2007 11:15'!translators	^ Translators ifNil: [Translators := Dictionary new]	! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'EstebanLorenzano 12/15/2016 11:25'!initialize	(Smalltalk classNamed: #SessionManager)		ifNotNil: [:sessionManagerClass|			sessionManagerClass default				registerSystemClassNamed: self name				atPriority: 100]		ifNil: [Smalltalk addToStartUpList: NaturalLanguageTranslator after: FileLocator].		! !!NaturalLanguageTranslator class methodsFor: 'translation' stamp: 'HilaireFernandes 5/6/2010 21:54'!translate: aString toLocale: localeID inDomain: aDomainName	^ (self availableForLocaleID: localeID)		translate: aString inDomain: aDomainName! !!NaturalLanguageTranslator class methodsFor: 'translation' stamp: 'HilaireFernandes 5/6/2010 22:00'!translate: aString	^ self translate: aString toLocale: LocaleID current! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'tak 10/19/2007 11:21'!removeLocaleID: localeID 	"self removeLocaleID: (LocaleID isoString: 'ja-kids')"	^ self translators		removeKey: localeID		ifAbsent: []! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'sebastiansastre 5/23/2013 11:29'!privateStartUp	self reset.	GetTextTranslator reset.	self localeChanged.! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'sebastiansastre 5/23/2013 11:26'!resetCaches	self deprecated: 'Use #reset'.		Translators := nil.! !!NaturalLanguageTranslator class methodsFor: 'cleanup' stamp: 'MarcusDenker 4/22/2011 10:34'!cleanUp	AllKnownPhrases := nil! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'tak 10/19/2007 13:47'!availableLanguageLocaleIDs	"Return the locale ids for the currently available languages.  	Meaning those which either internally or externally have  	translations available."	"NaturalLanguageTranslator availableLanguageLocaleIDs"	^ self translators values collect:[:each | each localeID]! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'KR 10/15/2007 12:59'!default	"Answer translator for backstop"	"self default translate: 'test'"	^ self new		localeID: (LocaleID isoLanguage: 'en')! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'KR 10/23/2007 19:42'!localeChanged	"notify some project starts to use this locale.	 this facility may use the event to load translation data dynamically" 	self current setCurrent! !!Number methodsFor: '*DrGeo-French' stamp: ''!oppose	^self negated.! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!partieDecimale	^self fractionPart! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!secondes	^self seconds.! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!arrondir"répond l'arrondi à l'entier le plus proche"	^self rounded! !!Number methodsFor: '*DrGeo-French-printing' stamp: ''!enPourcents	^ String streamContents: [ :str | 			(self * 100) storeOn: str.			str nextPutAll: ' %'].! !!Number methodsFor: '*DrGeo-French' stamp: ''!augmenteDePourcents: unPourcentage	"augmente d'un pourcentage.	Par exemple 200 augmenteDePourcents: 6 répond 212"	^self * (1 + (unPourcentage / 100)).! !!Number methodsFor: '*DrGeo-French' stamp: ''!procheDe: UnNombre	^self closeTo: UnNombre.! !!Number methodsFor: '*DrGeo-French' stamp: ''!strictementPositif	^self strictlyPositive.! !!Number methodsFor: '*DrGeo-French-testing' stamp: ''!estDivisiblePar: UnNombre	^self isDivisibleBy: UnNombre.! !!Number methodsFor: '*DrGeo-French-printing' stamp: ''!affiche	^self printString.! !!Number methodsFor: '*DrGeo-French' stamp: ''!augmenteDe: unNombre	"augmente d'un nombre."	^(self + unNombre).! !!Number methodsFor: '*DrGeo-French' stamp: ''!inverse	^self reciprocal.! !!Number methodsFor: '*DrGeo-French' stamp: ''!racine	^self sqrt.! !!Number methodsFor: '*DrGeo-French' stamp: ''!negatif		^self negative.! !!Number methodsFor: '*DrGeo-French' stamp: ''!racineNieme: unEntier	^self nthRoot: unEntier.! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!heures	^self hours.! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!tronquer	^self floor! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!jours	^self days.! !!Number methodsFor: '*DrGeo-French-testing' stamp: ''!estEntier	^(self isInteger).! !!Number methodsFor: '*DrGeo-French' stamp: ''!racineCubique	^self nthRoot: 3! !!Number methodsFor: '*DrGeo-French' stamp: ''!moyenneAvec: unNombre		^((self + unNombre)/2).! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!radians		^self degreesToRadians.! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!commeEntier	^self asInteger.! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!commeDecimal	^self asFloat.! !!Number methodsFor: '*DrGeo-French' stamp: ''!impair		^self odd.! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!partieEntiere	^self integerPart! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!semaines	^self weeks.! !!Number methodsFor: '*DrGeo-French-printing' stamp: ''!afficheEnBase: UneBase	^self printStringBase: UneBase.! !!Number methodsFor: '*DrGeo-French' stamp: ''!a: UnNombre faire: UnBloc	"boucle à condition de sortie"	^self to: UnNombre do: UnBloc.! !!Number methodsFor: '*DrGeo-French' stamp: ''!diminueDe1	^(self - 1).! !!Number methodsFor: '*DrGeo-French' stamp: ''!diminueDe: unNombre	"diminue d'un nombre."	^(self - unNombre).! !!Number methodsFor: '*DrGeo-French' stamp: ''!a: UnNombre par: UnPas"répond un intervalle avec un pas"	^self to: UnNombre by: UnPas.! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!nanosecondes	^self nanoSeconds.! !!Number methodsFor: '*DrGeo-French' stamp: ''!avecLeSigneDe: UnNombre	^UnNombre copySignTo: self.! !!Number methodsFor: '*DrGeo-French' stamp: ''!auCube	^self puissance: 3.! !!Number methodsFor: '*DrGeo-French' stamp: ''!diminueDePourcents: unPourcentage	"diminue d'un pourcentage.	Par exemple 200 diminuéDePourcents: 6 répond 188"	^self * (1 - (unPourcentage / 100)).! !!Number methodsFor: '*DrGeo-French-testing' stamp: ''!estDecimal	^(self isFloat).! !!Number methodsFor: '*DrGeo-French-testing' stamp: ''!estNombre	^self isNumber.! !!Number methodsFor: '*DrGeo-French-testing' stamp: ''!estPasNombre	^self isNaN.! !!Number methodsFor: '*DrGeo-French' stamp: ''!auCarre	^self squared.! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!arrondirA: UnNombre"répond l'arrondi à UnNombre près.Par exemple 2 racine arrondirA:  0.01 répond 1.41"	^self roundTo: UnNombre .! !!Number methodsFor: '*DrGeo-French-testing' stamp: ''!estNul	^self isZero.! !!Number methodsFor: '*DrGeo-French' stamp: ''!positif		^self positive.! !!Number methodsFor: '*DrGeo-French' stamp: ''!pourcentsDe: UnNombre	"répond un pourcentage.	Par exemple 6 pourcentsDe: 200 répond 12"	^self * UnNombre / 100.! !!Number methodsFor: '*DrGeo-French' stamp: ''!a: UnNombre	^self to: UnNombre.! !!Number methodsFor: '*DrGeo-French' stamp: ''!signe		^self sign.! !!Number methodsFor: '*DrGeo-French' stamp: ''!sinus	"sinus en degrés"		^self degreeSin.! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!arrondirParExcesA: UnNombre"répond l'arrondi à l'excès;par exemple, 2 racine arrondirExcesA: 0.01 répond 1.42"	^self roundUpTo: UnNombre! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!tronquerA: UnNombre"affiche le nombre tronqué à UnNombre près.Par exemple, 2 racine tronquerA: 0.01 renvoie 1.41"	^ self truncateTo: UnNombre! !!Number methodsFor: '*DrGeo-French' stamp: ''!degres	^self radiansToDegrees.! !!Number methodsFor: '*DrGeo-French' stamp: ''!a: UnNombre par: UnPas faire: UnBloc	^self to: UnNombre by: UnPas do: UnBloc.! !!Number methodsFor: '*DrGeo-French' stamp: ''!puissance: UnNombre	^self raisedTo: UnNombre.! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!commeDuree	^self asDuration.! !!Number methodsFor: '*DrGeo-French' stamp: ''!pair		^self even.! !!Number methodsFor: '*DrGeo-French' stamp: ''!reste: UnNombre	^self rem: UnNombre! !!Number methodsFor: '*DrGeo-French' stamp: ''!tangente	"tangente en degrés"		^(self sinus / (self cosinus)).! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!commeNombre	^self asNumber.! !!Number methodsFor: '*DrGeo-French' stamp: ''!cosinus	"cosinus en degrés"		^self degreeCos.! !!Number methodsFor: '*DrGeo-French' stamp: ''!devientCombienSachantQue: unNombre devient: unAutreNombre	"règle de trois"	^(self * unAutreNombre / unNombre).! !!Number methodsFor: '*DrGeo-French' stamp: ''!augmenteDe1	^(self + 1).! !!Number methodsFor: '*DrGeo-French-truncation' stamp: ''!arrondirParDefautA: UnNombre"répond l'arrondi par défaut;par exemple, 2 racine arrondirExcesA: 0.01 répond 1.41"		^self roundDownTo: UnNombre! !!Number methodsFor: '*DrGeo-French-testing' stamp: ''!estInfini	^self isInfinite.! !!Number methodsFor: '*DrGeo-French-conversion' stamp: ''!millisecondes	^self milliSeconds.! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCurveItem"When true, free point can be constrained on this item line"	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isMathItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isLineItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isTextItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isPolygonItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isRayItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCompositeItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isLocusItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isScriptItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isDirectionItem"When true, this item are straight line with normal and unit vector"	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isIntersectionPointItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isIntersectableItem"When true, this curve can be intersected"	^self isCurveItem! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isPointItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isValueItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isPointItemOnCurve	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isEquation	^ false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isSegmentItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isCircleItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isArcItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isFreePointItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isConstrainedPointItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isFreePointOnPlaneItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isAngleItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isBitmapItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isVectorItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isGeometricItem	^false! !!Object methodsFor: '*DrGeoII-Core-testing' stamp: ''!isNumberItem	^false! !!PharoDarkTheme methodsFor: '*DrGeoII-UI' stamp: ''!drgeoBackgroundColor	^ Color gray! !!PluggableToolbarMorph methodsFor: 'event handling' stamp: ''!mouseUp: event 	"The mouse came up within the list; take appropriate action"		| row mdr |	row := self rowAtLocation: event position.	event hand hasSubmorphs ifFalse: [		mdr := self mouseDownRow.		 self mouseDownRow: nil.		mdr ifNil: [^self]].	(self enabled and: [model okToChange])		ifFalse: [^ self].	self changeModelSelection: row.	Cursor normal show! !!Point methodsFor: '*DrGeoII-Core-point functions' stamp: ''!reflexionBy: aPoint direction: aDirection"the reflected point according to the axe defined by aPoint and aDirection"	^ ((self - aPoint) vectorReflexionBy: aDirection) + aPoint! !!Point methodsFor: '*DrGeoII-Core-printing' stamp: ''!printShowingDecimalPlaces: placeDesired "do not round when coordinate is a fraction"	|stringX stringY|	x isFraction		ifTrue: [stringX := x printString]		ifFalse: [stringX := x printShowingDecimalPlaces: placeDesired].	y isFraction		ifTrue: [stringY := y printString] 		ifFalse: [stringY := y printShowingDecimalPlaces: placeDesired].			^ stringX, '@', stringY! !!Point methodsFor: '*DrGeoII-Core-point functions' stamp: ''!rotateVector: anAngle|cosa sina|	cosa := anAngle cos.	sina := anAngle sin.	^ (x * cosa - (y * sina))@(x * sina + (y * cosa))! !!Point methodsFor: '*DrGeoII-Core-point functions' stamp: ''!vectorReflexionBy: aDirection"the reflected vector according to the axe defined by aPoint and aVector"|unit normal|	[unit := aDirection normalized.	normal := unit normal] 		on: ZeroDivide 		do: [ 			 	unit := 0@0.				normal := 0@0].	^((self dotProduct: unit) * unit) - ((self dotProduct: normal) * normal)! !!Rectangle methodsFor: '*DrGeoII-Core-intersection' stamp: ''!intersectionWith: aLineSeg 	| intersections |	intersections := Set new.	(aLineSeg		intersectionWith: (LineSegment from: self origin to: self bottomLeft))		ifNotNil: [:inter | intersections add: inter].	(aLineSeg		intersectionWith: (LineSegment from: self origin to: self topRight))		ifNotNil: [:inter | intersections add: inter].	(aLineSeg		intersectionWith: (LineSegment from: self corner to: self bottomLeft))		ifNotNil: [:inter | intersections add: inter].	(aLineSeg		intersectionWith: (LineSegment from: self corner to: self topRight))		ifNotNil: [:inter | intersections add: inter].		intersections := intersections asOrderedCollection.	intersections size = 2		ifTrue: [^ LineSegment from: intersections first to: intersections second].	intersections size = 0 		ifTrue: 			[(self containsPoint: aLineSeg start) 				ifTrue: [(self containsPoint: aLineSeg end) ifTrue: [^aLineSeg ]]				ifFalse: [(self containsPoint: aLineSeg end) ifFalse: [^nil]]].	(self containsPoint: aLineSeg start) 		ifTrue: [			(self containsPoint: aLineSeg start) 				ifTrue: [^aLineSeg]				ifFalse: [^LineSegment from: aLineSeg start to: intersections first]].	(self containsPoint: aLineSeg end) 		ifTrue: [^LineSegment from: aLineSeg end to: intersections first].	^nil! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 6/24/2003 13:39'!handleXMLDecl: attributes namespaces: namespaces	self saxHandler		checkEOD; 		documentAttributes: attributes.	self usesNamespaces		ifTrue: [			namespaces keysAndValuesDo: [:ns :uri |				self scope declareNamespace: ns uri: uri]]! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 1/8/2002 18:24'!handlePI: piTarget data: piData	self saxHandler		checkEOD; 		processingInstruction: piTarget data: piData! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 8/14/2000 18:29'!handleStartDocument	self saxHandler startDocument! !!SAXDriver methodsFor: 'namespaces' stamp: 'mir 6/24/2003 13:40'!scope	scope ifNil: [scope := XMLNamespaceScope new].	^scope! !!SAXDriver methodsFor: 'handling tokens' stamp: 'cwp 6/18/2003 01:00'!handleWhitespace: aString	self saxHandler		checkEOD; 		ignorableWhitespace: aString! !!SAXDriver methodsFor: 'accessing' stamp: 'mir 7/14/2006 11:48'!languageEnvironment	^languageEnvironment! !!SAXDriver methodsFor: 'testing' stamp: 'mir 6/5/2003 16:30'!usesNamespaces	^useNamespaces! !!SAXDriver methodsFor: 'testing' stamp: 'mir 6/5/2003 17:06'!validatesAttributes	^validateAttributes! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 7/14/2006 11:49'!handleStartTag: elementName attributes: attributeList namespaces: namespaces	| localName namespace namespaceURI |	(attributeList includesKey: 'xml:lang')		ifTrue: [languageEnvironment := LanguageEnvironment localeID: (LocaleID isoString: (attributeList at: 'xml:lang'))].	self usesNamespaces		ifTrue: [			self scope enterScope.				"declare any namespaces"					namespaces keysAndValuesDo: [:ns :uri |					self scope declareNamespace: ns uri: uri].			self splitName: elementName into: [:ns :ln |				namespace := ns.				localName := ln].			"ensure our namespace is defined"			namespace				ifNil: [namespace := self scope defaultNamespace]				ifNotNil: [					namespaceURI := self scope namespaceURIOf: namespace.					namespaceURI						ifNil: [self parseError: 'Start tag ' , elementName , ' refers to undefined namespace ' , namespace asString]].			self validatesAttributes				ifTrue: [self scope validateAttributes: attributeList].			"call the handler"			self saxHandler				checkEOD; 				startElement: localName namespaceURI: namespaceURI namespace: namespace attributeList: attributeList]		ifFalse: [			"call the handler"			self saxHandler				checkEOD; 				startElement: elementName namespaceURI: nil namespace: nil attributeList: attributeList]! !!SAXDriver methodsFor: 'initialization' stamp: 'mir 6/5/2003 16:29'!initialize	super initialize.	useNamespaces := false.	validateAttributes := false! !!SAXDriver methodsFor: 'accessing' stamp: 'mir 8/11/2000 17:51'!saxHandler	^saxHandler! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 6/24/2003 13:36'!handleEndTag: elementName	| namespace localName namespaceURI qualifiedName |	self usesNamespaces		ifTrue: [			self splitName: elementName into: [:ns :ln |				namespace := ns.				localName := ln].			"ensure our namespace is defined"			namespace				ifNil: [					namespace := self scope defaultNamespace.					qualifiedName := namespace , ':' , elementName]				ifNotNil: [					namespaceURI := self scope namespaceURIOf: namespace.					namespaceURI						ifNil: [self parseError: 'Start tag ' , elementName , ' refers to undefined namespace ' , namespace asString].					qualifiedName := elementName].			"call the handler"			self saxHandler				checkEOD; 				endElement: localName namespace: namespace namespaceURI: namespaceURI qualifiedName: qualifiedName.			self scope leaveScope]		ifFalse: [			"call the handler"			self saxHandler				checkEOD; 				endElement: elementName namespace: nil namespaceURI: nil qualifiedName: elementName]! !!SAXDriver methodsFor: 'accessing' stamp: 'mir 6/24/2003 14:51'!useNamespaces: aBoolean	useNamespaces := aBoolean! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 7/14/2006 11:55'!handlePCData: aString	self languageEnvironment		ifNotNil: [aString applyLanguageInfomation: self languageEnvironment].	self saxHandler		checkEOD; 		characters: aString! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 1/16/2002 00:33'!handleCData: aString	self saxHandler		checkEOD; 		characters: aString! !!SAXDriver methodsFor: 'handling tokens' stamp: 'mir 1/8/2002 18:38'!handleEndDocument	self saxHandler endDocument! !!SAXDriver methodsFor: 'accessing' stamp: 'mir 8/11/2000 17:52'!saxHandler: aHandler	saxHandler := aHandler! !!SAXDriver methodsFor: 'handling tokens' stamp: 'cwp 6/17/2003 18:26'!handleComment: aString	self saxHandler		checkEOD; 		comment: aString! !!SAXDriver methodsFor: 'namespaces' stamp: 'mir 6/16/2003 13:09'!splitName: aName into: twoArgsBlock	"Split the name into namespace and local name (the block arguments).	Handle both qualified and unqualified names using the default name space"	| i ns ln |	i := aName lastIndexOf: $:.	i = 0		ifTrue: [			ns := nil.			ln := aName]		ifFalse: [			ns := aName copyFrom: 1 to: (i - 1).			ln := aName copyFrom: i+1 to: aName size].	twoArgsBlock value: ns value: ln! !!SAXHandler methodsFor: 'content' stamp: 'mir 1/17/2002 13:12'!documentAttributes: attributeList! !!SAXHandler methodsFor: 'accessing' stamp: 'mir 1/8/2002 18:18'!eod	^eod! !!SAXHandler methodsFor: 'content' stamp: 'mir 1/8/2002 18:26'!endDocument	"This call corresponds to the Java SAX call	endDocument()."	eod := true! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/11/2000 16:45'!skippedEntity: aString	"This call corresonds to the Java SAX call	skippedEntity(java.lang.String name)."! !!SAXHandler methodsFor: 'content' stamp: 'mir 6/5/2003 19:05'!endElement: elementName namespace: namespace namespaceURI: namespaceURI qualifiedName: qualifiedName	"This call corresponds to the Java SAX call	endElement(java.lang.String namespaceURI, java.lang.String localName, java.lang.String qName).	By default this call is mapped to the following more convenient call:"	self endElement: elementName! !!SAXHandler methodsFor: 'lexical' stamp: 'mir 8/11/2000 18:53'!startCData	"This call corresponds to the Java SAX ext call	startCData()."! !!SAXHandler methodsFor: 'lexical' stamp: 'mir 8/11/2000 18:52'!comment: commentString	"This call corresponds to the Java SAX ext call	comment(char[] ch, int start, int length)."! !!SAXHandler methodsFor: 'lexical' stamp: 'mir 8/11/2000 18:54'!startDTD: declName publicID: publicID systemID: systemID	"This call corresponds to the Java SAX ext call	startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)."! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/14/2000 18:07'!endElement: elementName! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/11/2000 16:45'!startDocument	"This call corresonds to the Java SAX call	startDocument()."! !!SAXHandler methodsFor: 'content' stamp: 'mir 1/8/2002 18:27'!characters: aString	"This call corresponds to the Java SAX call	characters(char[] ch, int start, int length)."! !!SAXHandler methodsFor: 'content' stamp: 'mir 1/8/2002 18:24'!checkEOD	"Check if the document shouldn't be ended already"	self eod		ifTrue: [self driver errorExpected: 'No more data expected,']! !!SAXHandler methodsFor: 'lexical' stamp: 'mir 8/11/2000 18:54'!startEntity: entityName	"This call corresponds to the Java SAX ext call	startEntity(java.lang.String name)."! !!SAXHandler methodsFor: 'content' stamp: 'mir 6/5/2003 16:50'!startElement: localName namespaceURI: namespaceUri namespace: namespace attributeList: attributeList	"This call corresonds to the Java SAX call	startElement(java.lang.String namespaceURI, java.lang.String localName, java.lang.String qName, Attributes atts).	By default this call is mapped to the following more convenient call:"	self startElement: localName attributeList: attributeList! !!SAXHandler methodsFor: 'entity' stamp: 'mir 8/11/2000 17:33'!resolveEntity: publicID systemID: systemID	"This call corresonds to the Java SAX call	resolveEntity(java.lang.String publicId, java.lang.String systemId)."! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/11/2000 16:25'!endPrefixMapping: prefix	"This call corresonds to the Java SAX call	endPrefixMapping(java.lang.String prefix)."! !!SAXHandler methodsFor: 'accessing' stamp: 'mir 12/7/2000 15:34'!driver	^driver! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/11/2000 16:25'!ignorableWhitespace: aString	"This call corresonds to the Java SAX call	ignorableWhitespace(char[] ch, int start, int length)."! !!SAXHandler methodsFor: 'initialize' stamp: 'mir 1/8/2002 18:18'!initialize	eod := false! !!SAXHandler methodsFor: 'accessing' stamp: 'mir 11/30/2000 18:12'!document	^document! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/11/2000 16:47'!startPrefixMapping: prefix uri: uri	"This call corresonds to the Java SAX call	startPrefixMapping(java.lang.String prefix, java.lang.String uri)."! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/11/2000 16:26'!processingInstruction: piName data: dataString	"This call corresonds to the Java SAX call	processingInstruction(java.lang.String target, java.lang.String data)."! !!SAXHandler methodsFor: 'accessing' stamp: 'mir 6/5/2003 19:28'!useNamespaces: aBoolean	self driver useNamespaces: aBoolean! !!SAXHandler methodsFor: 'accessing' stamp: 'mir 11/30/2000 18:12'!document: aDocument	document := aDocument! !!SAXHandler methodsFor: 'content' stamp: 'mir 8/14/2000 18:07'!startElement: elementName attributeList: attributeList! !!SAXHandler methodsFor: 'parsing' stamp: 'mir 1/8/2002 18:18'!parseDocument	[self driver nextEntity isNil or: [self eod]] whileFalse! !!SAXHandler methodsFor: 'lexical' stamp: 'mir 8/11/2000 18:53'!endEntity: entityName	"This call corresponds to the Java SAX ext call	endEntity(java.lang.String name)."! !!SAXHandler methodsFor: 'accessing' stamp: 'mir 12/7/2000 15:34'!driver: aDriver	driver := aDriver.	driver saxHandler: self! !!SAXHandler class methodsFor: 'instance creation' stamp: 'sd 5/23/2003 15:19'!on: aStream	| driver parser |	driver := SAXDriver on: aStream.	driver validating: true.	parser := self new driver: driver.	^parser! !!SAXHandler class methodsFor: 'instance creation' stamp: 'cwp 5/28/2003 02:08'!parseDTDFrom: aStream	| driver parser |	driver := SAXDriver on: aStream.	driver validating: true.	driver startParsingMarkup.	parser := self new driver: driver.	parser startDocument.	parser parseDocument.	^parser! !!SAXHandler class methodsFor: 'instance creation' stamp: 'mir 7/12/2006 16:24'!parseDocumentFrom: aStream	^self parseDocumentFrom: aStream useNamespaces: false! !!SAXHandler class methodsFor: 'instance creation' stamp: 'mir 6/5/2003 19:14'!parserOnFileNamed: fileName readIntoMemory: readIntoMemory	| stream  |	stream := FileDirectory default readOnlyFileNamed: fileName.	readIntoMemory		ifTrue: [stream := stream contentsOfEntireFile readStream].	^self on: stream! !!SAXHandler class methodsFor: 'instance creation' stamp: 'mir 6/5/2003 19:15'!parserOnFileNamed: fileName	^self parserOnFileNamed: fileName readIntoMemory: false! !!SAXHandler class methodsFor: 'instance creation' stamp: 'mir 7/12/2006 16:26'!parseDocumentFrom: aStream useNamespaces: aBoolean	|  parser |	parser := self on: aStream.	parser useNamespaces: aBoolean.	parser startDocument.	parser parseDocument.	^parser! !!SAXHandler class methodsFor: 'instance creation' stamp: 'mir 1/8/2002 15:55'!parseDocumentFromFileNamed: fileName readIntoMemory: readIntoMemory	| stream xmlDoc |	stream := FileDirectory default readOnlyFileNamed: fileName.	readIntoMemory		ifTrue: [stream := stream contentsOfEntireFile readStream].	[xmlDoc := self parseDocumentFrom: stream]		ensure: [stream close].	^xmlDoc! !!SAXHandler class methodsFor: 'instance creation' stamp: 'mir 1/8/2002 15:55'!parseDocumentFromFileNamed: fileName	^self parseDocumentFromFileNamed: fileName readIntoMemory: false! !!SelectItemDialog commentStamp: ''!A SelectItemDialogWindow is a dialog with a list of item and checkboxes to select or unselect the items.Instance Variables model is an array of 3 cells arrays: {model .  title . ValueHolder}!!SelectItemDialog methodsFor: 'controls' stamp: ''!newItem: array	^ self newColumn: {		self newCheckboxFor: (array at: 3 put: array third)			getSelected: #contents setSelected: #contents:			label: array second help: nil	}! !!SelectItemDialog methodsFor: 'controls' stamp: ''!newTableMorph	^self newColumn: (items collect: [:item | self newItem: item])! !!SelectItemDialog methodsFor: 'accessing' stamp: ''!items: array	items := array ! !!SelectItemDialog methodsFor: 'actions' stamp: ''!newContentMorph	self iconMorph: self newIconMorph.	self textMorph: self newTextMorph.	^self newGroupboxForAll: {		self newRow: {self iconMorph. self textMorph}.		self newTableMorph}! !!SelectItemDialog class methodsFor: 'as yet unclassified' stamp: ''!items: items	 ^ self basicNew 		items: items;		initialize! !!SequenceableCollection methodsFor: '*DrGeoII-Core' stamp: ''!shiftRight	^ self allButFirst, (Array with: self first)! !!SettingTreeBuilder methodsFor: '*DrGeoII-UI' stamp: ''!drgeosettings	self systemsettings! !!StandardWindow methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a toolbar drop list for the given model."	^self theme		newToolbarDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!StandardWindow methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!StandardWindow methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!String methodsFor: '*xml-parser' stamp: 'mir 7/14/2006 11:54'!applyLanguageInfomation: languageEnvironment		| leadingChar |	leadingChar := languageEnvironment leadingChar.	self withIndexDo: [:each :idx |		each asciiValue > 255			ifTrue: [self at: idx put: (Character leadingChar: leadingChar code: each asUnicode)]]! !!String methodsFor: '*DrGeo-French' stamp: ''!enMajuscule	^self asUppercase! !!String methodsFor: '*DrGeo-French' stamp: ''!commeNombre	^ self asNumber! !!String methodsFor: '*DrGeo-French' stamp: ''!enMinuscule	^self asLowercase! !!String methodsFor: '*DrGeo-French' stamp: ''!contient: unString	^self includesSubString: unString! !!String methodsFor: '*DrGeo-French' stamp: ''!combienCorrespond: unString	^self howManyMatch: unString! !!String methodsFor: '*DrGeo-French' stamp: ''!correspond: unTexte"'toute*' correspond: 'Toute' -> true'toute#' correspond: 'Toute' -> false'toute#' correspond: 'Toutete' -> false'toute*' correspond: 'Toutete' -> true'toute#' correspond: 'Toutes' -> true"		^self match: unTexte! !!String methodsFor: '*DrGeo-French' stamp: ''!formate: uneCollection	^ self format: uneCollection! !!String methodsFor: '*DrGeo-French' stamp: ''!lettrine	^self capitalized! !!TEasilyThemed methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a toolbar drop list for the given model."	^self theme		newToolbarDropListIn: self		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: useIndex		help: helpText! !!TEasilyThemed methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!TEasilyThemed methodsFor: '*DrGeoII-UI-controls' stamp: ''!newToolbarDropListFor: aModel list: listSel getSelected: getSel setSelected: setSel help: helpText	"Answer a toolbar drop list for the given model."	^self 		newToolbarDropListFor: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: nil		useIndex: true		help: helpText! !!TabGroupMorph methodsFor: '*DrGeoII-UI' stamp: ''!pageMorph	"Answer the current page morph if any."	^ self contentMorph		ifNotNil: [ :morph | 			morph hasSubmorphs				ifTrue: [ self contentMorph submorphs first ] ]! !!TabGroupToolMorph commentStamp: ''!I am tab group to host tools populated in tabs. Each tools is a button, covered in several lines.!!TabGroupToolMorph methodsFor: 'as yet unclassified' stamp: ''!addPage: aMorph label: aStringOrMorph	"Add a page and its tab."	aMorph		hResizing: #spaceFill;		vResizing: #shrinkWrap.	self pages add: aMorph.	self tabSelectorMorph addTab: aStringOrMorph.	aMorph submorphsDo: [:aButton |		aButton model when: #selectedToolFromTab send: #hideTools to: self]! !!TabGroupToolMorph methodsFor: 'as yet unclassified' stamp: ''!minExtent	"Calculate the min extent of the receiver based only on the tabSelector."	^ self tabSelectorMorph minExtent! !!TabGroupToolMorph methodsFor: 'as yet unclassified' stamp: ''!hideTools	self contentMorph hide.! !!TabGroupToolMorph methodsFor: 'as yet unclassified' stamp: ''!layoutChanged	super layoutChanged.	self comeToFront.	self pageMorph		ifNotNil:			[ :pm | self owner ifNotNil: [ pm width: (pm width min: self owner width) ] ]! !!TabGroupToolMorph methodsFor: 'as yet unclassified' stamp: ''!updatePageIndex: index	"Change to the given page index."	self pageMorph ifNotNil: [:p | self contentMorph removeMorph: p].	index > 0 ifTrue: [self contentMorph addMorph: (self pages at: index)].	self pageMorph ifNotNil: [:pm | 		self owner ifNotNil: 			[pm width: (pm width min: self owner width).			pm layoutChanged]].	self adoptPaneColor: self paneColor! !!TabGroupToolMorph methodsFor: 'as yet unclassified' stamp: ''!updatePageIndex: index oldIndex: oldIndex	index == oldIndex		ifTrue:  [self contentMorph toggleVisible]		ifFalse: [self contentMorph show].	self updatePageIndex: index.! !!TabGroupToolMorph methodsFor: 'as yet unclassified' stamp: ''!newTabSelectorMorph	"Answer a new tab selector morph"	^TabToolSelectorMorph new		vResizing: #shrinkWrap;		hResizing: #spaceFill! !!TabGroupToolMorph methodsFor: 'updating' stamp: ''!update: aSymbol with: oldIndex	"Handle tab changes."	aSymbol == #selectedIndex		ifTrue: [self updatePageIndex: self selectedPageIndex oldIndex: oldIndex]! !!TabToolSelectorMorph methodsFor: 'accessing' stamp: ''!selectedIndex: index		"Set the value of selectedIndex"	|oldIndex|	oldIndex := selectedIndex.	selectedIndex == index ifTrue: [	^ self changed: #selectedIndex with: oldIndex].	selectedIndex := (index min: self tabs size).	self visibleTabRange first > index		ifTrue: [self visibleTabRange: ((index max: 1) to: 0)]		ifFalse: [self visibleTabRange last < index				ifTrue: [self visibleTabRange: (0 to: index)]].	self updateTabs.	self changed: #selectedIndex with: oldIndex! !!TextDomainInfo commentStamp: '<historical>'!I hold criteria for deciding wheter a systemCategory belongs to domain. - categoryPrefixes is collection of prefix of class category.- categories is for specifying fine grained criterion.!!TextDomainInfo methodsFor: 'initialize-release' stamp: 'KR 10/23/2007 16:26'!initialize	categoryPrefixes := Set new.	categories := IdentitySet new.! !!TextDomainInfo methodsFor: 'accessing' stamp: 'KR 10/23/2007 14:22'!categoryPrefixes	^categoryPrefixes! !!TextDomainInfo methodsFor: 'accessing' stamp: 'KR 10/23/2007 14:44'!matchedSystemCategories	^SystemOrganization categories 		select: [:cat | self includesCategory: cat]! !!TextDomainInfo methodsFor: 'accessing' stamp: 'KR 10/23/2007 15:42'!categories	^categories! !!TextDomainInfo methodsFor: 'accessing' stamp: 'KR 10/23/2007 16:28'!includesCategory: categorySymbol	(categories includes: categorySymbol) ifTrue: [^true].	categoryPrefixes do: [:each |		(self category: categorySymbol matches: each) ifTrue: [^true]	].	^false.! !!TextDomainInfo methodsFor: 'private' stamp: 'KR 10/23/2007 14:26'!category: categoryName matches: prefix	^ categoryName notNil and: [categoryName = prefix or: [categoryName beginsWith: prefix, '-']]! !!TextDomainManager commentStamp: 'tk 1/4/2008 16:08'!I manages mapping from class category to textdomain.Class variables: ClassCategories	IdentityDictionary -- classCategory -> domainName  Classes			IdentityDictionary -- class name (a Symbol) -> domainName   (a cache only!!) DefaultDomain	String -- the default domain name DomainInfos		Dictionary -- domainName -> a TextDomainInfo LoneClasses		IdentityDictionary -- class name (a Symbol) -> domainName.  For classes whose entire category are not all in the same domain (BookMorph and QuickGuideMorph)TextDomainManager registerCategoryPrefix: 'DrGeoII' domain: 'DrGeoII'.TextDomainManager unregisterDomain: 'DrGeoII'.TextDomainManager registerClass: #QuickGuideMorph domain: 'quickguides'.TextDomainManager registerClass: #QuickGuideHolderMorph  domain: 'quickguides'.!!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 10/5/2007 00:36'!allKnownDomains	| domains |	domains := Set new.	domains addAll: ClassCategories values.	domains add: self defaultDomain.	^domains! !!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 9/28/2007 14:23'!defaultDomain	^DefaultDomain! !!TextDomainManager class methodsFor: 'private' stamp: 'tk 1/2/2008 17:28'!refresh	ClassCategories := IdentityDictionary new.	Classes := IdentityDictionary new.	DomainInfos keysAndValuesDo: [:domainName :domainInfo |		domainInfo matchedSystemCategories do: [:cat |			ClassCategories at: cat ifPresent: [self error: 'category ', (cat asString) , '  belongs to multiple domains'].			ClassCategories at: cat put: domainName.			(SystemOrganization listAtCategoryNamed: cat ) do: [ :cls |				Classes at: cls put: domainName.			]		]	].	Classes addAll: LoneClasses.! !!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 10/23/2007 15:29'!registerCategoryPrefix: aString domain: aDomainName	| domInfo |	domInfo := self domainInfoFor: aDomainName.	domInfo categoryPrefixes add: aString.	self refresh.! !!TextDomainManager class methodsFor: 'private' stamp: 'KR 10/23/2007 15:32'!domainInfoFor: domainName	^DomainInfos at: domainName ifAbsentPut: [ self registerDomain: domainName]! !!TextDomainManager class methodsFor: 'private' stamp: 'KR 10/23/2007 15:02'!domainInfos	^DomainInfos! !!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 9/28/2007 14:23'!defaultDomain: aDomainName	DefaultDomain := aDomainName! !!TextDomainManager class methodsFor: 'accessing' stamp: 'HilaireFernandes 5/7/2010 18:48'!registerClass: className domain: aDomainName	LoneClasses at: className put: aDomainName.	self refresh.	"moves it to Classes"! !!TextDomainManager class methodsFor: 'class initialization' stamp: 'HilaireFernandes 5/7/2010 18:48'!initialize	"	TextDomainManager initialize	"	ClassCategories := IdentityDictionary new.	Classes := IdentityDictionary new.	LoneClasses := IdentityDictionary new.	DomainInfos := Dictionary new.	self defaultDomain: 'pharo'.! !!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 10/23/2007 13:31'!domainForClassCategory: aCategorySymbol	^ClassCategories at: aCategorySymbol ifAbsent: [self defaultDomain]! !!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 10/23/2007 18:42'!registerDomain: domainName	| domInfo |	domInfo := TextDomainInfo new.	DomainInfos at: domainName put: domInfo.	NaturalLanguageTranslator domainRegistered: domainName.	^domInfo! !!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 10/23/2007 15:43'!registerClassCategory: categorySymbol domain: aDomainName	| domInfo |	domInfo := self domainInfoFor: aDomainName.	domInfo categories add: categorySymbol.	self refresh.! !!TextDomainManager class methodsFor: 'accessing' stamp: 'KR 10/23/2007 19:04'!unregisterDomain: domainName	DomainInfos removeKey: domainName.	self refresh.	NaturalLanguageTranslator domainUnregistered: domainName.! !!TextDomainManager class methodsFor: 'accessing' stamp: 'tak 10/25/2007 14:27'!domainForClass: aClass	^Classes at: aClass theNonMetaClass name ifAbsent: [self defaultDomain]! !!TextMorph methodsFor: '*DrGeoII-UI' stamp: ''!drawDropShadowOn: aCanvas	| fauxBounds oldColor|	(self startingIndex > text size)		ifTrue: [self drawNullTextOn: aCanvas].	fauxBounds := self bounds topLeft corner: self innerBounds bottomRight.	fauxBounds := fauxBounds translateBy: self shadowOffset.	oldColor := self textColor.	self textColor: self shadowColor.	aCanvas paragraph: self paragraph bounds: fauxBounds color: self shadowColor.	self textColor: oldColor.! !!ThreadSafeTranscript methodsFor: '*DrGeo-French' stamp: ''!espace	^self space! !!ThreadSafeTranscript methodsFor: '*DrGeo-French' stamp: ''!retourLigne	^ self cr! !!ThreadSafeTranscript methodsFor: '*DrGeo-French' stamp: ''!tab: objet	^ self tab; show: objet! !!ThreadSafeTranscript methodsFor: '*DrGeo-French' stamp: ''!affiche: unObjet	^ self crShow: unObjet ! !!ThreadSafeTranscript methodsFor: '*DrGeo-French' stamp: ''!efface	^self clear.! !!ThreadSafeTranscript methodsFor: '*DrGeo-French' stamp: ''!montre: unObjet	^self show: unObjet! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!handlesKeyboard: event	^ true! !!ThumbnailPreviewMorph methodsFor: 'testing' stamp: ''!takesKeyboardFocus 	^ true! !!ThumbnailPreviewMorph methodsFor: 'accessing' stamp: ''!filename: string	filename := string ! !!ThumbnailPreviewMorph methodsFor: 'initialize' stamp: ''!initialize 	super initialize.	self cellInset: 4.	self cornerStyle: #rounded.	self hasDropShadow: true.	self shadowOffset: 1@1.	self shadowColor: (Color black alpha: 0.2).	self layoutChanged.! !!ThumbnailPreviewMorph methodsFor: 'drawing' stamp: ''!image: form size: imageSize	"Set the image and update the description."	form		ifNil: [self imageMorph			image: (self defaultImageFormOfSize: imageSize)]		ifNotNil: [self imageMorph			image: form			size: imageSize]	! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!doubleClick: evt	self wantsKeyboardFocus ifTrue: [self takeKeyboardFocus].	self triggerEvent: #selectedSktech! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!mouseMove: evt"hugly, pass the move event to the GeneralScrollPane"	self owner owner owner mouseMove: evt! !!ThumbnailPreviewMorph methodsFor: 'accessing' stamp: ''!filename	^ filename! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!handlesMouseDown: event	^ true! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!hasFocus	^ true! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!keyStroke: event"Process keys navigation and space to toggle."	(self navigationKey: event) ifTrue: [^self]. ! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!keyboardFocusChange: aBoolean	self focusChanged.	aBoolean ifTrue: [self triggerEvent: #gotFocus with: self]! !!ThumbnailPreviewMorph methodsFor: 'initialize' stamp: ''!newTextMorph 	^ super newTextMorph		hasDropShadow: true;		shadowOffset: 1@1;		color: Color white.		! !!ThumbnailPreviewMorph methodsFor: 'drawing' stamp: ''!drawSubmorphsOn: aCanvas"Display submorphs back to front.Draw the focus here since we are using inset boundsfor the focus rectangle."	super drawSubmorphsOn: aCanvas.	self hasKeyboardFocus ifTrue: [self drawKeyboardFocusOn: aCanvas]! !!ThumbnailPreviewMorph methodsFor: 'event handling' stamp: ''!mouseDown: event	super mouseDown: event.	event hand waitForClicksOrDrag: self event: event.	self wantsKeyboardFocus ifTrue: [self takeKeyboardFocus]! !!ThumbnailPreviewMorph methodsFor: 'initialize' stamp: ''!newImageMorph	"Answer a new image morph."	^AlphaImageMorph new		borderStyle: (BorderStyle raised width: 1);		color: Color white;		alpha: 1.0! !!ToolbarDropListMorph methodsFor: 'list management' stamp: ''!listMorphClass	"Answer the class for a new list morph"	^PluggableToolbarMorph! !!ToolbarDropListMorph methodsFor: 'as yet unclassified' stamp: ''!updateListSelectionIndex	"Update the list selection."	|i|	self useSelectionIndex		ifTrue: [i := self getCurrentSelectionIndex.				listSelectionIndex == i ifTrue: [^self].				listSelectionIndex := i]		ifFalse: [i := self getCurrentSelection.				listSelectionIndex := i isNil					ifTrue: [0]					ifFalse: [self list indexOf: i]].	self		changed: #listSelectionIndex;		updateContentsGraphic;		triggerEvent: #selectionIndex with: i! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!updateListSilently	"Refresh the list."	self getListSelector isSymbol ifTrue: [		self listSilently: (self model perform: self getListSelector).		listSelectionIndex := 0]! !!ToolbarDropListMorph methodsFor: 'accessing' stamp: ''!list: aCollection	"Set the list contents."	| maxExtent |	maxExtent := 0@0.	list := aCollection.	list do: [:aMorph | aMorph lock.		maxExtent := maxExtent max: aMorph extent].	self contentMorph;		minWidth: maxExtent x;		minHeight: maxExtent y.	self changed: #list.	self listSelectionIndex: 1! !!ToolbarDropListMorph methodsFor: 'list management' stamp: ''!listMouseDown: evt	"Click outside the list."	(self listMorph fullContainsPoint: evt position)		ifTrue: [self listMorph selectionIndex: (self listMorph rowAtLocation: evt position)]		ifFalse: [self hideListSilently]! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!on: anObject list: getListSel selected: getSelectionSel changeSelected: setSelectionSel	"Set the receiver to the given model parameterized by the given message selectors."	getListSel isSymbol		ifTrue: [self  getListSelector: getListSel]		ifFalse: [self list: getListSel]. "allow direct list"	self		model: anObject;		getIndexSelector: getSelectionSel;		setIndexSelector: setSelectionSel;		updateListSilently;		updateListSelectionIndex;		updateContentsGraphic ! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!listSilently: aCollection	"Set the list contents."	| maxExtent |	maxExtent := 0@0.	list := aCollection.	list do: [:aMorph | aMorph lock.		maxExtent := maxExtent max: aMorph extent].	self contentMorph;		minWidth: maxExtent x;		minHeight: maxExtent y.	self changed: #list.	self listSelectionIndexSilently: 1.! !!ToolbarDropListMorph methodsFor: 'list management' stamp: ''!hideListSilently	"Hide the list without any update notificiation. "	self listMorph ifNil: [^self].	self listVisible ifFalse: [^self].	self listMorph delete.	self roundedCorners: #(1 2 3 4).	(self buttonMorph ifNil: [^self]) roundedCorners: (self roundedCorners copyWithoutAll: #(1 2)).	self changed.	self wantsKeyboardFocus		ifTrue: [self takeKeyboardFocus]! !!ToolbarDropListMorph methodsFor: 'user interface' stamp: ''!newContentMorph	 "answer a new content morph"	^Morph new		changeTableLayout;		listDirection: #leftToRight;		wrapCentering: #center;		vResizing: #spaceFill;		hResizing: #spaceFill;		layoutInset: 0;		color: Color transparent;		borderWidth: 0;		clipSubmorphs: true! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!showListAfterLongClick	self contentMorph firstSubmorph		showSelectionFeedback: false;		changed.	self showList.	! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!updateContents	"Update the contents (graphic + execute callback)."	|item| 	item := self updateContentsGraphic.	item ifNotNil: [item performAction]! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!listSelectionIndexSilently: anInteger	"Set the list selection."	self hideList.	anInteger = 0 ifTrue: [^self].	listSelectionIndex := anInteger.	self		changed: #listSelectionIndex;		updateContentsGraphic;		triggerEvent: #selectionIndex with: anInteger.	self model ifNotNil: [:m | 		self setIndexSelector ifNotNil: [:s |			self useSelectionIndex				ifTrue: [m perform: s with: anInteger]				ifFalse: [m perform: s with: self selectedItem]]]! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!updateContentsGraphic: integer	"Update the graphic contents with the integer nth element of the list."	|item| 	self contentMorph removeAllMorphs.	^ integer > 0		ifTrue: [			item := (self list at: integer) copy unlock;				hResizing: #spaceFill;				vResizing: #spaceFill.			self contentMorph				addMorph: item.			item on: #mouseStillDown send: #showListAfterLongClick to: self.			item]		ifFalse: [nil]! !!ToolbarDropListMorph methodsFor: 'accessing' stamp: ''!listHeight	"Answer the height for the list."	^self listMorph listMorph height + 19! !!ToolbarDropListMorph methodsFor: 'list management' stamp: ''!hideList	^ self hideListSilently ! !!ToolbarDropListMorph methodsFor: 'initialize-release' stamp: ''!updateContentsGraphic	"Update the graphic contents."	^ self updateContentsGraphic: self listSelectionIndex! !!TranslatedReceiverFinder commentStamp: 'JohanBrichau 3/1/2014 14:38'!I am a utility class of Gettext. Most uses are internal to Gettext.You can use me to browse all methods sending translation messages to non-string receivers:	TranslatedReceiverFinder browseNonLiteralReceivers!!TranslatedReceiverFinder methodsFor: 'accessing' stamp: 'JohanBrichau 3/1/2014 14:40'!nonLiteralReceiversOf: aSymbol	"self new nonLiteralReceiversOf: aSymbol"	| receivers |	"Answer method references of non literal senders of #translated"	^ (SystemNavigation default allCallsOn: aSymbol)		select: [:message | 			receivers := OrderedCollection new.			self search: aSymbol messageNode: (message realClass parseTreeFor: message selector) addTo: receivers.			receivers				anySatisfy: [:each | (each receiver isLiteralNode) not]]! !!TranslatedReceiverFinder methodsFor: 'actions' stamp: 'yo 8/2/2004 17:22'!searchMethodNode: aMethodNode addTo: aCollection	(aMethodNode block isMemberOf: BlockNode) ifTrue: [self searchBlockNode: aMethodNode block addTo: aCollection].	(aMethodNode block isMemberOf: MessageNode) ifTrue: [self searchMessageNode: aMethodNode block addTo: aCollection].	(aMethodNode block isMemberOf: ReturnNode) ifTrue: [self searchReturnNode: aMethodNode block addTo: aCollection].! !!TranslatedReceiverFinder methodsFor: 'private' stamp: 'HilaireFernandes 4/30/2010 15:49'!arraySearch: aSymbol fromArray: anArray addTo: aCollection 	"Find literals ahead of aSymbol from arrays in the method."	"BUG: it can handle just one occurrence"	| index |	(index := anArray identityIndexOf: aSymbol) > 1		ifTrue: [aCollection add: (anArray at: index - 1) asString].	(anArray		select: [:each | each isMemberOf: Array])		do: [:each | self				arraySearch: aSymbol				fromArray: each				addTo: aCollection].	^ aCollection! !!TranslatedReceiverFinder methodsFor: 'actions' stamp: 'yo 8/2/2004 17:22'!searchBlockNode: aBlockNode addTo: aCollection	aBlockNode statements do: [:e |		(e isMemberOf: MessageNode) ifTrue: [self searchMessageNode: e addTo: aCollection].		(e isMemberOf: ReturnNode) ifTrue: [self searchReturnNode: e addTo: aCollection].	].! !!TranslatedReceiverFinder methodsFor: 'actions' stamp: 'StephaneDucasse 3/20/2010 12:07'!senders	| m o |	m := SystemNavigation default allCallsOn: #translated.	m := m		collect: [ :e | 			e classIsMeta				ifTrue: [ (Smalltalk globals at: e classSymbol) class decompile: e methodSymbol ]				ifFalse: [ (Smalltalk globals at: e classSymbol) decompile: e methodSymbol ] ].	o := OrderedCollection new.	m do: [ :e | self searchMethodNode: e addTo: o ].	^ o sort! !!TranslatedReceiverFinder methodsFor: 'accessing' stamp: 'JohanBrichau 3/1/2014 14:39'!stringReceiversOf: aSymbol	"Find string receivers for a symbol.	Answer a collection of aMethodReference -> {keyword. keyword...}"	"self new stringReceiversOf: #translated"	| keywords methodReferences |	methodReferences := SystemNavigation default allCallsOn: aSymbol.	^ methodReferences inject: OrderedCollection new into: [:list :next |		keywords := self findWordsWith: aSymbol in: next.		keywords			ifNotEmpty: [list add: next -> keywords].		list]! !!TranslatedReceiverFinder methodsFor: 'actions' stamp: 'yo 8/2/2004 17:23'!searchMessageNode: aMessageNode addTo: aCollection	((aMessageNode receiver isMemberOf: LiteralNode) and: [(aMessageNode selector isMemberOf: SelectorNode) and: [aMessageNode selector key = #translated]]) ifTrue: [		aCollection add: aMessageNode receiver key.	].	(aMessageNode receiver isMemberOf: BlockNode) ifTrue: [self searchBlockNode: aMessageNode receiver addTo: aCollection].	(aMessageNode receiver isMemberOf: MessageNode) ifTrue: [self searchMessageNode: aMessageNode receiver addTo: aCollection].	(aMessageNode receiver isMemberOf: ReturnNode) ifTrue: [self searchReturnNode: aMessageNode receiver addTo: aCollection].	aMessageNode arguments do: [:a |		(a isMemberOf: BlockNode) ifTrue: [self searchBlockNode: a addTo: aCollection].		(a isMemberOf: MessageNode) ifTrue: [self searchMessageNode: a addTo: aCollection].		(a isMemberOf: ReturnNode) ifTrue: [self searchReturnNode: a addTo: aCollection].	].! !!TranslatedReceiverFinder methodsFor: 'accessing' stamp: 'JohanBrichau 3/1/2014 09:51'!findWordsWith: aSymbol in: aMethodReference 	"Find words for translation with the symbol in a method. See	LanguageEditorTest >>testFindTranslatedWords"	"| message | 	message := MethodReference new setStandardClass: Morph class	methodSymbol: #supplementaryPartsDescriptions.	self new findWordsWIth: #translatedNoop in: message"	| messages keywords aParseNode |	aParseNode := aMethodReference methodClass parseTreeFor: aMethodReference selector.	"Find from string literal"	messages := Set new.	self		search: aSymbol		messageNode: aParseNode		addTo: messages.	keywords := OrderedCollection new.	messages		select: [:aMessageNode | aMessageNode receiver isLiteralNode]		thenDo: [:aMessageNode | keywords add: aMessageNode receiver value				"literalStringsDo: [:literal | keywords add: literal]"].	"Find from array literal"	self		arraySearch: aSymbol		messageNode: aParseNode		addTo: keywords.	^ keywords! !!TranslatedReceiverFinder methodsFor: 'private' stamp: 'HilaireFernandes 4/30/2010 15:48'!arraySearch: aSymbol messageNode: aParseNode addTo: aCollection 	"Find literals ahead of aSymbol from arrays in the method."		aParseNode nodesDo: [:node |		node isLiteral ifTrue: [			(node literalValue isMemberOf: Array) ifTrue: [				self 					arraySearch: aSymbol					fromArray: node literalValue					addTo: aCollection]]].			^ aCollection! !!TranslatedReceiverFinder methodsFor: 'private' stamp: 'JohanBrichau 3/1/2014 09:19'!search: aSymbol messageNode: aParseNode addTo: aCollection 	aParseNode nodesDo: [:node | 		node isMessage ifTrue: [			node selector = aSymbol ifTrue: [				aCollection add: node]]].	^ aCollection! !!TranslatedReceiverFinder methodsFor: 'actions' stamp: 'yo 8/2/2004 17:21'!searchReturnNode: aReturnNode addTo: aCollection	(aReturnNode expr isMemberOf: BlockNode) ifTrue: [self searchBlockNode: aReturnNode expr addTo: aCollection].	(aReturnNode expr isMemberOf: MessageNode) ifTrue: [self searchMessageNode: aReturnNode expr addTo: aCollection].! !!TranslatedReceiverFinder class methodsFor: 'utilities' stamp: 'JohanBrichau 3/1/2014 14:40'!browseNonLiteralReceivers	"TranslatedReceiverFinder browseNonLiteralReceivers"	SystemNavigation default		browseMessageList: (self new nonLiteralReceiversOf: #translated)  asSortedCollection		name: 'Non literal receivers of #translated'		autoSelect: 'translated'! !!UITheme methodsFor: '*DrGeoII-UI-morph creation' stamp: ''!newToolbarDropListIn: aThemedMorph for: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel help: helpText	"Answer a toolbar drop list for the given model."	^self		newToolbarDropListIn: aThemedMorph		for: aModel		list: listSel		getSelected: getSel		setSelected: setSel		getEnabled: enabledSel		useIndex: true		help: helpText! !!UITheme methodsFor: '*DrGeoII-UI-morph creation' stamp: ''!newToolbarDropListIn: aThemedMorph for: aModel list: listSel getSelected: getSel setSelected: setSel getEnabled: enabledSel useIndex: useIndex help: helpText	"Answer a toolbar drop list for the given model."	^(ToolbarDropListMorph			on: aModel			list: listSel			selected: getSel			changeSelected: setSel			useIndex: useIndex)		selectionColor: self selectionColor;		getEnabledSelector: enabledSel;		cornerStyle: aThemedMorph preferredCornerStyle;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		setBalloonText: helpText! !!UITheme methodsFor: '*DrGeoII-UI' stamp: ''!drgeoBackgroundColor	^ self backgroundColor! !!UndefinedObject methodsFor: '*DrGeoII-Core-accessing' stamp: ''!area	^nil! !!UndefinedObject methodsFor: '*DrGeoII-Core-accessing' stamp: ''!gridVisible	^false! !!UnderMouseMorph commentStamp: ''!I display on the top left or right corner of my owner what is under the Active hand!!UnderMouseMorph methodsFor: 'drawing' stamp: ''!drawOn: aCanvas	| areaUnderHand |	super drawOn: aCanvas.	areaUnderHand := Form fromDisplay: (Rectangle 			center: ActiveHand position 			extent: self extent - (self borderWidth * 2)).	aCanvas drawImage: areaUnderHand at: self position + self borderWidth! !!WheelMorph commentStamp: ''!A thumb wheel widget control!!WheelMorph methodsFor: 'accessing' stamp: ''!angle	^angle! !!WheelMorph methodsFor: 'accessing' stamp: ''!target: aTargetObject	target := aTargetObject! !!WheelMorph methodsFor: 'properties' stamp: ''!beVertical	self isHorizontal		ifTrue: [self extent: self extent transposed] ! !!WheelMorph methodsFor: 'properties' stamp: ''!beCircular	circular := true! !!WheelMorph methodsFor: 'accessing' stamp: ''!actionSelector: aSymbolOrString	(nil = aSymbolOrString or:	 ['nil' = aSymbolOrString or:	 [aSymbolOrString isEmpty]])		ifTrue: [^ actionSelector := nil].	actionSelector := aSymbolOrString asSymbol.! !!WheelMorph methodsFor: 'accessing' stamp: ''!target	^target! !!WheelMorph methodsFor: 'accessing' stamp: ''!maxAngle: aNumber	maxAngle := aNumber! !!WheelMorph methodsFor: 'event handling' stamp: ''!mouseMove: evt	(evt anyButtonPressed)		ifTrue: [self doTargetAction: evt cursorPoint]! !!WheelMorph methodsFor: 'properties' stamp: ''!beLinear	circular := false! !!WheelMorph methodsFor: 'event handling' stamp: ''!mouseDown: evt	old := self isHorizontal		ifTrue: [ evt cursorPoint x ]		ifFalse: [ evt cursorPoint y ]! !!WheelMorph methodsFor: 'accessing' stamp: ''!actionSelector	^ actionSelector! !!WheelMorph methodsFor: 'accessing' stamp: ''!factor: aFloat	factor := aFloat! !!WheelMorph methodsFor: 'accessing' stamp: ''!factor	^factor! !!WheelMorph methodsFor: 'properties' stamp: ''!isCircular	^circular! !!WheelMorph methodsFor: 'event handling' stamp: ''!doTargetAction: cursorPoint	| new delta |	new := self isHorizontal	ifTrue: [cursorPoint x] ifFalse: [cursorPoint y].	delta := new - old.	delta isZero	 ifTrue: [ ^ self ].	self addAngle: delta.	(target notNil and: [ actionSelector notNil ])		ifTrue: [ Cursor normal				showWhile: [ target						perform: actionSelector						withArguments: (Array with: delta * self factor) ] ].	old := new! !!WheelMorph methodsFor: 'properties' stamp: ''!beHorizontal	self isHorizontal		ifFalse: [self extent: self extent transposed] ! !!WheelMorph methodsFor: 'properties' stamp: ''!isHorizontal	^ bounds isWide! !!WheelMorph methodsFor: 'initialization' stamp: ''!initialize	super initialize.	self target: nil.	self actionSelector: #flash.	self angle: 0.	self maxAngle: 360.	self factor: 1.0.	self extent: 100@23.	self beCircular.	self borderColor: #raised.	self borderWidth: 1.	self color: Color lightGray.	lastRedraw := 0.! !!WheelMorph methodsFor: 'private' stamp: ''!addAngle: aNumber	| new |	new := self angle + aNumber.	self isCircular ifTrue: [new := new \\ self maxAngle].	self angle: new.	lastRedraw := lastRedraw + aNumber.	(lastRedraw abs > 2) ifTrue: [		lastRedraw := 0.		self changed]! !!WheelMorph methodsFor: 'accessing' stamp: ''!angle: aNumber	angle := aNumber! !!WheelMorph methodsFor: 'event handling' stamp: ''!handlesMouseDown: evt	^true! !!WheelMorph methodsFor: 'properties' stamp: ''!isVertical	^self isHorizontal not! !!WheelMorph methodsFor: 'accessing' stamp: ''!maxAngle	^maxAngle! !!WheelMorph methodsFor: 'properties' stamp: ''!isLinear	^circular not! !!WheelMorph methodsFor: 'drawing' stamp: ''!drawOn: aCanvas	| interval delta frame x0 x1 y0 y1 deltaX deltaY  hilitColor shadowColor |	super drawOn: aCanvas.		"border & background"	borderColor isColor		ifTrue: [hilitColor := shadowColor := borderColor]		ifFalse: [hilitColor := color lighter lighter.			shadowColor := color darker darker].	frame := self innerBounds insetBy: 2.	aCanvas frameAndFillRectangle: frame fillColor: color		borderWidth: 1 topLeftColor: hilitColor bottomRightColor: shadowColor.	frame := frame insetBy: (borderColor isColor ifTrue: [1] ifFalse: [2]).	x0 := frame origin x.	x1 := frame corner x.	y0 := frame origin y.	y1 := frame corner y.	deltaX := (x1 - x0) / 2.	deltaY := (y1 - y0) / 2.	interval := 10.	delta := self angle \\ interval.	1 to: (self maxAngle / (2 * interval)) rounded do: [ :i |		| x y |		self isHorizontal ifTrue: [			x := x0 + deltaX - (((i * interval + delta) * (2 * Float pi / 360.0)) cos * deltaX).			aCanvas fillRectangle: (Rectangle origin: (x-1)@y0 corner: x@y1) color: hilitColor.			borderColor isColor ifFalse:				 [aCanvas fillRectangle: (Rectangle origin: x@y0 corner: (x+1)@y1) color: shadowColor]]		ifFalse: [			y := y0 + deltaY - (((i * interval + delta) * (2 * Float pi / 360.0)) cos * deltaY).			aCanvas fillRectangle: (Rectangle origin: x0@(y-1) corner: x1@y) color: hilitColor.			borderColor isColor ifFalse:				 [aCanvas fillRectangle: (Rectangle origin: x0@y corner: x1@(y+1)) color: shadowColor]]]! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 11/30/2000 18:14'!startDocument	self document: XMLDocument new.	self push: self document ! !!XMLDOMParser methodsFor: 'content' stamp: 'thf 9/2/2005 14:09'!documentAttributes: attributeList	self document version: (attributeList at: 'version' ifAbsent: [nil]).	self document encoding: (attributeList at: 'encoding' ifAbsent: [nil]).	self document requiredMarkup: (attributeList at: 'requiredMarkup' ifAbsent: [nil]).! !!XMLDOMParser methodsFor: 'parsing' stamp: 'mir 6/5/2003 19:29'!domDocument	[self startDocument; parseDocument]		ensure: [self driver stream close].	^document! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 3/6/2002 10:49'!startElement: elementName attributeList: attributeList	| newElement |	newElement := XMLElement named: elementName attributes: attributeList.	self incremental		ifFalse: [self stack isEmpty			ifFalse: [self top addElement: newElement]].	self push: newElement! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 6/24/2003 18:52'!startElement: localName namespaceURI: namespaceUri namespace: namespace attributeList: attributeList	| newElement |	"newElement := namespace = self defaultNamespace		ifTrue: [XMLElement named: localName namespace: nil uri: nil attributes: attributeList]		ifFalse: [XMLElement named: localName namespace: namespace uri: namespaceUri attributes: attributeList]."	newElement := XMLElement named: localName namespace: namespace uri: namespaceUri attributes: attributeList.	self incremental		ifFalse: [self stack isEmpty			ifFalse: [self top addElement: newElement]].	self push: newElement! !!XMLDOMParser methodsFor: 'accessing' stamp: 'mir 1/8/2001 12:05'!incremental: aBoolean	incremental := aBoolean! !!XMLDOMParser methodsFor: 'private' stamp: 'mir 1/8/2001 11:46'!top	^self stack isEmpty		ifTrue: [nil]		ifFalse: [self stack last]! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 1/8/2002 18:19'!endDocument	self pop.	super endDocument! !!XMLDOMParser methodsFor: 'initialize' stamp: 'mir 1/8/2001 12:05'!initialize	super initialize.	stack := OrderedCollection new.	incremental := false! !!XMLDOMParser methodsFor: 'parsing' stamp: 'mir 12/21/2000 14:02'!nextEntityStart	[self driver nextEntity.	self stack isEmpty] whileTrue.	^entity! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 6/24/2003 14:53'!endElement: localName namespace: namespace namespaceURI: uri qualifiedName: qualifiedName	| currentElement |	currentElement := self pop.	(currentElement namespace isNil		or: [currentElement namespace = self defaultNamespace])		ifTrue: [			currentElement localName = localName				ifFalse: [self driver errorExpected: 'End tag "', localName , '" doesn''t match "' , currentElement localName  , '".']]		ifFalse: [			currentElement qualifiedName = qualifiedName				ifFalse: [self driver errorExpected: 'End tag "', qualifiedName , '" doesn''t match "' , currentElement qualifiedName  , '".']]! !!XMLDOMParser methodsFor: 'private' stamp: 'mir 8/14/2000 18:28'!stack	^stack! !!XMLDOMParser methodsFor: 'parsing' stamp: 'mir 6/28/2001 18:45'!nextEntity	| currentTop |	currentTop := self top.	[self driver nextEntity isNil		or: [self top ~~ currentTop]] whileTrue.	^entity! !!XMLDOMParser methodsFor: 'private' stamp: 'mir 6/16/2003 17:20'!defaultNamespace	^self top		ifNotNil: [self top namespace]! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 3/6/2002 10:49'!processingInstruction: piName data: dataString	| newElement |	newElement := XMLPI target: piName data: dataString.	self top addElement: newElement! !!XMLDOMParser methodsFor: 'private' stamp: 'mir 1/8/2001 12:02'!push: anObject	self stack add: anObject.	entity := anObject! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 1/8/2002 18:11'!endElement: elementName	| currentElement |	currentElement := self pop.	currentElement name = elementName		ifFalse: [self driver errorExpected: 'End tag "', elementName , '" doesn''t match "' , currentElement name , '".']! !!XMLDOMParser methodsFor: 'accessing' stamp: 'mir 1/8/2001 12:05'!incremental	^incremental! !!XMLDOMParser methodsFor: 'content' stamp: 'mir 10/25/2000 11:30'!characters: aString	| newElement |	newElement := XMLStringNode string: aString.	self top addContent: newElement.! !!XMLDOMParser methodsFor: 'private' stamp: 'mir 1/8/2001 12:04'!pop	| oldTop |	oldTop := self stack removeLast.	entity := oldTop.	^oldTop! !!XMLDOMParser class methodsFor: 'instance creation' stamp: 'mir 7/12/2006 16:25'!parseDocumentFrom: aStream	^self parseDocumentFrom: aStream useNamespaces: false! !!XMLDOMParser class methodsFor: 'examples' stamp: 'mir 7/12/2006 16:26'!addressBookXMLWithDTD	"XMLDOMParser addressBookXMLWithDTD"	^self parseDocumentFrom: XMLTokenizer addressBookXMLWithDTD readStream useNamespaces: true! !!XMLDOMParser class methodsFor: 'instance creation' stamp: 'mir 7/12/2006 16:25'!parseDocumentFrom: aStream useNamespaces: aBoolean	^(super parseDocumentFrom: aStream useNamespaces: aBoolean) document! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 11/29/2007 14:42'!root	"return my root element"	^ self topElement ! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 1/17/2002 12:57'!version: aString		version := aString! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 1/17/2002 12:57'!version		^version! !!XMLDocument methodsFor: 'printing' stamp: 'mir 1/17/2002 16:44'!printCanonicalOn: aStream	| writer |	writer := XMLWriter on: aStream.	writer canonical: true.	self printXMLOn: writer! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 11/30/2000 17:48'!dtd	^dtd! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 5/16/2003 14:09'!encoding		^encoding ifNil: ['UTF-8']! !!XMLDocument methodsFor: 'printing' stamp: 'mir 5/16/2003 14:08'!printXMLOn: writer	version ifNotNil: [writer xmlDeclaration: self version encoding: self encoding].	super printXMLOn: writer! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 1/17/2002 12:57'!encoding: aString		encoding := aString! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 1/17/2002 12:57'!requiredMarkup: aString		requiredMarkup := aString! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 11/30/2000 17:48'!dtd: aDTD	dtd := aDTD! !!XMLDocument methodsFor: 'accessing' stamp: 'mir 1/17/2002 12:57'!requiredMarkup		^requiredMarkup! !!XMLElement methodsFor: 'accessing' stamp: 'mir 3/7/2000 16:24'!characterData	^self contentString! !!XMLElement methodsFor: 'accessing' stamp: 'mir 1/17/2002 15:24'!attributeAt: attributeName put: attributeValue	self attributes at: attributeName asSymbol put: attributeValue! !!XMLElement methodsFor: 'accessing' stamp: 'gc 6/28/2007 21:32'!parent: anXMLElement	parent := anXMLElement ! !!XMLElement methodsFor: 'accessing' stamp: 'Alexandre Bergel 1/21/2010 22:13'!at: aSymbol    ^ self attributeAt: aSymbol ifAbsent: ['']! !!XMLElement methodsFor: 'testing' stamp: 'mir 10/31/2007 17:55'!isEmpty	^self elements isEmpty! !!XMLElement methodsFor: 'accessing' stamp: 'sd 5/25/2003 18:25'!tag	^ self name asSymbol! !!XMLElement methodsFor: 'initialize' stamp: 'mir 1/17/2002 15:24'!name: aString	name := aString asSymbol! !!XMLElement methodsFor: 'testing' stamp: 'mir 1/17/2002 15:26'!isTag	^true! !!XMLElement methodsFor: 'accessing' stamp: 'mir 1/18/2001 16:55'!attributeAt: attributeName	^self attributeAt: attributeName ifAbsent: [nil]! !!XMLElement methodsFor: 'searching' stamp: 'mir 6/25/2003 13:35'!tagsNamed: aSymbol ifReceiverDoAndRecurse: aOneArgumentBlock	"If the receiver tag equals aSymbol, evaluate aOneArgumentBlock	with the receiver. Then recurse through all the children"	(self localName == aSymbol		or: [self tag == aSymbol])		ifTrue: [aOneArgumentBlock value: self].	super tagsNamed: aSymbol ifReceiverDoAndRecurse: aOneArgumentBlock! !!XMLElement methodsFor: 'name space' stamp: 'mir 6/5/2003 15:20'!qualifiedName	^self namespace		ifNil: [self localName]		ifNotNil: [self namespace , ':' , self localName]! !!XMLElement methodsFor: 'accessing' stamp: 'mir 6/18/2003 13:47'!contentStringAt: entityName	^(self elementAt: entityName ifAbsent: [^'']) contentString! !!XMLElement methodsFor: 'name space' stamp: 'sd 5/25/2003 18:24'!localName	^ name! !!XMLElement methodsFor: 'accessing' stamp: 'gc 6/28/2007 21:32'!parent	^ parent! !!XMLElement methodsFor: 'enumerating' stamp: 'mir 10/31/2007 18:25'!elementsDo: aBlock	self elementsAndContentsDo: [:each | each isText ifFalse: [aBlock value: each]]! !!XMLElement methodsFor: 'printing' stamp: 'mir 10/31/2007 18:19'!printXMLOn: writer	writer startElement: self name attributeList: self attributes.	(writer canonical not		and: [self isEmpty and: [self attributes isEmpty not]])		ifTrue: [writer endEmptyTag: self name]		ifFalse: [			writer endTag.			self elementsAndContentsDo: [:content | content printXMLOn: writer].			writer endTag: self name]! !!XMLElement methodsFor: 'initialize' stamp: 'mir 3/7/2000 16:43'!setAttributes: newAttributes	attributes := newAttributes! !!XMLElement methodsFor: 'searching' stamp: 'mir 6/25/2003 13:34'!firstTagNamed: aSymbol with: aBlock	"Return the first encountered node with the specified tag that allows	the block to evaluate to true. Pass the message on"	((self localName == aSymbol		or: [self tag == aSymbol]) 		and: [aBlock value: self])		ifTrue: [^self].	^super firstTagNamed: aSymbol with: aBlock.! !!XMLElement methodsFor: 'accessing' stamp: 'sd 5/25/2003 18:25'!name	^ self qualifiedName! !!XMLElement methodsFor: 'enumerating' stamp: 'mir 10/31/2007 18:25'!contentsDo: aBlock	self elementsAndContentsDo: [:each | each isText ifTrue: [aBlock value: each]]! !!XMLElement methodsFor: 'accessing' stamp: 'Alexandre Bergel 11/26/2009 17:41'!contentString	| contentElements |	contentElements := self elementsAndContents.	^(contentElements size > 0		and: [contentElements first isText])		ifTrue: [contentElements first string]		ifFalse: ['']! !!XMLElement methodsFor: 'enumerating' stamp: 'mir 1/3/2008 14:18'!elementsAndContentsDo: aBlock	self elementsAndContents do: aBlock! !!XMLElement methodsFor: 'accessing' stamp: 'mir 6/5/2003 12:02'!valueFor: aSymbol 	^self valueFor: aSymbol ifAbsent: ['']! !!XMLElement methodsFor: 'searching' stamp: 'mir 6/25/2003 13:35'!tagsNamed: aSymbol ifReceiverOrChildDo: aOneArgumentBlock	"If the receiver tag equals aSymbol, evaluate aOneArgumentBlock with the receiver.	For each of the receivers children do the same. Do not go beyond direct children"	(self localName == aSymbol		or: [self tag == aSymbol])		ifTrue: [aOneArgumentBlock value: self].	super tagsNamed: aSymbol ifReceiverDo: aOneArgumentBlock! !!XMLElement methodsFor: 'accessing' stamp: 'mir 1/17/2002 15:28'!valueFor: aSymbol ifAbsent: aBlock 	^self attributes at: aSymbol ifAbsent: aBlock! !!XMLElement methodsFor: 'initialize' stamp: 'mir 10/31/2007 17:55'!addContent: contentString	self addElement: contentString! !!XMLElement methodsFor: 'searching' stamp: 'mir 6/25/2003 13:33'!tagsNamed: aSymbol contentsDo: aBlock	"Evaluate aBlock for all of the contents of the receiver	if the receiver tag equals aSymbol. Pass the message on"	(self localName == aSymbol		or: [self tag == aSymbol])		ifTrue: [self contentsDo: aBlock].	super tagsNamed: aSymbol contentsDo: aBlock! !!XMLElement methodsFor: 'accessing' stamp: 'Alexandre.Bergel 6/1/2009 10:31'!@ aSymbol	"shorthand form"	^ self at: aSymbol ! !!XMLElement methodsFor: 'searching' stamp: 'mir 6/25/2003 13:35'!tagsNamed: aSymbol ifReceiverDo: aOneArgumentBlock	"If the receiver tag equals aSymbol, evaluate aOneArgumentBlock with the receiver"	(self localName == aSymbol		or: [self tag == aSymbol])		ifTrue: [aOneArgumentBlock value: self]! !!XMLElement methodsFor: 'accessing' stamp: 'mir 10/31/2007 18:24'!contents	^self elementsAndContents select: [:each | each isText]! !!XMLElement methodsFor: 'accessing' stamp: 'mir 10/31/2007 18:25'!elements	^self elementsAndContents select: [:each | each isText not]! !!XMLElement methodsFor: 'accessing' stamp: 'mas 10/15/2003 09:18'!attributes	^attributes ifNil: [attributes := Dictionary new]! !!XMLElement methodsFor: 'searching' stamp: 'mir 6/25/2003 13:34'!firstTagNamed: aSymbol 	"Return the first encountered node with the specified tag.	If it is not the receiver, pass the message on"	(self localName == aSymbol		or: [self tag == aSymbol])		ifTrue: [^self].	^super firstTagNamed: aSymbol ! !!XMLElement methodsFor: 'accessing' stamp: 'mir 1/18/2001 16:55'!attributeAt: attributeName ifAbsent: aBlock	^self attributes at: attributeName ifAbsent: [^aBlock value]! !!XMLElement methodsFor: 'searching' stamp: 'mir 6/25/2003 13:35'!tagsNamed: aSymbol do: aOneArgumentBlock	"If the receiver tag equals aSymbol, evaluate aOneArgumentBlock	with the receiver. Continue the search"	(self localName == aSymbol		or: [self tag == aSymbol])		ifTrue: [aOneArgumentBlock value: self].	super tagsNamed: aSymbol do: aOneArgumentBlock! !!XMLElement methodsFor: 'accessing' stamp: 'Alexandre.Bergel 6/1/2009 10:29'!allAttributes	^ self attributes asOrderedCollection! !!XMLElement class methodsFor: 'instance creation' stamp: 'mir 3/7/2000 16:33'!named: aString	^self new name: aString! !!XMLElement class methodsFor: 'instance creation' stamp: 'mir 8/14/2000 18:01'!named: aString attributes: attributeList	^self new		name: aString;		setAttributes: attributeList! !!XMLElement class methodsFor: 'instance creation' stamp: 'mir 6/5/2003 15:21'!named: aString namespace: ns uri: uri attributes: attributeList	^self new		name: aString;		namespace: ns uri: uri;		setAttributes: attributeList! !!XMLNamespaceScope methodsFor: 'private' stamp: 'mir 6/4/2003 15:51'!currentScope	^self scope last! !!XMLNamespaceScope methodsFor: 'scope' stamp: 'mir 6/4/2003 16:05'!leaveScope	| leftScope |	leftScope := self scope removeLast.	currentBindings := (self currentScope at: 2) ifNil: [leftScope at: 3]! !!XMLNamespaceScope methodsFor: 'scope' stamp: 'mir 6/16/2003 16:37'!declareNamespace: ns uri: uri	"Declare the given name space prefix with the given URL"	ns = 'xmlns'		ifTrue: [^self defaultNamespace: uri].	self establishLocalBindings.	currentBindings removeKey: ns ifAbsent: [].	currentBindings at: ns put: uri! !!XMLNamespaceScope methodsFor: 'validation' stamp: 'mir 6/5/2003 17:16'!validateAttributes: attributeList	"check all attribute namespaces are defined and not duplicated by aliasing"	| namespace localName |	attributeList keysDo: [:attrName |		self splitName: attrName into: [:ns :ln |			namespace := ns.			localName := ln].		namespace ifNotNil: [			(self namespaceAliases: namespace) do: [:alias |				(attributeList includesKey: alias , ':' , localName)					ifTrue: [self parseError: 'Attributes ' , attrName , ' and ' , alias , ':' , localName , ' are aliased to namespace ' , (self namespaceURIOf: namespace) ]]]]! !!XMLNamespaceScope methodsFor: 'private' stamp: 'mir 6/24/2003 14:26'!scope	scope ifNil: [self initScope].	^scope! !!XMLNamespaceScope methodsFor: 'private' stamp: 'mir 6/24/2003 14:25'!initScope	scope := OrderedCollection new: 20.	currentBindings := Dictionary new.	scope addLast: {'http://www.w3.org/TR/REC-xml-names'. currentBindings. nil. }.! !!XMLNamespaceScope methodsFor: 'accessing' stamp: 'mir 6/5/2003 19:32'!namespaces	^currentBindings! !!XMLNamespaceScope methodsFor: 'accessing' stamp: 'mir 6/24/2003 14:23'!defaultNamespace: ns	"Declare the default namespace."	self currentScope at: 1 put: ns! !!XMLNamespaceScope methodsFor: 'accessing' stamp: 'mir 6/24/2003 14:22'!defaultNamespace	^self currentScope first! !!XMLNamespaceScope methodsFor: 'scope' stamp: 'mir 6/5/2003 19:28'!enterScope	self scope addLast: { self defaultNamespace. nil. currentBindings. }! !!XMLNamespaceScope methodsFor: 'accessing' stamp: 'mir 6/24/2003 13:33'!namespaceURIOf: ns ifAbsent: aBlock	"Retrieve the URI of the given namespace prefix, if it is defined. 	A nil namespace returns the default namespace. 	If no namespace can be found the value of the block is returned"	^ns		ifNil: [self defaultNamespace]		ifNotNil: [currentBindings at: ns ifAbsent: aBlock]! !!XMLNamespaceScope methodsFor: 'private' stamp: 'mir 6/5/2003 19:32'!namespaceAliases: namespace	"Locate all namespaces that are aliases of the given URI."	| aliases uri |	aliases := Set new.	uri := self namespaceURIOf: namespace ifAbsent: [self parseError: 'Attribute refers to undefined namespace ' , namespace asString ].	currentBindings keysAndValuesDo: [:ns :u |		(u = uri			and: [ns ~= namespace])			ifTrue: [aliases add: ns]].	^ aliases! !!XMLNamespaceScope methodsFor: 'private' stamp: 'mir 6/4/2003 16:08'!establishLocalBindings	(self currentScope at: 2)		ifNil: [			currentBindings := currentBindings copy.			self currentScope at: 2 put: currentBindings]! !!XMLNamespaceScope methodsFor: 'accessing' stamp: 'sd 5/28/2003 09:33'!namespaceURIOf: ns	"Retrieve the URI of the given namespace prefix, if it is defined. A nil namespace	returns the global namespace"	^ self namespaceURIOf: ns ifAbsent: [ nil ]! !!XMLNode methodsFor: 'enumerating' stamp: 'mir 1/17/2002 14:49'!contentsDo: aBlock! !!XMLNode methodsFor: 'enumerating' stamp: 'mir 10/31/2007 18:02'!elementsAndContentsDo: aBlock	self elementsDo: aBlock! !!XMLNode methodsFor: 'printing' stamp: 'mir 1/17/2002 15:45'!printOn: stream	self printXMLOn: (XMLWriter on: stream)! !!XMLNode methodsFor: 'testing' stamp: 'mir 1/17/2002 15:28'!isProcessingInstruction	^false! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:53'!tagsNamed: aSymbol ifReceiverOrChildDo: aOneArgumentBlock	"Recurse all children"	self elementsDo: [:each | each tagsNamed: aSymbol ifReceiverDo: aOneArgumentBlock]! !!XMLNode methodsFor: 'accessing' stamp: 'mir 1/8/2002 18:44'!addContent: contentString	SAXParseException signal: 'Illegal string data.'! !!XMLNode methodsFor: 'testing' stamp: 'mir 1/17/2002 15:26'!isText	^false! !!XMLNode methodsFor: 'testing' stamp: 'mir 1/17/2002 15:26'!isTag	^false! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:53'!tagsNamed: aSymbol childrenDoAndRecurse: aOneArgumentBlock	"Evaluate aOneArgumentBlock for all children who match and recurse"	self elementsDo: [:each | 		each tagsNamed: aSymbol ifReceiverDoAndRecurse: aOneArgumentBlock]! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:53'!tagsNamed: aSymbol contentsDo: aBlock	"Evaluate aBlock for all of the contents of the receiver.	The receiver has no tag, so pass the message on"	self elementsDo: [:each | each tagsNamed: aSymbol contentsDo: aBlock]! !!XMLNode methodsFor: 'searching' stamp: 'SqR 7/2/2000 15:58'!tagsNamed: aSymbol ifReceiverDo: aOneArgumentBlock	"Handled only by XMLTagNode subclass"! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:53'!tagsNamed: aSymbol ifReceiverDoAndRecurse: aOneArgumentBlock	"Recurse all children"	self elementsDo: [:each | each tagsNamed: aSymbol ifReceiverDoAndRecurse: aOneArgumentBlock]! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:53'!tagsNamed: aSymbol childrenDo: aOneArgumentBlock	"Evaluate aOneArgumentBlock for all children who match"	self elementsDo: [:each | 		each tagsNamed: aSymbol ifReceiverDo: aOneArgumentBlock]! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:52'!firstTagNamed: aSymbol 	"Return the first encountered node with the specified tag. Pass the message on"	| answer |	self elementsDo: [:node | (answer := node firstTagNamed: aSymbol) ifNotNil: [^answer]].	^nil! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:53'!tagsNamed: aSymbol do: aOneArgumentBlock	"Search for nodes with tag aSymbol. When encountered evaluate aOneArgumentBlock"	self elementsDo: [:each | each tagsNamed: aSymbol do: aOneArgumentBlock]! !!XMLNode methodsFor: 'enumerating' stamp: 'mir 3/6/2002 10:56'!elementsDo: aBlock! !!XMLNode methodsFor: 'printing' stamp: 'mir 1/17/2002 15:45'!printXMLOn: writer	self subclassResponsibility! !!XMLNode methodsFor: 'searching' stamp: 'mir 3/6/2002 10:53'!firstTagNamed: aSymbol with: aBlock	"Return the first encountered node with the specified tag that	allows the block to evaluate to true. Pass the message on"	| answer |	self elementsDo: [:node |		(answer := node firstTagNamed: aSymbol with: aBlock) ifNotNil: [^answer]].	^nil! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 11/14/2007 17:23'!elementAt: entityName ifAbsent: aBlock	elementsAndContents		ifNil: [^aBlock value].	^self elements detect: [:each | each isProcessingInstruction not and: [each name = entityName or: [each localName = entityName]]] ifNone: [^aBlock value]! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 11/14/2007 17:23'!elementUnqualifiedAt: entityName ifAbsent: aBlock	elementsAndContents		ifNil: [^aBlock value].	^self elements detect: [:each | each localName = entityName] ifNone: [^aBlock value]! !!XMLNodeWithElements methodsFor: 'name space' stamp: 'mir 6/5/2003 15:20'!namespaceURI	^ uri! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 10/25/2000 11:22'!addEntity: entityName value: entityValue	self entities add: entityName->entityValue! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 11/14/2007 17:13'!elements	^self elementsAndContents! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 11/14/2007 17:25'!addElement: element	self elementsAndContents add: element! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 11/14/2007 17:13'!elementsAndContents	elementsAndContents ifNil: [elementsAndContents := OrderedCollection new].	^elementsAndContents! !!XMLNodeWithElements methodsFor: 'name space' stamp: 'mir 6/5/2003 15:20'!namespace	^ namespace! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 6/16/2003 17:36'!elementUnqualifiedAt: entityName	^self elementUnqualifiedAt: entityName ifAbsent: [nil]! !!XMLNodeWithElements methodsFor: 'name space' stamp: 'mir 6/16/2003 16:21'!namespace: ns uri: u	namespace := ns.	uri := u! !!XMLNodeWithElements methodsFor: 'enumerating' stamp: 'mir 11/14/2007 17:21'!elementsDo: aBlock	self elements do: [:each | aBlock value: each]! !!XMLNodeWithElements methodsFor: 'printing' stamp: 'mir 3/6/2002 10:49'!printXMLOn: writer	self elementsDo: [:element | element printXMLOn: writer]! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 3/6/2002 10:46'!elementAt: entityName	^self elementAt: entityName ifAbsent: [nil]! !!XMLNodeWithElements methodsFor: 'accessing' stamp: 'mir 3/6/2002 10:50'!topElement	^self elements first! !!XMLPI methodsFor: 'accessing' stamp: 'mir 1/17/2002 13:02'!target: aString	target := aString! !!XMLPI methodsFor: 'accessing' stamp: 'mir 1/17/2002 13:02'!data: aString	data := aString! !!XMLPI methodsFor: 'testing' stamp: 'mir 1/17/2002 15:28'!isProcessingInstruction	^true! !!XMLPI methodsFor: 'accessing' stamp: 'mir 1/17/2002 13:02'!target	^target! !!XMLPI methodsFor: 'accessing' stamp: 'mir 1/17/2002 13:02'!data	^data! !!XMLPI methodsFor: 'printing' stamp: 'mir 1/17/2002 15:53'!printXMLOn: writer	writer pi: self target data: self data! !!XMLPI class methodsFor: 'instance creation' stamp: 'mir 1/17/2002 13:03'!target: targetName data: aString	^self new		target: targetName;		data: aString! !!XMLParser commentStamp: 'Alexandre.Bergel 6/1/2009 10:03'!This is a generic parser. There is two ways to parse XML files, either using SAX, or using DOM. Both ways are supported in the XML-Parser package. SAX is event-based while DOM is tree-based. Ask google for more information!!XMLParser methodsFor: 'callbacks' stamp: 'SqR 7/2/2000 16:51'!attribute: aSymbol value: aString	"This method is called for each attribute/value pair in a start tag"	^self subclassResponsibility! !!XMLParser methodsFor: 'callbacks' stamp: 'SqR 7/2/2000 16:52'!beginStartTag: aSymbol asPI: aBoolean	"This method is called for at the beginning of a start tag.	The asPI parameter defines whether or not the tag is a 'processing	instruction' rather than a 'normal' tag."	^self subclassResponsibility! !!XMLParser methodsFor: 'callbacks' stamp: 'SqR 7/2/2000 16:52'!text: aString	"This method is called for the blocks of text between tags.	It preserves whitespace, but has all of the enclosed entities expanded"	^self subclassResponsibility! !!XMLParser methodsFor: 'handling tokens' stamp: 'mir 1/17/2002 09:26'!handleEndTag: aString	self endTag: aString! !!XMLParser methodsFor: 'callbacks' stamp: 'SqR 7/2/2000 16:52'!endStartTag: aSymbol	"This method is called at the end of the start tag after all of the	attributes have been processed"	^self subclassResponsibility! !!XMLParser methodsFor: 'handling tokens' stamp: 'mir 1/17/2002 09:27'!handlePCData: aString	self text: aString! !!XMLParser methodsFor: 'callbacks' stamp: 'SqR 7/2/2000 16:52'!endTag: aSymbol	"This method is called when the parser encounters either an	end tag or the end of a unary tag"	^self subclassResponsibility! !!XMLParser methodsFor: 'handling tokens' stamp: 'mir 1/17/2002 09:27'!handleCData: aString	self text: aString! !!XMLParser methodsFor: 'handling tokens' stamp: 'mir 1/17/2002 09:26'!handleStartTag: tagName attributes: attributes	self beginStartTag: tagName asPI: false.	attributes keysAndValuesDo: [:key :value |		self attribute: key value: value].	self endStartTag: tagName! !!XMLParserTest methodsFor: 'source' stamp: 'AlexandreBergel 1/29/2009 11:49'!addressBookXML	^'<addressbook>  <person employee-number="A0000" family-name="Gates" first-name="Bob">    <contact-info><!!--Confidential--></contact-info>    <address city="Los Angeles" number="1239" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Manager"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7000" family-name="Brown"    first-name="Robert" middle-initial="L.">    <contact-info>      <email address="robb@iro.ibm.com"/>      <home-phone number="03-3987873"/>    </contact-info>    <address city="New York" number="344" state="NY" street="118 St."/>    <job-info employee-type="Full-Time" is-manager="yes" job-description="Group Leader"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7890" family-name="DePaiva"    first-name="Kassie" middle-initial="W.">    <contact-info><!!-- Kassie''s agent phone: 03-987654 --></contact-info>    <address city="Los Angeles" number="1234" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Actor"/>    <manager employee-number="A0000"/>    <misc-info>One of the most talented actresses on Daytime. Kassie      plays the devious and beautiful Blair Cramer on ABC&apos;s      &quot;One Life To Live.&quot;</misc-info>  </person>  <person employee-number="A7987" family-name="Smith" first-name="Joe">    <contact-info>      <email address="joes@iro.ibm.com"/>      <mobile-phone number="888-7657765"/>      <home-phone number="03-8767898"/>      <home-phone number="03-8767871"/>    </contact-info>    <address city="New York" number="12789" state="NY" street="W. 15th Ave."/>    <job-info employee-type="Part-Time" is-manager="no" job-description="Hacker"/>    <manager employee-number="A7000"/>  </person></addressbook>'! !!XMLParserTest methodsFor: 'tests' stamp: 'AlexandreBergel 1/29/2009 11:52'!testExampleAddressBook	| tokenizer |	"self debug: #testExampleAddressBook"	tokenizer := XMLTokenizer on: self addressBookXML readStream.	"We enumerate the first characters of the addressbook example. The file being parsed begins with <addressbook"	self assert: tokenizer next = $<.	self assert: tokenizer next = $a.		self assert: tokenizer next = $d.	self assert: tokenizer next = $d.	self assert: tokenizer next = $r.	self shouldnt: ([tokenizer next notNil] whileTrue: []) raise: Error. ! !!XMLParserTest methodsFor: 'source' stamp: 'AlexandreBergel 1/29/2009 11:49'!addressBookXMLWithDTD	^'<?xml version="1.0" encoding="UTF-8"?><!!DOCTYPE addressbook SYSTEM "addressbook.dtd"><?xml-stylesheet type="text/xsl" href="demo.xsl"?><addressbook>  <person employee-number="A0000" family-name="Gates" first-name="Bob">    <contact-info><!!--Confidential--></contact-info>    <address city="Los Angeles" number="1239" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Manager"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7000" family-name="Brown"    first-name="Robert" middle-initial="L.">    <contact-info>      <email address="robb@iro.ibm.com"/>      <home-phone number="03-3987873"/>    </contact-info>    <address city="New York" number="344" state="NY" street="118 St."/>    <job-info employee-type="Full-Time" is-manager="yes" job-description="Group Leader"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7890" family-name="DePaiva"    first-name="Kassie" middle-initial="W.">    <contact-info><!!-- Kassie''s agent phone: 03-987654 --></contact-info>    <address city="Los Angeles" number="1234" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Actor"/>    <manager employee-number="A0000"/>    <misc-info>One of the most talented actresses on Daytime. Kassie      plays the devious and beautiful Blair Cramer on ABC&apos;s      &quot;One Life To Live.&quot;</misc-info>  </person>  <person employee-number="A7987" family-name="Smith" first-name="Joe">    <contact-info>      <email address="joes@iro.ibm.com"/>      <mobile-phone number="888-7657765"/>      <home-phone number="03-8767898"/>      <home-phone number="03-8767871"/>    </contact-info>    <address city="New York" number="12789" state="NY" street="W. 15th Ave."/>    <job-info employee-type="Part-Time" is-manager="no" job-description="Hacker"/>    <manager employee-number="A7000"/>  </person></addressbook>'! !!XMLParserTest methodsFor: 'tests' stamp: 'AlexandreBergel 1/29/2009 11:53'!testExampleAddressBookWithDTD	| tokenizer |	"XMLTokenizer exampleAddressBookWithDTD"	tokenizer := XMLTokenizer on: self addressBookXMLWithDTD readStream.	self shouldnt: ([tokenizer next notNil] whileTrue: []) raise: Error! !!XMLParserTest methodsFor: 'tests' stamp: 'AlexandreBergel 1/29/2009 14:38'!testParsing	| xmlDocument root firstPerson numberOfPersons |	"self debug: #testParsing"	xmlDocument := XMLDOMParser parseDocumentFrom: self addressBookXML readStream.	self assert: (xmlDocument isKindOf: XMLDocument).	root := xmlDocument root.	self assert: (root class == XMLElement).		"the tag has to be a symbol!!"	self assert: (root firstTagNamed: 'person') isNil.	self assert: (root firstTagNamed: 'addressbook') isNil.	self assert: (root firstTagNamed: #addressbook) == root.	numberOfPersons := 0.	root tagsNamed: #person do: [:p | numberOfPersons := numberOfPersons + 1].	self assert: numberOfPersons = 4.	firstPerson := root firstTagNamed: #person.	self assert: (firstPerson attributeAt: #'employee-number') = 'A0000'.	self assert: (firstPerson attributeAt: #'family-name') = 'Gates'.	self assert: (firstPerson attributeAt: #'first-name') = 'Bob'.! !!XMLParserTest methodsFor: 'tests' stamp: 'AlexandreBergel 1/29/2009 12:21'!testParsingCharacters	| parser |	"This test is actually not that useful. This is not the proper way of using the parser. This test is here just for specification purpose"	"self debug: #testParsingCharacters"	parser := XMLParser on: self addressBookXML readStream.	self assert: parser next = $<.	self assert: parser next = $a.		self assert: parser next = $d.	self assert: parser next = $d.	self assert: parser next = $r.! !!XMLStringNode methodsFor: 'accessing' stamp: ''!characterData	^self string! !!XMLStringNode methodsFor: 'accessing' stamp: 'mir 10/25/2000 11:28'!string	^string ifNil: ['']! !!XMLStringNode methodsFor: 'testing' stamp: 'mir 1/17/2002 15:27'!isText	^true! !!XMLStringNode methodsFor: 'accessing' stamp: 'mir 10/25/2000 11:28'!string: aString	string := aString! !!XMLStringNode methodsFor: 'printing' stamp: 'mir 1/17/2002 15:53'!printXMLOn: writer	writer pcData: self string! !!XMLStringNode class methodsFor: 'instance creation' stamp: 'mir 10/25/2000 11:30'!string: aString	^self new string: aString! !!XMLTokenizer commentStamp: '<historical>'!XMLTokenizerbolot@cc.gatech.edubreaks the stream of characters into a stream of XMLnodes (aka token stream)token stream is used by XMLparser to generate XMLdocument tree!!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 1/17/2002 14:31'!topStream	^self hasNestedStreams		ifTrue: [self nestedStreams first]		ifFalse: [self stream]! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 11/23/2007 17:51'!nextAttributeValue	| delimiterChar attributeValueStream nextChar nextPeek referenceString entity entityValue |	delimiterChar := self next.	(delimiterChar == $"		or: [delimiterChar == $'])		ifFalse: [self errorExpected: 'Attribute value delimiter expected.'].	attributeValueStream := attributeBuffer reset.	[	nextPeek := nextChar := self next.	nextChar ifNil: [self errorExpected: 'Character expected.'].	nextChar == $&		ifTrue: [			self peek == $#				ifTrue: [					nextPeek := nil.					nextChar := self nextCharReference]				ifFalse: [					referenceString := self nextLiteral.					self next == $;						ifFalse: [self errorExpected: ';'].					entity := self entity: referenceString.					entityValue := entity valueForContext: #content.					(self class isCharEscape: entityValue)						ifTrue: [							nextPeek := nil.							nextChar := entityValue first]						ifFalse: [							entityValue := entityValue asString.							entityValue isEmpty								ifTrue: [nextPeek := nextChar := nil]								ifFalse: [									self pushStream: (ReadStream on: entityValue asString).									nextPeek := nextChar := self next]]]].	nextPeek == delimiterChar]		whileFalse: [			nextChar ifNotNil: [attributeValueStream nextPut: nextChar]].	^self fastStreamStringContents: attributeValueStream"	^attributeValueStream contents"! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 8/14/2000 18:26'!handleStartDocument	self log: 'Start Doc'! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 5/14/2003 18:44'!nextUpTo: delimiter	| resultStream nextChar |	resultStream := WriteStream on: (String new: 10).	[self atEnd or: [(nextChar := self next) == delimiter]]		whileFalse: [resultStream nextPut: nextChar].	nextChar == delimiter		ifFalse: [self parseError: 'XML no delimiting ' , delimiter printString , ' found'].	^resultStream contents! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 10/31/2007 16:20'!nextName	| nextChar |	nameBuffer reset.	self peek == $.		ifTrue: [self malformedError: 'Character expected.'].	[(nextChar := self peek)		ifNil: [self errorExpected: 'Character expected.'].	NameDelimiters includes: nextChar] whileFalse: [			nameBuffer nextPut: self next].	^self fastStreamStringContents: nameBuffer! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 1/16/2002 10:54'!pushStream: newStream	"Continue parsing from the new nested stream."	self unpeek.	self nestedStreams addLast: self stream.	self stream: newStream! !!XMLTokenizer methodsFor: 'tokenizing dtd' stamp: 'mir 1/17/2002 13:49'!nextMarkupDeclaration	| declType |	declType := self nextLiteral.	self validating		ifFalse: [^self skipMarkupDeclaration].	declType = 'ENTITY'		ifTrue: [self nextEntityDeclaration]		ifFalse: [self skipMarkupDeclaration]! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 11/13/2000 18:19'!startParsingMarkup	parsingMarkup := true! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 1/17/2002 18:14'!nextEntityValue	| delimiterChar entityValueStream nextChar nextPeek referenceString entity entityValue |	delimiterChar := self next.	(delimiterChar == $"		or: [delimiterChar == $'])		ifFalse: [self errorExpected: 'Entity value delimiter expected.'].	entityValueStream := WriteStream on: (String new).	[	nextPeek := nextChar := self peek.	nextChar ifNil: [self errorExpected: 'Character expected.'].	nextChar == $&		ifTrue: [			self next.			self peek == $#				ifTrue: [					nextPeek := nil.					nextChar := self nextCharReference]				ifFalse: [					referenceString := self nextLiteral.					self next == $;						ifFalse: [self errorExpected: ';'].					entity := self entity: referenceString.					entityValue := entity valueForContext: #entityValue.					self pushStream: (ReadStream on: entityValue asString).					nextPeek := nextChar := self next]]		ifFalse: [			nextChar == $%				ifTrue: [					self skipSeparators.					referenceString := self nextLiteral.					nextChar := self handleEntity: referenceString in: #entityValue.					nextPeek := nextChar := self next]				ifFalse: [self next]].	nextPeek == delimiterChar]		whileFalse: [			nextChar ifNotNil: [entityValueStream nextPut: nextChar]].	^entityValueStream contents! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 1/17/2002 13:53'!entity: refName	^self validating		ifTrue: [self entities			at: refName			ifAbsentPut: [self parseError: 'XML undefined entity ' , refName printString]]		ifFalse: [DTDEntityDeclaration name: refName value: '']! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 3/14/2003 22:59'!checkNestedStream	nestedStreams == nil		ifFalse: [(peekChar == nil and: [self stream atEnd])			ifTrue: [				self popNestingLevel.				self checkNestedStream]]! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 6/28/2001 16:54'!nestedStreams	nestedStreams ifNil: [nestedStreams := OrderedCollection new].	^nestedStreams! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 1/14/2002 17:59'!externalEntities	externalEntities ifNil: [externalEntities := Dictionary new].	^externalEntities! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 1/14/2002 15:06'!entities	entities ifNil: [entities := self initEntities].	^entities! !!XMLTokenizer methodsFor: 'errors' stamp: 'mir 1/9/2002 15:26'!malformedError: errorString	SAXMalformedException signal: errorString! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 11/16/2000 21:40'!parameterEntity: refName	^self parameterEntities		at: refName		ifAbsent: [self parseError: 'XML undefined parameter entity ' , refName printString]! !!XMLTokenizer methodsFor: 'accessing' stamp: 'mir 6/28/2001 16:51'!parseStream: aStream	self stream: aStream! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 11/28/2000 17:54'!nextComment	| string |	"Skip first -"	self next.	self next == $-		ifFalse: [self errorExpected: 'second comment $-'].	string := self nextUpToAll: '-->'.	self handleComment: string! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 11/23/2007 19:42'!nextUpToAll: delimitingString	| string |	self unpeek.	string := self upToAll: delimitingString.	string		ifNil: [self parseError: 'XML no delimiting ' , delimitingString printString , ' found'].	^string! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 3/14/2003 23:04'!next	"Return the next character from the current input stream. If the current stream is at end pop to next nesting level if there is one.	Due to the potential nesting of original document, included documents and replacment texts the streams are held in a stack representing the nested streams. The current stream is the top one."	| nextChar |	peekChar		ifNil: [			nestedStreams ifNotNil: [self checkNestedStream].			^nextChar := stream next]		ifNotNil: [			nextChar := peekChar.			peekChar := nil.			^nextChar].	! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 11/13/2000 16:04'!handleCData: aString	self log: 'CData: ' , aString! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 1/17/2002 14:25'!nextSystemLiteral	^self nextAttributeValue! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 11/23/2007 19:40'!stream: aStream upToAll: aCollection	"Answer a subcollection from the current access position to the occurrence (not inclusive) of aCollection. If aCollection is not in the stream, answer nil."	| startPos endMatch result |	startPos := aStream position.	(aStream  match: aCollection) 		ifTrue: [endMatch := aStream position.			aStream position: startPos.			result := aStream next: endMatch - startPos - aCollection size.			aStream position: endMatch.			^ result]		ifFalse: [			aStream position: startPos.			^nil]! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 8/14/2000 11:37'!handleComment: aString	self log: 'Comment: ' , aString! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 8/14/2000 11:39'!handleStartTag: tagName attributes: attributes	self log: 'Start tag: ' , tagName.	attributes keysAndValuesDo: [:key :value |		self log: key , '->' , value]! !!XMLTokenizer methodsFor: 'tokenizing dtd' stamp: 'mir 1/17/2002 14:24'!nextEntityDeclaration	| entityName entityDef referenceClass reference |	self skipSeparators.	referenceClass := self peek == $%		ifTrue: [			self next.			self skipSeparators.			DTDParameterEntityDeclaration]		ifFalse: [DTDEntityDeclaration].	entityName := self nextLiteral.	self skipSeparators.	entityDef := (self peek == $" or: [self peek == $'])		ifTrue: [self nextEntityValue]		ifFalse: [self nextExternalId].	self skipUpTo: $>.	reference := referenceClass name: entityName value: entityDef.	reference registerIn: self.	^reference! !!XMLTokenizer methodsFor: 'accessing' stamp: 'mir 1/14/2002 17:51'!validating: aBoolean	validating := aBoolean! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 6/28/2001 16:50'!stream: newStream	"Continue parsing from the new nested stream."	stream := newStream! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 11/16/2000 21:41'!conditionalInclude: conditionalKeyword	conditionalKeyword = 'INCLUDE'		ifTrue: [^true].	conditionalKeyword = 'IGNORE'		ifTrue: [^false].	^self conditionalInclude: (self parameterEntity: conditionalKeyword) value! !!XMLTokenizer methodsFor: 'errors' stamp: 'mir 5/14/2003 18:27'!errorExpected: expectedString	| actualString |	actualString := ''.	self atEnd		ifFalse: [			[actualString := self next: 20]				on: Error				do: [:ex | ]].	self parseError: 'XML expected ' , expectedString printString , ': ' , actualString! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 12/11/2000 16:10'!handlePI: piTarget data: piData	self log: 'PI: ' , piTarget , ' data ' , piData! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 12/6/2000 14:29'!nextCDataOrConditional	| nextChar conditionalKeyword |	"Skip ["	self next.	self skipSeparators.	nextChar := self peek.	nextChar == $%		ifTrue: [			self checkAndExpandReference: (self parsingMarkup ifTrue: [#dtd] ifFalse: [#content]).			conditionalKeyword := self nextLiteral.			self skipSeparators.			^self next == $[				ifTrue: [						self skipSeparators.						self nextIncludeSection: (self conditionalInclude: conditionalKeyword)]				ifFalse: [self errorExpected: '[' ]].	nextChar == $C		ifTrue: [			^self nextLiteral = 'CDATA'				ifTrue: [self peek == $[							ifTrue: [self nextCDataContent]							ifFalse: [self errorExpected: '[' ]]				ifFalse: [self errorExpected: 'CData']].	self errorExpected: 'CData or declaration'! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mu 11/14/2005 14:07'!nextCharReference	| base charValue |	self next == $#		ifFalse: [self errorExpected: 'character reference'].	base := self peek == $x		ifTrue: [			self next.			16]		ifFalse: [10].	charValue := [self readNumberBase: base] on: Error do: [:ex | self errorExpected: 'Number.'].	(self next) == $;		ifFalse: [self errorExpected: '";"'].	^Unicode value: charValue! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 7/12/2006 17:46'!streamEncoding: encodingString	| converterClass |	Smalltalk at: #TextConverter ifPresent: [:tc | 		(stream respondsTo: #converter:) ifTrue: [			converterClass := tc defaultConverterClassForEncoding: encodingString asLowercase.			converterClass ifNotNil: [stream converter: converterClass new]]]! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 12/7/2000 16:46'!log: aString	"Transcript show: aString; cr"! !!XMLTokenizer methodsFor: 'testing' stamp: 'mir 6/5/2003 16:33'!usesNamespaces	^false! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 10/31/2007 17:49'!nextWhitespace	| nextChar resultStream resultString|	resultStream := (String new: 10) writeStream.	[((nextChar := self peek) ~~ nil)		and: [SeparatorTable includes: nextChar]]		whileTrue: [resultStream nextPut: nextChar. self next].	(nestedStreams == nil or: [self atEnd not])		ifFalse: [self checkNestedStream.				self nextWhitespace].	resultString := resultStream contents.	resultString isEmpty ifFalse: [self handleWhitespace: resultString].	^resultString! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 11/23/2007 18:16'!match: subCollection into: resultStream	"Set the access position of the receiver to be past the next occurrence of the subCollection. Answer whether subCollection is found.  No wildcards, and case does matter."	| pattern startMatch |	pattern _ ReadStream on: subCollection.	startMatch _ nil.	[pattern atEnd] whileFalse: 		[self atEnd ifTrue: [^ false].		(self next) = (pattern next) 			ifTrue: [pattern position = 1 ifTrue: [startMatch _ self position]]			ifFalse: [pattern position: 0.					startMatch ifNotNil: [						self position: startMatch.						startMatch _ nil]]].	^ true! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 11/23/2007 20:00'!upToAll: delimitingString	"Answer a subcollection from the current access position to the occurrence (if any, but not inclusive) of delimitingString. If delimitingString is not in the stream, answer the entire rest of the stream."	| result |	self hasNestedStreams		ifFalse: [			result := self stream: self stream upToAll: delimitingString.			result				ifNil: [self parseError: 'XML no delimiting ' , delimitingString printString , ' found'].			^result].	result := self stream: self stream upToAll: delimitingString.	result		ifNotNil: [^result].	result := String streamContents: [:resultStream |		resultStream nextPutAll: self stream upToEnd.		self atEnd			ifTrue: [self parseError: 'XML no delimiting ' , delimitingString printString , ' found'].		self stream position timesRepeat: [			self atEnd				ifFalse: [					resultStream nextPut: self next]]].	self pushBack: result.	^self upToAll: delimitingString! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 1/17/2002 18:12'!checkAndExpandReference: parsingContext	| referenceString nextChar |	nextChar := self peek.	self validating		ifFalse: [^nil].	nextChar == $&		ifTrue: [			self next.			self peek == $#				ifTrue: [^self pushStream: (ReadStream on: self nextCharReference asString)].			referenceString := self nextLiteral.			self next == $;				ifFalse: [self errorExpected: ';'].			self handleEntity: referenceString in: parsingContext ]		ifFalse: [			((nextChar == $%				and: [self parsingMarkup])				and: [parsingContext == #entityValue])				ifTrue: [					self skipSeparators.					referenceString := self nextLiteral.					self handleEntity: referenceString in: parsingContext]].	self atEnd ifTrue: [self errorExpected: 'Character expected.'].	^nextChar! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 11/16/2000 21:43'!entity: refName put: aReference	"Only the first declaration of an entity is valid so if there is already one don't register the new value."	self entities at: refName ifAbsentPut: [aReference]! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 6/28/2001 16:45'!hasNestedStreams	^nestedStreams notNil! !!XMLTokenizer methodsFor: 'tokenizing dtd' stamp: 'mir 1/17/2002 17:29'!nextDocTypeDecl	| nextChar |	self skipSeparators.	self nextLiteral.	self skipSeparators.	self peek == $[		ifFalse: [[nextChar := self peek.				nextChar == $> or: [nextChar == $[ ]] whileFalse: [self next]].	self peek == $[		ifTrue: [			self next.			[self skipSeparators.			self peek == $]] whileFalse: [				self checkAndExpandReference: #dtd.				self nextNode].			self next == $] 				ifFalse: [self errorExpected: ']' ]].	self skipSeparators.	self next == $>		ifFalse: [self errorExpected: '>' ].	self endParsingMarkup! !!XMLTokenizer methodsFor: 'testing' stamp: 'mir 1/14/2002 17:51'!validating	^validating! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 1/17/2002 14:25'!nextPubidLiteral	^self nextAttributeValue! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 6/28/2001 16:38'!nextIncludeSection: parseSection	| section |	"Read the file up to the next include section delimiter and parse it if parseSection is true"		section := self nextUpToAll: ']]>'.	parseSection		ifTrue: [			self pushStream: (ReadStream on: section)]! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 8/14/2000 18:27'!handleEndDocument	self log: 'End Doc '! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'thf 9/2/2005 15:04'!nextXMLDecl	| attributes nextChar namespaces |	self skipSeparators.	attributes := Dictionary new.	namespaces := Dictionary new.	[(nextChar := self peek) == $?] whileFalse: [		self nextAttributeInto: attributes namespaces: namespaces.		self skipSeparators.].	self next.	self next == $>		ifFalse: [self errorExpected: '> expected.'].	(attributes includesKey: 'encoding') ifTrue: [self streamEncoding: (attributes at: 'encoding')].	self handleXMLDecl: attributes namespaces: namespaces	! !!XMLTokenizer methodsFor: 'tokenizing dtd' stamp: 'rkris 7/28/2004 12:35'!nextExternalId	| extDefType systemId dir |	extDefType := self nextLiteral.	extDefType = 'PUBLIC'		ifTrue: [			self skipSeparators.			self nextPubidLiteral.			self skipSeparators.			self peek == $>				ifFalse: [					systemId := self nextSystemLiteral]].	extDefType = 'SYSTEM'		ifTrue: [			self skipSeparators.			systemId := self nextSystemLiteral].	systemId		ifNil: [^nil].	"The rest of this method only applies if we're reading aFileStream"	(self topStream isKindOf: FileStream)		ifFalse: [^''].	dir := self topStream directory.	^(dir fileExists: systemId)		ifTrue: [(dir readOnlyFileNamed: systemId) contentsOfEntireFile]		ifFalse: ['']! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 6/5/2003 14:53'!handleXMLDecl: attributes namespaces: namespaces	attributes keysAndValuesDo: [:key :value |		self log: key , '->' , value]! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 1/14/2002 17:59'!externalEntity: refName	^self entities		at: refName		ifAbsentPut: ['']! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 3/14/2003 22:58'!atEnd	nestedStreams == nil		ifTrue: [^peekChar == nil and: [stream atEnd]].	^stream atEnd		ifTrue: [			self popNestingLevel.			self atEnd]		ifFalse: [false]! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 11/13/2000 18:19'!parsingMarkup	^parsingMarkup! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 11/16/2000 21:20'!parameterEntities	parameterEntities ifNil: [parameterEntities := Dictionary new].	^parameterEntities! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 1/16/2002 10:42'!skipUpTo: delimiter	| nextChar |	self unpeek.	[self atEnd or: [(nextChar := self next) == delimiter]]		whileFalse: [].	nextChar == delimiter		ifFalse: [self parseError: 'XML no delimiting ' , delimiter printString , ' found']! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 11/13/2000 18:19'!endParsingMarkup	parsingMarkup := false! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 1/17/2002 13:00'!nextPI	| piTarget piData |	"Skip ?"	self next.	piTarget := self nextLiteral.	piTarget asUppercase = 'XML'		ifTrue: [^self nextXMLDecl].	self skipSeparators.	piData := self nextUpToAll: '?>'.	self handlePI: piTarget data: piData! !!XMLTokenizer methodsFor: 'tokenizing dtd' stamp: 'mir 6/29/2001 00:08'!endDocTypeDecl	"Skip ]>"	self next; next.	^nil! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 11/23/2007 17:48'!nextEndTag	| tagName |	"Skip /"	self next.	tagName := self nextName.	self skipSeparators.	(self nextTrimmedBlanksUpTo: $>)		ifNotEmpty: [self parseError: 'XML invalid end tag ' , tagName].	self handleEndTag: tagName! !!XMLTokenizer methodsFor: 'streaming' stamp: 'bf 4/27/2006 17:55'!nextTrimmedBlanksUpTo: delimiter	| resultStream nextChar |	resultStream := WriteStream on: (String new: 10).	nextChar := nil.	[(nextChar := self next) == delimiter]		whileFalse: [			nextChar == $  ifFalse: [				resultStream nextPut: nextChar]].	nextChar == delimiter		ifFalse: [self parseError: 'XML no delimiting ' , delimiter printString , ' found'].	^resultStream contents! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 10/31/2007 16:33'!skipSeparators	| nextChar |	[((nextChar := self peek) ~~ nil)		and: [SeparatorTable includes: nextChar]]		whileTrue: [self next].	(nestedStreams == nil or: [self atEnd not])		ifFalse: [			self checkNestedStream.			self skipSeparators]! !!XMLTokenizer methodsFor: 'tokenizing dtd' stamp: 'mir 1/8/2002 13:54'!nextDocType	| declType |	declType := self nextLiteral.	declType = 'DOCTYPE'		ifTrue: [			self startParsingMarkup.			^self nextDocTypeDecl].	self errorExpected: 'markup declaration, not ' , declType printString! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 3/14/2003 23:05'!peek	"Return the next character from the current input stream. If the current stream poop to next nesting level if there is one.	Due to the potential nesting of original document, included documents and replacment texts the streams are held in a stack representing the nested streams. The current stream is the top one."	peekChar		ifNil: [			nestedStreams ifNotNil: [self checkNestedStream].			^peekChar := stream next]		ifNotNil: [^peekChar]! !!XMLTokenizer methodsFor: 'streaming' stamp: 'gvc 6/6/2007 13:13'!pushBack: aString	"Fixed to push the string before the peek char (if any)."		| pushBackString |	pushBackString := peekChar		ifNil: [aString]		ifNotNil: [aString, peekChar asString].	peekChar := nil.	self pushStream: (ReadStream on: pushBackString)! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 1/17/2002 18:12'!handleEntity: referenceString in: parsingContext 	| entity entityValue |	entity := self entity: referenceString.	entityValue := entity valueForContext: parsingContext.	(self class isCharEscape: entityValue)		ifTrue: [entityValue := entity reference].	self pushStream: (ReadStream on: entityValue asString)! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 11/23/2007 15:45'!initEntities	| ents |	ents := Dictionary new.	ents		at: 'amp' put: (DTDEntityDeclaration name: 'amp' value: '&');		at: 'quot' put: (DTDEntityDeclaration name: 'quot' value: '"');		at: 'apos' put: (DTDEntityDeclaration name: 'apos' value: '''');		at: 'gt' put: (DTDEntityDeclaration name: 'gt' value: '>');		at: 'lt' put: (DTDEntityDeclaration name: 'lt' value: '<').	^ents! !!XMLTokenizer methodsFor: 'streaming' stamp: 'gvc 6/6/2007 13:19'!unpeek	"Fixed to use nested stream since multi-byte streams	do not properly override pushBack: to deal with multi-byte	characters."		peekChar ifNotNil: [self pushBack: '']! !!XMLTokenizer methodsFor: 'private' stamp: 'mu 11/14/2005 14:12'!readNumberBase: base	"Read a hex number from stream until encountering $; "	| value digit |	base = 10 ifFalse: [	| numberString | 		numberString := self nextUpTo: $;.		self stream skip: -1.		^Integer readFrom: numberString asUppercase readStream base: base. 	].	value := 0.	digit := DigitTable at: self peek asciiValue.	digit < 0		ifTrue: [self error: 'At least one digit expected here'].	self next.	value := digit.	[digit := DigitTable at: self peek asciiValue.	digit < 0		ifTrue: [^value]		ifFalse: [			self next.			value := value * base + digit]		] repeat.	^ value! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 6/5/2003 22:37'!nextTag	| tagName attributes nextChar namespaces |	(self peek = $/)		ifTrue: [^self nextEndTag].	tagName := self nextName.	self skipSeparators.	attributes := Dictionary new: 33.	namespaces := Dictionary new: 5.	[(nextChar := self peek) == $> or: [nextChar == $/]] whileFalse: [		self checkAndExpandReference: #content.		self nextAttributeInto: attributes namespaces: namespaces.		self skipSeparators.].	self handleStartTag: tagName attributes: attributes namespaces: namespaces.	self next == $/		ifTrue: [			self handleEndTag: tagName.			self next].	! !!XMLTokenizer methodsFor: 'streaming' stamp: 'mir 6/29/2001 00:36'!popNestingLevel	self hasNestedStreams		ifTrue: [			self stream close.			self stream: self nestedStreams removeLast.			self nestedStreams size > 0				ifFalse: [nestedStreams := nil]]! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 1/17/2002 17:00'!nextCDataContent	| cdata |	"Skip $[ "	self next.	cdata := self nextUpToAll: ']]>'.	self handleCData: cdata! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'cwp 6/17/2003 21:08'!handleWhitespace: aString	self log: 'Whitespace: ' , aString! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 6/28/2001 16:50'!stream	^stream! !!XMLTokenizer methodsFor: 'initialize' stamp: 'mir 3/14/2003 19:27'!initialize	parsingMarkup := false.	validating := false.	attributeBuffer := WriteStream on: (String new: 128).	nameBuffer := WriteStream on: (String new: 128)! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 6/5/2003 16:32'!nextAttributeInto: attributes namespaces: namespaces	| attrName attrValue |	attrName := self nextName.	self skipSeparators.	self next == $=		ifFalse: [self errorExpected: '='].	self skipSeparators.	attrValue := self nextAttributeValue.	(self usesNamespaces		and: [(attrName findString: 'xmlns') = 1])		ifTrue: [attrName size > 6			ifTrue: [namespaces at: (attrName copyFrom: 7 to: attrName size) put: attrValue]			ifFalse: [namespaces at: attrName put: attrValue]]		ifFalse: [attributes at: attrName put: attrValue]! !!XMLTokenizer methodsFor: 'entities' stamp: 'mir 11/16/2000 21:42'!parameterEntity: refName put: aReference	"Only the first declaration of an entity is valid so if there is already one don't register the new value."	self parameterEntities at: refName ifAbsentPut: [aReference]! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 8/14/2000 11:38'!handleEndTag: aString	self log: 'End tag: ' , aString! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 11/28/2000 17:52'!nextNode	| nextChar |	"Skip < "	self next.	nextChar := self peek.	nextChar == $!! ifTrue: [		"Skip !!"		self next.		nextChar := self peek.		nextChar == $- ifTrue: [^self nextComment].		nextChar == $[ ifTrue: [^self nextCDataOrConditional].		^self parsingMarkup			ifTrue: [self nextMarkupDeclaration]			ifFalse: [self nextDocType]].	nextChar == $? ifTrue: [^self nextPI].	^self nextTag! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 11/23/2007 17:52'!nextPCData	| resultStream nextChar referenceString entity entityValue nextPeek |	resultStream := (String new: 10) writeStream.	self validating		ifFalse: [			[self peek == $<]				whileFalse: [resultStream nextPut: self next].			^self handlePCData: resultStream contents].	[	nextPeek := nextChar := self peek.	nextChar ifNil: [self errorExpected: 'Character expected.'].	nextChar == $&		ifTrue: [			self next.			self peek == $#				ifTrue: [					nextPeek := nil.					nextChar := self nextCharReference]				ifFalse: [					referenceString := self nextLiteral.					self next == $;						ifFalse: [self errorExpected: ';'].					entity := self entity: referenceString.					entityValue := entity valueForContext: #content.					(self class isCharEscape: entityValue)						ifTrue: [							nextPeek := nil.							nextChar := entityValue first]						ifFalse: [							entityValue := entityValue asString.							entityValue isEmpty								ifTrue: [nextPeek := nextChar := nil]								ifFalse: [									self pushStream: (ReadStream on: entityValue asString).									nextPeek := nextChar := self peek]]]]		ifFalse: [nextPeek == $< ifFalse: [self next]].	nextPeek == $<]		whileFalse: [			nextChar ifNotNil: [resultStream nextPut: nextChar]].	self handlePCData: resultStream contents! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'gvc 6/6/2007 13:17'!nextEntity	"return the next XMLnode, or nil if there are no more.	Fixed to retain leading whitespace when PCDATA is detected."	|whitespace|	"branch, depending on what the first character is"	whitespace := self nextWhitespace.	self atEnd ifTrue: [self handleEndDocument. ^ nil].	self checkAndExpandReference: (self parsingMarkup ifTrue: [#dtd] ifFalse: [#content]).	^self peek = $<		ifTrue: [self nextNode]		ifFalse: [whitespace isEmpty					ifFalse: [self pushBack: whitespace].				self nextPCData]! !!XMLTokenizer methodsFor: 'private' stamp: 'mir 3/14/2003 23:09'!fastStreamStringContents: writeStream	| newSize |	newSize := writeStream position.	^(String new: newSize)		replaceFrom: 1		to: newSize		with: writeStream originalContents		startingAt: 1! !!XMLTokenizer methodsFor: 'tokenizing' stamp: 'mir 10/31/2007 16:19'!nextLiteral	| resultStream nextChar resultString |	resultStream := (String new: 10) writeStream.	((nextChar := self peek) isLetter		or: [nextChar == $_])		ifFalse: [self errorExpected: 'Name literal.'].	[nextChar := self peek.	(LiteralChars includes: nextChar)		ifTrue: [			nextChar == $&				ifTrue: [					nextChar := self next.					resultStream nextPut: (self peek == $#						ifTrue: [self nextCharReference]						ifFalse: [^resultStream contents])]				ifFalse: [					resultStream nextPut: self next]]		ifFalse: [resultString := resultStream contents.			resultString isEmpty				ifTrue: [self errorExpected: 'Name literal']				ifFalse: [^resultString]]] repeat! !!XMLTokenizer methodsFor: 'handling tokens' stamp: 'mir 8/14/2000 11:38'!handlePCData: aString	self log: 'PCData: ' , aString! !!XMLTokenizer methodsFor: 'errors' stamp: 'mir 1/8/2002 15:37'!parseError: errorString	SAXParseException signal: errorString! !!XMLTokenizer methodsFor: 'tokenizing dtd' stamp: 'mir 1/4/2002 11:05'!skipMarkupDeclaration	self skipUpTo: $>! !!XMLTokenizer class methodsFor: 'instance creation' stamp: 'mir 11/16/2000 07:58'!on: aStream	^self new parseStream: aStream! !!XMLTokenizer class methodsFor: 'examples' stamp: 'mir 8/14/2000 11:41'!addressBookXML	^'<addressbook>  <person employee-number="A0000" family-name="Gates" first-name="Bob">    <contact-info><!!--Confidential--></contact-info>    <address city="Los Angeles" number="1239" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Manager"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7000" family-name="Brown"    first-name="Robert" middle-initial="L.">    <contact-info>      <email address="robb@iro.ibm.com"/>      <home-phone number="03-3987873"/>    </contact-info>    <address city="New York" number="344" state="NY" street="118 St."/>    <job-info employee-type="Full-Time" is-manager="yes" job-description="Group Leader"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7890" family-name="DePaiva"    first-name="Kassie" middle-initial="W.">    <contact-info><!!-- Kassie''s agent phone: 03-987654 --></contact-info>    <address city="Los Angeles" number="1234" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Actor"/>    <manager employee-number="A0000"/>    <misc-info>One of the most talented actresses on Daytime. Kassie      plays the devious and beautiful Blair Cramer on ABC&apos;s      &quot;One Life To Live.&quot;</misc-info>  </person>  <person employee-number="A7987" family-name="Smith" first-name="Joe">    <contact-info>      <email address="joes@iro.ibm.com"/>      <mobile-phone number="888-7657765"/>      <home-phone number="03-8767898"/>      <home-phone number="03-8767871"/>    </contact-info>    <address city="New York" number="12789" state="NY" street="W. 15th Ave."/>    <job-info employee-type="Part-Time" is-manager="no" job-description="Hacker"/>    <manager employee-number="A7000"/>  </person></addressbook>'! !!XMLTokenizer class methodsFor: 'examples' stamp: 'mir 8/14/2000 16:23'!exampleAddressBookWithDTD	| tokenizer |	"XMLTokenizer exampleAddressBookWithDTD"	tokenizer := XMLTokenizer on: self addressBookXMLWithDTD readStream.	[tokenizer next notNil]		whileTrue: []! !!XMLTokenizer class methodsFor: 'class initialization' stamp: 'mir 10/31/2007 17:22'!initialize	"XMLTokenizer initialize"	CharEscapes := CharacterSet newFrom: #( $& $" $' $> $< ).	SeparatorTable  := CharacterSet new.	#(9 10 12 13 32) do: [:each | SeparatorTable add: each asCharacter].	LiteralChars := CharacterSet newFrom: #( $: $- $: $= $.).	0 to: 255 do: [:i | 		| char |		char := i asCharacter.		(char isDigit or: [char isLetter])		ifTrue: [LiteralChars add: char]].	NameDelimiters := CharacterSet new.	#(9 10 12 13 32 61 "$= asInteger 61" 62 "$> asInteger" 47 "$/ asInteger")		do: [:each | NameDelimiters add: each asCharacter].	DigitTable := Array new: 256.	DigitTable atAllPut: -1.	($0 to: $9) do: [:each | DigitTable at: each asciiValue put: each digitValue].	($a to: $f) do: [:each | DigitTable at: each asciiValue put: each digitValue].	($A to: $F) do: [:each | DigitTable at: each asciiValue put: each digitValue].! !!XMLTokenizer class methodsFor: 'examples' stamp: 'mir 7/12/2006 16:49'!addressBookXMLWithDTD	^'<?xml version="1.0" encoding="UTF-8"?><!!DOCTYPE addressbook SYSTEM "addressbook.dtd"><?xml-stylesheet type="text/xsl" href="demo.xsl"?><addressbook>  <person employee-number="A0000" family-name="Gates" first-name="Bob">    <contact-info><!!--Confidential--></contact-info>    <address city="Los Angeles" number="1239" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Manager"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7000" family-name="Brown"    first-name="Robert" middle-initial="L.">    <contact-info>      <email address="robb@iro.ibm.com"/>      <home-phone number="03-3987873"/>    </contact-info>    <address city="New York" number="344" state="NY" street="118 St."/>    <job-info employee-type="Full-Time" is-manager="yes" job-description="Group Leader"/>    <manager employee-number="A0000"/>  </person>  <person employee-number="A7890" family-name="DePaiva"    first-name="Kassie" middle-initial="W.">    <contact-info><!!-- Kassie''s agent phone: 03-987654 --></contact-info>    <address city="Los Angeles" number="1234" state="CA" street="Pine Rd."/>    <job-info employee-type="Full-Time" is-manager="no" job-description="Actor"/>    <manager employee-number="A0000"/>    <misc-info>One of the most talented actresses on Daytime. Kassie      plays the devious and beautiful Blair Cramer on ABC&apos;s      &quot;One Life To Live.&quot;</misc-info>  </person>  <person employee-number="A7987" family-name="Smith" first-name="Joe">    <contact-info>      <email address="joes@iro.ibm.com"/>      <mobile-phone number="888-7657765"/>      <home-phone number="03-8767898"/>      <home-phone number="03-8767871"/>    </contact-info>    <address city="New York" number="12789" state="NY" street="W. 15th Ave."/>    <job-info employee-type="Part-Time" is-manager="no" job-description="Hacker"/>    <manager employee-number="A7000"/>  </person></addressbook>'! !!XMLTokenizer class methodsFor: 'examples' stamp: 'mir 8/14/2000 11:41'!exampleAddressBook	| tokenizer |	"XMLTokenizer exampleAddressBook"	tokenizer := XMLTokenizer on: self addressBookXML readStream.	[tokenizer next notNil]		whileTrue: []! !!XMLTokenizer class methodsFor: 'accessing' stamp: 'mir 11/23/2007 15:50'!isCharEscape: entityValue	^entityValue size = 1		and: [CharEscapes includes: entityValue first]! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 5/20/2003 11:04'!attribute: attributeName value: attributeValue	self stream		space;		nextPutAll: attributeName.	self		eq;		putAsXMLString: attributeValue! !!XMLWriter methodsFor: 'private tags' stamp: 'mir 12/8/2000 18:01'!endComment	self stream nextPutAll: ' -->'! !!XMLWriter methodsFor: 'private' stamp: 'mir 7/12/2006 16:52'!indent	currentIndent		ifNotNil: [currentIndent := currentIndent +1]! !!XMLWriter methodsFor: 'namespaces' stamp: 'mir 6/24/2003 14:47'!leaveScope	self scope leaveScope! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 6/24/2003 14:46'!endTag: tagName xmlns: xmlns	self popTag: tagName.	self stream		nextPutAll: '</'.	(xmlns notNil		and: [xmlns ~= self defaultNamespace])		ifTrue: [self stream			nextPutAll: xmlns;			nextPut: $:].	stream nextPutAll: tagName.	self endTag.! !!XMLWriter methodsFor: 'private' stamp: 'mir 12/11/2000 16:24'!putAsXMLString: aValue	self stream nextPut: $".	self pcData: aValue.	self stream nextPut: $"! !!XMLWriter methodsFor: 'private tags' stamp: 'mir 12/8/2000 18:01'!endCData	self stream nextPutAll: ']]>'! !!XMLWriter methodsFor: 'writing dtd' stamp: 'mir 8/8/2000 18:13'!endDecl: type	self endTag! !!XMLWriter methodsFor: 'private tags' stamp: 'mir 5/20/2003 12:13'!endPI	self stream nextPutAll: ' ?>'! !!XMLWriter methodsFor: 'namespaces' stamp: 'mir 6/24/2003 14:23'!defaultNamespace: ns	"Declare the default namespace."	self scope defaultNamespace: ns! !!XMLWriter methodsFor: 'private' stamp: 'mir 8/8/2000 17:02'!stack	^stack! !!XMLWriter methodsFor: 'private tags' stamp: 'mir 12/8/2000 18:01'!startCData	self stream nextPutAll: '<!![CDATA['! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 12/8/2000 17:56'!endEmptyTag: tagName	self popTag: tagName.	self stream nextPutAll: '/>'.	self canonical		ifFalse: [self stream space]! !!XMLWriter methodsFor: 'writing xml' stamp: 'ar 12/15/2002 15:56'!pcData: aString	| lastIndex nextIndex |	lastIndex := 1.	"Unroll the first search to avoid copying"	nextIndex := String findFirstInString: aString inSet: XMLTranslationMap startingAt: lastIndex.	nextIndex = 0 ifTrue:[^self stream nextPutAll: aString].	[self stream nextPutAll: (aString copyFrom: lastIndex to: nextIndex-1).	self stream nextPutAll: (XMLTranslation at: (aString at: nextIndex)).	lastIndex := nextIndex + 1.	nextIndex := String findFirstInString: aString inSet: XMLTranslationMap startingAt: lastIndex.	nextIndex = 0] whileFalse.	self stream nextPutAll: (aString copyFrom: lastIndex to: aString size).! !!XMLWriter methodsFor: 'private tags' stamp: 'mir 12/8/2000 18:01'!startPI: identifier	self stream		nextPutAll: '<?';		nextPutAll: identifier;		space! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 12/8/2000 17:56'!comment: aString	self startComment.	self stream nextPutAll: aString.	self endComment! !!XMLWriter methodsFor: 'writing dtd' stamp: 'mir 12/8/2000 18:02'!startDecl: type	self stream		nextPutAll: '<!!';		nextPutAll: type asUppercase;		space! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 7/12/2006 17:02'!endTag: tagName	self outdent.	self endTag: tagName xmlns: nil! !!XMLWriter methodsFor: 'accessing' stamp: 'mir 7/12/2006 16:08'!indentString: aString	currentIndent := 0.	indentString := aString! !!XMLWriter methodsFor: 'private' stamp: 'mir 7/12/2006 17:05'!outdent	currentIndent		ifNotNil: [			stream cr.			currentIndent := currentIndent-1.			self writeIndent.			currentIndent := currentIndent-1.]! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 5/20/2003 11:13'!flush	self stream flush! !!XMLWriter methodsFor: 'private' stamp: 'mir 7/12/2006 16:58'!writeIndent	currentIndent ifNotNil: [		currentIndent timesRepeat: [self stream nextPutAll: indentString]]! !!XMLWriter methodsFor: 'accessing' stamp: 'mir 12/8/2000 17:54'!stream: aStream	stream := aStream! !!XMLWriter methodsFor: 'namespaces' stamp: 'mir 6/24/2003 15:09'!declareNamespace: ns uri: uri	self scope declareNamespace: ns uri: uri! !!XMLWriter methodsFor: 'accessing' stamp: 'mir 12/7/2000 15:54'!canonical	^canonical! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 7/12/2006 16:07'!endTag	self stream nextPutAll: '>'.	self indent.	"self canonical		ifFalse: [self stream space]"! !!XMLWriter methodsFor: 'private' stamp: 'mir 6/24/2003 14:22'!scope	^scope! !!XMLWriter methodsFor: 'private tags' stamp: 'mir 12/8/2000 18:01'!startComment	self stream nextPutAll: '<-- '! !!XMLWriter methodsFor: 'writing xml' stamp: 'thf 9/2/2005 14:08'!xmlDeclaration: versionString encoding: encodingString	self canonical		ifFalse: [			self				startPI: 'xml';				attribute: 'version' value: versionString;				attribute: 'encoding' value: encodingString;				endPI.			self stream flush]! !!XMLWriter methodsFor: 'private' stamp: 'mir 8/7/2000 16:18'!pushTag: tagName	self stack add: tagName! !!XMLWriter methodsFor: 'accessing' stamp: 'mir 7/12/2006 16:08'!indentTab	self indentString: (String with: Character tab)! !!XMLWriter methodsFor: 'initialize' stamp: 'mir 7/12/2006 15:54'!initialize	stack := OrderedCollection new.	canonical := false.	scope := XMLNamespaceScope new! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 12/11/2000 16:12'!pi: piTarget data: piData	self startPI: piTarget.	self stream nextPutAll: piData.	self endPI! !!XMLWriter methodsFor: 'writing dtd' stamp: 'mir 12/8/2000 18:02'!startDecl: type named: aString	self stream		nextPutAll: '<!!';		nextPutAll: type asUppercase;		space;		nextPutAll: aString;		space! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 7/12/2006 16:08'!startTag: tagName	self writeIndent.	self startTag: tagName xmlns: nil! !!XMLWriter methodsFor: 'accessing' stamp: 'mir 12/8/2000 17:54'!stream	^stream! !!XMLWriter methodsFor: 'private' stamp: 'mir 8/7/2000 16:23'!popTag: tagName	| stackTop |	stackTop := self stack isEmpty		ifTrue: ['<empty>']		ifFalse: [self stack last].	^stackTop = tagName		ifTrue: [self stack removeLast]		ifFalse: [self error: 'Closing tag "' , tagName , '" does not match "' , stackTop]! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 12/8/2000 17:55'!cdata: aString	self startCData.	self stream nextPutAll: aString.	self endCData! !!XMLWriter methodsFor: 'namespaces' stamp: 'mir 6/24/2003 14:23'!defaultNamespace	^self scope defaultNamespace! !!XMLWriter methodsFor: 'writing dtd' stamp: 'mir 12/8/2000 18:02'!endDeclaration	self stream		cr;		nextPut: $].	self endTag! !!XMLWriter methodsFor: 'namespaces' stamp: 'mir 6/24/2003 15:02'!enterScope	self scope enterScope! !!XMLWriter methodsFor: 'accessing' stamp: 'mir 12/7/2000 15:54'!canonical: aBoolean	canonical := aBoolean! !!XMLWriter methodsFor: 'writing dtd' stamp: 'mir 12/8/2000 18:02'!startDeclaration: dtdName	self startDecl: 'DOCTYPE' named: dtdName.	self stream		nextPut: $[;		cr! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 1/17/2002 17:07'!startElement: elementName attributeList: attributeList	self canonical		ifFalse: [self stream cr].	self startTag: elementName.	attributeList keys asSortedCollection do: [:key |		self attribute: key value: (attributeList at: key)]! !!XMLWriter methodsFor: 'writing xml' stamp: 'mir 6/24/2003 14:10'!startTag: tagName xmlns: xmlns	self stream		nextPut: $<.	(xmlns notNil		and: [xmlns ~= self scope defaultNamespace])		ifTrue: [self stream			nextPutAll: xmlns;			nextPut: $:].	self stream		nextPutAll: tagName.	"self canonical		ifFalse: [self stream space]."	self pushTag: tagName! !!XMLWriter methodsFor: 'private' stamp: 'mir 12/8/2000 18:00'!eq	self stream nextPut: $=! !!XMLWriter class methodsFor: 'instance creation' stamp: 'mir 12/8/2000 17:54'!on: aStream	^self basicNew initialize stream: aStream! !!XMLWriter class methodsFor: 'class initialization' stamp: 'ar 12/13/2002 01:04'!initialize	"XMLWriter initialize"	XMLTranslation := Dictionary new.	XMLTranslation		at: Character cr put: '&#13;';		at: Character lf put: '&#10;';		at: Character tab put: '&#9;';		at: $& put: '&amp;';		at: $< put: '&lt;';		at: $> put: '&gt;';"		at: $' put: '&apos;'; "		at: $" put: '&quot;'.	XMLTranslationMap := ByteArray new: 256.	XMLTranslation keysDo:[:ch| XMLTranslationMap at: ch asciiValue+1 put: 1].! !----QUIT----2018-06-22T09:27:26.867345+02:00 drgeo.image priorSource: 1288077!DrGeoInstaller forWorkstation


"Done"


!----End fileIn----!DrGeoInstaller forWorkstation


"Done"


!----End fileIn----!----QUIT/NOSAVE----2018-11-23T22:35:23.251505+01:00 drgeo.image priorSource: 1288077!